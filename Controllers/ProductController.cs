using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System.Text.RegularExpressions;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/products")]
    public class ProductController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly CloudinaryService _cloudinaryService;

        public ProductController(AppDbContext context, CloudinaryService cloudinaryService)
        {
            _context = context;
            _cloudinaryService = cloudinaryService;
        }

        [HttpPost("upload-image")]
        public async Task<IActionResult> UploadImage(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("áº¢nh khÃ´ng há»£p lá»‡");

            using (var stream = file.OpenReadStream())
            {
                var imageUrl = await _cloudinaryService.UploadImageAsync(stream, file.FileName);
                return Ok(new { ImageUrl = imageUrl });
            }
        }

        // ðŸŸ¢ ThÃªm sáº£n pháº©m má»›i
        [HttpPost]
        public async Task<IActionResult> AddProduct([FromBody] ProductDto dto)
        {
            var product = new Product
            {
                Name = dto.Name,
                Description = dto.Description,
                Price = dto.Price,
                DiscountPrice = dto.DiscountPrice,
                FlashSaleStart = dto.FlashSaleStart,
                FlashSaleEnd = dto.FlashSaleEnd,
                Category = dto.Category,
                CreatedAt = DateTime.UtcNow,
                StockQuantity = dto.StockQuantity,
                Variants = dto.Variants.Select(v => new ProductVariant
                {
                    Color = v.Color,
                    Storage = v.Storage,
                    Price = v.Price,
                    StockQuantity = v.StockQuantity
                }).ToList()
            };

            if (dto.ImageUrls != null && dto.ImageUrls.Any())
            {
                product.Images = dto.ImageUrls.Select(url => new ProductImage
                {
                    ImageUrl = url,
                    IsPrimary = false // Hoáº·c báº¡n cÃ³ thá»ƒ thÃªm logic Ä‘á»ƒ xÃ¡c Ä‘á»‹nh áº£nh chÃ­nh
                }).ToList();
            }

            _context.Products.Add(product);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Sáº£n pháº©m Ä‘Ã£ Ä‘Æ°á»£c thÃªm.", ProductId = product.Id });
        }

        // ðŸ”µ Láº¥y danh sÃ¡ch sáº£n pháº©m
        [HttpGet]
        public async Task<IActionResult> GetAllProducts()
        {
            var products = await _context.Products
                .Include(p => p.Images)
                .ToListAsync();

            return Ok(products);
        }

        // ðŸ”µ Láº¥y chi tiáº¿t má»™t sáº£n pháº©m
        [HttpGet("{id}")]
        public async Task<IActionResult> GetProductById(int id)
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null) return NotFound("Sáº£n pháº©m khÃ´ng tá»“n táº¡i.");

            return Ok(product);
        }

        // ðŸŸ¡ Cáº­p nháº­t sáº£n pháº©m
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateProduct(int id, [FromBody] ProductDto dto)
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .FirstOrDefaultAsync(p => p.Id == id);
            if (product == null) return NotFound("Sáº£n pháº©m khÃ´ng tá»“n táº¡i.");

            product.Name = dto.Name;
            product.Description = dto.Description;
            product.Price = dto.Price;
            product.DiscountPrice = dto.DiscountPrice;
            product.FlashSaleStart = dto.FlashSaleStart;
            product.FlashSaleEnd = dto.FlashSaleEnd;
            product.Category = dto.Category;
            product.StockQuantity = dto.StockQuantity;

            // Cáº­p nháº­t áº£nh sáº£n pháº©m
            if (dto.ImageUrls != null && dto.ImageUrls.Any())
            {
                // XÃ³a áº£nh cÅ© khÃ´ng cÃ³ trong danh sÃ¡ch má»›i
                var existingImageUrls = product.Images.Select(img => img.ImageUrl).ToList();
                var newImageUrls = dto.ImageUrls.Except(existingImageUrls).ToList();
                var removedImageUrls = existingImageUrls.Except(dto.ImageUrls).ToList();

                foreach (var url in removedImageUrls)
                {
                    var image = product.Images.FirstOrDefault(img => img.ImageUrl == url);
                    if (image != null)
                    {
                        _context.ProductImages.Remove(image);
                        // XÃ³a áº£nh tá»« Cloudinary
                        var publicId = GetPublicIdFromUrl(url);
                        if (publicId != null)
                        {
                            await _cloudinaryService.DeleteImageAsync(publicId);
                        }
                    }
                }

                // ThÃªm áº£nh má»›i
                foreach (var url in newImageUrls)
                {
                    product.Images.Add(new ProductImage
                    {
                        ImageUrl = url,
                        IsPrimary = false // Hoáº·c báº¡n cÃ³ thá»ƒ thÃªm logic Ä‘á»ƒ xÃ¡c Ä‘á»‹nh áº£nh chÃ­nh
                    });
                }
            }

            // Cáº­p nháº­t biáº¿n thá»ƒ sáº£n pháº©m
            product.Variants.Clear();
            product.Variants = dto.Variants.Select(v => new ProductVariant
            {
                Color = v.Color,
                Storage = v.Storage,
                Price = v.Price,
                StockQuantity = v.StockQuantity
            }).ToList();

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Sáº£n pháº©m Ä‘Ã£ Ä‘Æ°á»£c cáº­p nháº­t." });
        }

        // HÃ m láº¥y publicId tá»« URL cá»§a Cloudinary
        private string GetPublicIdFromUrl(string url)
        {
            var matches = Regex.Match(url, @"\/v\d+\/(.+)\.(jpg|jpeg|png|gif|webp)");
            return matches.Success ? matches.Groups[1].Value : null;
        }

        // ðŸ”´ XÃ³a sáº£n pháº©m vÃ  táº¥t cáº£ thÃ´ng tin liÃªn quan (thÃ´ng sá»‘ ká»¹ thuáº­t & áº£nh sáº£n pháº©m)
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null) return NotFound("Sáº£n pháº©m khÃ´ng tá»“n táº¡i.");

            // XÃ³a táº¥t cáº£ thÃ´ng sá»‘ ká»¹ thuáº­t liÃªn quan
            var phoneSpec = await _context.PhoneSpecifications.FirstOrDefaultAsync(p => p.ProductId == id);
            if (phoneSpec != null) _context.PhoneSpecifications.Remove(phoneSpec);

            var laptopSpec = await _context.LaptopSpecifications.FirstOrDefaultAsync(l => l.ProductId == id);
            if (laptopSpec != null) _context.LaptopSpecifications.Remove(laptopSpec);

            var headphoneSpec = await _context.HeadphoneSpecifications.FirstOrDefaultAsync(h => h.ProductId == id);
            if (headphoneSpec != null) _context.HeadphoneSpecifications.Remove(headphoneSpec);

            // XÃ³a áº£nh sáº£n pháº©m liÃªn quan
            _context.ProductImages.RemoveRange(product.Images);
            _context.ProductVariants.RemoveRange(product.Variants);

            // XÃ³a sáº£n pháº©m
            _context.Products.Remove(product);

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Sáº£n pháº©m vÃ  táº¥t cáº£ dá»¯ liá»‡u liÃªn quan Ä‘Ã£ Ä‘Æ°á»£c xÃ³a." });
        }
    }
}
