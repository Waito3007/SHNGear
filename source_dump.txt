# ==================================================
# Path: C:\SAN\DA\TMDT_netcore\Web\SHN-Gear
# Detected tech: csharp, docker, gitlab_ci, javascript, python, react, rust, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
SHN-Gear/
├── .git/
├── .vs/
├── .vscode/
├── ClientApp/
│   ├── node_modules/
│   ├── public/
│   │   ├── images/
│   │   │   ├── IMG_3351.JPG
│   │   │   ├── IMG_3403.JPG
│   │   │   ├── IMG_4202.JPG
│   │   │   ├── IMG_4208.jpg
│   │   │   ├── IMG_4237.JPG
│   │   │   ├── IMG_4242.JPG
│   │   │   ├── herobanner.JPG
│   │   │   └── sale-banner.jpg
│   │   ├── favicon.ico
│   │   ├── index.html
│   │   └── manifest.webmanifest
│   ├── src/
│   │   ├── assets/
│   │   │   ├── icon/
│   │   │   │   ├── facebook.svg
│   │   │   │   ├── gmail.svg
│   │   │   │   ├── linkedin.svg
│   │   │   │   ├── menu.svg
│   │   │   │   └── search.svg
│   │   │   ├── img/
│   │   │   │   ├── HeadPhone/
│   │   │   │   │   ├── SonyWH-1000XM5.jpg
│   │   │   │   │   ├── banner_headphone.jpg
│   │   │   │   │   └── headphones.jpg
│   │   │   │   ├── Laptop/
│   │   │   │   │   ├── Laptop_Dell_XPS_13.jpg
│   │   │   │   │   ├── banner_laptop.jpg
│   │   │   │   │   └── laptops.jpg
│   │   │   │   ├── Phone/
│   │   │   │   │   ├── banner_iphone.jpg
│   │   │   │   │   ├── logo.png
│   │   │   │   │   ├── samsung_S24.jpg
│   │   │   │   │   └── smartphones.jpg
│   │   │   │   └── anhcuanghia/
│   │   │   │       ├── background1.png
│   │   │   │       ├── background2.png
│   │   │   │       ├── background3.png
│   │   │   │       ├── banner1.jpg
│   │   │   │       ├── banner1.png
│   │   │   │       ├── banner2.png
│   │   │   │       ├── banner_1.png
│   │   │   │       ├── bannervip.png
│   │   │   │       ├── dien_gia_dung_thumb_2_54c5efa451.png
│   │   │   │       ├── dienthoai_banner.png
│   │   │   │       ├── herobanner.JPG
│   │   │   │       ├── hieuthuhai.png
│   │   │   │       ├── hot-sale-cuoi-tuan.gif
│   │   │   │       ├── laptop_thumb_2_4df0fab60f.png
│   │   │   │       ├── phu_kien_thum_2_21c419aa09.png
│   │   │   │       ├── sale-banner.jpg
│   │   │   │       ├── tivi_baber.png
│   │   │   │       └── tu_lanh_cate_thumb_77da11d0c4.png
│   │   │   └── styles/
│   │   │       └── base.css
│   │   ├── components/
│   │   │   ├── Admin/
│   │   │   │   ├── analytics/
│   │   │   │   │   ├── AIPoweredInsights.jsx
│   │   │   │   │   ├── ChannelPerformance.jsx
│   │   │   │   │   ├── CustomerSegmentation.jsx
│   │   │   │   │   ├── OverviewCards.jsx
│   │   │   │   │   ├── ProductPerformance.jsx
│   │   │   │   │   ├── RevenueChart.jsx
│   │   │   │   │   └── UserRetention.jsx
│   │   │   │   ├── common/
│   │   │   │   │   ├── CardProduct.jsx
│   │   │   │   │   ├── Header.jsx
│   │   │   │   │   ├── Sidebar.jsx
│   │   │   │   │   └── StatCard.jsx
│   │   │   │   ├── orders/
│   │   │   │   │   ├── DailyOrders.jsx
│   │   │   │   │   ├── EditOrder.jsx
│   │   │   │   │   ├── OrderDetailDrawer.jsx
│   │   │   │   │   ├── OrderDistribution.jsx
│   │   │   │   │   └── OrdersTable.jsx
│   │   │   │   ├── overview/
│   │   │   │   │   ├── CategoryDistributionChart.jsx
│   │   │   │   │   ├── SalesChannelChart.jsx
│   │   │   │   │   └── SalesOverviewChart.jsx
│   │   │   │   ├── products/
│   │   │   │   │   ├── AddProductDrawer.jsx
│   │   │   │   │   ├── AddSpecificationDrawer.jsx
│   │   │   │   │   ├── BrandDrawer.jsx
│   │   │   │   │   ├── BrandModal.jsx
│   │   │   │   │   ├── CategoryBrandDrawer.jsx
│   │   │   │   │   ├── CategoryModal.jsx
│   │   │   │   │   ├── EditProductDrawer.jsx
│   │   │   │   │   ├── ProductsTable.jsx
│   │   │   │   │   ├── SalesTrendChart.jsx
│   │   │   │   │   └── VoucherDrawer.jsx
│   │   │   │   ├── sales/
│   │   │   │   │   ├── DailySalesTrend.jsx
│   │   │   │   │   ├── SalesByCategoryChart.jsx
│   │   │   │   │   └── SalesOverviewChart.jsx
│   │   │   │   ├── settings/
│   │   │   │   │   ├── ConnectedAccounts.jsx
│   │   │   │   │   ├── DangerZone.jsx
│   │   │   │   │   ├── Notifications.jsx
│   │   │   │   │   ├── Profile.jsx
│   │   │   │   │   ├── Security.jsx
│   │   │   │   │   ├── SettingSection.jsx
│   │   │   │   │   └── ToggleSwitch.jsx
│   │   │   │   └── users/
│   │   │   │       ├── RoleDrawer.jsx
│   │   │   │       ├── UpdateUserDrawer.jsx
│   │   │   │       ├── UserActivityHeatmap.jsx
│   │   │   │       ├── UserDemographicsChart.jsx
│   │   │   │       ├── UserGrowthChart.jsx
│   │   │   │       └── UsersTable.jsx
│   │   │   ├── Auth/
│   │   │   │   ├── AuthModal.css
│   │   │   │   └── AuthModal.jsx
│   │   │   ├── BestSellers/
│   │   │   │   ├── BestSellers.css
│   │   │   │   └── BestSellers.jsx
│   │   │   ├── Checkout/
│   │   │   │   └── Checkout.jsx
│   │   │   ├── Commitment/
│   │   │   │   ├── Commitment.css
│   │   │   │   └── Commitment.jsx
│   │   │   ├── FeaturedCategories/
│   │   │   │   ├── CategoryLarge.jsx
│   │   │   │   └── FeaturedCategories.jsx
│   │   │   ├── FlashSale/
│   │   │   │   └── FlashSale.jsx
│   │   │   ├── Footer/
│   │   │   │   ├── Footer.css
│   │   │   │   └── Footer.jsx
│   │   │   ├── HeroBanner/
│   │   │   │   └── HeroBanner.jsx
│   │   │   ├── HeroSlider/
│   │   │   │   ├── HeroSlider.css
│   │   │   │   └── HeroSlider.jsx
│   │   │   ├── List/
│   │   │   │   ├── CategoryMenu.jsx
│   │   │   │   ├── FilterSection.jsx
│   │   │   │   └── ProductGrid.jsx
│   │   │   ├── Navbar/
│   │   │   │   ├── Navbar.css
│   │   │   │   └── Navbar.jsx
│   │   │   ├── NotificationBar/
│   │   │   │   ├── notification.css
│   │   │   │   └── notification.jsx
│   │   │   ├── Order/
│   │   │   │   ├── OrderLookup.jsx
│   │   │   │   └── PaymentSuccess.jsx
│   │   │   ├── Profile/
│   │   │   │   ├── AddPaymentMethod.jsx
│   │   │   │   ├── AddressBook.css
│   │   │   │   ├── AddressBook.jsx
│   │   │   │   ├── LoyaltyProgram.jsx
│   │   │   │   ├── ProfileInfo.jsx
│   │   │   │   ├── ProfileSidebar.css
│   │   │   │   ├── ProfileSidebar.jsx
│   │   │   │   ├── UserOrders.jsx
│   │   │   │   └── ViewedProducts.jsx
│   │   │   ├── ServiceSlider/
│   │   │   │   ├── ServiceSlider.css
│   │   │   │   └── ServiceSlider.jsx
│   │   │   ├── layouts/
│   │   │   │   └── AdminLayout.js
│   │   │   ├── productinformationpage/
│   │   │   │   ├── ProductImage.jsx
│   │   │   │   ├── ProductInfo.jsx
│   │   │   │   ├── ProductReviews.jsx
│   │   │   │   ├── ProductSpecifications.jsx
│   │   │   │   ├── ProductVariants.jsx
│   │   │   │   └── RelatedProducts.jsx
│   │   │   ├── shoppingcart/
│   │   │   │   ├── CartDrawer.jsx
│   │   │   │   ├── CartItem.jsx
│   │   │   │   └── OrderSummary.jsx
│   │   │   └── ProtectedRoute.jsx
│   │   ├── pages/
│   │   │   ├── Admin/
│   │   │   │   ├── AnalyticsPage.jsx
│   │   │   │   ├── OrdersPage.jsx
│   │   │   │   ├── OverviewPage.jsx
│   │   │   │   ├── ProductsPage.jsx
│   │   │   │   ├── SalesPage.jsx
│   │   │   │   ├── SettingsPage.jsx
│   │   │   │   └── UsersPage.jsx
│   │   │   ├── Home/
│   │   │   │   ├── Home.css
│   │   │   │   └── Home.jsx
│   │   │   ├── ProductList.css
│   │   │   ├── ProductList.jsx
│   │   │   ├── ProductPage.css
│   │   │   ├── ProductPage.jsx
│   │   │   ├── ProfilePage.css
│   │   │   ├── ProfilePage.jsx
│   │   │   ├── Unauthorized.jsx
│   │   │   └── shoppingcart.jsx
│   │   ├── utils/
│   │   │   └── formatCurrency.js
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── AppRoutes.js
│   │   ├── index.js
│   │   ├── reportWebVitals.js
│   │   ├── service-worker.js
│   │   ├── serviceWorkerRegistration.js
│   │   └── setupProxy.js
│   ├── .env
│   ├── .env.development
│   ├── .env.development.local
│   ├── .gitignore
│   ├── README.md
│   ├── aspnetcore-https.js
│   ├── aspnetcore-react.js
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   └── tailwind.config.js
├── Controllers/
│   ├── AddressController.cs
│   ├── AuthController.cs
│   ├── BrandController.cs
│   ├── CartController.cs
│   ├── CategoryController.cs
│   ├── LoyaltyController.cs
│   ├── OrderController.cs
│   ├── PayPalController.cs
│   ├── PaymentMethodController.cs
│   ├── ProductsController.cs
│   ├── ReviewsController.cs
│   ├── RoleController.cs
│   ├── SearchController.cs
│   ├── SpecificationsController.cs
│   ├── UploadController.cs
│   ├── UserController.cs
│   ├── VoucherController.cs
│   └── WeatherForecastController.cs
├── DTOs/
│   ├── AccountDto.cs
│   ├── AddressDTO.cs
│   ├── AdminUserUpdateDto.cs
│   ├── CartDto.cs
│   ├── CreateProductDto.cs
│   ├── HeadphoneSpecificationDto.cs
│   ├── LaptopSpecificationDto.cs
│   ├── LoyaltyStatusDto.cs
│   ├── OrderDto.cs
│   ├── PhoneSpecificationDto.cs
│   ├── ProductDto.cs
│   ├── SearchDto.cs
│   ├── UploadResponseDto.cs
│   ├── UserDto.cs
│   └── VoucherDto.cs
├── Data/
│   └── AppDbContext.cs
├── Migrations/
│   ├── 20250330191225_AddPaypal.Designer.cs
│   ├── 20250330191225_AddPaypal.cs
│   ├── 20250330191310_AddIsActiveToUser.Designer.cs
│   ├── 20250330191310_AddIsActiveToUser.cs
│   ├── 20250330191701_AddPayPalFieldsToOrder.Designer.cs
│   ├── 20250330191701_AddPayPalFieldsToOrder.cs
│   ├── 20250402100228_AddIsUsedToUserVoucher.Designer.cs
│   ├── 20250402100228_AddIsUsedToUserVoucher.cs
│   └── AppDbContextModelSnapshot.cs
├── Models/
│   ├── Address.cs
│   ├── Brand.cs
│   ├── Cart.cs
│   ├── CartItem.cs
│   ├── Category.cs
│   ├── Delivery.cs
│   ├── Headphones_Specifications.cs
│   ├── Laptops_Specifications.cs
│   ├── Order.cs
│   ├── OrderItem.cs
│   ├── PaymentMethod.cs
│   ├── Phones_Specifications.cs
│   ├── ProductImages.cs
│   ├── ProductVariant.cs
│   ├── Products.cs
│   ├── Review.cs
│   ├── Role.cs
│   ├── User.cs
│   ├── UserVoucher.cs
│   └── Voucher.cs
├── Pages/
│   ├── Error.cshtml
│   ├── Error.cshtml.cs
│   └── _ViewImports.cshtml
├── Properties/
│   └── launchSettings.json
├── Services/
│   ├── CloudinaryService.cs
│   ├── EmailService.cs
│   ├── ICloudinaryService.cs
│   ├── JwtService.cs
│   ├── MoMoPaymentService.cs
│   ├── PayPalService.cs
│   └── UserService.cs
├── bin/
├── node_modules/
├── obj/
├── wwwroot/
│   ├── 638777289693476398_FB_IMG_1555386600216.jpg
│   ├── 638777301336393535_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638777308153943069_FB_IMG_1555386600216.jpg
│   ├── 638781973986999931_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638782724359458464_Screenshot 2024-12-14 110409.png
│   ├── 638785860496963266_iphone-16-pro-max-titan-tu-nhien_2.webp
│   ├── 638786227099043452_nappa.jpg
│   ├── 638787272129082719_JAY_2020.jpg
│   ├── 638787272807398721_JAY_2055.jpg
│   ├── 638787272833945420_JAY_2055.jpg
│   ├── 638787272897870762_JAY_2055.jpg
│   ├── 638787273014418338_JAY_2046.jpg
│   ├── 638787273063720114_JAY_2046.jpg
│   ├── 638787273194311800_JAY_2055.jpg
│   ├── 638787273230303421_JAY_2055.jpg
│   ├── 638788272033742183_dell_xps_13_9350_xam_1_adcc33cd57.jpg
│   ├── 638788276476562956_dell_xps_13_9350_xam_1_adcc33cd57.jpg
│   ├── 638788288762590589_tai_nghe_chup_tai_gaming_sony_inzone_h3_dd_cd6ab0d099.jpg
│   ├── 638789596878470228_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638789600041707668_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638789608324917318_SonyWH-1000XM5.jpg
│   ├── 638789613041488955_SonyWH-1000XM5.jpg
│   └── 638789696909576202_Screenshot 2024-02-29 215741.png
├── .gitignore
├── Program.cs
├── SHN-Gear.csproj
├── SHNGear.sln
├── WeatherForecast.cs
├── appsettings.Development.json
├── appsettings.json
├── package-lock.json
├── package.json
└── tailwind.config.js
```

## FILE CONTENTS

### Program.cs
```cs
using Microsoft.Extensions.FileProviders;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using SHN_Gear.Data;
using System.Text.Json.Serialization;
using CloudinaryDotNet;
using SHN_Gear.Services;

var builder = WebApplication.CreateBuilder(args);

// 🔹 Thêm kết nối SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// 🔹 Thêm Distributed Cache & Session
builder.Services.AddDistributedMemoryCache(); // Bộ nhớ tạm để lưu session
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30); // Hết hạn sau 30 phút
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});



builder.Services.AddScoped<UserService>(); // Đăng ký UserService
builder.Services.AddScoped<EmailService>(); // Đăng ký EmailService
builder.Services.AddSingleton<PayPalService>();
// Thêm JWT Authentication
var key = Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]);
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(key)
        };
    });

// Thêm CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowFrontend", policy =>
    {
        policy.WithOrigins("https://localhost:44479") // URL frontend
              .AllowCredentials() //Cho phép gửi cookie/token
              .AllowAnyHeader()
              .AllowAnyMethod();
    });
    options.AddPolicy("AllowAll",
        policy => policy.AllowAnyOrigin()
                        .AllowAnyMethod()
                        .AllowAnyHeader());
});


// Thêm Swagger ( kiểm thử API)
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// Cấu hình JsonSerializerOptions để hỗ trợ vòng lặp tham chiếu
builder.Services.AddControllersWithViews()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
    });

builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<MoMoPaymentService>();
var app = builder.Build();



app.UseRouting();
app.UseAuthorization();
app.MapControllers();
app.UseStaticFiles(); // Cho phép truy cập file tĩnh từ wwwroot

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseHsts();
}

// Cấu hình Swagger UI
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();




app.UseRouting();

// Sử dụng CORS
app.UseCors("AllowFrontend");
app.UseCors("AllowAll"); // Nếu bạn muốn cho phép tất cả các nguồn gốc
// 🔹 Thêm Authentication & Authorization (QUAN TRỌNG)
app.UseAuthentication();  // Xác thực JWT Token từ request
app.UseAuthorization();   //Kiểm tra quyền truy cập của user
// 🔹 Thêm Session Middleware
app.UseSession();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

app.MapFallbackToFile("index.html");

app.Run();

```

### tailwind.config.js
```js
module.exports = {
    content: ["./src/**/*.{js,jsx,ts,tsx}"],
    theme: {
      extend: {},
    },
    plugins: [require("tailwindcss-animate")],
  };
  
```

### WeatherForecast.cs
```cs
namespace SHN_Gear;

public class WeatherForecast
{
    public DateOnly Date { get; set; }

    public int TemperatureC { get; set; }

    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    public string? Summary { get; set; }
}

```

### ClientApp\aspnetcore-https.js
```js
// This script sets up HTTPS for the application using the ASP.NET Core HTTPS certificate
const fs = require('fs');
const spawn = require('child_process').spawn;
const path = require('path');

const baseFolder =
  process.env.APPDATA !== undefined && process.env.APPDATA !== ''
    ? `${process.env.APPDATA}/ASP.NET/https`
    : `${process.env.HOME}/.aspnet/https`;

const certificateArg = process.argv.map(arg => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;

if (!certificateName) {
  console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.')
  process.exit(-1);
}

const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
  spawn('dotnet', [
    'dev-certs',
    'https',
    '--export-path',
    certFilePath,
    '--format',
    'Pem',
    '--no-password',
  ], { stdio: 'inherit', })
  .on('exit', (code) => process.exit(code));
}

```

### ClientApp\aspnetcore-react.js
```js
// This script configures the .env.development.local file with additional environment variables to configure HTTPS using the ASP.NET Core
// development certificate in the webpack development proxy.

const fs = require('fs');
const path = require('path');

const baseFolder =
  process.env.APPDATA !== undefined && process.env.APPDATA !== ''
    ? `${process.env.APPDATA}/ASP.NET/https`
    : `${process.env.HOME}/.aspnet/https`;

const certificateArg = process.argv.map(arg => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;

if (!certificateName) {
  console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.')
  process.exit(-1);
}

const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync('.env.development.local')) {
  fs.writeFileSync(
    '.env.development.local',
`SSL_CRT_FILE=${certFilePath}
SSL_KEY_FILE=${keyFilePath}`
  );
} else {
  let lines = fs.readFileSync('.env.development.local')
    .toString()
    .split('\n');

  let hasCert, hasCertKey = false;
  for (const line of lines) {
    if (/SSL_CRT_FILE=.*/i.test(line)) {
      hasCert = true;
    }
    if (/SSL_KEY_FILE=.*/i.test(line)) {
      hasCertKey = true;
    }
  }
  if (!hasCert) {
    fs.appendFileSync(
      '.env.development.local',
      `\nSSL_CRT_FILE=${certFilePath}`
    );
  }
  if (!hasCertKey) {
    fs.appendFileSync(
      '.env.development.local',
      `\nSSL_KEY_FILE=${keyFilePath}`
    );
  }
}

```

### ClientApp\postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

```

### ClientApp\tailwind.config.js
```js
module.exports = {
  content: [
    "./src/**/*.{html,js,jsx,ts,tsx}",  // Chỉ định các thư mục và tệp cần quét
  ],
  theme: {
    extend: {},
  },
  plugins: [require('flowbite/plugin')], // Thêm plugin Flowbite
};

```

### ClientApp\src\App.js
```js
import React, { Component } from "react";
import { Route, Routes, Navigate } from "react-router-dom";
import AppRoutes from "./AppRoutes";
import AdminLayout from "./components/layouts/AdminLayout";
import ProductPage from "./pages/ProductPage";
import ProfilePage from "./pages/ProfilePage";
import ProfileInfo from "./components/Profile/ProfileInfo";
import AddressBook from "./components/Profile/AddressBook";
import UserOrders from "./components/Profile/UserOrders";
import LoyaltyProgram from "./components/Profile/LoyaltyProgram";
import ProductList from "./pages/ProductList";
import Shoppingcart from "./pages/shoppingcart";
import Checkout from "./components/Checkout/Checkout";
import PaymentSuccess from "./components/Order/PaymentSuccess";
import OrderLookup from "./components/Order/OrderLookup";

import Unauthorized from "./pages/Unauthorized";
import { jwtDecode } from "jwt-decode";

// Protected Route Component - Phiên bản tối ưu
const ProtectedRoute = ({ children, adminOnly = false }) => {
  const token = localStorage.getItem("token");
  
  if (!token) {
    return <Navigate to="/" replace />;
  }

  try {
    const decoded = jwtDecode(token);
    const isAdmin = decoded.roleId === "1"; // So sánh trực tiếp với string "1"
    
    // Nếu route yêu cầu admin mà user không phải admin
    if (adminOnly && !isAdmin) {
      return <Navigate to="/unauthorized" replace />;
    }
    
    return children;
  } catch (error) {
    console.error("Token error:", error);
    localStorage.removeItem("token"); // Clear token invalid
    return <Navigate to="/" replace />;
  }
};

export default class App extends Component {
  static displayName = App.name;

  render() {
    return (
      <Routes>
        {/* Các route đặc biệt không cần bảo vệ */}
        <Route path="/checkout" element={<Checkout />} />
        <Route path="/shoppingcart" element={<Shoppingcart />} />
        <Route path="/productlist" element={<ProductList />} />
        <Route path="/profile" element={<ProfilePage />} />
        <Route path="/product/:id" element={<ProductPage />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        <Route path="/payment-success" element={<PaymentSuccess />} />
        <Route path="/order-lookup" element={<OrderLookup />} />


         {/* Protected Profile routes */}
        <Route path="/profile" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>}>
          <Route index element={<ProfileInfo />} />
          <Route path="info" element={<ProfileInfo />} />
          <Route path="address" element={<AddressBook />} />
          <Route path="orders" element={<UserOrders />} />
          <Route path="loyalty" element={<LoyaltyProgram />} />
        </Route>
        {/* Xử lý các route từ AppRoutes */}
        {AppRoutes.map((route) => {
          const isAdminRoute = route.path?.startsWith('/admin');
          
          return (
            <Route
              key={route.path}
              path={route.path}
              element={
                isAdminRoute ? (
                  <ProtectedRoute adminOnly={true}>
                    <AdminLayout>{route.element}</AdminLayout>
                  </ProtectedRoute>
                ) : (
                  route.element
                )
              }
            />
          );
        })}
      </Routes>
    );
  }
}
```

### ClientApp\src\App.test.js
```js
import React from 'react';
import { createRoot } from 'react-dom/client';
import { MemoryRouter } from 'react-router-dom';
import App from './App';

it('renders without crashing', async () => {
  const div = document.createElement('div');
  const root = createRoot(div);
  root.render(
    <MemoryRouter>
      <App />
    </MemoryRouter>);
  await new Promise(resolve => setTimeout(resolve, 1000));
});

```

### ClientApp\src\AppRoutes.js
```js
import Home from "./pages/Home/Home";
import OverviewPage from "./pages/Admin/OverviewPage";
import ProductsPage from "./pages/Admin/ProductsPage";
import UsersPage from "./pages/Admin/UsersPage";
import SalesPage from "./pages/Admin/SalesPage";
import OrdersPage from "./pages/Admin/OrdersPage";
import AnalyticsPage from "./pages/Admin/AnalyticsPage";
import SettingsPage from "./pages/Admin/SettingsPage";
import ProductPage from "./pages/ProductPage";
import ProfilePage from "./pages/ProfilePage";
import ProductList from "./pages/ProductList";
import Shoppingcart from "./pages/shoppingcart";
import Unauthorized from "./pages/Unauthorized";

const AppRoutes = [
  {
    path: "/",
    element: <Home />,
  },
  // Admin routes - will be protected by ProtectedRoute
  {
    path: "/admin/overview",
    element: <OverviewPage />,
    requiresAdmin: true 
    
  },
  {
    path: "/admin/products",
    element: <ProductsPage />,
    requiresAdmin: true 
  },
  {
    path: "/admin/users",
    element: <UsersPage />,
    requiresAdmin: true 
  },
  {
    path: "/admin/sales",
    element: <SalesPage />,
    requiresAdmin: true 
  },
  {
    path: "/admin/orders",
    element: <OrdersPage />,
    requiresAdmin: true 
  },
  {
    path: "/admin/analytics",
    element: <AnalyticsPage />,
    requiresAdmin: true 
  },
  {
    path: "/admin/settings",
    element: <SettingsPage />,
    requiresAdmin: true 
  },
  // Public routes
  {
    path: "/ProductPage/",
    element: <ProductPage />,
  },
  {
    path: "/Profile/",
    element: <ProfilePage />,
  },
  {
    path: "/productlist/",
    element: <ProductList />,
  },
  {
    path: "/shoppingcart/",
    element: <Shoppingcart />,
  },
  {
    path: "/unauthorized",
    element: <Unauthorized />,
  },
];

export default AppRoutes;
```

### ClientApp\src\index.js
```js
import 'bootstrap/dist/css/bootstrap.css';
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import reportWebVitals from './reportWebVitals';
import "../src/assets/styles/base.css";
const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');
const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter basename={baseUrl}>
    <App />
  </BrowserRouter>);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

### ClientApp\src\reportWebVitals.js
```js
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

### ClientApp\src\service-worker.js
```js
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

```

### ClientApp\src\serviceWorkerRegistration.js
```js
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

```

### ClientApp\src\setupProxy.js
```js
const { createProxyMiddleware } = require('http-proxy-middleware');
const { env } = require('process');

const target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` :
  env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(';')[0] : 'https://localhost:7107';

const context = [
  "/weatherforecast",
];

const onError = (err, req, resp, target) => {
    console.error(`${err.message}`);
}

module.exports = function (app) {
  const appProxy = createProxyMiddleware(context, {
    proxyTimeout: 10000,
    target: target,
    // Handle errors to prevent the proxy middleware from crashing when
    // the ASP NET Core webserver is unavailable
    onError: onError,
    secure: false,
    // Uncomment this line to add support for proxying websockets
    //ws: true, 
    headers: {
      Connection: 'Keep-Alive'
    }
  });

  app.use(appProxy);
};

```

### ClientApp\src\components\ProtectedRoute.jsx
```jsx
// src/components/ProtectedRoute.jsx
import { jwtDecode } from "jwt-decode";
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const token = localStorage.getItem("token");
  
  if (!token) return <Navigate to="/" replace />;

  try {
    const decoded = jwtDecode(token);
    
    // Lấy role name từ standard claim hoặc Microsoft claim
    const roleName = (
      decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || 
      decoded.role || 
      ''
    ).toString().toLowerCase(); // Chuẩn hóa về chữ thường
    
    const isAdmin = roleName === 'Admin'; // So sánh không phân biệt hoa thường
    
    if (!isAdmin) return <Navigate to="/unauthorized" replace />;
    
    return children;
  } catch (error) {
    console.error("Token error:", error);
    return <Navigate to="/" replace />;
  }
};
```

### ClientApp\src\components\Admin\analytics\AIPoweredInsights.jsx
```jsx
import { motion } from "framer-motion";
import { TrendingUp, Users, ShoppingBag, DollarSign } from "lucide-react";

const INSIGHTS = [
	{
		icon: TrendingUp,
		color: "text-green-500",
		insight: "Revenue is up 15% compared to last month, driven primarily by a successful email campaign.",
	},
	{
		icon: Users,
		color: "text-blue-500",
		insight: "Customer retention has improved by 8% following the launch of the new loyalty program.",
	},
	{
		icon: ShoppingBag,
		color: "text-purple-500",
		insight: 'Product category "Electronics" shows the highest growth potential based on recent market trends.',
	},
	{
		icon: DollarSign,
		color: "text-yellow-500",
		insight: "Optimizing pricing strategy could potentially increase overall profit margins by 5-7%.",
	},
];

const AIPoweredInsights = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 1.0 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>AI-Powered Insights</h2>
			<div className='space-y-4'>
				{INSIGHTS.map((item, index) => (
					<div key={index} className='flex items-center space-x-3'>
						<div className={`p-2 rounded-full ${item.color} bg-opacity-20`}>
							<item.icon className={`size-6 ${item.color}`} />
						</div>
						<p className='text-gray-300'>{item.insight}</p>
					</div>
				))}
			</div>
		</motion.div>
	);
};
export default AIPoweredInsights;

```

### ClientApp\src\components\Admin\analytics\ChannelPerformance.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from "recharts";

const channelData = [
	{ name: "Organic Search", value: 4000 },
	{ name: "Paid Search", value: 3000 },
	{ name: "Direct", value: 2000 },
	{ name: "Social Media", value: 2780 },
	{ name: "Referral", value: 1890 },
	{ name: "Email", value: 2390 },
];
const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE", "#00C49F"];

const ChannelPerformance = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Channel Performance</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={channelData}
							cx='50%'
							cy='50%'
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{channelData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default ChannelPerformance;

```

### ClientApp\src\components\Admin\analytics\CustomerSegmentation.jsx
```jsx
import { motion } from "framer-motion";
import {
	ResponsiveContainer,
	Radar,
	RadarChart,
	PolarGrid,
	PolarAngleAxis,
	PolarRadiusAxis,
	Legend,
	Tooltip,
} from "recharts";

const customerSegmentationData = [
	{ subject: "Engagement", A: 120, B: 110, fullMark: 150 },
	{ subject: "Loyalty", A: 98, B: 130, fullMark: 150 },
	{ subject: "Satisfaction", A: 86, B: 130, fullMark: 150 },
	{ subject: "Spend", A: 99, B: 100, fullMark: 150 },
	{ subject: "Frequency", A: 85, B: 90, fullMark: 150 },
	{ subject: "Recency", A: 65, B: 85, fullMark: 150 },
];

const CustomerSegmentation = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.6 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Customer Segmentation</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<RadarChart cx='50%' cy='50%' outerRadius='80%' data={customerSegmentationData}>
						<PolarGrid stroke='#374151' />
						<PolarAngleAxis dataKey='subject' stroke='#9CA3AF' />
						<PolarRadiusAxis angle={30} domain={[0, 150]} stroke='#9CA3AF' />
						<Radar name='Segment A' dataKey='A' stroke='#8B5CF6' fill='#8B5CF6' fillOpacity={0.6} />
						<Radar name='Segment B' dataKey='B' stroke='#10B981' fill='#10B981' fillOpacity={0.6} />
						<Legend />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
					</RadarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default CustomerSegmentation;

```

### ClientApp\src\components\Admin\analytics\OverviewCards.jsx
```jsx
import { motion } from "framer-motion";
import { DollarSign, Users, ShoppingBag, Eye, ArrowDownRight, ArrowUpRight } from "lucide-react";

const overviewData = [
	{ name: "Revenue", value: "$1,234,567", change: 12.5, icon: DollarSign },
	{ name: "Users", value: "45,678", change: 8.3, icon: Users },
	{ name: "Orders", value: "9,876", change: -3.2, icon: ShoppingBag },
	{ name: "Page Views", value: "1,234,567", change: 15.7, icon: Eye },
];

const OverviewCards = () => {
	return (
		<div className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'>
			{overviewData.map((item, index) => (
				<motion.div
					key={item.name}
					className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg
            rounded-xl p-6 border border-gray-700
          '
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ delay: index * 0.1 }}
				>
					<div className='flex items-center justify-between'>
						<div>
							<h3 className='text-sm font-medium text-gray-400'>{item.name}</h3>
							<p className='mt-1 text-xl font-semibold text-gray-100'>{item.value}</p>
						</div>

						<div
							className={`
              p-3 rounded-full bg-opacity-20 ${item.change >= 0 ? "bg-green-500" : "bg-red-500"}
              `}
						>
							<item.icon className={`size-6  ${item.change >= 0 ? "text-green-500" : "text-red-500"}`} />
						</div>
					</div>
					<div
						className={`
              mt-4 flex items-center ${item.change >= 0 ? "text-green-500" : "text-red-500"}
            `}
					>
						{item.change >= 0 ? <ArrowUpRight size='20' /> : <ArrowDownRight size='20' />}
						<span className='ml-1 text-sm font-medium'>{Math.abs(item.change)}%</span>
						<span className='ml-2 text-sm text-gray-400'>vs last period</span>
					</div>
				</motion.div>
			))}
		</div>
	);
};
export default OverviewCards;

```

### ClientApp\src\components\Admin\analytics\ProductPerformance.jsx
```jsx
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { motion } from "framer-motion";

const productPerformanceData = [
	{ name: "Product A", sales: 4000, revenue: 2400, profit: 2400 },
	{ name: "Product B", sales: 3000, revenue: 1398, profit: 2210 },
	{ name: "Product C", sales: 2000, revenue: 9800, profit: 2290 },
	{ name: "Product D", sales: 2780, revenue: 3908, profit: 2000 },
	{ name: "Product E", sales: 1890, revenue: 4800, profit: 2181 },
];

const ProductPerformance = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Product Performance</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<BarChart data={productPerformanceData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey='sales' fill='#8B5CF6' />
						<Bar dataKey='revenue' fill='#10B981' />
						<Bar dataKey='profit' fill='#F59E0B' />
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default ProductPerformance;

```

### ClientApp\src\components\Admin\analytics\RevenueChart.jsx
```jsx
import { useState } from "react";
import { motion } from "framer-motion";
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";

const revenueData = [
	{ month: "Jan", revenue: 4000, target: 3800 },
	{ month: "Feb", revenue: 3000, target: 3200 },
	{ month: "Mar", revenue: 5000, target: 4500 },
	{ month: "Apr", revenue: 4500, target: 4200 },
	{ month: "May", revenue: 6000, target: 5500 },
	{ month: "Jun", revenue: 5500, target: 5800 },
	{ month: "Jul", revenue: 7000, target: 6500 },
];

const RevenueChart = () => {
	const [selectedTimeRange, setSelectedTimeRange] = useState("This Month");

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.2 }}
		>
			<div className='flex justify-between items-center mb-6'>
				<h2 className='text-xl font-semibold text-gray-100'>Revenue vs Target</h2>
				<select
					className='bg-gray-700 text-white rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500'
					value={selectedTimeRange}
					onChange={(e) => setSelectedTimeRange(e.target.value)}
				>
					<option>This Week</option>
					<option>This Month</option>
					<option>This Quarter</option>
					<option>This Year</option>
				</select>
			</div>

			<div style={{ width: "100%", height: 400 }}>
				<ResponsiveContainer>
					<AreaChart data={revenueData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{ backgroundColor: "rgba(31, 41, 55, 0.8)", borderColor: "#4B5563" }}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Area type='monotone' dataKey='revenue' stroke='#8B5CF6' fill='#8B5CF6' fillOpacity={0.3} />
						<Area type='monotone' dataKey='target' stroke='#10B981' fill='#10B981' fillOpacity={0.3} />
					</AreaChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default RevenueChart;

```

### ClientApp\src\components\Admin\analytics\UserRetention.jsx
```jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";

const userRetentionData = [
	{ name: "Week 1", retention: 100 },
	{ name: "Week 2", retention: 75 },
	{ name: "Week 3", retention: 60 },
	{ name: "Week 4", retention: 50 },
	{ name: "Week 5", retention: 45 },
	{ name: "Week 6", retention: 40 },
	{ name: "Week 7", retention: 38 },
	{ name: "Week 8", retention: 35 },
];

const UserRetention = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.5 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Retention</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={userRetentionData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='retention' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserRetention;

```

### ClientApp\src\components\Admin\common\CardProduct.jsx
```jsx
import { useState } from "react";
import { Select, MenuItem } from "@mui/material";
import { motion } from "framer-motion";

const CardProduct = ({ name, icon: Icon, value, color, options, onOptionChange }) => {
	const [selectedOption, setSelectedOption] = useState(options?.[0] || "");

	const handleOptionChange = (event) => {
		const newValue = event.target.value;
		setSelectedOption(newValue);
		onOptionChange(newValue);
	};

	return (
		<motion.div
			className="bg-gray-800 bg-opacity-50 backdrop-blur-md overflow-hidden shadow-lg rounded-xl border border-gray-700"
			whileHover={{ y: -5, boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.5)" }}
		>
			<div className="px-4 py-5 sm:p-6">
				<div className="flex items-center justify-between">
					<span className="flex items-center text-sm font-medium text-gray-400">
						<Icon size={20} className="mr-2" style={{ color }} />
						{name}
					</span>
					{options && (
						<Select
							value={selectedOption}
							onChange={handleOptionChange}
							size="small"
							variant="outlined"
							sx={{
								color: "white",
								backgroundColor: "rgba(255, 255, 255, 0.1)",
								borderRadius: 1,
								"& .MuiOutlinedInput-notchedOutline": { borderColor: "rgba(255, 255, 255, 0.2)" },
								"&:hover .MuiOutlinedInput-notchedOutline": { borderColor: "white" },
								"&.Mui-focused .MuiOutlinedInput-notchedOutline": { borderColor: color },
							}}
						>
							{options.map((option) => (
								<MenuItem key={option} value={option}>
									{option}
								</MenuItem>
							))}
						</Select>
					)}
				</div>
				<p className="mt-1 text-3xl font-semibold text-gray-100">{value}</p>
			</div>
		</motion.div>
	);
};

export default CardProduct;

```

### ClientApp\src\components\Admin\common\Header.jsx
```jsx
const Header = ({ title }) => {
	return (
		<header className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg border-b border-gray-700'>
			<div className='max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8'>
				<h1 className='text-2xl font-semibold text-gray-100'>{title}</h1>
			</div>
		</header>
	);
};
export default Header;

```

### ClientApp\src\components\Admin\common\Sidebar.jsx
```jsx
import { BarChart2, DollarSign, Menu, Settings, ShoppingBag, ShoppingCart, TrendingUp, Users, Home } from "lucide-react";
import { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { Link } from "react-router-dom";

const SIDEBAR_ITEMS = [
	{
		name: "Tổng quan",
		icon: BarChart2,
		color: "#6366f1",
		href: "/admin/overview",
	},
	{ name: "Sản Phẩm", icon: ShoppingBag, color: "#8B5CF6", href: "/admin/products" },
	{ name: "Người Dùng", icon: Users, color: "#EC4899", href: "/admin/users" },
	{ name: "Bán Hàng", icon: DollarSign, color: "#10B981", href: "/admin/sales" },
	{ name: "Đơn Hàng", icon: ShoppingCart, color: "#F59E0B", href: "/admin/orders" },
	// { name: "Phân tích", icon: TrendingUp, color: "#3B82F6", href: "/admin/analytics" },
	// { name: "Settings", icon: Settings, color: "#6EE7B7", href: "/admin/settings" },
];

const Sidebar = () => {
	const [isSidebarOpen, setIsSidebarOpen] = useState(true);

	return (
		<motion.div
			className={`relative z-10 transition-all duration-300 ease-in-out flex-shrink-0 ${
				isSidebarOpen ? "w-64" : "w-20"
			}`}
			animate={{ width: isSidebarOpen ? 256 : 80 }}
		>
			<div className='h-full bg-gray-800 bg-opacity-50 backdrop-blur-md p-4 flex flex-col border-r border-gray-700'>
				<motion.button
					whileHover={{ scale: 1.1 }}
					whileTap={{ scale: 0.9 }}
					onClick={() => setIsSidebarOpen(!isSidebarOpen)}
					className='p-2 rounded-full hover:bg-gray-700 transition-colors max-w-fit'
				>
					<Menu size={24} />
				</motion.button>
				
				<nav className='mt-8 flex-grow'>
					{/* Logo/Home Link */}
        <Link to="/" className="mb-6">
          <motion.div 
            className="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors"
            whileHover={{ scale: 1.05 }}
          >
            <Home size={24} className="text-indigo-400" />
            <AnimatePresence>
              {isSidebarOpen && (
                <motion.span
                  className="ml-3 text-xl font-bold text-white"
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  exit={{ opacity: 0, x: -10 }}
                  transition={{ duration: 0.2 }}
                >
                  SHN Gear
                </motion.span>
              )}
            </AnimatePresence>
          </motion.div>
        </Link>
					{SIDEBAR_ITEMS.map((item) => (
						<Link key={item.href} to={item.href}>
							<motion.div className='flex items-center p-4 text-sm font-medium rounded-lg hover:bg-gray-700 transition-colors mb-2'>
								<item.icon size={20} style={{ color: item.color, minWidth: "20px" }} />
								<AnimatePresence>
									{isSidebarOpen && (
										<motion.span
											className='ml-4 whitespace-nowrap'
											initial={{ opacity: 0, width: 0 }}
											animate={{ opacity: 1, width: "auto" }}
											exit={{ opacity: 0, width: 0 }}
											transition={{ duration: 0.2, delay: 0.3 }}
										>
											{item.name}
										</motion.span>
									)}
								</AnimatePresence>
							</motion.div>
						</Link>
					))}

					
				</nav>
			</div>
		</motion.div>
	);
};
export default Sidebar;

```

### ClientApp\src\components\Admin\common\StatCard.jsx
```jsx
import { motion } from "framer-motion";

const StatCard = ({ name, icon: Icon, value, color }) => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md overflow-hidden shadow-lg rounded-xl border border-gray-700'
			whileHover={{ y: -5, boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.5)" }}
		>
			<div className='px-4 py-5 sm:p-6'>
				<span className='flex items-center text-sm font-medium text-gray-400'>
					<Icon size={20} className='mr-2' style={{ color }} />
					{name}
				</span>
				<p className='mt-1 text-3xl font-semibold text-gray-100'>{value}</p>
			</div>
		</motion.div>
	);
};
export default StatCard;

```

### ClientApp\src\components\Admin\orders\DailyOrders.jsx
```jsx
import { motion } from "framer-motion";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";

const dailyOrdersData = [
	{ date: "07/01", orders: 45 },
	{ date: "07/02", orders: 52 },
	{ date: "07/03", orders: 49 },
	{ date: "07/04", orders: 60 },
	{ date: "07/05", orders: 55 },
	{ date: "07/06", orders: 58 },
	{ date: "07/07", orders: 62 },
];

const DailyOrders = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.2 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Daily Orders</h2>

			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={dailyOrdersData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='date' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='orders' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default DailyOrders;

```

### ClientApp\src\components\Admin\orders\EditOrder.jsx
```jsx
import React, { useState, useEffect } from 'react';
import { Drawer, Box, Typography, Button, TextField, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import axios from 'axios';

const EditOrder = ({ open, onClose, order, onOrderUpdated }) => {
    const [formData, setFormData] = useState({
        addressId: order?.addressId || '',
        voucherId: order?.voucherId || '',
        orderItems: order?.orderItems || [],
        paymentMethodId: order?.paymentMethodId || 1,
        orderStatus: order?.orderStatus || 'Pending'
    });

    const [addresses, setAddresses] = useState([]);
    const [vouchers, setVouchers] = useState([]);
    const [products, setProducts] = useState([]);

    useEffect(() => {
        // Fetch addresses, vouchers and products when component mounts
        const fetchData = async () => {
            try {
                const addressesRes = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/addresses`);
                const vouchersRes = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`);
                const productsRes = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products`);
                
                setAddresses(addressesRes.data);
                setVouchers(vouchersRes.data.filter(v => v.isActive && new Date(v.expiryDate) > new Date()));
                setProducts(productsRes.data);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, []);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleOrderItemChange = (index, field, value) => {
        const updatedItems = [...formData.orderItems];
        updatedItems[index][field] = value;
        setFormData(prev => ({
            ...prev,
            orderItems: updatedItems
        }));
    };

    const addOrderItem = () => {
        setFormData(prev => ({
            ...prev,
            orderItems: [...prev.orderItems, { productVariantId: '', quantity: 1, price: 0 }]
        }));
    };

    const removeOrderItem = (index) => {
        const updatedItems = formData.orderItems.filter((_, i) => i !== index);
        setFormData(prev => ({
            ...prev,
            orderItems: updatedItems
        }));
    };

    const handleSubmit = async () => {
        try {
            const response = await axios.put(
                `${process.env.REACT_APP_API_BASE_URL}/api/orders/${order.id}`,
                formData
            );
            
            onOrderUpdated(response.data);
            onClose();
        } catch (error) {
            console.error('Error updating order:', error);
            alert('Có lỗi xảy ra khi cập nhật đơn hàng');
        }
    };

    return (
        <Drawer
            anchor="right"
            open={open}
            onClose={onClose}
            PaperProps={{ sx: { width: '40%' } }}
        >
            <Box sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom>
                    Chỉnh sửa đơn hàng #{order?.id}
                </Typography>

                <FormControl fullWidth margin="normal">
                    <InputLabel>Địa chỉ giao hàng</InputLabel>
                    <Select
                        name="addressId"
                        value={formData.addressId}
                        onChange={handleChange}
                        label="Địa chỉ giao hàng"
                    >
                        {addresses.map(address => (
                            <MenuItem key={address.id} value={address.id}>
                                {address.fullName} - {address.addressLine1}
                            </MenuItem>
                        ))}
                    </Select>
                </FormControl>

                <FormControl fullWidth margin="normal">
                    <InputLabel>Voucher</InputLabel>
                    <Select
                        name="voucherId"
                        value={formData.voucherId}
                        onChange={handleChange}
                        label="Voucher"
                    >
                        <MenuItem value="">Không sử dụng voucher</MenuItem>
                        {vouchers.map(voucher => (
                            <MenuItem key={voucher.id} value={voucher.id}>
                                {voucher.code} (Giảm {voucher.discountAmount}đ)
                            </MenuItem>
                        ))}
                    </Select>
                </FormControl>

                <Typography variant="subtitle1" gutterBottom sx={{ mt: 2 }}>
                    Sản phẩm
                </Typography>

                {formData.orderItems.map((item, index) => (
                    <Box key={index} sx={{ mb: 2, p: 2, border: '1px solid #ddd', borderRadius: 1 }}>
                        <FormControl fullWidth margin="normal">
                            <InputLabel>Sản phẩm</InputLabel>
                            <Select
                                value={item.productVariantId}
                                onChange={(e) => handleOrderItemChange(index, 'productVariantId', e.target.value)}
                                label="Sản phẩm"
                            >
                                {products.flatMap(product => 
                                    product.variants.map(variant => (
                                        <MenuItem key={variant.id} value={variant.id}>
                                            {product.name} - {variant.color} - {variant.storage}
                                        </MenuItem>
                                    ))
                                )}
                            </Select>
                        </FormControl>

                        <TextField
                            fullWidth
                            margin="normal"
                            type="number"
                            label="Số lượng"
                            value={item.quantity}
                            onChange={(e) => handleOrderItemChange(index, 'quantity', parseInt(e.target.value))}
                        />

                        <TextField
                            fullWidth
                            margin="normal"
                            type="number"
                            label="Đơn giá"
                            value={item.price}
                            onChange={(e) => handleOrderItemChange(index, 'price', parseFloat(e.target.value))}
                        />

                        <Button 
                            variant="outlined" 
                            color="error"
                            onClick={() => removeOrderItem(index)}
                            sx={{ mt: 1 }}
                        >
                            Xóa sản phẩm
                        </Button>
                    </Box>
                ))}

                <Button 
                    variant="outlined" 
                    onClick={addOrderItem}
                    sx={{ mt: 2 }}
                >
                    Thêm sản phẩm
                </Button>

                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
                    <Button 
                        variant="outlined" 
                        onClick={onClose}
                        sx={{ mr: 2 }}
                    >
                        Hủy
                    </Button>
                    <Button 
                        variant="contained" 
                        onClick={handleSubmit}
                    >
                        Lưu thay đổi
                    </Button>
                </Box>
            </Box>
        </Drawer>
    );
};

export default EditOrder;
```

### ClientApp\src\components\Admin\orders\OrderDetailDrawer.jsx
```jsx
import React, { useState, useEffect } from 'react';
import {
  Drawer,
  Box,
  Typography,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  IconButton,
  Chip,
  CircularProgress,
  Grid,
  Tooltip,
  ImageList,
  ImageListItem,
  Button,
  ButtonGroup,
} from '@mui/material';
import { Close, PictureAsPdf, InsertDriveFile, Receipt } from '@mui/icons-material';
import axios from 'axios';

const OrderDetailDrawer = ({ orderId, open, onClose }) => {
  const [order, setOrder] = useState(null);
  const [variantDetails, setVariantDetails] = useState({});
  const [loading, setLoading] = useState(false);
  const [exporting, setExporting] = useState(false);

  useEffect(() => {
    if (open && orderId) {
      fetchOrderDetails();
    } else {
      setOrder(null);
      setVariantDetails({});
    }
  }, [open, orderId]);

  const fetchOrderDetails = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/details`);
      setOrder(response.data);
      if (response.data.items?.length > 0) {
        await fetchVariantDetails(response.data.items);
      }
    } catch (error) {
      console.error('Failed to fetch order details:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchVariantDetails = async (items) => {
    try {
      const variantPromises = items.map((item) =>
        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products/by-variant/${item.variantId}`)
      );
      const variantResponses = await Promise.all(variantPromises);
      const details = variantResponses.reduce((acc, res, index) => {
        acc[items[index].variantId] = res.data;
        return acc;
      }, {});
      setVariantDetails(details);
    } catch (error) {
      console.error('Failed to fetch variant details:', error);
    }
  };
  
  const handleExportExcel = async () => {
    try {
      setExporting(true);
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/export/excel`,
        { responseType: 'blob' }
      );
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `HoaDon_${orderId}.xlsx`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Failed to export Excel:', error);
      alert('Xuất file Excel thất bại');
    } finally {
      setExporting(false);
    }
  };

  const handleExportImage = async () => {
    try {
      setExporting(true);
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/export/image`,
        { responseType: 'blob' }
      );
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `HoaDon_${orderId}.png`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Failed to export image:', error);
      alert('Xuất hình ảnh thất bại');
    } finally {
      setExporting(false);
    }
  };

  const handleExportTemplate = async () => {
    try {
      setExporting(true);
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/export/template`,
        { responseType: 'blob' }
      );
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `HoaDon_${orderId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error('Failed to export template:', error);
      alert('Xuất hóa đơn theo mẫu thất bại');
    } finally {
      setExporting(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Delivered': return 'success';
      case 'Processing': return 'info';
      case 'Shipped': return 'primary';
      case 'Cancelled': return 'error';
      default: return 'warning';
    }
  };

  const formatCurrency = (amount) => {
    return amount?.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) ?? 'N/A';
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString('vi-VN', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch {
      return 'Invalid date';
    }
  };

  const formatAddress = (address) => {
    if (!address) return 'Chưa có thông tin địa chỉ';
    const { addressLine1, addressLine2, city, state, zipCode, country } = address;
    return `${addressLine1}${addressLine2 ? ', ' + addressLine2 : ''}, ${city}${
      state ? ', ' + state : ''
    }, ${zipCode}, ${country}`;
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: { width: { xs: '100%', sm: '70%', md: '50%' }, maxWidth: '600px' },
      }}
    >
      <Box sx={{ p: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h5" fontWeight="bold">
            Chi tiết đơn hàng
          </Typography>
          <IconButton onClick={onClose}>
            <Close />
          </IconButton>
        </Box>

        {/* Nút xuất hóa đơn */}
        <Box sx={{ mb: 3 }}>
          <ButtonGroup fullWidth variant="contained" disabled={exporting || !order}>
            <Button 
              startIcon={exporting ? <CircularProgress size={20} /> : <InsertDriveFile />}
              onClick={handleExportExcel}
              color="success"
            >
              Excel
            </Button>
            <Button 
              startIcon={exporting ? <CircularProgress size={20} /> : <Receipt />}
              onClick={handleExportImage}
              color="error"
            >
              Ảnh hóa đơn
            </Button>
            <Button 
              startIcon={exporting ? <CircularProgress size={20} /> : <PictureAsPdf />}
              onClick={handleExportTemplate}
              color="primary"
            >
              PDF
            </Button>
          </ButtonGroup>
        </Box>

        {loading && !order ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
            <CircularProgress />
          </Box>
        ) : order ? (
          <>
            {/* Thông tin chung */}
            <Box sx={{ mb: 4 }}>
              <Typography variant="subtitle1" gutterBottom fontWeight="bold">
                Thông tin đơn hàng
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Mã đơn hàng:
                  </Typography>
                  <Typography variant="body2" fontWeight="medium">
                    {order.id}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Ngày đặt hàng:
                  </Typography>
                  <Typography variant="body2" fontWeight="medium">
                    {formatDate(order.orderDate)}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Tổng tiền:
                  </Typography>
                  <Typography variant="body2" fontWeight="medium">
                    {formatCurrency(order.totalAmount)}
                    {order.orderStatus === "Paid" || order.orderStatus === "ShippedPayment" ? " (Đã thanh toán)" : ""}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Phương thức thanh toán:
                  </Typography>
                  <Typography variant="body2" fontWeight="medium">
                    {order.paymentMethodId === 1 
                      ? 'Tiền mặt' 
                      : order.paymentMethodId === 2 
                        ? 'MoMo' 
                        : order.paymentMethodId === 3 
                          ? 'PayPal' 
                          : 'Không xác định'}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    Trạng thái:
                  </Typography>
                  <Chip
                    label={order.orderStatus || 'Unknown'}
                    color={getStatusColor(order.orderStatus)}
                    size="small"
                  />
                </Grid>
                <Grid item xs={12}>
                  <Typography variant="body2" color="text.secondary">
                    Địa chỉ giao hàng:
                  </Typography>
                  <Box>
                    <Typography variant="body2" fontWeight="medium">
                      {order.address?.fullName || 'N/A'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {order.address?.phoneNumber || 'N/A'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {formatAddress(order.address)}
                    </Typography>
                  </Box>
                </Grid>
              </Grid>
            </Box>

            {/* Danh sách sản phẩm */}
            <Box sx={{ mb: 4 }}>
              <Typography variant="subtitle1" gutterBottom fontWeight="bold">
                Sản phẩm trong đơn hàng
              </Typography>
              <Divider sx={{ mb: 2 }} />
              {order.items?.length > 0 ? (
                <List>
                  {order.items.map((item, index) => {
                    const variantData = variantDetails[item.variantId] || {};
                    const product = variantData.product || {};
                    const variant = variantData.variant || {};
                    const images = variantData.images || [];

                    return (
                      <ListItem
                        key={index}
                        sx={{ px: 0, py: 2, flexDirection: 'column', alignItems: 'flex-start' }}
                      >
                        <Box sx={{ display: 'flex', width: '100%', mb: 1 }}>
                          <ListItemAvatar>
                          <Avatar
                            src={
                              images.length > 0 
                                ? `${process.env.REACT_APP_API_BASE_URL}${
                                    images.find(img => img.isPrimary)?.imageUrl || 
                                    images[0]?.imageUrl || 
                                    ''
                                  }`
                                : 'https://via.placeholder.com/80'
                            }
                            alt={product.name || 'Sản phẩm'}
                            variant="square"
                            sx={{ width: 80, height: 80, mr: 2 }}
                          />
                        </ListItemAvatar>
                          <ListItemText
                            primary={
                              <Typography variant="body1" fontWeight="medium">
                                {product.name || 'Sản phẩm không xác định'}
                              </Typography>
                            }
                            secondary={
                              <Typography variant="body2" color="text.secondary">
                                Loại: {variant.color || 'N/A'} -{' '}
                                {variant.storage || 'N/A'}
                              </Typography>
                            }
                          />
                          <Box sx={{ textAlign: 'right' }}>
                            <Typography variant="body2" color="text.secondary">
                              {item.quantity} × {formatCurrency(item.price)}
                            </Typography>
                            <Typography variant="body1" fontWeight="bold">
                              {formatCurrency(item.quantity * item.price)}
                            </Typography>
                          </Box>
                        </Box>

                        {/* Thông tin chi tiết sản phẩm */}
                        <Box sx={{ pl: 10, width: '100%' }}>
                          <Typography variant="body2" color="text.secondary">
                            <strong>Danh mục:</strong> {product.category || 'N/A'}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            <strong>Thương hiệu:</strong> {product.brand || 'N/A'}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            <strong>Mô tả:</strong> {product.description || 'Không có mô tả'}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            <strong>Giá gốc:</strong> {formatCurrency(variant.price)}
                          </Typography>
                          {variant.discountPrice && (
                            <Typography variant="body2" color="text.secondary">
                              <strong>Giá giảm:</strong> {formatCurrency(variant.discountPrice)}
                            </Typography>
                          )}

                          {/* Hiển thị tất cả hình ảnh
                          {images.length > 0 ? (
                            <Box sx={{ mt: 2 }}>
                              <Typography variant="body2" color="text.secondary" fontWeight="medium">
                                Hình ảnh sản phẩm:
                              </Typography>
                              <ImageList cols={3} gap={8}>
                              {images.map((img) => (
                                <ImageListItem key={img.id}>
                                  <Tooltip title={img.isPrimary ? 'Ảnh chính' : 'Ảnh phụ'}>
                                    <img
                                      src={`${process.env.REACT_APP_API_BASE_URL}${img.imageUrl}`}
                                      alt={product.name || 'Sản phẩm'}
                                      style={{
                                        width: '100%',
                                        height: 'auto',
                                        maxHeight: '150px',
                                        objectFit: 'contain',
                                        border: img.isPrimary ? '2px solid #1976d2' : '1px solid #e0e0e0',
                                        borderRadius: '4px',
                                        backgroundColor: '#f5f5f5'
                                      }}
                                      loading="lazy"
                                      onError={(e) => {
                                        e.target.onerror = null;
                                        e.target.src = 'https://via.placeholder.com/150?text=Ảnh+lỗi';
                                      }}
                                    />
                                  </Tooltip>
                                </ImageListItem>
                              ))}
                            </ImageList>
                            </Box>
                          ) : (
                            <Typography variant="body2" color="text.secondary">
                              Không có hình ảnh sản phẩm.
                            </Typography>
                          )} */}
                        </Box>
                      </ListItem>
                    );
                  })}
                </List>
              ) : (
                <Typography variant="body2" color="text.secondary">
                  Không có sản phẩm trong đơn hàng.
                </Typography>
              )}
            </Box>
          </>
        ) : (
          <Typography variant="body2" color="text.secondary">
            Không tìm thấy thông tin đơn hàng
          </Typography>
        )}
      </Box>
    </Drawer>
  );
};

export default OrderDetailDrawer;
```

### ClientApp\src\components\Admin\orders\OrderDistribution.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from "recharts";

const orderStatusData = [
	{ name: "Pending", value: 30 },
	{ name: "Processing", value: 45 },
	{ name: "Shipped", value: 60 },
	{ name: "Delivered", value: 120 },
];
const COLORS = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#FED766", "#2AB7CA"];

const OrderDistribution = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Order Status Distribution</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={orderStatusData}
							cx='50%'
							cy='50%'
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{orderStatusData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default OrderDistribution;

```

### ClientApp\src\components\Admin\orders\OrdersTable.jsx
```jsx
import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Search, Eye, Edit, Trash2, Filter, X } from "lucide-react";
import axios from "axios";
import { Modal, Box, Typography, Button, Select, MenuItem } from "@mui/material";
import OrderDetailDrawer from './OrderDetailDrawer';
const OrdersTable = () => {
    const [searchTerm, setSearchTerm] = useState("");
    const [orders, setOrders] = useState([]);
    const [filteredOrders, setFilteredOrders] = useState([]);
    const [statusFilter, setStatusFilter] = useState("All");
    const [currentPage, setCurrentPage] = useState(1);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [newStatus, setNewStatus] = useState("");
    const [openModal, setOpenModal] = useState(false);
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [minAmount, setMinAmount] = useState("");
    const [maxAmount, setMaxAmount] = useState("");
    const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
    const ordersPerPage = 5;
    //state edit 
    
    //state cho drawer OrderDetail
    const [selectedOrderId, setSelectedOrderId] = useState(null);
    const [drawerOpen, setDrawerOpen] = useState(false);
    // Hàm xác định các trạng thái được phép chuyển đổi
    const getAllowedStatuses = (currentStatus) => {
        switch (currentStatus) {
            case "Pending":
                return ["Processing", "Cancelled"]; // Chờ xác nhận -> Đã xác nhận hoặc Hủy
            case "Processing":
                return ["Shipped", "Cancelled"]; // Đã xác nhận -> Đang vận chuyển hoặc Hủy
            case "Shipped":
                return ["Delivered"]; // Đang vận chuyển -> Đã xong
            case "WaitingForPayment":
                return ["Paid", "Cancelled"]; // Chờ thanh toán -> Đã thanh toán hoặc Hủy
            case "Paid":
                return ["ShippedPayment"]; // Đã thanh toán -> Đang vận chuyển đơn đã thanh toán
            case "ShippedPayment":
                return ["Delivered"]; // Đang vận chuyển đơn đã thanh toán -> Đã xong
            default:
                return []; // Các trạng thái khác không cho phép chuyển đổi
        }
    };

    // Hàm lấy tên hiển thị của trạng thái
    const getStatusDisplayName = (status) => {
        switch (status) {
            case "Pending":
                return "Chờ xác nhận";
            case "Processing":
                return "Đã xác nhận";
            case "Shipped":
                return "Đang vận chuyển";
            case "Delivered":
                return "Đã xong";
            case "Cancelled":
                return "Đã hủy";
            case "WaitingForPayment":
                return "Chờ thanh toán";
            case "Paid":
                return "Đã thanh toán";
            case "ShippedPayment":
                return "Đang vận chuyển (đã thanh toán)";
            default:
                return status;
        }
    };
    useEffect(() => {
        const fetchOrders = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders`);
                const ordersWithCustomerNames = await Promise.all(
                    response.data.map(async (order) => {
                        try {
                            const addressResponse = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/address/${order.addressId}`);
                            order.customer = addressResponse.data.fullName;
                        } catch (error) {
                            console.error(`Lỗi khi lấy dữ liệu địa chỉ với ID ${order.addressId}:`, error);
                            order.customer = "Unknown";
                        }
                        return order;
                    })
                );
                setOrders(ordersWithCustomerNames);
                setFilteredOrders(ordersWithCustomerNames);
            } catch (error) {
                console.error("Lỗi khi lấy dữ liệu đơn hàng:", error);
            }
        };
        fetchOrders();
    }, []);
        // hàm mở drawer Detail
        const handleViewOrder = (orderId) => {
        setSelectedOrderId(orderId);
        setDrawerOpen(true);
        };
    const handleSearch = (e) => {
        const term = e.target.value.toLowerCase();
        setSearchTerm(term);
        applyFilters(term, statusFilter, startDate, endDate, minAmount, maxAmount);
    };

    const handleStatusFilter = (e) => {
        const status = e.target.value;
        setStatusFilter(status);
        applyFilters(searchTerm, status, startDate, endDate, minAmount, maxAmount);
    };

    const applyFilters = (term, status, startDate, endDate, minAmount, maxAmount) => {
        let filtered = [...orders];

        // Lọc theo từ khóa tìm kiếm
        if (term) {
            filtered = filtered.filter(
                (order) =>
                    order.id.toString().toLowerCase().includes(term) ||
                    order.customer.toLowerCase().includes(term)
            );
        }

        // Lọc theo trạng thái
        if (status !== "All") {
            filtered = filtered.filter((order) => order.orderStatus === status);
        }

        // Lọc theo khoảng ngày
        if (startDate && endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);
            filtered = filtered.filter(order => {
                const orderDate = new Date(order.orderDate);
                return orderDate >= start && orderDate <= end;
            });
        }

        // Lọc theo khoảng giá
        if (minAmount || maxAmount) {
            const min = minAmount ? parseFloat(minAmount) : 0;
            const max = maxAmount ? parseFloat(maxAmount) : Infinity;
            filtered = filtered.filter(order => {
                const amount = order.totalAmount || 0;
                return amount >= min && amount <= max;
            });
        }

        setFilteredOrders(filtered);
        setCurrentPage(1); // Reset về trang đầu tiên khi áp dụng bộ lọc mới
    };

    const handlePageChange = (pageNumber) => {
        setCurrentPage(pageNumber);
    };

    const handleDeleteOrder = async (orderId) => {
        if (window.confirm("Bạn có chắc chắn muốn xóa đơn hàng này không?")) {
            try {
                await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}`);
                setOrders(orders.filter(order => order.id !== orderId));
                setFilteredOrders(filteredOrders.filter(order => order.id !== orderId));
                alert("Đơn hàng đã được xóa thành công!");
            } catch (error) {
                console.error("Lỗi khi xóa đơn hàng:", error);
                alert("Lỗi khi xóa đơn hàng, vui lòng thử lại.");
            }
        }
    };

    const handleOpenModal = (order) => {
        setSelectedOrder(order);
        setNewStatus(order.orderStatus);
        setOpenModal(true);
    };

    const handleCloseModal = () => {
        setOpenModal(false);
        setSelectedOrder(null);
    };

    const handleUpdateStatus = async () => {
        if (selectedOrder) {
            try {
                console.log(`Updating status for order ID: ${selectedOrder.id} to ${newStatus}`);
                const response = await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${selectedOrder.id}/status`, { newStatus });
                console.log("Update response:", response.data);
                setOrders(orders.map(order => order.id === selectedOrder.id ? { ...order, orderStatus: newStatus } : order));
                setFilteredOrders(filteredOrders.map(order => order.id === selectedOrder.id ? { ...order, orderStatus: newStatus } : order));
                alert("Trạng thái đơn hàng đã được cập nhật thành công!");
                handleCloseModal();
            } catch (error) {
                console.error("Lỗi khi cập nhật trạng thái đơn hàng:", error);
                console.error("Chi tiết lỗi:", error.response?.data);
                alert("Lỗi khi cập nhật trạng thái đơn hàng, vui lòng thử lại.");
            }
        }
    };

    const handleDateFilter = () => {
        applyFilters(searchTerm, statusFilter, startDate, endDate, minAmount, maxAmount);
    };

    const handleTodayOrders = () => {
        const today = new Date().toISOString().split("T")[0];
        const filtered = orders.filter((order) => {
            const orderDate = new Date(order.orderDate).toISOString().split("T")[0];
            return orderDate === today;
        });
        setFilteredOrders(filtered);
        setCurrentPage(1);
    };

    const handleResetFilters = () => {
        setSearchTerm("");
        setStatusFilter("All");
        setStartDate("");
        setEndDate("");
        setMinAmount("");
        setMaxAmount("");
        setFilteredOrders(orders);
        setCurrentPage(1);
    };

    const indexOfLastOrder = currentPage * ordersPerPage;
    const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
    const currentOrders = filteredOrders.slice(indexOfFirstOrder, indexOfLastOrder);

    const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);

    return (
        <motion.div
            className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
        >
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-100">Danh sách đơn hàng</h2>
                <div className="flex items-center space-x-4">
                    <div className="relative">
                        <input
                            type="text"
                            placeholder="Tìm đơn hàng..."
                            className="bg-gray-700 text-white placeholder-gray-400 rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            value={searchTerm}
                            onChange={handleSearch}
                        />
                        <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
                    </div>
                    <button
                        className={`flex items-center space-x-1 px-3 py-2 rounded-lg ${showAdvancedFilters ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'}`}
                        onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                    >
                        <Filter size={18} />
                        <span>Bộ lọc</span>
                    </button>
                </div>
            </div>

            {showAdvancedFilters && (
                <motion.div
                    className="bg-gray-700 p-4 rounded-lg mb-6"
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                >
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-medium text-gray-300">Bộ lọc nâng cao</h3>
                        <button
                            className="text-gray-400 hover:text-white"
                            onClick={() => setShowAdvancedFilters(false)}
                        >
                            <X size={20} />
                        </button>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Trạng thái</label>
                            <select
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={statusFilter}
                                onChange={handleStatusFilter}
                            >
                                <option value="All">Tất cả trạng thái</option>
                                <option value="Pending">Chờ xác nhận</option>
                                <option value="Processing">Đã xác nhận</option>
                                <option value="Shipped">Đang vận chuyển</option>
                                <option value="Delivered">Đã xong</option>
                                <option value="Cancelled">Đã hủy</option>
                                <option value="WaitingForPayment">Chờ thanh toán</option>
                                <option value="Paid">Đã thanh toán</option>
                            </select>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Từ ngày</label>
                            <input
                                type="date"
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={startDate}
                                onChange={(e) => setStartDate(e.target.value)}
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Đến ngày</label>
                            <input
                                type="date"
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={endDate}
                                onChange={(e) => setEndDate(e.target.value)}
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Khoảng giá</label>
                            <div className="flex space-x-2">
                                <input
                                    type="number"
                                    placeholder="Từ"
                                    className="w-1/2 bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    value={minAmount}
                                    onChange={(e) => setMinAmount(e.target.value)}
                                />
                                <input
                                    type="number"
                                    placeholder="Đến"
                                    className="w-1/2 bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    value={maxAmount}
                                    onChange={(e) => setMaxAmount(e.target.value)}
                                />
                            </div>
                        </div>
                    </div>

                    <div className="flex justify-end space-x-3 mt-4">
                        <button
                            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
                            onClick={handleDateFilter}
                        >
                            Áp dụng bộ lọc
                        </button>
                        <button
                            className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg"
                            onClick={handleTodayOrders}
                        >
                            Đơn hôm nay
                        </button>
                        <button
                            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg"
                            onClick={handleResetFilters}
                        >
                            Xóa bộ lọc
                        </button>
                    </div>
                </motion.div>
            )}

            <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-700">
                    <thead>
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300">
                                STT
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300">
                                Khách Hàng
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300">
                                Tổng tiền
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300">
                                Trạng thái
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider cursor-pointer hover:text-gray-300">
                                Ngày đặt
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Tùy Chỉnh
                            </th>
                        </tr>
                    </thead>

                    <tbody className="divide divide-gray-700">
                        {currentOrders.length > 0 ? (
                            currentOrders.map((order, index) => (
                                <motion.tr
                                    key={order.id}
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ duration: 0.3 }}
                                    className="hover:bg-gray-700"
                                >
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        {indexOfFirstOrder + index + 1}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        {order.customer}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        {order.totalAmount ? order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) : "N/A"}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        <span
                                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${
                                                order.orderStatus === "Delivered"
                                                    ? "bg-green-100 text-green-800 hover:bg-green-200"
                                                    : order.orderStatus === "Processing"
                                                    ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-200"
                                                    : order.orderStatus === "Shipped"
                                                    ? "bg-blue-100 text-blue-800 hover:bg-blue-200"
                                                    : "bg-red-100 text-red-800 hover:bg-red-200"
                                            }`}
                                            onClick={() => handleOpenModal(order)}
                                        >
                                            {getStatusDisplayName(order.orderStatus)}
                                        </span>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        {new Date(order.orderDate).toLocaleDateString()}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        <button 
                                            className="text-indigo-400 hover:text-indigo-300 mr-2"
                                            onClick={() => handleViewOrder(order.id)}
                                            >
                                            <Eye size={18} />
                                            </button>
                                        <button className="text-yellow-400 hover:text-yellow-300 mr-2">
                                            <Edit size={18} />
                                        </button>
                                        <button className="text-red-400 hover:text-red-300" onClick={() => handleDeleteOrder(order.id)}>
                                            <Trash2 size={18} />
                                        </button>
                                    </td>
                                </motion.tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="6" className="px-6 py-4 text-center text-sm text-gray-400">
                                    Không tìm thấy đơn hàng nào phù hợp với bộ lọc hiện tại
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>

            <div className="flex justify-between items-center mt-4">
                <div className="text-sm text-gray-400">
                    Hiển thị {indexOfFirstOrder + 1} đến {Math.min(indexOfLastOrder, filteredOrders.length)} trong tổng số {filteredOrders.length} đơn hàng
                </div>
                <div className="flex space-x-2">
                    <button
                        className={`px-4 py-2 rounded-lg ${currentPage === 1 ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-700 text-white hover:bg-gray-600'}`}
                        disabled={currentPage === 1}
                        onClick={() => handlePageChange(currentPage - 1)}
                    >
                        Trước
                    </button>
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                        <button
                            key={page}
                            className={`px-4 py-2 rounded-lg ${currentPage === page ? 'bg-blue-500 text-white' : 'bg-gray-700 text-white hover:bg-gray-600'}`}
                            onClick={() => handlePageChange(page)}
                        >
                            {page}
                        </button>
                    ))}
                    <button
                        className={`px-4 py-2 rounded-lg ${currentPage === totalPages ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-700 text-white hover:bg-gray-600'}`}
                        disabled={currentPage === totalPages}
                        onClick={() => handlePageChange(currentPage + 1)}
                    >
                        Sau
                    </button>
                </div>
            </div>

            <Modal open={openModal} onClose={handleCloseModal}>
        <Box
            sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                width: 400,
                bgcolor: 'background.paper',
                border: '2px solid #000',
                boxShadow: 24,
                p: 4,
            }}
        >
            <Typography variant="h6" component="h2">
                Cập nhật trạng thái đơn hàng
            </Typography>
            <Typography variant="body2" sx={{ mt: 1, mb: 2 }}>
                Trạng thái hiện tại: <strong>{getStatusDisplayName(selectedOrder?.orderStatus)}</strong>
            </Typography>
            <Select
                value={newStatus}
                onChange={(e) => setNewStatus(e.target.value)}
                fullWidth
                sx={{ mt: 2 }}
            >
                {selectedOrder && getAllowedStatuses(selectedOrder.orderStatus).map(status => (
                    <MenuItem key={status} value={status}>
                        {getStatusDisplayName(status)}
                    </MenuItem>
                ))}
            </Select>
            <Button
                variant="contained"
                color="primary"
                onClick={handleUpdateStatus}
                sx={{ mt: 2 }}
                disabled={!newStatus || newStatus === selectedOrder?.orderStatus}
            >
                Cập nhật
            </Button>
        </Box>
    </Modal>
            <OrderDetailDrawer 
            orderId={selectedOrderId}
            open={drawerOpen}
            onClose={() => setDrawerOpen(false)}
            />
        </motion.div>
    );
};

export default OrdersTable;
```

### ClientApp\src\components\Admin\overview\CategoryDistributionChart.jsx
```jsx
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend } from "recharts";
import axios from "axios";

const COLORS = ["#6366F1", "#8B5CF6", "#EC4899", "#10B981", "#F59E0B"];

const CategoryDistributionChart = () => {
	const [categoryData, setCategoryData] = useState([]);

	useEffect(() => {
		const fetchCategoryData = async () => {
			try {
				const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories/product-count`);
				setCategoryData(response.data);
			} catch (error) {
				console.error("Lỗi khi lấy dữ liệu danh mục:", error);
			}
		};

		fetchCategoryData();
	}, []);

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-lg font-medium mb-4 text-gray-100'>Thống Kê Danh Mục</h2>
			<div className='h-80'>
				<ResponsiveContainer width={"100%"} height={"100%"}>
					<PieChart>
						<Pie
							data={categoryData}
							cx={"50%"}
							cy={"50%"}
							labelLine={false}
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{categoryData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};

export default CategoryDistributionChart;

```

### ClientApp\src\components\Admin\overview\SalesChannelChart.jsx
```jsx
import { motion } from "framer-motion";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, Cell } from "recharts";

const COLORS = ["#6366F1", "#8B5CF6", "#EC4899", "#10B981", "#F59E0B"];

const SALES_CHANNEL_DATA = [
	{ name: "Website", value: 45600 },
	{ name: "Mobile App", value: 38200 },
	{ name: "Marketplace", value: 29800 },
	{ name: "Social Media", value: 18700 },
];

const SalesChannelChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 lg:col-span-2 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-lg font-medium mb-4 text-gray-100'>Sales by Channel</h2>

			<div className='h-80'>
				<ResponsiveContainer>
					<BarChart data={SALES_CHANNEL_DATA}>
						<CartesianGrid strokeDasharray='3 3' stroke='#4B5563' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey={"value"} fill='#8884d8'>
							{SALES_CHANNEL_DATA.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Bar>
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default SalesChannelChart;

```

### ClientApp\src\components\Admin\overview\SalesOverviewChart.jsx
```jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import { formatCurrency } from "../../../utils/formatCurrency";

const SalesOverviewChart = () => {
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    const fetchSalesData = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/orders/revenue-year`);
        const data = await response.json();
        
        // Chuyển đổi dữ liệu từ API sang định dạng phù hợp
        const processedData = data.map(item => ({
          name: new Date(item.date).toLocaleString('default', { month: 'short' }),
          sales: item.revenue,
          fullDate: item.date,
          year: item.year
        })).sort((a, b) => new Date(a.fullDate) - new Date(b.fullDate));
        
        setChartData(processedData);
      } catch (error) {
        console.error("Error fetching sales data:", error);
      }
    };

    fetchSalesData();
  }, []);

  const formatCurrency = (value) => {
  if (value >= 1_000_000) {
    const millions = Math.floor(value / 1_000_000); // Lấy phần triệu
    const remainder = Math.floor((value % 1_000_000) / 100_000); // Lấy phần trăm ngàn (sau dấu phẩy)

    return remainder > 0 ? `${millions}tr${remainder}` : `${millions}tr`;
  } 
  if (value >= 1_000) {
    return `${(value / 1_000).toFixed(0)}k`; // Hiển thị nghìn
  }
  return value.toLocaleString('vi-VN'); // Hiển thị số bình thường
};


  return (
    <motion.div
      className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      <h2 className='text-lg font-medium mb-4 text-gray-100'>Sales Overview</h2>

      <div className='h-80'>
        {chartData.length > 0 ? (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray='3 3' stroke='#4B5563' opacity={0.5} />
              <XAxis 
                dataKey="name"
                stroke='#9ca3af'
                tick={{ fill: '#E5E7EB' }}
              />
              <YAxis 
  stroke='#9ca3af'
  tick={{ fill: '#E5E7EB' }}
  tickFormatter={(value) => formatCurrency(value)}
  width={80}
/>
<Tooltip
  contentStyle={{
    backgroundColor: "rgba(17, 24, 39, 0.9)",
    borderColor: "#4B5563",
    borderRadius: "0.5rem",
  }}
  itemStyle={{ color: "#E5E7EB" }}
  formatter={(value) => [formatCurrency(value), 'Revenue']}
  labelFormatter={(label) => {
    const monthData = chartData.find(item => item.name === label);
    return monthData ? `${label} ${monthData.year}` : label;
  }}
/>

              <Line
                type="monotone"
                dataKey="sales"
                stroke='#6366F1'
                strokeWidth={2}
                dot={{ fill: "#6366F1", strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, strokeWidth: 2, stroke: '#fff' }}
              />
            </LineChart>
          </ResponsiveContainer>
        ) : (
          <div className="h-full flex items-center justify-center text-gray-400">
            No sales data available
          </div>
        )}
      </div>
    </motion.div>
  );
};

export default SalesOverviewChart;
```

### ClientApp\src\components\Admin\products\AddProductDrawer.jsx
```jsx
import { useState, useEffect } from "react";
import { 
  Drawer, 
  IconButton, 
  Select, 
  MenuItem, 
  Button, 
  Box, 
  CircularProgress, 
  InputBase, 
  Typography,
  Tabs,
  Tab,
  TextField
} from "@mui/material";
import { Close } from "@mui/icons-material";
import { useForm, useFieldArray } from "react-hook-form";
import axios from "axios";

const ProductDrawer = ({ isOpen, onClose, onAddProduct }) => {
  const { register, handleSubmit, reset, control } = useForm({
    defaultValues: {
      name: "",
      description: "",
      categoryId: "",
      brandId: "",
      images: [],
      variants: [],
    },
  });

  const [tabValue, setTabValue] = useState(0); // 0: Upload, 1: URL
  const [localImages, setLocalImages] = useState([]);
  const [imageUrls, setImageUrls] = useState([""]); // Mảng các URL ảnh
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [imageError, setImageError] = useState("");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [categoriesRes, brandsRes] = await Promise.all([
          axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`),
          axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
        ]);
        setCategories(categoriesRes.data.$values || categoriesRes.data || []);
        setBrands(brandsRes.data.$values || brandsRes.data || []);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
    fetchData();
  }, []);

  // Xử lý tải ảnh từ máy
  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    if (!files.length) return;

    const newImages = files.map((file) => ({
      file,
      preview: URL.createObjectURL(file),
      isPrimary: localImages.length === 0,
    }));

    setLocalImages((prev) => [...prev, ...newImages]);
  };

  // Xử lý thêm URL ảnh
  const handleAddUrlField = () => {
    setImageUrls([...imageUrls, ""]);
  };

  const handleUrlChange = (index, value) => {
    const newUrls = [...imageUrls];
    newUrls[index] = value;
    setImageUrls(newUrls);
  };

  const handleRemoveUrl = (index) => {
    const newUrls = imageUrls.filter((_, i) => i !== index);
    setImageUrls(newUrls);
  };

  const onSubmit = async (data) => {
    try {
      let uploadedImages = [];
      
      // Xử lý ảnh tùy theo tab đang chọn
      if (tabValue === 0) {
        // Tab Upload ảnh
        if (localImages.length === 0) {
          setImageError("Vui lòng chọn ít nhất một ảnh");
          return;
        }

        uploadedImages = await Promise.all(
          localImages.map(async (img) => {
            const formData = new FormData();
            formData.append("file", img.file);
            const response = await axios.post(
              `${process.env.REACT_APP_API_BASE_URL}/api/upload`, 
              formData, 
              { headers: { "Content-Type": "multipart/form-data" } }
            );
            return { 
              imageUrl: response.data.imageUrl, 
              isPrimary: img.isPrimary 
            };
          })
        );
      } else {
        // Tab URL ảnh
        const validUrls = imageUrls.filter(url => url.trim() !== "");
        if (validUrls.length === 0) {
          setImageError("Vui lòng nhập ít nhất một URL ảnh");
          return;
        }

        uploadedImages = validUrls.map((url, index) => ({
          imageUrl: url,
          isPrimary: index === 0 // Đặt ảnh đầu tiên là primary
        }));
      }

      const productData = {
        ...data,
        categoryId: parseInt(data.categoryId),
        brandId: parseInt(data.brandId),
        images: uploadedImages,
        variants: data.variants.map((variant) => ({
          ...variant,
          price: parseFloat(variant.price),
          discountPrice: variant.discountPrice ? parseFloat(variant.discountPrice) : null,
          stockQuantity: parseInt(variant.stockQuantity) || 0,
        })),
      };

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/Products`, 
        productData
      );
      
      onAddProduct(response.data);
      reset();
      setLocalImages([]);
      setImageUrls([""]);
      onClose();
    } catch (error) {
      console.error("Error adding product:", error);
    }
  };

  return (
    <Drawer anchor="right" open={isOpen} onClose={onClose} BackdropProps={{ invisible: false }}>
      <Box sx={{ width: 400, p: 3, bgcolor: "background.default", height: "100%" }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Box fontWeight="bold">Thêm sản phẩm</Box>
          <IconButton onClick={onClose}>
            <Close />
          </IconButton>
        </Box>

        <form onSubmit={handleSubmit(onSubmit)}>
          {/* Các trường thông tin sản phẩm (giữ nguyên) */}
          <Box mt={2} p={2} border="1px solid black" borderRadius={2}>
            <Box mb={1} fontWeight="bold">Tên sản phẩm</Box>
            <InputBase {...register("name", { required: true })} fullWidth required placeholder="Nhập tên sản phẩm" />
          </Box>

          <Box mt={2} p={2} border="1px solid black" borderRadius={2}>
            <Box mb={1} fontWeight="bold">Mô tả</Box>
            <InputBase {...register("description", { required: true })} fullWidth required multiline rows={3} placeholder="Nhập mô tả sản phẩm" />
          </Box>

          <Box mt={2} p={2} border="1px solid black" borderRadius={2}>
            <Box mb={1} fontWeight="bold">Danh mục</Box>
            <Select {...register("categoryId", { required: true })} fullWidth displayEmpty>
              <MenuItem value="">Chọn danh mục</MenuItem>
              {categories.map((cat) => (
                <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>
              ))}
            </Select>
          </Box>

          <Box mt={2} p={2} border="1px solid black" borderRadius={2}>
            <Box mb={1} fontWeight="bold">Thương hiệu</Box>
            <Select {...register("brandId", { required: true })} fullWidth displayEmpty>
              <MenuItem value="">Chọn thương hiệu</MenuItem>
              {brands.map((brand) => (
                <MenuItem key={brand.id} value={brand.id}>{brand.name}</MenuItem>
              ))}
            </Select>
          </Box>

          {/* Phần chọn ảnh với Tab */}
          <Box mt={2} p={2} border="1px solid black" borderRadius={2}>
            <Box mb={1} fontWeight="bold">Ảnh sản phẩm</Box>
            
            <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
              <Tab label="Tải ảnh lên" />
              <Tab label="Nhập URL" />
            </Tabs>
            
            {tabValue === 0 ? (
              // Tab Upload ảnh
              <Box mt={2}>
                <input 
                  type="file" 
                  multiple 
                  accept="image/*" 
                  onChange={handleImageUpload} 
                />
                <Box mt={2} display="flex" flexWrap="wrap" gap={2}>
                  {localImages.map((img, index) => (
                    <Box key={index} position="relative">
                      <img src={img.preview} alt="Preview" width={100} height={100} style={{ objectFit: 'cover' }} />
                      <Button 
                        size="small" 
                        color="error"
                        onClick={() => setLocalImages(localImages.filter((_, i) => i !== index))}
                        sx={{ position: 'absolute', top: 0, right: 0 }}
                      >
                        X
                      </Button>
                    </Box>
                  ))}
                </Box>
              </Box>
            ) : (
              // Tab URL ảnh
              <Box mt={2}>
                {imageUrls.map((url, index) => (
                  <Box key={index} display="flex" alignItems="center" mb={1}>
                    <TextField
                      fullWidth
                      value={url}
                      onChange={(e) => handleUrlChange(index, e.target.value)}
                      placeholder="Nhập URL ảnh"
                    />
                    {imageUrls.length > 1 && (
                      <IconButton onClick={() => handleRemoveUrl(index)}>
                        <Close fontSize="small" />
                      </IconButton>
                    )}
                  </Box>
                ))}
                <Button onClick={handleAddUrlField} variant="outlined" sx={{ mt: 1 }}>
                  Thêm URL khác
                </Button>
              </Box>
            )}
            
            {imageError && (
              <Typography color="error" mt={1}>{imageError}</Typography>
            )}
          </Box>

          <Box mt={3} display="flex" justifyContent="flex-end">
            <Button type="submit" variant="contained" sx={{ mt: 2, bgcolor: "black", color: "white", borderRadius: 2 }}>
              Thêm Sản phẩm
            </Button>
          </Box>
        </form>
      </Box>
    </Drawer>
  );
};

export default ProductDrawer;
```

### ClientApp\src\components\Admin\products\AddSpecificationDrawer.jsx
```jsx
import React, { useState, useEffect, useCallback, useMemo } from "react";
import { message } from 'antd';
import { 
  Drawer, Button, Box, Typography, IconButton, 
  TextField, FormControlLabel, Checkbox,
  CircularProgress, Alert, Dialog,
  DialogActions, DialogContent, DialogContentText, DialogTitle,
  Skeleton, Fade
} from "@mui/material";
import { X, Trash, Check, Plus } from "lucide-react";
import axios from "axios";

// Constants
const API_BASE_URL = `${process.env.REACT_APP_API_BASE_URL}/api/Specifications`;
const CATEGORY_ENDPOINTS = {
  1: "PhoneSpecifications",
  2: "LaptopSpecifications",
  3: "HeadphoneSpecifications"
};

const CATEGORY_NAMES = {
  1: "Điện thoại",
  2: "Laptop",
  3: "Tai nghe"
};

const COMMON_FIELDS = [
  { name: "weight", label: "Trọng lượng" }
];

const CATEGORY_FIELDS = {
  1: [
    { name: "screenSize", label: "Kích thước màn hình" },
    { name: "resolution", label: "Độ phân giải" },
    { name: "screenType", label: "Loại màn hình" },
    { name: "cpuModel", label: "Model CPU" },
    { name: "cpuCores", label: "Số nhân CPU", type: "number" },
    { name: "ram", label: "RAM" },
    { name: "internalStorage", label: "Dung lượng lưu trữ" },
    { name: "frontCamera", label: "Camera trước" },
    { name: "rearCamera", label: "Camera sau" },
    { name: "batteryCapacity", label: "Dung lượng pin" },
    { name: "supportsNFC", label: "Hỗ trợ NFC", type: "checkbox" },
  ],
  2: [
    { name: "cpuType", label: "Loại CPU" },
    { name: "cpuNumberOfCores", label: "Số nhân CPU", type: "number" },
    { name: "ram", label: "RAM" },
    { name: "maxRAMSupport", label: "Hỗ trợ RAM tối đa" },
    { name: "ssdStorage", label: "Dung lượng SSD" },
    { name: "screenSize", label: "Kích thước màn hình" },
    { name: "resolution", label: "Độ phân giải" },
    { name: "refreshRate", label: "Tần số quét" },
    { name: "supportsTouch", label: "Hỗ trợ cảm ứng", type: "checkbox" },
  ],
  3: [
    { name: "type", label: "Loại tai nghe" },
    { name: "connectionType", label: "Loại kết nối" },
    { name: "port", label: "Cổng" },
  ]
};

const AddSpecificationDrawer = ({ open, onClose, product }) => {
  // State management
  const [specification, setSpecification] = useState(null);
  const [loadingState, setLoadingState] = useState({
    fetch: false,
    submit: false,
    delete: false
  });
  const [notification, setNotification] = useState({
    error: null,
    success: null
  });
  const [formData, setFormData] = useState({});
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [specToDelete, setSpecToDelete] = useState(null);

  // Memoized values
  const formFields = useMemo(() => {
    if (!product?.categoryId) return COMMON_FIELDS;
    return [...COMMON_FIELDS, ...(CATEGORY_FIELDS[product.categoryId] || [])];
  }, [product]);

  const endpoint = useMemo(() => {
    return product?.categoryId ? CATEGORY_ENDPOINTS[product.categoryId] : null;
  }, [product]);

  // API calls
  const fetchSpecification = useCallback(async () => {
    if (!endpoint || !product?.id) return;
    
    try {
      setLoadingState(prev => ({ ...prev, fetch: true }));
      setNotification({ error: null, success: null });

      const response = await axios.get(
        `${API_BASE_URL}/${endpoint}/product/${product.id}`
      );
      
      if (response.data) {
        setSpecification(response.data);
        setFormData(response.data);
      }
    } catch (error) {
      if (error.response?.status !== 404) {
        console.error("Fetch specification failed:", error);
        setNotification(prev => ({
          ...prev,
          error: error.response?.data || "Không thể tải thông số kỹ thuật"
        }));
      }
    } finally {
      setLoadingState(prev => ({ ...prev, fetch: false }));
    }
  }, [endpoint, product]);


const handleSubmit = useCallback(async () => {
  if (!endpoint || !product?.id) return;

  try {
    setLoadingState(prev => ({ ...prev, submit: true }));
    setNotification({ error: null, success: null });

    const payload = { ...formData, productId: product.id };
    const url = `${API_BASE_URL}/${endpoint}`;

    if (specification) {
      await axios.put(`${url}/${specification.id}`, payload);
      message.success('Cập nhật thông số thành công!');
    } else {
      await axios.post(url, payload);
      message.success('Thêm thông số thành công!');
    }

    setTimeout(onClose, 2000);
  } catch (error) {
    console.error("Lưu thông số thất bại:", error);
    message.error(error.response?.data || "Đã xảy ra lỗi khi lưu thông số");
  } finally {
    setLoadingState(prev => ({ ...prev, submit: false }));
  }
}, [endpoint, formData, specification, product, onClose]);
  
  const handleDelete = useCallback(async () => {
    if (!endpoint || !specToDelete?.id) return;

    try {
      setLoadingState(prev => ({ ...prev, delete: true }));
      setNotification({ error: null, success: null });

      await axios.delete(`${API_BASE_URL}/${endpoint}/${specToDelete.id}`);
      setNotification({ success: "Xóa thông số thành công!", error: null });
      setDeleteDialogOpen(false);

      setTimeout(onClose, 2000);
    } catch (error) {
      console.error("Delete specification failed:", error);
      setNotification(prev => ({
        ...prev,
        error: "Không thể xóa thông số kỹ thuật"
      }));
    } finally {
      setLoadingState(prev => ({ ...prev, delete: false }));
    }
  }, [endpoint, specToDelete, onClose]);

  // Effects
  useEffect(() => {
    if (open && product) {
      fetchSpecification();
    } else {
      setSpecification(null);
      setFormData({});
      setNotification({ error: null, success: null });
    }
  }, [open, product, fetchSpecification]);

  // Event handlers
  const handleInputChange = useCallback((e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  }, []);

  const handleDeleteClick = useCallback(() => {
    setSpecToDelete(specification);
    setDeleteDialogOpen(true);
  }, [specification]);

  // Render helpers
  const renderFormFields = useCallback(() => (
    <Box sx={{ mt: 2 }}>
      {formFields.map((field) => (
        <Box key={field.name} sx={{ mb: 2 }}>
          {field.type === 'checkbox' ? (
            <FormControlLabel
              control={
                <Checkbox
                  name={field.name}
                  checked={formData[field.name] || false}
                  onChange={handleInputChange}
                />
              }
              label={field.label}
            />
          ) : (
            <TextField
              fullWidth
              label={field.label}
              name={field.name}
              value={formData[field.name] || ''}
              onChange={handleInputChange}
              type={field.type || 'text'}
              variant="outlined"
              size="small"
            />
          )}
        </Box>
      ))}
    </Box>
  ), [formFields, formData, handleInputChange]);

  const renderProductInfo = useCallback(() => (
    product && (
      <Box sx={{ mb: 3, p: 2, bgcolor: '#f5f5f5', borderRadius: 1 }}>
        <Typography variant="subtitle1">
          <b>Sản phẩm:</b> {product.name}
        </Typography>
        <Typography variant="subtitle1">
          <b>Danh mục:</b> {CATEGORY_NAMES[product.categoryId] || 'Khác'}
        </Typography>
      </Box>
    )
  ), [product]);

  const renderSkeletonLoader = useCallback(() => (
    <Box sx={{ flexGrow: 1 }}>
      {Array.from({ length: 5 }).map((_, index) => (
        <Skeleton key={index} variant="rectangular" height={56} sx={{ mb: 2 }} />
      ))}
    </Box>
  ), []);

  return (
    <Drawer 
      anchor="right" 
      open={open} 
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: { xs: '100%', sm: 600 },
          boxSizing: 'border-box',
        }
      }}
    >
      <Box
        sx={{
          p: 3,
          bgcolor: "background.paper",
          height: "100%",
          display: "flex",
          flexDirection: "column",
          overflow: 'auto'
        }}
      >
        {/* Header */}
        <Box 
          display="flex" 
          justifyContent="space-between" 
          alignItems="center" 
          mb={3}
          sx={{
            borderBottom: '1px solid',
            borderColor: 'divider',
            pb: 2
          }}
        >
          <Typography variant="h5" fontWeight="bold" color="primary">
            {specification ? "Thông số kỹ thuật" : "Thêm thông số kỹ thuật"}
          </Typography>
          <IconButton 
            onClick={onClose}
            sx={{
              color: 'text.secondary',
              '&:hover': { backgroundColor: 'action.hover' }
            }}
          >
            <X size={24} />
          </IconButton>
        </Box>

        {/* Loading state */}
        <Fade in={loadingState.fetch && !specification} unmountOnExit>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'center', 
            alignItems: 'center',
            flexGrow: 1,
            minHeight: '300px'
          }}>
            <CircularProgress color="primary" size={60} thickness={4} />
          </Box>
        </Fade>

        {!loadingState.fetch && (
          <>
            {/* Product info */}
            {renderProductInfo()}

            {/* Notifications */}
            <Box sx={{ my: 2 }}>
              {notification.error && (
                <Alert 
                  severity="error" 
                  onClose={() => setNotification(prev => ({ ...prev, error: null }))}
                  sx={{ mb: 2 }}
                >
                  {notification.error}
                </Alert>
              )}

              {notification.success && (
                <Alert 
                  severity="success" 
                  onClose={() => setNotification(prev => ({ ...prev, success: null }))}
                  sx={{ mb: 2 }}
                >
                  {notification.success}
                </Alert>
              )}
            </Box>

            {/* Form content */}
            <Box sx={{ flexGrow: 1 }}>
              {loadingState.fetch ? renderSkeletonLoader() : renderFormFields()}
            </Box>

            {/* Action buttons */}
            <Box 
              sx={{ 
                mt: 4,
                pt: 2,
                borderTop: '1px solid',
                borderColor: 'divider',
                display: 'flex',
                gap: 2,
                justifyContent: 'flex-end'
              }}
            >
              {specification ? (
                <>
                  <Button
                    variant="outlined"
                    color="error"
                    startIcon={<Trash />}
                    onClick={handleDeleteClick}
                    sx={{ mr: 'auto' }}
                  >
                    Xóa
                  </Button>
                  <Button
                    variant="contained"
                    startIcon={loadingState.submit ? 
                      <CircularProgress size={20} color="inherit" /> : <Check />}
                    onClick={handleSubmit}
                    disabled={loadingState.submit}
                    sx={{
                      minWidth: '120px',
                      '& .MuiCircularProgress-root': { marginRight: '8px' }
                    }}
                  >
                    {loadingState.submit ? 'Đang xử lý...' : 'Cập nhật'}
                  </Button>
                </>
              ) : (
                <Button
                  variant="contained"
                  startIcon={loadingState.submit ? 
                    <CircularProgress size={20} color="inherit" /> : <Plus />}
                  onClick={handleSubmit}
                  disabled={loadingState.submit}
                  fullWidth
                  size="large"
                  sx={{
                    '& .MuiCircularProgress-root': { marginRight: '8px' }
                  }}
                >
                  {loadingState.submit ? 'Đang thêm...' : 'Thêm thông số'}
                </Button>
              )}
            </Box>
          </>
        )}
      </Box>

      {/* Delete confirmation dialog */}
      <Dialog 
        open={deleteDialogOpen} 
        onClose={() => setDeleteDialogOpen(false)}
        maxWidth="xs"
        fullWidth
      >
        <DialogTitle>Xác nhận xóa</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Bạn có chắc chắn muốn xóa thông số kỹ thuật cho sản phẩm này không?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setDeleteDialogOpen(false)}
            color="inherit"
          >
            Hủy
          </Button>
          <Button 
            onClick={handleDelete} 
            color="error"
            variant="contained"
            disabled={loadingState.delete}
            sx={{
              minWidth: '100px',
              '& .MuiCircularProgress-root': { color: 'white' }
            }}
          >
            {loadingState.delete ? (
              <>
                <CircularProgress size={20} sx={{ mr: 1 }} />
                Đang xóa...
              </>
            ) : 'Xóa'}
          </Button>
        </DialogActions>
      </Dialog>
    </Drawer>
  );
};

export default AddSpecificationDrawer;
```

### ClientApp\src\components\Admin\products\BrandDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer, Button, Box, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from "@mui/material";
import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from "@mui/material";
import { X, Edit, Trash } from "lucide-react";
import axios from "axios";
import BrandModal from "./BrandModal";


const BrandDrawer = ({ open, onClose }) => {
    const [brands, setBrands] = useState([]);
    const [selectedBrand, setSelectedBrand] = useState(null);
    const [modalOpen, setModalOpen] = useState(false);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [brandToDelete, setBrandToDelete] = useState(null);

    useEffect(() => {
        fetchBrands();
    }, []);

    const fetchBrands = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/brands`);
            setBrands(response.data);
        } catch (error) {
            console.error("Failed to fetch brands:", error);
        }
    };

    const handleConfirmDelete = async () => {
    if (!brandToDelete) return;

    try {
        await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/brands/${brandToDelete.id}`);
        await fetchBrands();
        setDeleteDialogOpen(false);
        setBrandToDelete(null);
    } catch (error) {
        console.error("Failed to delete brand:", error);
    }
};


    const handleOpenModal = (brand = null) => {
        setSelectedBrand(brand);
        setModalOpen(true);
    };

    const handleOpenDeleteDialog = (brand) => {
    setBrandToDelete(brand);
    setDeleteDialogOpen(true);
};
    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
            <Box
                sx={{
                    width: 600,
                    p: 3,
                    bgcolor: "white",
                    border: "2px solid black",
                    borderRadius: 3,
                    boxShadow: 3,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                }}
            >
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6" fontWeight="bold">
                        Thương hiệu
                    </Typography>
                    <IconButton onClick={onClose}>
                        <X size={24} />
                    </IconButton>
                </Box>
                <Button variant="contained" sx={{ mb: 2, bgcolor: "black", color: "white", borderRadius: 2 }} onClick={() => handleOpenModal()}>
                    Thêm thương hiệu
                </Button>
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell><b>Thương hiệu</b></TableCell>
                                                                <TableCell><b>Logo</b></TableCell>

                                <TableCell><b>Mô tả</b></TableCell>
                                <TableCell><b>Hành động</b></TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {brands.map((brand) => (
                                <TableRow key={brand.id}>
                                    <TableCell>{brand.name}</TableCell>
                                    <TableCell> <img
    src={
        brand.logo?.startsWith("http")
            ? brand.logo // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${brand.logo}`
    }
    alt={`${brand.name} logo`}
    className="size-10 rounded-full"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/></TableCell>
                                    <TableCell>{brand.description}</TableCell>
                                    
                                    <TableCell>
                                        <IconButton onClick={() => handleOpenModal(brand)}>
                                            <Edit size={20} />
                                        </IconButton>
                                        <IconButton onClick={() => handleOpenDeleteDialog(brand)}>
                                            <Trash size={20} color="red" />
                                        </IconButton>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
            <BrandModal open={modalOpen} onClose={() => setModalOpen(false)} brand={selectedBrand} refreshBrands={fetchBrands} />

             <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
    <DialogTitle>Xác nhận xóa</DialogTitle>
    <DialogContent>
        <DialogContentText>
            Bạn có chắc chắn muốn xóa danh mục <b>{brandToDelete?.name}</b> không? Hành động này không thể hoàn tác.
        </DialogContentText>
    </DialogContent>
    <DialogActions>
        <Button onClick={() => setDeleteDialogOpen(false)} color="primary">
            Hủy
        </Button>
        <Button onClick={handleConfirmDelete} color="error" variant="contained">
            Xóa
        </Button>
    </DialogActions>
</Dialog>
        </Drawer>
    );
};

export default BrandDrawer;
```

### ClientApp\src\components\Admin\products\BrandModal.jsx
```jsx
import React, { useState, useEffect } from "react";
import { 
  Modal, 
  Box, 
  Typography, 
  Button, 
  TextField, 
  IconButton,
  Tabs,
  Tab,
  CircularProgress
} from "@mui/material";
import { X, Upload } from "lucide-react";
import axios from "axios";

const BrandModal = ({ open, onClose, brand, refreshBrands }) => {
  const [brandData, setBrandData] = useState({ 
    name: "", 
    description: "", 
    logo: "" 
  });
  const [tabValue, setTabValue] = useState(0); // 0: URL, 1: Upload
  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState("");
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    if (brand) {
      setBrandData(brand);
      // Nếu brand có logo, mặc định chọn tab URL
      if (brand.logo) setTabValue(0);
    } else {
      setBrandData({ name: "", description: "", logo: "" });
      setLogoFile(null);
      setLogoPreview("");
    }
  }, [brand]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setBrandData({ ...brandData, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    setLogoFile(file);
    setLogoPreview(URL.createObjectURL(file));
    // Clear URL nếu đang ở tab upload
    if (tabValue === 1) {
      setBrandData({...brandData, logo: ""});
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    
    try {
      let finalLogoUrl = brandData.logo;

      // Nếu đang ở tab upload và có file
      if (tabValue === 1 && logoFile) {
        const formData = new FormData();
        formData.append("file", logoFile);
        
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/upload`, 
          formData, 
          { headers: { "Content-Type": "multipart/form-data" } }
        );
        
        finalLogoUrl = response.data.imageUrl;
      }

      const dataToSend = {
        ...brandData,
        logo: finalLogoUrl
      };

      if (brand) {
        await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/brands/${brand.id}`, dataToSend);
      } else {
        await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/brands`, dataToSend);
      }

      refreshBrands();
      onClose();
    } catch (error) {
      console.error("Failed to save brand:", error);
    } finally {
      setUploading(false);
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 400,
          bgcolor: "white",
          p: 3,
          borderRadius: 2,
          boxShadow: 24,
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" fontWeight="bold">
            {brand ? "Chỉnh sửa thương hiệu" : "Thêm thương hiệu"}
          </Typography>
          <IconButton onClick={onClose}>
            <X size={24} />
          </IconButton>
        </Box>
        
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Tên thương hiệu"
            name="name"
            value={brandData.name}
            onChange={handleChange}
            margin="normal"
            required
          />
          
          <TextField
            fullWidth
            label="Mô tả"
            name="description"
            value={brandData.description}
            onChange={handleChange}
            margin="normal"
            multiline
            rows={3}
          />

          <Box mt={2} mb={2}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Logo thương hiệu
            </Typography>
            
            <Tabs 
              value={tabValue} 
              onChange={(e, newValue) => setTabValue(newValue)}
              sx={{ mb: 2 }}
            >
              <Tab label="Nhập URL" />
              <Tab label="Tải lên" />
            </Tabs>
            
            {tabValue === 0 ? (
              // Tab URL
              <TextField
                fullWidth
                label="Logo URL"
                name="logo"
                value={brandData.logo}
                onChange={handleChange}
                placeholder="https://example.com/logo.png"
              />
            ) : (
              // Tab Upload
              <Box>
                <Button
                  component="label"
                  variant="outlined"
                  startIcon={<Upload size={18} />}
                  sx={{ mb: 2 }}
                >
                  Chọn ảnh
                  <input 
                    type="file" 
                    hidden 
                    accept="image/*" 
                    onChange={handleFileChange} 
                  />
                </Button>
                
                {logoPreview && (
                  <Box mt={1} position="relative" width={100}>
                    <img 
                      src={logoPreview} 
                      alt="Logo preview" 
                      style={{ 
                        width: '100%', 
                        height: 'auto',
                        borderRadius: 4
                      }} 
                    />
                    <IconButton
                      size="small"
                      onClick={() => {
                        setLogoFile(null);
                        setLogoPreview("");
                      }}
                      sx={{
                        position: 'absolute',
                        top: -8,
                        right: -8,
                        backgroundColor: 'rgba(0,0,0,0.6)',
                        color: 'white',
                        '&:hover': {
                          backgroundColor: 'rgba(0,0,0,0.8)'
                        }
                      }}
                    >
                      <X size={16} />
                    </IconButton>
                  </Box>
                )}
              </Box>
            )}
          </Box>

          <Button 
            type="submit" 
            variant="contained" 
            fullWidth
            disabled={uploading}
            sx={{ 
              mt: 2, 
              bgcolor: "black", 
              color: "white", 
              borderRadius: 2,
              height: 42
            }}
          >
            {uploading ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              brand ? "Cập nhật" : "Thêm"
            )}
          </Button>
        </form>
      </Box>
    </Modal>
  );
};

export default BrandModal;
```

### ClientApp\src\components\Admin\products\CategoryBrandDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer, Button, Box, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from "@mui/material";
import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from "@mui/material";
import { X, Edit, Trash } from "lucide-react";
import axios from "axios";
import CategoryModal from "./CategoryModal";

const CategoryBrandDrawer = ({ open, onClose }) => {
    const [categories, setCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [modalOpen, setModalOpen] = useState(false);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [categoryToDelete, setCategoryToDelete] = useState(null);

    useEffect(() => {
        fetchCategories();
    }, []);

    const fetchCategories = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
            setCategories(response.data);
        } catch (error) {
            console.error("Failed to fetch categories:", error);
        }
    };

    const handleConfirmDelete = async () => {
    if (!categoryToDelete) return;

    try {
        await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/categories/${categoryToDelete.id}`);
        await fetchCategories();
        setDeleteDialogOpen(false);
        setCategoryToDelete(null);
    } catch (error) {
        console.error("Failed to delete category:", error);
    }
};


    const handleOpenModal = (category = null) => {
        setSelectedCategory(category);
        setModalOpen(true);
    };

    const handleOpenDeleteDialog = (category) => {
    setCategoryToDelete(category);
    setDeleteDialogOpen(true);
};

    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
            <Box
                sx={{
                    width: 600,
                    p: 3,
                    bgcolor: "white",
                    border: "2px solid black",
                    borderRadius: 3,
                    boxShadow: 3,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                }}
            >
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6" fontWeight="bold">
                        Danh mục
                    </Typography>
                    <IconButton onClick={onClose}>
                        <X size={24} />
                    </IconButton>
                </Box>
                <Button variant="contained" sx={{ mb: 2, bgcolor: "black", color: "white", borderRadius: 2 }} onClick={() => handleOpenModal()}>
                    Thêm danh mục
                </Button>
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell><b>Tên danh mục</b></TableCell>
                                <TableCell><b>Mô tả</b></TableCell>
                                <TableCell><b>Hình ảnh</b></TableCell>
                                <TableCell><b>Hành động</b></TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {categories.map((category) => (
                                <TableRow key={category.id}>
                                    <TableCell>{category.name}</TableCell>
                                    <TableCell>{category.description}</TableCell>
                                    <TableCell><img
    src={
        category.image?.startsWith("http")
            ? category.image // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${category.image}`
    }
    alt={`${category.name} logo`}
    className="size-10 rounded-full"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/></TableCell>
                                    <TableCell>
                                        <IconButton onClick={() => handleOpenModal(category)}>
                                            <Edit size={20} />
                                        </IconButton>
                                       <IconButton onClick={() => handleOpenDeleteDialog(category)}>
                                            <Trash size={20} color="red" />
                                        </IconButton>

                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
            <CategoryModal open={modalOpen} onClose={() => setModalOpen(false)} category={selectedCategory} refreshCategories={fetchCategories} />

                <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
    <DialogTitle>Xác nhận xóa</DialogTitle>
    <DialogContent>
        <DialogContentText>
            Bạn có chắc chắn muốn xóa danh mục <b>{categoryToDelete?.name}</b> không? Hành động này không thể hoàn tác.
        </DialogContentText>
    </DialogContent>
    <DialogActions>
        <Button onClick={() => setDeleteDialogOpen(false)} color="primary">
            Hủy
        </Button>
        <Button onClick={handleConfirmDelete} color="error" variant="contained">
            Xóa
        </Button>
    </DialogActions>
</Dialog>
        </Drawer>
    );
};

export default CategoryBrandDrawer;

```

### ClientApp\src\components\Admin\products\CategoryModal.jsx
```jsx
import React, { useState, useEffect } from "react";
import { 
  Modal, 
  Box, 
  Typography, 
  TextField, 
  Button, 
  IconButton,
  Tabs,
  Tab,
  CircularProgress,
  Avatar
} from "@mui/material";
import { X, Upload, Image as ImageIcon } from "lucide-react";
import axios from "axios";

const CategoryModal = ({ open, onClose, category, refreshCategories }) => {
  const [formData, setFormData] = useState({ 
    name: "", 
    description: "", 
    image: "" 
  });
  const [tabValue, setTabValue] = useState(0); // 0: URL, 1: Upload
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState("");
  const [uploading, setUploading] = useState(false);
  const [imageError, setImageError] = useState("");

  useEffect(() => {
    if (category) {
      setFormData({
        name: category.name || "",
        description: category.description || "",
        image: category.image || ""
      });
      // Nếu có ảnh, mặc định chọn tab URL
      if (category.image) setTabValue(0);
    } else {
      setFormData({ name: "", description: "", image: "" });
      setImageFile(null);
      setImagePreview("");
    }
  }, [category]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // Validate file type
    if (!file.type.match('image.*')) {
      setImageError("Chỉ chấp nhận file ảnh");
      return;
    }

    // Validate file size (max 2MB)
    if (file.size > 2 * 1024 * 1024) {
      setImageError("Kích thước ảnh tối đa 2MB");
      return;
    }

    setImageError("");
    setImageFile(file);
    setImagePreview(URL.createObjectURL(file));
    // Clear URL nếu đang ở tab upload
    if (tabValue === 1) {
      setFormData({...formData, image: ""});
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    
    try {
      let finalImageUrl = formData.image;

      // Nếu đang ở tab upload và có file
      if (tabValue === 1 && imageFile) {
        const formData = new FormData();
        formData.append("file", imageFile);
        
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/upload`, 
          formData, 
          { headers: { "Content-Type": "multipart/form-data" } }
        );
        
        finalImageUrl = response.data.imageUrl;
      } else if (tabValue === 0 && !formData.image) {
        setImageError("Vui lòng nhập URL ảnh hoặc tải ảnh lên");
        setUploading(false);
        return;
      }

      const dataToSend = {
        ...formData,
        image: finalImageUrl
      };

      if (category) {
        await axios.put(
          `${process.env.REACT_APP_API_BASE_URL}/api/categories/${category.id}`, 
          { ...dataToSend, id: category.id }
        );
      } else {
        await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/categories`, 
          dataToSend
        );
      }

      await refreshCategories();
      onClose();
    } catch (error) {
      console.error("Failed to save category:", error);
      setImageError("Có lỗi xảy ra khi lưu danh mục");
    } finally {
      setUploading(false);
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 400,
          bgcolor: "white",
          p: 3,
          borderRadius: 2,
          boxShadow: 24,
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" fontWeight="bold">
            {category ? "Chỉnh sửa danh mục" : "Thêm danh mục"}
          </Typography>
          <IconButton onClick={onClose}>
            <X size={24} />
          </IconButton>
        </Box>
        
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Tên danh mục"
            name="name"
            value={formData.name}
            onChange={handleChange}
            margin="normal"
            required
          />
          
          <TextField
            fullWidth
            label="Mô tả"
            name="description"
            value={formData.description}
            onChange={handleChange}
            margin="normal"
            multiline
            rows={3}
          />

          <Box mt={2} mb={2}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Hình ảnh danh mục
            </Typography>
            
            <Tabs 
              value={tabValue} 
              onChange={(e, newValue) => setTabValue(newValue)}
              sx={{ mb: 2 }}
            >
              <Tab label="Nhập URL" icon={<ImageIcon size={16} />} />
              <Tab label="Tải lên" icon={<Upload size={16} />} />
            </Tabs>
            
            {tabValue === 0 ? (
              // Tab URL
              <Box>
                <TextField
                  fullWidth
                  label="Hình ảnh URL"
                  name="image"
                  value={formData.image}
                  onChange={handleChange}
                  placeholder="https://example.com/image.jpg"
                />
                {formData.image && (
                  <Box mt={2} display="flex" justifyContent="center">
                    <Avatar
                      src={formData.image}
                      alt="Preview"
                      sx={{ 
                        width: 100, 
                        height: 100,
                        border: '1px solid #ddd'
                      }}
                      variant="rounded"
                    />
                  </Box>
                )}
              </Box>
            ) : (
              // Tab Upload
              <Box>
                <Button
                  component="label"
                  variant="outlined"
                  startIcon={<Upload size={18} />}
                  fullWidth
                  sx={{ mb: 2 }}
                >
                  Chọn ảnh
                  <input 
                    type="file" 
                    hidden 
                    accept="image/*" 
                    onChange={handleFileChange} 
                  />
                </Button>
                
                {imagePreview && (
                  <Box mt={1} display="flex" flexDirection="column" alignItems="center">
                    <Avatar
                      src={imagePreview}
                      alt="Preview"
                      sx={{ 
                        width: 100, 
                        height: 100,
                        border: '1px solid #ddd',
                        mb: 1
                      }}
                      variant="rounded"
                    />
                    <Button
                      size="small"
                      color="error"
                      variant="outlined"
                      onClick={() => {
                        setImageFile(null);
                        setImagePreview("");
                      }}
                    >
                      Xóa ảnh
                    </Button>
                  </Box>
                )}
              </Box>
            )}
            
            {imageError && (
              <Typography color="error" variant="body2" mt={1}>
                {imageError}
              </Typography>
            )}
          </Box>

          <Button 
            type="submit" 
            variant="contained" 
            fullWidth
            disabled={uploading}
            sx={{ 
              mt: 2,
              height: 42,
              bgcolor: "black", 
              color: "white",
              '&:hover': {
                bgcolor: '#333'
              }
            }}
          >
            {uploading ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              category ? "Cập nhật" : "Thêm"
            )}
          </Button>
        </form>
      </Box>
    </Modal>
  );
};

export default CategoryModal;
```

### ClientApp\src\components\Admin\products\EditProductDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import Drawer from "@mui/material/Drawer";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import MenuItem from "@mui/material/MenuItem";
import IconButton from "@mui/material/IconButton";
import DeleteIcon from "@mui/icons-material/Delete";
import AddIcon from "@mui/icons-material/Add";
import axios from "axios";

const EditProductDrawer = ({ isOpen, onClose, product, onUpdateProduct }) => {
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    categoryId: "",
    brandId: "",
    images: [{ imageUrl: "", isPrimary: false }],
    variants: [
      {
        color: "",
        storage: "",
        price: "",
        discountPrice: "",
        stockQuantity: "",
        flashSaleStart: "",
        flashSaleEnd: "",
      },
    ],
  });
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Khởi tạo formData từ product
  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || "",
        description: product.description || "",
        categoryId: product.categoryId || "",
        brandId: product.brandId || "",
        images:
          product.images?.length > 0
            ? product.images.map((img) => ({
                imageUrl: img.imageUrl || "",
                isPrimary: img.isPrimary || false,
              }))
            : [{ imageUrl: "", isPrimary: false }],
        variants:
          product.variants?.length > 0
            ? product.variants.map((variant) => ({
                color: variant.color || "",
                storage: variant.storage || "",
                price: variant.price || "",
                discountPrice: variant.discountPrice || "",
                stockQuantity: variant.stockQuantity || "",
                flashSaleStart: variant.flashSaleStart || "",
                flashSaleEnd: variant.flashSaleEnd || "",
              }))
            : [
                {
                  color: "",
                  storage: "",
                  price: "",
                  discountPrice: "",
                  stockQuantity: "",
                  flashSaleStart: "",
                  flashSaleEnd: "",
                },
              ],
      });
    }
  }, [product]);

  // Lấy danh sách categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get(
          "${process.env.REACT_APP_API_BASE_URL}/api/categories"
        );
        setCategories(response.data.$values || response.data || []);
      } catch (error) {
        console.error("Lỗi khi lấy danh mục:", error);
        setCategories([]);
      }
    };
    fetchCategories();
  }, []);

  // Lấy danh sách brands
  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/brands`);
        setBrands(response.data.$values || response.data || []);
      } catch (error) {
        console.error("Lỗi khi lấy thương hiệu:", error);
        setBrands([]);
      }
    };
    fetchBrands();
  }, []);

  
  // Xử lý thay đổi giá trị trong form
  const handleChange = (e, index, type) => {
    const { name, value } = e.target;
    if (type === "variant" && index !== undefined) {
      setFormData((prev) => {
        const newVariants = [...prev.variants];
        newVariants[index] = { ...newVariants[index], [name]: value };
        return { ...prev, variants: newVariants };
      });
    } else if (type === "image" && index !== undefined) {
      setFormData((prev) => {
        const newImages = [...prev.images];
        newImages[index] = { ...newImages[index], [name]: value };
        return { ...prev, images: newImages };
      });
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const addVariant = () => {
    setFormData((prev) => ({
      ...prev,
      variants: [
        ...prev.variants,
        {
          color: "",
          storage: "",
          price: "",
          discountPrice: "",
          stockQuantity: "",
          flashSaleStart: "",
          flashSaleEnd: "",
        },
      ],
    }));
  };

  const removeVariant = (index) => {
    setFormData((prev) => ({
      ...prev,
      variants: prev.variants.filter((_, i) => i !== index),
    }));
  };

  const addImage = () => {
    setFormData((prev) => ({
      ...prev,
      images: [...prev.images, { imageUrl: "", isPrimary: false }],
    }));
  };

  const removeImage = (index) => {
    setFormData((prev) => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index),
    }));
  };

  // Gửi dữ liệu cập nhật lên API
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const updatedData = {
        name: formData.name,
        description: formData.description,
        categoryId: parseInt(formData.categoryId), // Chuyển sang số
        brandId: parseInt(formData.brandId), // Chuyển sang số
        images: formData.images.map((img) => ({
          imageUrl: img.imageUrl,
          isPrimary: img.isPrimary || false, // Đảm bảo có giá trị
        })),
        variants: formData.variants.map((variant) => ({
          color: variant.color,
          storage: variant.storage,
          price: parseFloat(variant.price) || 0, // Chuyển sang số, mặc định 0 nếu rỗng
          discountPrice: variant.discountPrice
            ? parseFloat(variant.discountPrice)
            : null,
          stockQuantity: parseInt(variant.stockQuantity) || 0, // Chuyển sang số, mặc định 0 nếu rỗng
          flashSaleStart: variant.flashSaleStart || null,
          flashSaleEnd: variant.flashSaleEnd || null,
        })),
      };

      console.log("Submitting data:", updatedData); // Debug dữ liệu gửi lên

      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/products/${product.id}`,
        updatedData,
        { headers: { "Content-Type": "application/json" } }
      );

      if (response.status === 204 || response.status === 200) {
        onUpdateProduct({ ...product, ...updatedData }); // Cập nhật sản phẩm trong state cha
        onClose();
      }
    } catch (error) {
      setError(
        "Lỗi khi cập nhật sản phẩm: " +
          (error.response?.data?.message || error.message)
      );
      console.error("Lỗi khi cập nhật sản phẩm:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Drawer anchor="right" open={isOpen} onClose={onClose}>
      <div style={{ width: 500, padding: 20 }}>
        <h1>Chỉnh sửa thông tin sản phẩm</h1>
        {error && <p style={{ color: "red" }}>{error}</p>}
        <form onSubmit={handleSubmit}>
          <TextField
            label="Tên sản phẩm"
            name="name"
            value={formData.name}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            label="Mô tả"
            name="description"
            value={formData.description}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          />
          <TextField
            label="Danh mục"
            name="categoryId"
            select
            value={formData.categoryId}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          >
            {categories.length > 0 ? (
              categories.map((cat) => (
                <MenuItem key={cat.id} value={cat.id}>
                  {cat.name}
                </MenuItem>
              ))
            ) : (
              <MenuItem disabled>Danh mục đang trống</MenuItem>
            )}
          </TextField>
          <TextField
            label="Thương hiệu"
            name="brandId"
            select
            value={formData.brandId}
            onChange={handleChange}
            fullWidth
            margin="normal"
            required
          >
            {brands.length > 0 ? (
              brands.map((brand) => (
                <MenuItem key={brand.id} value={brand.id}>
                  {brand.name}
                </MenuItem>
              ))
            ) : (
              <MenuItem disabled>Thương hiệu đang trống</MenuItem>
            )}
          </TextField>

          <h3>Images</h3>
          {formData.images.map((image, index) => (
            <div
              key={index}
              style={{
                display: "flex",
                alignItems: "center",
                marginBottom: 10,
              }}
            >
              <TextField
                label="Image URL"
                name="imageUrl"
                value={image.imageUrl}
                onChange={(e) => handleChange(e, index, "image")}
                fullWidth
                margin="normal"
                required
              />
              <IconButton onClick={() => removeImage(index)} color="error">
                <DeleteIcon />
              </IconButton>
            </div>
          ))}
          <Button
            variant="outlined"
            startIcon={<AddIcon />}
            onClick={addImage}
            style={{ marginBottom: 20 }}
          >
            Thêm ảnh
          </Button>

          <h3>Biến thể</h3>
          {formData.variants.map((variant, index) => (
            <div
              key={index}
              style={{
                border: "1px solid #ccc",
                padding: 10,
                marginBottom: 10,
              }}
            >
              <TextField
                label="Màu sắc"
                name="color"
                value={variant.color}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                required
              />
              <TextField
                label="Dung lượng lưu trử"
                name="storage"
                value={variant.storage}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                required
              />
              <TextField
                label="Giá cả"
                name="price"
                type="number"
                value={variant.price}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                required
              />
              <TextField
                label="Giá cả sau khi giảm"
                name="discountPrice"
                type="number"
                value={variant.discountPrice}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
              />
              <TextField
                label="Số lượng tồn kho"
                name="stockQuantity"
                type="number"
                value={variant.stockQuantity}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                required
              />
              <TextField
                label="Thời gian bắt đầu flash sale"
                name="flashSaleStart"
                type="datetime-local"
                value={variant.flashSaleStart}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                InputLabelProps={{ shrink: true }}
              />
              <TextField
                label="Thời gian kết thúc flash sale"
                name="flashSaleEnd"
                type="datetime-local"
                value={variant.flashSaleEnd}
                onChange={(e) => handleChange(e, index, "variant")}
                fullWidth
                margin="normal"
                InputLabelProps={{ shrink: true }}
              />
              <IconButton onClick={() => removeVariant(index)} color="error">
                <DeleteIcon />
              </IconButton>
            </div>
          ))}
          <Button
            variant="outlined"
            startIcon={<AddIcon />}
            onClick={addVariant}
            style={{ marginBottom: 20 }}
          >
            Add Variant
          </Button>

          <Button
            type="submit"
            variant="contained"
            color="primary"
            disabled={loading}
            fullWidth
          >
            {loading ? "Saving..." : "Save"}
          </Button>
        </form>
      </div>
    </Drawer>
  );
};

export default EditProductDrawer;

```

### ClientApp\src\components\Admin\products\ProductsTable.jsx
```jsx
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import { Edit, Search, Trash2, Settings, Filter, X } from "lucide-react"; // Thêm Settings icon
import { useState, useEffect } from "react";
import ProductDrawer from "./AddProductDrawer";
import EditProductDrawer from "./EditProductDrawer";
import AddSpecificationDrawer from "./AddSpecificationDrawer"; // Thêm Drawer mới
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import Button from "@mui/material/Button";
import CategoryBrandDrawer from "./CategoryBrandDrawer";
import BrandDrawer from "./BrandDrawer";
import Pagination from "@mui/material/Pagination";
import VoucherDrawer from "./VoucherDrawer"; // Thêm VoucherDrawer
import { Category } from "@mui/icons-material";

const ProductsTable = () => {
    const [searchTerm, setSearchTerm] = useState("");
    const [brands, setBrands] = useState([]); // Thêm state cho brands
    const [categories, setCategories] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);
    const [isEditDrawerOpen, setIsEditDrawerOpen] = useState(false);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
    const [productToDelete, setProductToDelete] = useState(null);
    const [isCategoryBrandDrawerOpen, setIsCategoryBrandDrawerOpen] = useState(false);
    const [isBrandDrawerOpen, setIsBrandDrawerOpen] = useState(false);
    const [isVoucherDrawerOpen, setIsVoucherDrawerOpen] = useState(false); // Thêm state cho VoucherDrawer
    const [isSpecDrawerOpen, setIsSpecDrawerOpen] = useState(false);
    const [selectedProductForSpec, setSelectedProductForSpec] = useState(null);

    const [page, setPage] = useState(1);
    const productsPerPage = 11;
    const handleAddSpecification = (product) => {
    setSelectedProductForSpec(product);
    setIsSpecDrawerOpen(true);
    };

    // Thêm các state mới cho bộ lọc
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const [filters, setFilters] = useState({
        brandId: '',
        categoryId: '',
        minPrice: '',
        maxPrice: ''
    });


    // Logic gọi API đã chỉnh sửa
    useEffect(() => {
        const fetchData = async () => {
            try {
                const [productsRes, brandsRes, categoriesRes] = await Promise.all([
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`)
                ]);

                const productsData = await productsRes.json();
                const brandsData = await brandsRes.json();
                const categoriesData = await categoriesRes.json();

                setProducts(productsData);
                setFilteredProducts(productsData);
                setBrands(brandsData.$values || brandsData || []);
                setCategories(categoriesData.$values || categoriesData || []);
            } catch (error) {
                console.error("Fetch error:", error);
                toast.error("Lỗi khi tải dữ liệu");
            }
        };

        fetchData();
    }, []);
    

    // Hàm áp dụng bộ lọc
    const applyFilters = () => {
        let filtered = [...products];
        
        // Lọc theo brand
        if (filters.brandId) {
            filtered = filtered.filter(product => product.brandId == filters.brandId);
        }
        
        // Lọc theo category
        if (filters.categoryId) {
            filtered = filtered.filter(product => product.categoryId == filters.categoryId);
        }
        
        // Lọc theo giá
        if (filters.minPrice) {
            filtered = filtered.filter(product => 
                product.variants?.[0]?.price >= Number(filters.minPrice)
            );
        }
        
        if (filters.maxPrice) {
            filtered = filtered.filter(product => 
                product.variants?.[0]?.price <= Number(filters.maxPrice)
            );
        }
        
        setFilteredProducts(filtered);
        setPage(1); // Reset về trang đầu tiên khi lọc
        setIsFilterOpen(false);
    };

    // Hàm reset bộ lọc
    const resetFilters = () => {
        setFilters({
            brandId: '',
            categoryId: '',
            minPrice: '',
            maxPrice: ''
        });
        setFilteredProducts(products);
        setPage(1);
    };

   const handleSearch = async (e) => {
    const term = e.target.value;
    setSearchTerm(term);
    setPage(1); // Reset về trang đầu tiên khi tìm kiếm

    if (term.trim() === "") {
        setFilteredProducts(products); // Hiển thị lại danh sách gốc thay vì xóa hết
        return;
    }

    try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/search?keyword=${encodeURIComponent(term)}`);
        if (!response.ok) throw new Error("Không tìm thấy sản phẩm nào.");
        
        const data = await response.json();
        setFilteredProducts(data);
    } catch (error) {
        console.error("Lỗi khi tìm kiếm sản phẩm:", error);
        setFilteredProducts([]); // Nếu lỗi, hiển thị danh sách trống
    }
};


    const getBrandName = (brandId) => {
    const brand = brands.find((b) => b.id === brandId);
    return brand ? brand.name : "Không xác định";
};

    const getCategoryName = (categoryId) => {
    const category = categories.find((c) => c.id === categoryId);
    return category ? category.name : "Không xác định";
};
    
    const handleAddProduct = (newProduct) => {
        setProducts([...products, newProduct]);
        setFilteredProducts([...products, newProduct]);
    };

    const handleEditProduct = (product) => {
        setSelectedProduct(product);
        setIsEditDrawerOpen(true);
    };

    const handleUpdateProduct = (updatedProduct) => {
        const updatedProducts = products.map((product) =>
            product.id === updatedProduct.id ? updatedProduct : product
        );
        setProducts(updatedProducts);
        setFilteredProducts(updatedProducts);
    };

    const handleDeleteProduct = (product) => {
        setProductToDelete(product);
        setIsDeleteDialogOpen(true);
    };

    const confirmDeleteProduct = async () => {
    if (!productToDelete) return;
    setIsLoading(true);
    try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/${productToDelete.id}`, {
            method: "DELETE",
        });

        if (response.ok) {
            const updatedProducts = products.filter((p) => p.id !== productToDelete.id);
            setProducts(updatedProducts);
            setFilteredProducts(updatedProducts); // Cập nhật luôn danh sách tìm kiếm
            toast.success("Sản phẩm đã được xóa thành công!");
            setIsDeleteDialogOpen(false);
            setProductToDelete(null);
        } else {
            const errorMessage = await response.text();
            toast.error(`Lỗi: ${errorMessage || "Không thể xóa sản phẩm"}`);
        }
    } catch (error) {
        toast.error("Lỗi khi xóa sản phẩm, vui lòng thử lại!");
        console.error("Error deleting product:", error);
    } finally {
        setIsLoading(false);
    }
};


    const handlePageChange = (event, value) => {
        setPage(value);
    };

    const indexOfLastProduct = page * productsPerPage;
    const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
    const currentProducts = filteredProducts.slice(
        indexOfFirstProduct,
        indexOfLastProduct
    );

    return (
        <motion.div
            className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700 mb-8"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
        >
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-100">
                    Danh sách sản phẩm
                </h2>
                <div className="relative">
                    <input
                        type="text"
                        placeholder="Tìm kiếm sản phẩm..."
                        className="bg-gray-700 text-white placeholder-gray-400 rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        onChange={handleSearch}
                        value={searchTerm}
                    />
                    <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
                </div>
                <button
                    className="text-indigo-400 hover:text-indigo-300 mr-2 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                    onClick={() => setIsDrawerOpen(true)}
                >
                    Thêm Sản Phẩm
                </button>
                <button
                    className="text-indigo-400 hover:text-indigo-300 mr-2 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                    onClick={() => setIsCategoryBrandDrawerOpen(true)}
                >
                    Danh Mục
                </button>
                <button
                    className="text-indigo-400 hover:text-indigo-300 mr-2 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                    onClick={() => setIsBrandDrawerOpen(true)}
                >
                    Thương hiệu
                </button>
                <button
                    className="text-indigo-400 hover:text-indigo-300 mr-2 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                    onClick={() => setIsVoucherDrawerOpen(true)} // Thêm nút mở VoucherDrawer
                >
                    Voucher
                </button>
                
            </div>
            {/* Thêm nút mở bộ lọc */}
            <div className="flex justify-between items-center mb-4">
                <button 
                    className="flex items-center gap-2 text-indigo-400 hover:text-indigo-300 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                    onClick={() => setIsFilterOpen(!isFilterOpen)}
                >
                    {isFilterOpen ? <X size={18} /> : <Filter size={18} />}
                    {isFilterOpen ? 'Đóng lọc' : 'Lọc sản phẩm'}
                </button>
                
                {/* Hiển thị số sản phẩm đang hiển thị */}
                <span className="text-gray-400 text-sm">
                    Hiển thị {filteredProducts.length} sản phẩm
                </span>
            </div>

            {/* Panel bộ lọc */}
            {isFilterOpen && (
                <motion.div 
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    className="bg-gray-700 p-4 rounded-lg mb-4"
                >
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                        {/* Lọc theo brand */}
                        <div>
                            <label className="block text-gray-400 text-sm mb-1 whitespace-nowrap">Thương hiệu</label>
                            <select
                                className="w-full bg-gray-800 text-white rounded p-2"
                                value={filters.brandId}
                                onChange={(e) => setFilters({...filters, brandId: e.target.value})}
                            >
                                <option value="">Tất cả thương hiệu</option>
                                {brands.map(brand => (
                                    <option key={brand.id} value={brand.id}>{brand.name}</option>
                                ))}
                            </select>
                        </div>
                        
                        {/* Lọc theo category */}
                        <div>
                            <label className="block text-gray-400 text-sm mb-1 whitespace-nowrap">Danh mục</label>
                            <select
                                className="w-full bg-gray-800 text-white rounded p-2"
                                value={filters.categoryId}
                                onChange={(e) => setFilters({...filters, categoryId: e.target.value})}
                            >
                                <option value="">Tất cả danh mục</option>
                                {categories.map(category => (
                                    <option key={category.id} value={category.id}>{category.name}</option>
                                ))}
                            </select>
                        </div>
                        
                        {/* Lọc theo giá tối thiểu */}
<div>
    <label className="block text-gray-400 text-sm mb-1 whitespace-nowrap">Giá từ (VND)</label>
    <select
        className="w-full bg-gray-800 text-white rounded p-2"
        value={filters.minPrice}
        onChange={(e) => setFilters({ ...filters, minPrice: Number(e.target.value) })}
    >
        <option value={0}>Tối thiểu</option>
        <option value={5000000}>5 triệu</option>
        <option value={10000000}>10 triệu</option>
        <option value={20000000}>20 triệu</option>
        <option value={30000000}>30 triệu</option>
        <option value={40000000}>40 triệu</option>
        <option value={50000000}>50 triệu</option>
    </select>
</div>

{/* Lọc theo giá tối đa */}
<div>
    <label className="block text-gray-400 text-sm mb-1 whitespace-nowrap">Đến (VND)</label>
    <select
        className="w-full bg-gray-800 text-white rounded p-2"
        value={filters.maxPrice}
        onChange={(e) => setFilters({ ...filters, maxPrice: Number(e.target.value) })}
    >
        <option value={1000000000}>Tối đa</option>
        <option value={5000000}>5 triệu</option>
        <option value={10000000}>10 triệu</option>
        <option value={20000000}>20 triệu</option>
        <option value={30000000}>30 triệu</option>
        <option value={40000000}>40 triệu</option>
        <option value={50000000}>50 triệu</option>
        <option value={60000000}>Trên 50 triệu</option>
    </select>
</div>

                    </div>
                    
                    <div className="flex justify-end gap-2 mt-4">
                        <button 
                            className="text-gray-300 hover:text-white text-sm rounded-lg px-3 py-1 border border-gray-500"
                            onClick={resetFilters}
                        >
                            Xóa lọc
                        </button>
                        <button 
                            className="text-indigo-400 hover:text-indigo-300 text-sm rounded-lg px-3 py-1 border border-indigo-400"
                            onClick={applyFilters}
                        >
                            Áp dụng
                        </button>
                    </div>
                </motion.div>
            )}
            
            <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-700">
                    <thead>
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Tên
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Brand
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Danh mục
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Giá
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Bán
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">
                                Hành động
                            </th>
                        </tr>
                    </thead>

                    <tbody className="divide-y divide-gray-700">
                        {currentProducts.map((product) => (
                            <motion.tr
                                key={product.id} // Giả sử id vẫn được trả về từ API
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                transition={{ duration: 0.3 }}
                            >
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100 flex gap-2 items-center">
                                <img
                                src={
                                    product.images?.[0]?.imageUrl?.startsWith("http")
                                        ? product.images[0].imageUrl // Ảnh từ API (URL đầy đủ)
                                        : `${process.env.REACT_APP_API_BASE_URL}/${product.images?.[0]?.imageUrl}` // Ảnh local trong wwwroot
                                }
                                alt="Product img"
                                className="size-10 rounded-full"
                                onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/50"; }}
                            />


                                {product.name || "Không có tên"}
                            </td>

                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    {getBrandName(product.brandId)}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    {/* Tương tự với CategoryId */}
                                    {getCategoryName(product.categoryId)}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    {product.variants?.[0]?.price
                                        ? `${product.variants[0].price.toLocaleString()} VND`
                                        : "Chưa có giá"}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    {product.variants?.[0]?.discountPrice
                                        ? `${product.variants[0].discountPrice.toLocaleString()} VND`
                                        : "Không có giá giảm"}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    <button
                                        className="text-indigo-400 hover:text-indigo-300 mr-2"
                                        onClick={() => handleEditProduct(product)}
                                    >
                                        <Edit size={18} />
                                    </button>
                                    <button
                                        className="text-green-400 hover:text-green-300 mr-2"
                                        onClick={() => handleAddSpecification(product)}
                                    >
                                        <Settings size={18} />
                                    </button>
                                    <button
                                        className="text-red-400 hover:text-red-300"
                                        onClick={() => handleDeleteProduct(product)}
                                    >
                                        <Trash2 size={18} />
                                    </button>
                                </td>
                            </motion.tr>
                        ))}
                    </tbody>
                </table>
            </div>

            <Pagination
                count={Math.ceil(filteredProducts.length / productsPerPage)}
                page={page}
                onChange={handlePageChange}
                color="primary"
                className="mt-4 flex justify-center"
            />
            <ProductDrawer
                isOpen={isDrawerOpen}
                onClose={() => setIsDrawerOpen(false)}
                onAddProduct={handleAddProduct}
            />
            <EditProductDrawer
                isOpen={isEditDrawerOpen}
                onClose={() => setIsEditDrawerOpen(false)}
                product={selectedProduct}
                onUpdateProduct={handleUpdateProduct}
            />

            <Dialog
                open={isDeleteDialogOpen}
                onClose={() => setIsDeleteDialogOpen(false)}
                aria-labelledby="alert-dialog-title"
                aria-describedby="alert-dialog-description"
            >
                <DialogTitle id="alert-dialog-title">
                    {"Xác nhận xóa sản phẩm"}
                </DialogTitle>
                <DialogContent>
                    <DialogContentText id="alert-dialog-description">
                        Bạn có chắc chắn muốn xóa sản phẩm này không? Hành động này không
                        thể hoàn tác.
                    </DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setIsDeleteDialogOpen(false)} color="primary">
                        Hủy
                    </Button>
                    <Button onClick={confirmDeleteProduct} color="primary" autoFocus>
                        Xóa
                    </Button>
                </DialogActions>
            </Dialog>

            <CategoryBrandDrawer
                open={isCategoryBrandDrawerOpen}
                onClose={() => setIsCategoryBrandDrawerOpen(false)}
            />
            <BrandDrawer
                open={isBrandDrawerOpen}
                onClose={() => setIsBrandDrawerOpen(false)}
            />
            <VoucherDrawer
                open={isVoucherDrawerOpen}
                onClose={() => setIsVoucherDrawerOpen(false)}
            />
            <AddSpecificationDrawer 
            open={isSpecDrawerOpen} 
            onClose={() => setIsSpecDrawerOpen(false)} 
            product={selectedProductForSpec} 
            />
        </motion.div>
    );
};

export default ProductsTable;
```

### ClientApp\src\components\Admin\products\SalesTrendChart.jsx
```jsx
import { motion } from "framer-motion";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";

const salesData = [
	{ month: "Jan", sales: 4000 },
	{ month: "Feb", sales: 3000 },
	{ month: "Mar", sales: 5000 },
	{ month: "Apr", sales: 4500 },
	{ month: "May", sales: 6000 },
	{ month: "Jun", sales: 5500 },
];

const SalesTrendChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Sales Trend</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={salesData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='sales' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default SalesTrendChart;

```

### ClientApp\src\components\Admin\products\VoucherDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer,Chip, Button, Box, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Modal, TextField, Switch } from "@mui/material";
import { X, Edit, Trash2, Plus } from "lucide-react";
import axios from "axios";

const VoucherDrawer = ({ open, onClose }) => {
    const [vouchers, setVouchers] = useState([]);
    const [modalOpen, setModalOpen] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [selectedVoucherId, setSelectedVoucherId] = useState(null);
    const [voucher, setVoucher] = useState({ code: "", discountAmount: "", expiryDate: "", isActive: true });

    useEffect(() => {
        fetchVouchers();
    }, []);

    const fetchVouchers = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`);
            setVouchers(response.data);
        } catch (error) {
            console.error("Failed to fetch vouchers:", error);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setVoucher({ ...voucher, [name]: value });
    };

    const handleToggleActive = (e) => {
        setVoucher({ ...voucher, isActive: e.target.checked });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (isEditing) {
                await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/${selectedVoucherId}`, voucher);
                setIsEditing(false);
                setSelectedVoucherId(null);
            } else {
                await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`, voucher);
            }
            fetchVouchers();
            handleCloseModal();
        } catch (error) {
            console.error("Failed to save voucher:", error);
        }
    };

    const handleEdit = (voucher) => {
        setVoucher(voucher);
        setIsEditing(true);
        setSelectedVoucherId(voucher.id);
        setModalOpen(true);
    };

    const handleDelete = async (id) => {
        try {
            await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/${id}`);
            fetchVouchers();
        } catch (error) {
            console.error("Failed to delete voucher:", error);
        }
    };

    const handleOpenModal = () => {
        setIsEditing(false);
        setVoucher({ code: "", discountAmount: "", expiryDate: "", isActive: true });
        setModalOpen(true);
    };

    const handleCloseModal = () => {
        setModalOpen(false);
    };

    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
            <Box sx={{ width: 600, p: 3, bgcolor: "white", height: "100%" }}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6" fontWeight="bold">Xem Voucher</Typography>
                    <IconButton onClick={onClose}><X size={24} /></IconButton>
                </Box>
                <Button onClick={handleOpenModal} variant="contained" sx={{ bgcolor: "black", color: "white", mb: 2 }}>
                    <Plus size={18} /> Thêm Voucher
                </Button>
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead sx={{ bgcolor: "black" }}>
                            <TableRow>
                                <TableCell sx={{ color: "white" }}>Mã Voucher</TableCell>
                                <TableCell sx={{ color: "white" }}>Giảm Giá</TableCell>
                                <TableCell sx={{ color: "white" }}>Hạn Sử Dụng</TableCell>
                                <TableCell sx={{ color: "white" }}>Trạng Thái</TableCell>
                                <TableCell sx={{ color: "white" }}>Hành Động</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {vouchers.map((voucher) => (
                                <TableRow key={voucher.id}>
                                    <TableCell>{voucher.code}</TableCell>
                                    <TableCell>{voucher.discountAmount}</TableCell>
                                    <TableCell>{voucher.expiryDate}</TableCell>
                        <TableCell>
                            <Chip
                                label={voucher.isActive ? "Đang hoạt động" : "Tắt"}
                                color={voucher.isActive ? "success" : "error"}
                                sx={{ fontWeight: "bold", color: "white" }}
                            />
                        </TableCell>
                                    <TableCell>
                                        <IconButton onClick={() => handleEdit(voucher)}><Edit size={18} color="blue" /></IconButton>
                                        <IconButton onClick={() => handleDelete(voucher.id)}><Trash2 size={18} color="red" /></IconButton>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>

            {/* Modal thêm & sửa Voucher */}
            <Modal open={modalOpen} onClose={handleCloseModal}>
                <Box sx={{
                    position: "absolute",
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    bgcolor: "white",
                    border: "2px solid black",
                    borderRadius: 2,
                    boxShadow: 24,
                    p: 4,
                    width: 400
                }}>
                    <Typography variant="h6" fontWeight="bold" mb={2}>{isEditing ? "Chỉnh sửa Voucher" : "Thêm Voucher"}</Typography>
                    <TextField fullWidth label="Mã Voucher" name="code" value={voucher.code} onChange={handleChange} sx={{ mb: 2 }} />
                    <TextField fullWidth label="Số tiền giảm giá" name="discountAmount" type="number" value={voucher.discountAmount} onChange={handleChange} sx={{ mb: 2 }} />
                    <TextField
                        fullWidth
                        label="Ngày hết hạn"
                        name="expiryDate"
                        type="date"
                        value={voucher.expiryDate}
                        onChange={handleChange}
                        sx={{ mb: 2 }}
                        InputLabelProps={{ shrink: true }} // Fix lỗi chữ bị đè
                    />
                    <Box display="flex" alignItems="center" mb={2}>
                        <Typography variant="body2">Kích hoạt</Typography>
                        <Switch checked={voucher.isActive} onChange={handleToggleActive} />
                    </Box>
                    <Button fullWidth onClick={handleSubmit} variant="contained" sx={{ bgcolor: "black", color: "white" }}>
                        {isEditing ? "Cập nhật Voucher" : "Thêm Voucher"}
                    </Button>
                </Box>
            </Modal>
        </Drawer>
    );
};

export default VoucherDrawer;

```

### ClientApp\src\components\Admin\sales\DailySalesTrend.jsx
```jsx
import { motion } from "framer-motion";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { useEffect, useState } from "react";
import axios from "axios";

const DailySalesTrend = () => {
    const [dailySalesData, setDailySalesData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [days, setDays] = useState(7); // Mặc định 7 ngày

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/daily-sales?days=${days}`);
                setDailySalesData(response.data);
                setLoading(false);
            } catch (err) {
                setError(err.message);
                setLoading(false);
                console.error("Error fetching daily sales data:", err);
            }
        };

        fetchData();
    }, [days]);

    if (loading) return <div className="text-center py-8">Loading...</div>;
    if (error) return <div className="text-center py-8 text-red-500">Error: {error}</div>;

    return (
        <motion.div
            className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
        >
            <div className="flex justify-between items-center mb-4">
                <h2 className='text-xl font-semibold text-gray-100'>Doanh số hàng ngày
</h2>
                <select 
                    value={days}
                    onChange={(e) => setDays(Number(e.target.value))}
                    className="bg-gray-700 text-white rounded px-3 py-1"
                >
                    <option value={7}>7 ngày gần đây</option>
                    <option value={14}>14 ngày gần đây</option>
                    <option value={30}>30 ngày gần đây</option>
                </select>
            </div>

            <div style={{ width: "100%", height: 300 }}>
                <ResponsiveContainer>
                    <BarChart data={dailySalesData}>
                        <CartesianGrid strokeDasharray='3 3' stroke='#374151' />
                        <XAxis 
                            dataKey='name' 
                            stroke='#9CA3AF' 
                            tickFormatter={(value, index) => {
                                // Hiển thị cả ngày và tháng cho khoảng thời gian dài
                                if (days > 7) return dailySalesData[index]?.fullDate || value;
                                return value;
                            }}
                        />
                        <YAxis stroke='#9CA3AF' />
                        <Tooltip
                            formatter={(value) => [`${Number(value).toLocaleString()} VNĐ`, "Sales"]}
                            labelFormatter={(label) => {
                                const fullDate = dailySalesData.find(d => d.name === label)?.fullDate;
                                return fullDate ? `${label}, ${fullDate}` : label;
                            }}
                            contentStyle={{
                                backgroundColor: "rgba(31, 41, 55, 0.8)",
                                borderColor: "#4B5563",
                                borderRadius: "0.5rem",
                            }}
                            itemStyle={{ color: "#E5E7EB" }}
                        />
                        <Bar 
                            dataKey='sales' 
                            fill='#10B981' 
                            radius={[4, 4, 0, 0]}
                            animationDuration={2000}
                        />
                    </BarChart>
                </ResponsiveContainer>
            </div>
        </motion.div>
    );
};

export default DailySalesTrend;
```

### ClientApp\src\components\Admin\sales\SalesByCategoryChart.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from "recharts";
import { useEffect, useState } from "react";
import axios from "axios";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];

const SalesByCategoryChart = () => {
    const [salesByCategory, setSalesByCategory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/sales-by-category`);
                setSalesByCategory(response.data);
                setLoading(false);
            } catch (err) {
                setError(err.message);
                setLoading(false);
                console.error("Error fetching sales data:", err);
            }
        };

        fetchData();
    }, []);

    if (loading) return <div className="text-center py-8">Loading...</div>;
    if (error) return <div className="text-center py-8 text-red-500">Error: {error}</div>;

    return (
        <motion.div
            className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
        >
            <h2 className='text-xl font-semibold text-gray-100 mb-4'>Tỉ lệ đơn hàng theo danh mục</h2>

            <div style={{ width: "100%", height: 300 }}>
                <ResponsiveContainer>
                    <PieChart>
                        <Pie
                            data={salesByCategory}
                            cx='50%'
                            cy='50%'
                            outerRadius={80}
                            fill='#8884d8'
                            dataKey='value'
                            label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                        >
                            {salesByCategory.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                        </Pie>
                        <Tooltip
                            formatter={(value) => [`${Number(value).toLocaleString()} VNĐ`, "Total Sales"]}
                            contentStyle={{
                                backgroundColor: "rgba(31, 41, 55, 0.8)",
                                borderColor: "#4B5563",
                                borderRadius: "0.5rem",
                            }}
                            itemStyle={{ color: "#E5E7EB" }}
                        />
                        <Legend />
                    </PieChart>
                </ResponsiveContainer>
            </div>
        </motion.div>
    );
};

export default SalesByCategoryChart;
```

### ClientApp\src\components\Admin\sales\SalesOverviewChart.jsx
```jsx
import { motion } from "framer-motion";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { useState, useEffect } from "react";
import axios from "axios";

const SalesOverviewChart = () => {
    const [selectedTimeRange, setSelectedTimeRange] = useState("month");
    const [chartData, setChartData] = useState([]);
    const [summary, setSummary] = useState(null);
    const [xAxisKey, setXAxisKey] = useState("day");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchSalesData = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const response = await axios.get(
                    `${process.env.REACT_APP_API_BASE_URL}/api/orders/dashboard/sales-overview`,
                    { params: { range: selectedTimeRange } }
                );
                console.log("Response Data:", response.data);
                if (!response.data || !response.data.data) { // Sửa thành response.data.data
                    throw new Error("Dữ liệu API không đúng định dạng");
                }
                const { data, xAxisKey, summary } = response.data; // Sửa destructuring
                setChartData(data || []);
                setXAxisKey(xAxisKey || "day");
                setSummary(summary || null);
            } catch (error) {
                setError("Không thể tải dữ liệu doanh thu: " + error.message);
                console.error("Error fetching sales data:", error);
                setChartData([]);
            } finally {
                setIsLoading(false);
            }
        };

        fetchSalesData();
    }, [selectedTimeRange]);

    const formatCurrency = (value) => {
  if (value >= 1000000) {
    // Chia số tiền cho triệu
    const millions = Math.floor(value / 1000000);  // Lấy phần nguyên (triệu)
    const remainder = Math.floor((value % 1000000) / 100000);  // Lấy phần thập phân, làm tròn đến 100 ngàn

    // Nếu có phần thập phân
    if (remainder > 0) {
      return `${millions}tr${remainder}`;
    } else {
      return `${millions}tr`;  // Nếu không có phần thập phân, chỉ hiển thị triệu
    }
  } else if (value >= 1000) {
    // Chuyển thành nghìn (k) nếu cần
    return `${(value / 1000).toFixed(0)}k`;
  } else {
    return value.toLocaleString('vi-VN');  // Nếu không phải triệu hoặc nghìn, giữ nguyên
  }
};

    const getTitle = () => {
        switch (selectedTimeRange) {
            case "week": return "Tổng Quan Doanh Thu Tuần";
            case "month": return "Tổng Quan Doanh Thu Tháng";
            case "year": return "Tổng Quan Doanh Thu Năm";
            default: return "Tổng Quan Doanh Thu";
        }
    };

    const getXAxisLabel = () => {
        return xAxisKey === "month" ? "Tháng" : "Ngày";
    };

    return (
        <motion.div
            className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
        >
            <div className='flex items-center justify-between mb-6'>
                <h2 className='text-xl font-semibold text-gray-100'>{getTitle()}</h2>
                <select
                    className='bg-gray-700 text-white rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500'
                    value={selectedTimeRange}
                    onChange={(e) => setSelectedTimeRange(e.target.value)}
                    disabled={isLoading}
                >
                    <option value="week">Tuần </option>
                    <option value="month">Tháng trước </option>
                    <option value="year">Năm </option>
                </select>
            </div>

            {isLoading ? (
                <div className="flex justify-center items-center h-80">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>
            ) : error ? (
                <div className="text-red-500 text-center h-80 flex items-center justify-center">
                    {error}
                </div>
            ) : (
                <>
                    {console.log("Chart Data:", chartData)}
                    <div className='w-full h-80'>
                        <ResponsiveContainer>
                            <BarChart data={chartData}>
    <CartesianGrid strokeDasharray='3 3' stroke='#374151' />
    <XAxis 
        dataKey="shortPeriod"
        stroke='#9CA3AF'
        label={{ value: getXAxisLabel(), position: 'insideBottom', offset: -5 }}
    />
    <YAxis 
        stroke='#9CA3AF'
        tickFormatter={(value) => formatCurrency(value)}  // Sử dụng hàm định dạng tiền
        label={{ value: 'Doanh thu (VND)', angle: -90, position: 'insideLeft' }}
    />
    <Tooltip
        contentStyle={{ backgroundColor: "rgba(31, 41, 55, 0.8)", borderColor: "#4B5563" }}
        itemStyle={{ color: "#E5E7EB" }}
        formatter={(value, name) => [formatCurrency(value), "Doanh thu"]}
        labelFormatter={(label) => chartData.find(d => d.shortPeriod === label)?.formattedPeriod || label}
    />
    <Bar 
        dataKey='sales'
        fill='#8B5CF6'
        name="Doanh thu"
    />
</BarChart>
                        </ResponsiveContainer>
                    </div>

                    {summary && (
                        <div className='mt-4 text-gray-100 grid grid-cols-1 md:grid-cols-2 gap-2'>
                            <p>Tổng doanh thu: {formatCurrency(summary.totalSales)}</p>
                            {summary.averageDailySales && (
                                <p>Doanh thu trung bình ngày: {formatCurrency(summary.averageDailySales)}</p>
                            )}
                            {summary.averageMonthlySales && (
                                <p>Doanh thu trung bình tháng: {formatCurrency(summary.averageMonthlySales)}</p>
                            )}
                            {summary.bestMonth && <p>Tháng tốt nhất: {summary.bestMonth}</p>}
                            {summary.worstMonth && <p>Tháng thấp nhất: {summary.worstMonth}</p>}
                        </div>
                    )}
                </>
            )}
        </motion.div>
    );
};

export default SalesOverviewChart;
```

### ClientApp\src\components\Admin\settings\ConnectedAccounts.jsx
```jsx
import { useState } from "react";
import SettingSection from "./SettingSection";
import { HelpCircle, Plus } from "lucide-react";

const ConnectedAccounts = () => {
	const [connectedAccounts, setConnectedAccounts] = useState([
		{
			id: 1,
			name: "Google",
			connected: true,
			icon: "/google.png",
		},
		{
			id: 2,
			name: "Facebook",
			connected: false,
			icon: "/facebook.svg",
		},
		{
			id: 3,
			name: "Twitter",
			connected: true,
			icon: "/x.png",
		},
	]);
	return (
		<SettingSection icon={HelpCircle} title={"Connected Accounts"}>
			{connectedAccounts.map((account) => (
				<div key={account.id} className='flex items-center justify-between py-3'>
					<div className='flex gap-1'>
						<img src={account.icon} alt='Social img' className='size-6 object-cover rounded-full mr-2' />
						<span className='text-gray-300'>{account.name}</span>
					</div>
					<button
						className={`px-3 py-1 rounded ${
							account.connected ? "bg-green-600 hover:bg-green-700" : "bg-gray-600 hover:bg-gray-700"
						} transition duration-200`}
						onClick={() => {
							setConnectedAccounts(
								connectedAccounts.map((acc) => {
									if (acc.id === account.id) {
										return {
											...acc,
											connected: !acc.connected,
										};
									}
									return acc;
								})
							);
						}}
					>
						{account.connected ? "Connected" : "Connect"}
					</button>
				</div>
			))}
			<button className='mt-4 flex items-center text-indigo-400 hover:text-indigo-300 transition duration-200'>
				<Plus size={18} className='mr-2' /> Add Account
			</button>
		</SettingSection>
	);
};
export default ConnectedAccounts;

```

### ClientApp\src\components\Admin\settings\DangerZone.jsx
```jsx
import { motion } from "framer-motion";
import { Trash2 } from "lucide-react";

const DangerZone = () => {
	return (
		<motion.div
			className='bg-red-900 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-red-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ duration: 0.5, delay: 0.2 }}
		>
			<div className='flex items-center mb-4'>
				<Trash2 className='text-red-400 mr-3' size={24} />
				<h2 className='text-xl font-semibold text-gray-100'>Danger Zone</h2>
			</div>
			<p className='text-gray-300 mb-4'>Permanently delete your account and all of your content.</p>
			<button
				className='bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded 
      transition duration-200'
			>
				Delete Account
			</button>
		</motion.div>
	);
};
export default DangerZone;

```

### ClientApp\src\components\Admin\settings\Notifications.jsx
```jsx
import { useState } from "react";
import SettingSection from "./SettingSection";
import { Bell } from "lucide-react";
import ToggleSwitch from "./ToggleSwitch";

const Notifications = () => {
	const [notifications, setNotifications] = useState({
		push: true,
		email: false,
		sms: true,
	});

	return (
		<SettingSection icon={Bell} title={"Notifications"}>
			<ToggleSwitch
				label={"Push Notifications"}
				isOn={notifications.push}
				onToggle={() => setNotifications({ ...notifications, push: !notifications.push })}
			/>
			<ToggleSwitch
				label={"Email Notifications"}
				isOn={notifications.email}
				onToggle={() => setNotifications({ ...notifications, email: !notifications.email })}
			/>
			<ToggleSwitch
				label={"SMS Notifications"}
				isOn={notifications.sms}
				onToggle={() => setNotifications({ ...notifications, sms: !notifications.sms })}
			/>
		</SettingSection>
	);
};
export default Notifications;

```

### ClientApp\src\components\Admin\settings\Profile.jsx
```jsx
import { User } from "lucide-react";
import SettingSection from "./SettingSection";

const Profile = () => {
	return (
		<SettingSection icon={User} title={"Profile"}>
			<div className='flex flex-col sm:flex-row items-center mb-6'>
				<img
					src='https://randomuser.me/api/portraits/men/3.jpg'
					alt='Profile'
					className='rounded-full w-20 h-20 object-cover mr-4'
				/>

				<div>
					<h3 className='text-lg font-semibold text-gray-100'>John Doe</h3>
					<p className='text-gray-400'>john.doe@example.com</p>
				</div>
			</div>

			<button className='bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded transition duration-200 w-full sm:w-auto'>
				Edit Profile
			</button>
		</SettingSection>
	);
};
export default Profile;

```

### ClientApp\src\components\Admin\settings\Security.jsx
```jsx
import { Lock } from "lucide-react";
import SettingSection from "./SettingSection";
import ToggleSwitch from "./ToggleSwitch";
import { useState } from "react";

const Security = () => {
	const [twoFactor, setTwoFactor] = useState(false);

	return (
		<SettingSection icon={Lock} title={"Security"}>
			<ToggleSwitch
				label={"Two-Factor Authentication"}
				isOn={twoFactor}
				onToggle={() => setTwoFactor(!twoFactor)}
			/>
			<div className='mt-4'>
				<button
					className='bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded 
        transition duration-200
        '
				>
					Change Password
				</button>
			</div>
		</SettingSection>
	);
};
export default Security;

```

### ClientApp\src\components\Admin\settings\SettingSection.jsx
```jsx
import { motion } from "framer-motion";

const SettingSection = ({ icon: Icon, title, children }) => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ duration: 0.5 }}
		>
			<div className='flex items-center mb-4'>
				<Icon className='text-indigo-400 mr-4' size='24' />
				<h2 className='text-xl font-semibold text-gray-100'>{title}</h2>
			</div>
			{children}
		</motion.div>
	);
};
export default SettingSection;

```

### ClientApp\src\components\Admin\settings\ToggleSwitch.jsx
```jsx
const ToggleSwitch = ({ label, isOn, onToggle }) => {
	return (
		<div className='flex items-center justify-between py-3'>
			<span className='text-gray-300'>{label}</span>
			<button
				className={`
        relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none
        ${isOn ? "bg-indigo-600" : "bg-gray-600"}
        `}
				onClick={onToggle}
			>
				<span
					className={`inline-block size-4 transform transition-transform bg-white rounded-full 
            ${isOn ? "translate-x-6" : "translate-x-1"}
            `}
				/>
			</button>
		</div>
	);
};
export default ToggleSwitch;

```

### ClientApp\src\components\Admin\users\RoleDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer, Button, Table, Space, Modal, Form, Input, message } from "antd";
import { Pencil, Trash, Plus } from "lucide-react";

const RoleDrawer = ({ visible, onClose }) => {
  const [roles, setRoles] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingRole, setEditingRole] = useState(null);
  const [form] = Form.useForm();

  useEffect(() => {
    if (visible) fetchRoles();
  }, [visible]);

  const fetchRoles = async () => {
    try {
      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles`);
      const data = await res.json();
      setRoles(data);
    } catch (error) {
      message.error("Lỗi khi tải dữ liệu");
    }
  };

  const handleAddOrEdit = async (values) => {
    try {
      if (editingRole) {
        // API cập nhật
        await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles/${editingRole.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(values),
        });
        message.success("Cập nhật role thành công");
        setRoles((prev) => prev.map((r) => (r.id === editingRole.id ? { ...r, ...values } : r)));
      } else {
        // API thêm mới
        const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(values),
        });
        const newRole = await res.json();
        message.success("Thêm role thành công");
        setRoles((prev) => [...prev, newRole]);
      }
      setIsModalOpen(false);
      form.resetFields();
      setEditingRole(null);
    } catch (error) {
      message.error("Có lỗi xảy ra");
    }
  };

  const handleDelete = async (id) => {
    Modal.confirm({
      title: "Xóa Role",
      content: "Bạn có chắc muốn xóa role này?",
      okText: "Xóa",
      okType: "danger",
      cancelText: "Hủy",
      onOk: async () => {
        try {
          await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles/${id}`, { method: "DELETE" });
          message.success("Xóa role thành công");
          setRoles((prev) => prev.filter((r) => r.id !== id));
        } catch (error) {
          message.error("Không thể xóa role vì đang được sử dụng.");
        }
      },
    });
  };

  const columns = [
    { title: "Tên Role", dataIndex: "name", key: "name" },
    {
      title: "Hành động",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button
            icon={<Pencil size={18} />}
            onClick={() => {
              setEditingRole(record);
              form.setFieldsValue(record);
              setIsModalOpen(true);
            }}
          />
          <Button icon={<Trash size={18} />} danger onClick={() => handleDelete(record.id)} />
        </Space>
      ),
    },
  ];

  return (
    <Drawer title="Quản lý Role" open={visible} onClose={onClose} width={500}>
      <Button type="primary" icon={<Plus size={18} />} onClick={() => setIsModalOpen(true)}>
        Quản lý Role
      </Button>
      <Table columns={columns} dataSource={roles} rowKey="id" style={{ marginTop: 20 }} />
      
      <Modal
        title={editingRole ? "Chỉnh sửa Role" : "Thêm Role"}
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false);
          form.resetFields();
          setEditingRole(null);
        }}
        onOk={() => form.submit()}
      >
        <Form form={form} layout="vertical" onFinish={handleAddOrEdit}>
          <Form.Item name="name" label="Tên Role" rules={[{ required: true, message: "Nhập tên role" }]}>
            <Input />
          </Form.Item>
        </Form>
      </Modal>
    </Drawer>
  );
};

export default RoleDrawer;

```

### ClientApp\src\components\Admin\users\UpdateUserDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { message } from "antd";
import { Drawer, TextField, Button, Select, MenuItem, FormControlLabel, Switch } from "@mui/material";
import axios from "axios";

const UpdateUserDrawer = ({ open, onClose, user, roles, onUpdate }) => {
  const [userData, setUserData] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    roleId: "",
    isActive: false,
  });

  useEffect(() => {
    if (user) {
      setUserData({
        fullName: user.fullName || "",
        email: user.email || "",
        phoneNumber: user.phoneNumber || "",
        roleId: user.roleId || "",
        isActive: user.isActive || false,
      });
    }
  }, [user]);

  const handleChange = (e) => {
    setUserData({ ...userData, [e.target.name]: e.target.value });
  };

  const handleSwitchChange = (e) => {
    setUserData({ ...userData, isActive: e.target.checked });
  };

  const handleSave = async () => {
    if (!userData.fullName || !userData.email || !userData.phoneNumber || !userData.roleId) {
      message.warning("Vui lòng điền đầy đủ thông tin!");
      return;
    }

    try {
      await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/users/${user.id}`, userData);
      message.success("Cập nhật thông tin thành công!");
      onUpdate(user.id, userData);
      onClose();
    } catch (error) {
      console.error("Lỗi khi cập nhật thông tin người dùng:", error);
      message.error("Lỗi khi cập nhật, vui lòng thử lại.");
    }
  };

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <div className="w-96 p-5">
        <h2 className="text-xl font-semibold mb-4">Cập nhật người dùng</h2>

        <TextField
          label="Họ và tên"
          name="fullName"
          value={userData.fullName}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <TextField
          label="Email"
          name="email"
          value={userData.email}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <TextField
          label="Số điện thoại"
          name="phoneNumber"
          value={userData.phoneNumber}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <Select
          name="roleId"
          value={userData.roleId}
          onChange={handleChange}
          fullWidth
          displayEmpty
          sx={{ mt: 2 }}
        >
          <MenuItem value="" disabled>Chọn vai trò</MenuItem>
          {roles.map((role) => (
            <MenuItem key={role.id} value={role.id}>{role.name}</MenuItem>
          ))}
        </Select>

        <FormControlLabel
          control={<Switch checked={userData.isActive} onChange={handleSwitchChange} />}
          label="Kích hoạt tài khoản"
          className="mt-4"
        />

        <div className="flex justify-end space-x-2 mt-4">
          <Button onClick={onClose} color="secondary">Hủy</Button>
          <Button onClick={handleSave} variant="contained" color="primary">Lưu</Button>
        </div>
      </div>
    </Drawer>
  );
};

export default UpdateUserDrawer;

```

### ClientApp\src\components\Admin\users\UserActivityHeatmap.jsx
```jsx
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { motion } from "framer-motion";

const userActivityData = [
	{ name: "Mon", "0-4": 20, "4-8": 40, "8-12": 60, "12-16": 80, "16-20": 100, "20-24": 30 },
	{ name: "Tue", "0-4": 30, "4-8": 50, "8-12": 70, "12-16": 90, "16-20": 110, "20-24": 40 },
	{ name: "Wed", "0-4": 40, "4-8": 60, "8-12": 80, "12-16": 100, "16-20": 120, "20-24": 50 },
	{ name: "Thu", "0-4": 50, "4-8": 70, "8-12": 90, "12-16": 110, "16-20": 130, "20-24": 60 },
	{ name: "Fri", "0-4": 60, "4-8": 80, "8-12": 100, "12-16": 120, "16-20": 140, "20-24": 70 },
	{ name: "Sat", "0-4": 70, "4-8": 90, "8-12": 110, "12-16": 130, "16-20": 150, "20-24": 80 },
	{ name: "Sun", "0-4": 80, "4-8": 100, "8-12": 120, "12-16": 140, "16-20": 160, "20-24": 90 },
];

const UserActivityHeatmap = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Activity Heatmap</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<BarChart data={userActivityData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey='0-4' stackId='a' fill='#6366F1' />
						<Bar dataKey='4-8' stackId='a' fill='#8B5CF6' />
						<Bar dataKey='8-12' stackId='a' fill='#EC4899' />
						<Bar dataKey='12-16' stackId='a' fill='#10B981' />
						<Bar dataKey='16-20' stackId='a' fill='#F59E0B' />
						<Bar dataKey='20-24' stackId='a' fill='#3B82F6' />
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserActivityHeatmap;

```

### ClientApp\src\components\Admin\users\UserDemographicsChart.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from "recharts";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];

const userDemographicsData = [
	{ name: "18-24", value: 20 },
	{ name: "25-34", value: 30 },
	{ name: "35-44", value: 25 },
	{ name: "45-54", value: 15 },
	{ name: "55+", value: 10 },
];

const UserDemographicsChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700 lg:col-span-2'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.5 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Demographics</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={userDemographicsData}
							cx='50%'
							cy='50%'
							outerRadius={100}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{userDemographicsData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserDemographicsChart;

```

### ClientApp\src\components\Admin\users\UserGrowthChart.jsx
```jsx
import { useEffect, useState } from "react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";
import axios from "axios";

const UserGrowthChart = () => {
	const [chartData, setChartData] = useState([]);

	useEffect(() => {
		const fetchUserGrowthData = async () => {
			try {
				const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users/growth`);
				setChartData(response.data); // API trả về dữ liệu dạng [{ month: "Jan", users: 1000 }, ...]
			} catch (error) {
				console.error("Lỗi khi lấy dữ liệu người dùng:", error);
			}
		};

		fetchUserGrowthData();
	}, []);

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Growth</h2>
			<div className='h-[320px]'>
				<ResponsiveContainer width='100%' height='100%'>
					<LineChart data={chartData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Line
							type='monotone'
							dataKey='users'
							stroke='#8B5CF6'
							strokeWidth={2}
							dot={{ fill: "#8B5CF6", strokeWidth: 2, r: 4 }}
							activeDot={{ r: 8 }}
						/>
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};

export default UserGrowthChart;

```

### ClientApp\src\components\Admin\users\UsersTable.jsx
```jsx
import { useState, useEffect } from "react";
import axios from "axios";
import { motion } from "framer-motion";
import { Search, PlusCircle, Pencil, Trash2, Users } from "lucide-react";
import {
  Modal,
  Box,
  Typography,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from "@mui/material";
import { message } from "antd";

import RoleDrawer from "./RoleDrawer"; // Import nội bộ
import UpdateUserDrawer from "./UpdateUserDrawer";

const UsersTable = () => {
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [updateDrawerVisible, setUpdateDrawerVisible] = useState(false);
    const [isModalStatusVisible, setIsModalStatusVisible] = useState(false);
  const [newRole, setNewRole] = useState("");
    const [newStatus, setNewStatus] = useState("");
  const [openModal, setOpenModal] = useState(false);
  const [roleDrawerVisible, setRoleDrawerVisible] = useState(false);

  const [newUser, setNewUser] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    password: "",
    roleId: "",
  });
  const [openUserModal, setOpenUserModal] = useState(false);

 useEffect(() => {
  const fetchData = async () => {
    setLoading(true);
    try {
      const [usersRes, rolesRes] = await Promise.all([
        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users`),
        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/roles`),
      ]);
      setUsers(usersRes.data);
      setFilteredUsers(usersRes.data);
      setRoles(rolesRes.data);
    } catch (error) {
      console.error("Error fetching data:", error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  fetchData();
}, []);


  const handleSearch = (e) => {
    const term = e.target.value.toLowerCase();
    setSearchTerm(term);
    const filtered = users.filter(
      (user) => user.fullName.toLowerCase().includes(term) || user.email.toLowerCase().includes(term)
    );
    setFilteredUsers(filtered);
  };

  const handleOpenModal = (user) => {
    setSelectedUser(user);
    setNewRole(user.roleId);
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setSelectedUser(null);
  };

  const handleOpenUpdateDrawer = (user) => {
  setSelectedUser(user);
  setUpdateDrawerVisible(true);
};

  const handleUpdateRole = async () => {
    if (selectedUser) {
        console.log("Updating role for user:", selectedUser); // Log thông tin người dùng
        console.log("New role ID:", newRole); // Log vai trò mới

        try {
            await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/users/${selectedUser.id}/role`, { roleId: newRole });
            console.log("Role updated successfully"); // Log khi cập nhật thành công
            setUsers(users.map(user => user.id === selectedUser.id ? { ...user, roleId: newRole } : user));
            setFilteredUsers(filteredUsers.map(user => user.id === selectedUser.id ? { ...user, roleId: newRole } : user));
            alert("Vai trò người dùng đã được cập nhật thành công!");
            handleCloseModal();
        } catch (error) {
            console.error("Error updating user role:", error); // Log lỗi khi cập nhật vai trò
            alert("Lỗi khi cập nhật vai trò người dùng, vui lòng thử lại.");
        }
    }
};


  const handleAddUser = async () => {
    if (!newUser.fullName || !newUser.email || !newUser.phoneNumber || !newUser.password || !newUser.roleId) {
        alert("Vui lòng điền đầy đủ thông tin.");
        return;
    }

    try {
        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/users`, newUser);
        setUsers([...users, response.data]);
        setFilteredUsers([...filteredUsers, response.data]);
        message.success("Người dùng mới đã được thêm thành công!");

        setOpenUserModal(false);
        setNewUser({
            fullName: "",
            email: "",
            phoneNumber: "",
            password: "",
            roleId: "",
        });
    } catch (error) {
        console.error("Lỗi khi thêm người dùng mới:", error);
        alert("Lỗi khi thêm người dùng mới, vui lòng thử lại.");
    }
  };



  return (
    <motion.div
      className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      {/* Header */}
      <div className='flex justify-between items-center mb-6'>
        <h2 className='text-xl font-semibold text-gray-100'>Users</h2>
        <div className='flex space-x-3'>
  {/* Add User Button */}
  <button
    className="flex items-center text-sm text-white bg-blue-600 hover:bg-blue-500 px-4 py-2 rounded-lg"
    onClick={() => setOpenUserModal(true)}
  >
    <PlusCircle size={18} className="mr-2" />
    Thêm người dùng
  </button>

  {/* Role Management Button */}
  <button
    className="flex items-center text-sm text-white bg-gray-600 hover:bg-gray-500 px-4 py-2 rounded-lg"
    onClick={() => setRoleDrawerVisible(true)}
  >
    <Users size={18} className="mr-2" />
    Quản lý Role
  </button>
</div>
      </div>

      {/* Search Bar */}
      <div className='relative mb-4'>
        <input
          type='text'
          placeholder='Tìm kiếm...'
          className='bg-gray-700 text-white placeholder-gray-400 rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 w-full'
          value={searchTerm}
          onChange={handleSearch}
        />
        <Search className='absolute left-3 top-2.5 text-gray-400' size={18} />
      </div>

      {/* Users Table */}
      <div className='overflow-x-auto'>
        <table className='min-w-full divide-y divide-gray-700'>
          <thead>
            <tr>
              <th className='px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider'>Tên người dùng</th>
              <th className='px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider'>Email</th>
              <th className='px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider'>Vai trò</th>
              <th className='px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider'>Trạng thái</th>
              <th className='px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider'>Hành động</th>
            </tr>
          </thead>

          <tbody className='divide-y divide-gray-700'>
            {filteredUsers.map((user) => (
              <motion.tr
                key={user.id}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3 }}
              >
                <td className='px-6 py-3 whitespace-nowrap'>
                  <div className='flex items-center'>
                    <div className='flex-shrink-0 h-10 w-10'>
                      <div className='h-10 w-10 rounded-full bg-gradient-to-r from-purple-400 to-blue-500 flex items-center justify-center text-white font-semibold'>
                        {user.fullName ? user.fullName.charAt(0) : "?"}
                      </div>
                    </div>
                    <div className='ml-4'>
                      <div className='text-sm font-medium text-gray-100'>{user.fullName}</div>
                    </div>
                  </div>
                </td>

                <td className='px-6 py-3 whitespace-nowrap'>
                  <div className='text-sm text-gray-300'>{user.email}</div>
                </td>

                <td className='px-6 py-3 whitespace-nowrap'>
  <span className='px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-800 text-blue-100'>
    {roles.find(r => r.id === user.roleId)?.name || "N/A"}
  </span>
</td>

                <td className="px-6 py-3 whitespace-nowrap">
  <span
    className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${
      user.isActive ? "bg-green-800 text-green-100" : "bg-red-800 text-red-100"
    }`}
  >
    {user.isActive ? "Active" : "Inactive"}
  </span>
</td>


                <td className='px-6 py-3 whitespace-nowrap text-sm text-gray-300'>
                  <button
  className='text-indigo-400 hover:text-indigo-300 mr-4'
  onClick={() => handleOpenUpdateDrawer(user)}
>
  <Pencil size={18} />
</button>

                  <button
                    className='text-red-400 hover:text-red-300'
                    onClick={() => console.log("Delete", user.id)}
                  >
                    <Trash2 size={18} />
                  </button>
                </td>
              </motion.tr>
            ))}
          </tbody>
        </table>
      </div>

      <Modal open={openModal} onClose={handleCloseModal}>
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: 400,
            bgcolor: 'background.paper',
            border: '2px solid #000',
            boxShadow: 24,
            p: 4,
          }}
        >
          <Typography variant="h6" component="h2">
            Cập nhật vai trò người dùng
          </Typography>
          <Select
            value={newRole}
            onChange={(e) => setNewRole(e.target.value)}
            fullWidth
            sx={{ mt: 2 }}
          >
            {roles.map((role) => (
              <MenuItem key={role.id} value={role.id}>
                {role.name}
              </MenuItem>
            ))}
          </Select>
          <Button
            variant="contained"
            color="primary"
            onClick={handleUpdateRole}
            sx={{ mt: 2 }}
          >
            Cập nhật
          </Button>
        </Box>
      </Modal>



            <Modal open={openUserModal} onClose={() => setOpenUserModal(false)}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 420,
          bgcolor: "white",
          borderRadius: 3,
          boxShadow: 24,
          p: 4,
          display: "flex",
          flexDirection: "column",
          gap: 2,
        }}
      >
        <Typography variant="h6" component="h2" textAlign="center">
          Thêm Người Dùng Mới
        </Typography>

        <TextField
          label="Họ và tên"
          variant="outlined"
          fullWidth
          value={newUser.fullName}
          onChange={(e) => setNewUser({ ...newUser, fullName: e.target.value })}
        />

        <TextField
          label="Email"
          type="email"
          variant="outlined"
          fullWidth
          value={newUser.email}
          onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
        />

        <TextField
          label="Số điện thoại"
          type="tel"
          variant="outlined"
          fullWidth
          value={newUser.phoneNumber}
          onChange={(e) => setNewUser({ ...newUser, phoneNumber: e.target.value })}
        />

        <TextField
          label="Mật khẩu"
          type="password"
          variant="outlined"
          fullWidth
          value={newUser.password}
          onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
        />

        <FormControl fullWidth>
  <Select
    value={newUser.roleId}
    onChange={(e) => setNewUser({ ...newUser, roleId: e.target.value })}
    displayEmpty
  >
    <MenuItem value="" disabled>
      Chọn vai trò
    </MenuItem>
    {roles.map((role) => (
      <MenuItem key={role.id} value={role.id}>
        {role.name}
      </MenuItem>
    ))}
  </Select>
</FormControl>


        <Button
          variant="contained"
          color="primary"
          onClick={handleAddUser}
          fullWidth
          sx={{
            textTransform: "none",
            fontWeight: "bold",
            py: 1.5,
            borderRadius: 2,
          }}
        >
          Thêm Người Dùng
        </Button>
      </Box>
    </Modal>

      <RoleDrawer visible={roleDrawerVisible} onClose={() => setRoleDrawerVisible(false)} />

        <UpdateUserDrawer
  open={updateDrawerVisible}
  onClose={() => setUpdateDrawerVisible(false)}
  user={selectedUser}
  roles={roles}
  onUpdate={(id, updatedData) => {
    setUsers(users.map(user => user.id === id ? { ...user, ...updatedData } : user));
    setFilteredUsers(filteredUsers.map(user => user.id === id ? { ...user, ...updatedData } : user));
  }}
/>
    </motion.div>
  );
};

export default UsersTable;
```

### ClientApp\src\components\Auth\AuthModal.jsx
```jsx
import React, { useState } from "react";
import { Modal, Button } from "flowbite-react";
import axios from "axios";
import "./AuthModal.css";

const AuthModal = ({ isOpen, onClose }) => {
  const [email, setEmail] = useState("");
  const [fullName, setFullName] = useState("");
  const [phoneNumber, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [step, setStep] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const isValidPassword = (password) => /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(password);

  const handleCheckEmail = async () => {
    if (!email) return setError("Email không được để trống!");
    if (!isValidEmail(email)) return setError("Email không hợp lệ!");

    setError("");
    setIsLoading(true);
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/check-email`, { email });
      setStep(response.data.exists ? 1 : 2);
    } catch (error) {
      setError("Lỗi khi kiểm tra email! Vui lòng thử lại.");
    }
    setIsLoading(false);
  };

  const handleLogin = async () => {
    if (!password) return setError("Mật khẩu không được để trống!");

    setError("");
    setIsLoading(true);
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/login`, { email, password });
      localStorage.setItem("token", response.data.token);
      onClose();
      setTimeout(() => window.location.reload(), 300);
    } catch (error) {
      setError("Sai tài khoản hoặc mật khẩu!");
    }
    setIsLoading(false);
  };

  const handleRegister = async () => {
    if (!isValidPassword(password)) return setError("Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và ký tự đặc biệt!");
    if (password !== confirmPassword) return setError("Mật khẩu xác nhận không khớp!");

    setError("");
    setIsLoading(true);
    try {
      await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/register`, { email, fullName, phoneNumber, password });
      setStep(1);
    } catch (error) {
      setError("Đăng ký thất bại! Hãy thử lại.");
    }
    setIsLoading(false);
  };

  return (
    <Modal show={isOpen} onClose={onClose}>
      <div className="modal-overlay">
        <div className="relative bg-white rounded-xl shadow-lg text-black w-full max-w-md max-h-full">
          <div className="flex items-center justify-between p-4 md:p-5 border-b border-gray-200">
            {step !== 0 && (
              <button className="text-gray-400 hover:bg-gray-200 rounded-lg text-sm w-8 h-8" onClick={() => setStep(0)}>◀</button>
            )}
            <button className="text-gray-400 hover:bg-gray-200 rounded-lg text-sm w-8 h-8" onClick={onClose}>✖</button>
          </div>
          <h3 className="text-2xl font-bold text-black text-center">
            {step === 0 ? "Đăng nhập/Đăng ký" : step === 1 ? "Đăng nhập" : step === 2 ? "Thông tin cá nhân" : "Đăng ký"}
          </h3>
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          <div className="p-4 space-y-4 flex flex-col items-center">
            {step === 0 && (
              <>
                <input type="email" placeholder="Nhập email của bạn" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleCheckEmail} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang kiểm tra..." : "Tiếp tục"}</Button>
              </>
            )}
            {step === 1 && (
              <>
                <input type="password" placeholder="Nhập mật khẩu" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleLogin} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang đăng nhập..." : "Đăng nhập"}</Button>
              </>
            )}
            {step === 2 && (
              <>
                <input type="text" placeholder="Họ và tên" value={fullName} onChange={(e) => setFullName(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <input type="text" placeholder="Số điện thoại" value={phoneNumber} onChange={(e) => setPhone(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={() => setStep(3)} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5">Tiếp tục</Button>
              </>
            )}
            {step === 3 && (
              <>
                <input type="password" placeholder="Nhập mật khẩu" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <input type="password" placeholder="Xác nhận mật khẩu" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleRegister} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang đăng ký..." : "Đăng ký"}</Button>
              </>
            )}
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default AuthModal;

```

### ClientApp\src\components\BestSellers\BestSellers.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Autoplay } from "swiper/modules";
import { useNavigate } from "react-router-dom";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/autoplay";

const DiscountProductSlider = () => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Giữ nguyên phần fetch data như cũ
        const [productsResponse, categoriesResponse, brandsResponse] = await Promise.all([
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`)
        ]);

        if (!productsResponse.ok) throw new Error("Không thể tải sản phẩm");
        if (!categoriesResponse.ok) throw new Error("Không thể tải danh mục");
        if (!brandsResponse.ok) throw new Error("Không thể tải thương hiệu");

        const [productsData, categoriesData, brandsData] = await Promise.all([
          productsResponse.json(),
          categoriesResponse.json(),
          brandsResponse.json()
        ]);

        // Xử lý dữ liệu như cũ
        const categoriesArray = categoriesData.$values || categoriesData || [];
        const brandsArray = brandsData.$values || brandsData || [];
        const productsArray = productsData.$values || productsData || [];

        const phoneCategory = categoriesArray.find(cat => cat.name === "Điện Thoại");
        if (!phoneCategory) throw new Error("Không tìm thấy danh mục 'Điện Thoại'");

        const phoneProducts = productsArray
          .filter(product => product.categoryId === phoneCategory.id)
          .map((product) => {
            const variant = product.variants?.[0] || {};
            const image = product.images?.[0]?.imageUrl || "/images/placeholder.jpg";
            const oldPrice = variant.price || 0;
            const newPrice = variant.discountPrice || oldPrice;
            const discountAmount = oldPrice - newPrice;
            const discount = oldPrice > 0
              ? `-${Math.round((discountAmount / oldPrice) * 100)}%`
              : "0%";

            const brand = brandsArray.find(b => b.id === product.brandId);

            return {
              id: product.id,
              name: product.name,
              oldPrice,
              newPrice,
              discount,
              discountAmount,
              image,
              features: [
                variant.storage || "Không xác định",
                brand?.name || "Không có thương hiệu",
                "Hiệu suất cao",
              ],
            };
          });

        setProducts(phoneProducts);
        setCategories(categoriesArray);
        setBrands(brandsArray);
      } catch (err) {
        setError("Không thể tải dữ liệu: " + err.message);
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12 space-x-2">
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full"></div>
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full" style={{ animationDelay: '0.1s' }}></div>
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full" style={{ animationDelay: '0.2s' }}></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mx-auto max-w-md my-6 rounded-lg shadow-md">
        <p className="font-bold">Lỗi!</p>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="w-full flex justify-center py-6">
      {/* Bọc thêm 1 div để tạo background trắng cho nội dung */}
      <div className="max-w-[1200px] w-full px-4 bg-white bg-opacity-90 rounded-xl shadow-xl p-6 backdrop-blur-sm">
        <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center relative">
          <span className="relative z-10 px-4 bg-white bg-opacity-90 rounded-full">
            Mua đúng quà - Điện thoại "Hiền Hòa"
          </span>
          <span className="absolute left-0 right-0 top-1/2 h-0.5 bg-gradient-to-r from-transparent via-red-400 to-transparent z-0"></span>
        </h2>
        
        <Swiper
          modules={[Navigation, Autoplay]}
          navigation
          autoplay={{
            delay: 3000,
            disableOnInteraction: false,
          }}
          spaceBetween={20}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 2 },
            768: { slidesPerView: 3 },
            1024: { slidesPerView: 4 },
          }}
          className="pb-6"
        >
          {products.map((product) => (
            <SwiperSlide key={product.id} className="flex justify-center">
              <div
                className="bg-white bg-opacity-95 p-4 rounded-xl shadow-lg border border-gray-100 hover:shadow-xl hover:border-red-300 transition-all duration-300 relative overflow-hidden group"
                onClick={() => navigate(`/product/${product.id}`)}
              >
                {/* Ribbon giảm giá */}
                {product.discount !== "0%" && (
                  <div className="absolute top-0 right-0 bg-red-600 text-white text-xs font-bold px-2 py-1 transform rotate-12 translate-x-2 -translate-y-1 z-10">
                    {product.discount}
                  </div>
                )}
                
                <div className="relative h-40 mb-3 overflow-hidden rounded-lg">
                  <img
                    src={product.image?.startsWith("http") ? product.image : `${process.env.REACT_APP_API_BASE_URL}/${product.image}`}
                    alt={product.name}
                    className="w-full h-full object-contain transition-transform duration-500 group-hover:scale-110"
                    onError={(e) => { 
                      e.target.onerror = null; 
                      e.target.src = "https://via.placeholder.com/150"; 
                    }}
                  />
                </div>

                <div className="text-gray-700 text-sm space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-500 line-through">
                      {product.oldPrice.toLocaleString()}đ
                    </span>
                    <span className="text-red-500 font-semibold">
                      {product.newPrice.toLocaleString()}đ
                    </span>
                  </div>
                  
                  <p className="text-green-600 text-sm font-medium bg-green-50 px-2 py-1 rounded-full inline-block">
                    Giảm {product.discountAmount.toLocaleString()}đ
                  </p>
                  
                  <h3 className="text-gray-800 font-medium text-base truncate group-hover:text-red-600 transition-colors">
                    {product.name}
                  </h3>
                  
                  <ul className="text-xs text-gray-600 space-y-1">
                    {product.features.map((feature, index) => (
                      <li key={index} className="flex items-center">
                        <span className="w-1.5 h-1.5 bg-red-400 rounded-full mr-2"></span>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
};

export default DiscountProductSlider;
```

### ClientApp\src\components\Checkout\Checkout.jsx
```jsx
import React, { useEffect, useState } from "react";
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  List, 
  ListItem, 
  ListItemText,
  ListItemAvatar,
  Avatar,
  Radio,
  RadioGroup,
  FormControlLabel,
  CircularProgress,
  Divider,
  Alert
} from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";


const Checkout = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { 
    selectedItems = [], 
    totalAmount = 0, 
    voucherCode = "", 
    discountAmount = 0
  } = location.state || {};
  
  const [userId, setUserId] = useState(null);
  const [addresses, setAddresses] = useState([]);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [guestAddress, setGuestAddress] = useState({
    fullName: "",
    phoneNumber: "",
    addressLine1: "",
    addressLine2: "",
    city: "",
    state: "",
    zipCode: "",
    country: "",
  });
  const [voucherId, setVoucherId] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("1"); // 1 = Tiền mặt, 2 = MoMo, 3 = PayPal
  const [momoPaymentType, setMomoPaymentType] = useState("qr");
  const [isLoading, setIsLoading] = useState(false);
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [error, setError] = useState(null);
  const [finalAmount, setFinalAmount] = useState(totalAmount);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (!Number.isInteger(id)) return;
        setUserId(id);
        fetchAddresses(id);
      } catch (error) {
        console.error("Lỗi khi giải mã token:", error);
      }
    }

    if (voucherCode) {
      fetchVoucherId(voucherCode);
    }

    fetchPaymentMethods();
  }, [voucherCode]);

  const fetchAddresses = async (userId) => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/address/user/${userId}`);
      setAddresses(response.data);
      if (response.data.length > 0) {
        setSelectedAddress(response.data[0]);
      }
    } catch (error) {
      console.error("Lỗi khi lấy địa chỉ:", error);
      setError("Lỗi khi tải địa chỉ giao hàng");
    }
  };

  const fetchVoucherId = async (code) => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/code/${code}`);
      setVoucherId(response.data.id);
    } catch (error) {
      console.error("Lỗi khi lấy voucher:", error);
      setError("Mã giảm giá không hợp lệ hoặc đã hết hạn");
    }
  };

  const fetchPaymentMethods = async () => {
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/PaymentMethod`);
      setPaymentMethods(response.data);
    } catch (error) {
      console.error("Lỗi khi lấy phương thức thanh toán:", error);
      setError("Lỗi khi tải phương thức thanh toán");
    }
  };

  const removePaidItemsFromCart = async () => {
    if (!userId) return;
    
    try {
      await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/cart/remove-paid-items?userId=${userId}`);
    } catch (error) {
      console.error("Lỗi khi xóa sản phẩm đã thanh toán:", error);
    }
  };

  const removeGuestCartItems = () => {
    const sessionCart = sessionStorage.getItem("Cart");
    if (!sessionCart) return;

    const cartItems = JSON.parse(sessionCart) || [];
    const paidProductVariantIds = selectedItems.map(item => item.productVariantId);
    const remainingItems = cartItems.filter(
      item => !paidProductVariantIds.includes(item.productVariantId)
    );

    sessionStorage.setItem("Cart", JSON.stringify(remainingItems));
  };
  const handlePlaceOrder = async () => {
    setError(null);

    // Xử lý giỏ hàng cho cả khách và người dùng đã đăng nhập
    if (!userId) {
      removeGuestCartItems();
    } else {
      await removePaidItemsFromCart();
    }
    
    if (userId && !selectedAddress) {
      setError("Vui lòng chọn địa chỉ giao hàng.");
      return;
    }

    let addressId = selectedAddress ? selectedAddress.id : null;

    if (!userId && !addressId) {
      if (!guestAddress.fullName || !guestAddress.phoneNumber || !guestAddress.addressLine1 || 
          !guestAddress.city || !guestAddress.state || !guestAddress.country) {
        setError("Vui lòng điền đầy đủ thông tin địa chỉ giao hàng.");
        return;
      }

      try {
        setIsLoading(true);
        const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/address/add`, {
          userId: null,
          ...guestAddress
        });
        addressId = response.data.addressId;
      } catch (error) {
        console.error("Lỗi khi thêm địa chỉ:", error);
        setError("Lỗi khi thêm địa chỉ, vui lòng thử lại.");
        setIsLoading(false);
        return;
      }
    }

    const orderDto = {
      userId: userId || null,
      orderDate: new Date().toISOString(),
      totalAmount: finalAmount,
      orderStatus: "Pending",
      addressId: addressId,
      paymentMethodId: parseInt(paymentMethod),
      orderItems: selectedItems.map((item) => ({
        productVariantId: item.productVariantId,
        quantity: item.quantity,
        price: item.productDiscountPrice || item.productPrice,
      })),
      voucherId: voucherId || null,
    };

    try {
      setIsLoading(true);
      
      const headers = { 'Content-Type': 'application/json' };
      
      if (paymentMethod === "2" && momoPaymentType === "card") {
        headers['Payment-Method'] = 'card';
      }

      // Handle PayPal payment
      if (paymentMethod === "3") {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/paypal/create-order`,
          orderDto,
          { headers }
        );
        
        if (response.data.approvalUrl) {
          window.location.href = response.data.approvalUrl;
          return;
        }
    }

      
      // Handle MoMo payment
      else if (paymentMethod === "2") {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders`, 
          orderDto, 
          { headers }
        );
        
        if (response.data.paymentUrl) {
          localStorage.setItem("currentOrder", JSON.stringify({
            orderId: response.data.orderId,
            paymentMethod: paymentMethod
          }));
          
          window.location.href = response.data.paymentUrl;
          return;
        }
      }
      // Handle cash payment
      else {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders`, 
          orderDto, 
          { headers }
        );
        navigate("/payment-success", { state: { orderId: response.data.orderId } });
      }
    } catch (error) {
      console.error("Lỗi khi tạo đơn hàng:", error);
      setError(error.response?.data?.message || "Lỗi khi tạo đơn hàng, vui lòng thử lại.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box sx={{ p: 4, maxWidth: 1200, margin: '0 auto' }}>
      <Typography variant="h4" mb={4} sx={{ fontWeight: 'bold' }}>
        Thanh toán
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Box sx={{ display: 'flex', gap: 4 }}>
        <Box sx={{ flex: 2 }}>
          <Box sx={{ mb: 4, p: 3, border: '1px solid #e0e0e0', borderRadius: 2 }}>
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
              Thông tin giao hàng
            </Typography>
            
            {userId ? (
              <>
                <Typography variant="subtitle1" sx={{ mb: 2 }}>
                  Chọn địa chỉ giao hàng
                </Typography>
                <RadioGroup
                  value={selectedAddress?.id || ""}
                  onChange={(e) => {
                    const address = addresses.find(a => a.id === parseInt(e.target.value));
                    setSelectedAddress(address);
                  }}
                >
                  {addresses.map((address) => (
                    <Box key={address.id} sx={{ mb: 2, p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                      <FormControlLabel
                        value={address.id.toString()}
                        control={<Radio />}
                        label={
                          <Box>
                            <Typography><strong>{address.fullName}</strong> - {address.phoneNumber}</Typography>
                            <Typography variant="body2">
                              {address.addressLine1}, {address.addressLine2 && `${address.addressLine2}, `}
                              {address.city}, {address.state}, {address.country}
                            </Typography>
                          </Box>
                        }
                      />
                    </Box>
                  ))}
                </RadioGroup>
              </>
            ) : (
              <>
                <TextField
                  label="Họ và tên"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.fullName}
                  onChange={(e) =>
                    setGuestAddress({ ...guestAddress, fullName: e.target.value })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Số điện thoại"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.phoneNumber}
                  onChange={(e) =>
                    setGuestAddress({ ...guestAddress, phoneNumber: e.target.value })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Địa chỉ"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.addressLine1}
                  onChange={(e) =>
                    setGuestAddress({ ...guestAddress, addressLine1: e.target.value })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Địa chỉ bổ sung (tùy chọn)"
                  variant="outlined"
                  fullWidth
                  value={guestAddress.addressLine2}
                  onChange={(e) =>
                    setGuestAddress({ ...guestAddress, addressLine2: e.target.value })
                  }
                  sx={{ mb: 2 }}
                />
                <Box sx={{ display: 'flex', gap: 2 }}>
                  <TextField
                    label="Thành phố"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.city}
                    onChange={(e) =>
                      setGuestAddress({ ...guestAddress, city: e.target.value })
                    }
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    label="Tỉnh/Thành"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.state}
                    onChange={(e) =>
                      setGuestAddress({ ...guestAddress, state: e.target.value })
                    }
                    sx={{ mb: 2 }}
                  />
                </Box>
                <Box sx={{ display: 'flex', gap: 2 }}>
                  <TextField
                    label="Mã bưu điện"
                    variant="outlined"
                    fullWidth
                    value={guestAddress.zipCode}
                    onChange={(e) =>
                      setGuestAddress({ ...guestAddress, zipCode: e.target.value })
                    }
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    label="Quốc gia"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.country}
                    onChange={(e) =>
                      setGuestAddress({ ...guestAddress, country: e.target.value })
                    }
                    sx={{ mb: 2 }}
                  />
                </Box>
              </>
            )}
          </Box>

          <Box sx={{ mb: 4, p: 3, border: '1px solid #e0e0e0', borderRadius: 2 }}>
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
              Phương thức thanh toán
            </Typography>
            <RadioGroup
              value={paymentMethod}
              onChange={(e) => setPaymentMethod(e.target.value)}
            >
              {paymentMethods.map((method) => (
                <Box key={method.id} sx={{ mb: 1, p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                  <FormControlLabel
                    value={method.id.toString()}
                    control={<Radio />}
                    label={<Typography>{method.name}</Typography>}
                    sx={{ marginLeft: 0 }}
                  />
                  
                  {method.id === 2 && paymentMethod === "2" && (
                    <Box sx={{ mt: 1, pl: 4 }}>
                      <RadioGroup
                        value={momoPaymentType}
                        onChange={(e) => setMomoPaymentType(e.target.value)}
                        row
                      >
                        <FormControlLabel
                          value="qr"
                          control={<Radio size="small" />}
                          label="Quét QR Code"
                        />
                        <FormControlLabel
                          value="card"
                          control={<Radio size="small" />}
                          label="Thẻ Visa/MasterCard"
                        />
                      </RadioGroup>
                    </Box>
                  )}
                </Box>
              ))}
            </RadioGroup>

            {paymentMethod === "2" && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                {momoPaymentType === "card" 
                  ? "Bạn sẽ được chuyển hướng đến trang thanh toán bằng thẻ Visa/MasterCard" 
                  : "Bạn sẽ được chuyển hướng đến trang thanh toán QR MoMo"}
              </Typography>
            )}

            {paymentMethod === "3" && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Bạn sẽ được chuyển hướng đến trang thanh toán PayPal
              </Typography>
            )}
          </Box>
        </Box>

        <Box sx={{ flex: 1 }}>
          <Box sx={{ p: 3, border: '1px solid #e0e0e0', borderRadius: 2 }}>
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
              Đơn hàng của bạn
            </Typography>
            
            <List sx={{ mb: 2 }}>
              {selectedItems.map((item) => (
                <ListItem key={item.productVariantId} sx={{ px: 0 }}>
                  <ListItemAvatar>
                    <img
                      src={
                        item.productImage.startsWith("http")
                          ? item.productImage
                          : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}`
                      }
                      alt="Product img"
                      className="size-10"
                      onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/50"; }}
                    />
                  </ListItemAvatar>
                  <ListItemText
                    primary={`${item.productName}`}
                    secondary={`${item.variantColor} - ${item.variantStorage}`}
                  />
                  <Typography variant="body2">
                    {item.quantity} × {(item.productDiscountPrice || item.productPrice).toLocaleString()}₫
                  </Typography>
                </ListItem>
              ))}
            </List>

            <Divider sx={{ my: 2 }} />

            {voucherCode && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="body1">
                  Mã giảm giá: {voucherCode}
                </Typography>
                <Typography variant="body1" color="success.main">
                  -{discountAmount.toLocaleString()}₫
                </Typography>
              </Box>
            )}

            <Box sx={{ mb: 2 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography>Tạm tính:</Typography>
                <Typography>{(totalAmount + discountAmount).toLocaleString()}₫</Typography>
              </Box>
              {discountAmount > 0 && (
                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                  <Typography>Giảm giá:</Typography>
                  <Typography color="success.main">-{discountAmount.toLocaleString()}₫</Typography>
                </Box>
              )}
              <Divider sx={{ my: 1 }} />
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                <Typography variant="h6">Tổng cộng:</Typography>
                <Typography variant="h6" color="error">
                  {totalAmount.toLocaleString()}₫
                </Typography>
              </Box>
            </Box>

            <Button
              variant="contained"
              color="error"
              fullWidth
              size="large"
              onClick={handlePlaceOrder}
              disabled={isLoading || selectedItems.length === 0}
              sx={{ mt: 2 }}
            >
              {isLoading ? (
                <CircularProgress size={24} color="inherit" />
              ) : paymentMethod === "2" ? (
                momoPaymentType === "card" ? "Thanh toán bằng thẻ Visa/MasterCard" : "Thanh toán bằng QR MoMo"
              ) : paymentMethod === "3" ? (
                "Thanh toán bằng PayPal"
              ) : (
                "Thanh toán với Tiền Mặt"
              )}
            </Button>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Checkout;
```

### ClientApp\src\components\Commitment\Commitment.jsx
```jsx
import React from "react";

const policies = [
  {
    icon: "https://fptshop.com.vn/img/icons/policy3.svg?w=128&q=100",
    title: "Thương hiệu đảm bảo",
    description: "Nhập khẩu, bảo hành chính hãng",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy1.svg?w=128&q=100",
    title: "Đổi trả dễ dàng",
    description: "Theo chính sách đổi trả tại SHN Gear",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy4.svg?w=128&q=100",
    title: "Sản phẩm chất lượng",
    description: "Đảm bảo tương thích và độ bền cao",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy2.svg?w=128&q=100",
    title: "Giao hàng tận nơi",
    description: "Tại 63 tỉnh thành",
  },
];

const Commitment = () => {
  return (
    <div className="bg-gray-50 py-10 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {policies.map((policy, index) => (
            <div 
              key={index}
              className="bg-white rounded-lg shadow-sm p-4 flex items-start sm:items-center space-x-3 sm:space-x-4"
            >
              <img 
                src={policy.icon} 
                alt={policy.title} 
                className="w-10 h-10 sm:w-12 sm:h-12 flex-shrink-0"
              />
              <div className="flex-1">
                <h3 className="font-bold text-sm sm:text-base mb-1 text-gray-800">
                  {policy.title}
                </h3>
                <p className="text-xs sm:text-sm text-gray-600">
                  {policy.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Commitment;
```

### ClientApp\src\components\FeaturedCategories\CategoryLarge.jsx
```jsx
import React from "react";
import { useNavigate } from "react-router-dom";

const CategoryLarge = ({ id, name, image }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    navigate(`/ProductList?categoryId=${id}`);
  };

  return (
    <div
      className="relative w-[420px] h-[180px] sm:w-[350px] sm:h-[160px] xs:w-[300px] bg-gradient-to-br from-gray-50 to-gray-200 rounded-xl shadow-lg overflow-hidden p-4 transition-all duration-300 hover:shadow-xl hover:-translate-y-1 mt-4 cursor-pointer"
      onClick={handleClick}
    >
      <span className="absolute top-3 left-4 text-lg font-semibold text-gray-800 px-2 py-1 z-10">
        {name}
      </span>
      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 h-full flex items-center">
        <img
    src={
        image?.startsWith("http")
            ? image // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${image}`
    }
    alt={`logo`}
          className="max-h-[130px] sm:max-h-[110px] xs:max-h-[100px] object-contain transition-transform duration-300 hover:scale-115 hover:rotate-2"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/>
      </div>
      <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-red-400 to-purple-500 opacity-75"></div>
    </div>
  );
};

export default CategoryLarge;

```

### ClientApp\src\components\FeaturedCategories\FeaturedCategories.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination } from "swiper/modules";
import { useNavigate } from "react-router-dom"; // Hook điều hướng
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "aos/dist/aos.css";
import AOS from "aos";
import CategoryLarge from "./CategoryLarge";

const FeaturedCategories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate(); // Hook điều hướng

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
        if (!response.ok) throw new Error("Không thể tải danh mục");
        const data = await response.json();
        console.log("Dữ liệu từ API:", data);

        const categoriesArray = Array.isArray(data.$values)
          ? data.$values
          : Array.isArray(data)
          ? data
          : [];
        setCategories(categoriesArray);
      } catch (error) {
        console.error("Lỗi khi lấy danh mục:", error);
        setError("Không thể tải danh mục: " + error.message);
        setCategories([]);
      } finally {
        setLoading(false);
      }

      AOS.init({ duration: 1000 });
    };

    fetchCategories();
  }, []);

  if (loading) {
    return <div className="text-center py-6">Đang tải danh mục...</div>;
  }

  if (error) {
    return <div className="text-center py-6 text-red-500">{error}</div>;
  }

  return (
    <div className="w-full flex justify-center py-6">
      <div className="max-w-[1200px] w-full px-4">
        <Swiper
          modules={[Navigation, Pagination]}
          navigation
          pagination={{ clickable: true }}
          spaceBetween={20}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 2 },
            768: { slidesPerView: 3 },
            1024: { slidesPerView: 4 },
          }}
          className="pb-6 transition-transform duration-500 ease-in-out"
        >
          {categories.map((category) => (
            <SwiperSlide
              key={category.id}
              className="flex justify-center transform hover:scale-105 transition-all duration-300"
            >
              <CategoryLarge
                id={category.id}
                name={category.name}
                image={category.image}
              />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
};

export default FeaturedCategories;

```

### ClientApp\src\components\FlashSale\FlashSale.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from "swiper/modules";
import { useNavigate } from "react-router-dom";
import Flaslsalebanner from  "../../assets/img/anhcuanghia/hot-sale-cuoi-tuan.gif"
import "swiper/css";
import "swiper/css/navigation";

const FlashSale = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeLeft, setTimeLeft] = useState({
    hours: 12,
    minutes: 0,
    seconds: 0,
  });
  const navigate = useNavigate();

  // Countdown timer effect
useEffect(() => {
  const calculateTimeLeft = () => {
    const now = new Date();
    const currentDay = now.getDay(); // 0 là Chủ Nhật, 1-6 là Thứ 2-Thứ 7
    const endOfWeek = new Date(now);
    
    // Tính đến 23:59:59 Chủ Nhật
    endOfWeek.setDate(now.getDate() + (7 - currentDay)); // Nhảy đến Chủ Nhật
    endOfWeek.setHours(23, 59, 59, 0);

    const diff = endOfWeek - now;

    if (diff <= 0) {
      return { hours: 0, minutes: 0, seconds: 0 };
    }

    const hours = Math.floor((diff / (1000 * 60 * 60))) % 24;
    const minutes = Math.floor((diff / (1000 * 60))) % 60;
    const seconds = Math.floor((diff / 1000)) % 60;

    return { hours, minutes, seconds };
  };

  // Cập nhật ngay lần đầu
  setTimeLeft(calculateTimeLeft());

  const timer = setInterval(() => {
    setTimeLeft(calculateTimeLeft());
  }, 1000);

  return () => clearInterval(timer);
}, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/lowest-price`);
        if (!response.ok) throw new Error("Không thể tải sản phẩm");
        const productsData = await response.json();

        const formattedProducts = productsData.map((product) => {
          const variant = product.variants?.[0] || {};
          const image = product.images?.[0]?.imageUrl || "/images/placeholder.jpg";
          
          const oldPrice = variant.price || 0;
          const newPrice = variant.discountPrice || oldPrice;
          const discountAmount = oldPrice - newPrice;
          const discount = oldPrice > 0 
            ? `-${Math.round((discountAmount / oldPrice) * 100)}%` 
            : "0%";

          return {
            id: product.id,
            name: product.name,
            oldPrice,
            newPrice,
            discount,
            discountAmount,
            image,
            features: [
              variant.storage || "Không xác định",
              product.brand?.name || "Không có thương hiệu",
              "Hiệu suất cao"
            ],
          };
        });

        setProducts(formattedProducts);
      } catch (err) {
        setError("Không thể tải dữ liệu: " + err.message);
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-red-500"></div>
        <span className="ml-3 text-gray-600">Đang tải sản phẩm...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mx-auto max-w-3xl my-6">
        <p className="font-bold">Lỗi</p>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="w-full bg-gradient-to-b from-red-50 to-white py-10 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      {/* Decorative elements */}
      <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
        <div className="absolute top-20 left-10 w-16 h-16 bg-red-200 rounded-full opacity-20"></div>
        <div className="absolute bottom-10 right-20 w-24 h-24 bg-red-300 rounded-full opacity-15"></div>
        <div className="absolute top-1/3 right-1/4 w-10 h-10 bg-red-400 rounded-full opacity-10"></div>
      </div>

      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-10">
          <div className="inline-block bg-red-600 text-white px-4 py-2 rounded-full mb-4 shadow-lg">
            <span className="font-bold">TOP 10 GIÁ TỐT NHẤT</span>
          </div>
          {/* Thay thế phần text bằng ảnh GIF */}
  <div className="flex justify-center">
    <img 
      src={Flaslsalebanner}
      alt="Flash Sale Banner"
      className="max-w-full h-auto"
      style={{ 
      maxHeight: '150px',
      border: '2px solid #fecaca' // Thêm viền màu đỏ nhạt nếu cần
    }} // Điều chỉnh theo nhu cầu
    />
  </div>

          {/* Countdown timer */}
          <div className="mt-6 flex justify-center">
            <div className="bg-white shadow-lg rounded-lg p-4 inline-flex items-center space-x-4 border-2 border-red-200">
              <span className="text-sm font-medium text-gray-600">Kết thúc sau:</span>
              <div className="flex items-center space-x-2">
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.hours.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Giờ</span>
                </div>
                <span className="text-red-600 font-bold">:</span>
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.minutes.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Phút</span>
                </div>
                <span className="text-red-600 font-bold">:</span>
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.seconds.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Giây</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="relative">
          {products.length > 0 ? (
            <>
              <Swiper
      modules={[Navigation]}
      navigation={{
        nextEl: ".flash-sale-next",
        prevEl: ".flash-sale-prev",
      }}
      spaceBetween={30}
      slidesPerView={1}
      breakpoints={{
        640: { slidesPerView: 2 },
        768: { slidesPerView: 3 },
        1024: { slidesPerView: 4 },
      }}
      className="pb-12"
    >
      {products.map((product) => (
        <SwiperSlide key={product.id}>
          <div className="h-full flex flex-col">
            <div
              className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 cursor-pointer group relative border-2 border-transparent hover:border-red-500 flex flex-col h-full"
              onClick={() => navigate(`/product/${product.id}`)}
            >
              {/* Hot sale ribbon */}
              <div className="absolute top-0 left-0 bg-red-600 text-white text-xs font-bold px-3 py-1 z-10 clip-path-ribbon">
                HOT SALE
              </div>

              {/* Phần hình ảnh - cố định tỷ lệ khung hình */}
              <div className="relative aspect-square bg-gray-50 flex-shrink-0">
                <img
                  src={
                    product.image?.startsWith("http")
                      ? product.image
                      : `${process.env.REACT_APP_API_BASE_URL}/${product.image}`
                  }
                  alt={product.name}
                  className="absolute top-0 left-0 w-full h-full object-contain p-4 group-hover:scale-105 transition-transform duration-300"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = "https://via.placeholder.com/300";
                  }}
                />
                {product.discount !== "0%" && (
                  <div className="absolute top-4 right-4 bg-red-600 text-white text-sm font-bold px-3 py-1 rounded-full shadow-lg">
                    {product.discount}
                  </div>
                )}
              </div>

              {/* Phần thông tin - cố định chiều cao */}
              <div className="p-5 flex flex-col flex-grow" style={{ minHeight: '280px' }}>
                <div className="flex justify-between items-start mb-2">
                  {product.oldPrice > product.newPrice ? (
                    <span className="text-gray-500 text-sm line-through">
                      {product.oldPrice.toLocaleString()}đ
                    </span>
                  ) : (
                    <span className="text-sm invisible">0đ</span> 
                  )}
                  <span className="text-red-600 font-bold text-lg">
                    {product.newPrice.toLocaleString()}đ
                  </span>
                </div>

                <h3 className="text-lg font-bold text-gray-900 mb-2 line-clamp-2" style={{ height: '3.5rem' }}>
                  {product.name}
                </h3>

                <div className="mb-3 min-h-[28px]">
                  {product.discountAmount > 0 && (
                    <span className="inline-block bg-red-100 text-red-800 text-xs font-bold px-2 py-1 rounded">
                      Tiết kiệm {product.discountAmount.toLocaleString()}đ
                    </span>
                  )}
                </div>

                <ul className="space-y-1 text-sm text-gray-600 mb-4 flex-grow">
                  {product.features.map((feature, index) => (
                    <li key={index} className="flex items-start h-6">
                      <svg
                        className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0 text-red-500"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M5 13l4 4L19 7"
                        />
                      </svg>
                      <span className="line-clamp-1">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button className="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-bold transition-all duration-300 transform hover:scale-105 shadow-md mt-auto">
                  MUA NGAY
                </button>
              </div>
            </div>
          </div>
        </SwiperSlide>
      ))}
    </Swiper>

              <div className="flash-sale-prev absolute left-0 top-1/2 -translate-y-1/2 z-10 w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer hover:bg-red-50 border-2 border-red-200">
                <svg
                  className="w-6 h-6 text-red-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M15 19l-7-7 7-7"
                  />
                </svg>
              </div>
              <div className="flash-sale-next absolute right-0 top-1/2 -translate-y-1/2 z-10 w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center cursor-pointer hover:bg-red-50 border-2 border-red-200">
                <svg
                  className="w-6 h-6 text-red-600"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </div>
            </>
          ) : (
            <div className="text-center py-10 bg-white rounded-lg shadow-sm max-w-4xl mx-auto">
              <svg
                className="w-16 h-16 mx-auto text-gray-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={1.5}
                  d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
              <h3 className="mt-2 text-lg font-medium text-gray-900">Không có sản phẩm khuyến mãi</h3>
              <p className="mt-1 text-gray-500">Hiện không có sản phẩm nào trong chương trình flash sale</p>
              <div className="mt-6">
                <button
                  onClick={() => navigate('/productlist')}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none"
                >
                  Xem tất cả sản phẩm
                </button>
              </div>
            </div>
          )}
        </div>

        {/* View all button */}
        <div className="text-center mt-8">
          <button 
            className="bg-white text-red-600 border-2 border-red-600 hover:bg-red-600 hover:text-white font-bold py-3 px-8 rounded-full transition-all duration-300 shadow-md hover:shadow-lg"
            onClick={() => navigate('/productlist')}
          >
            Xem tất cả sản phẩm
          </button>
        </div>
      </div>

      {/* CSS for ribbon */}
      <style jsx>{`
        .clip-path-ribbon {
          clip-path: polygon(0 0, 100% 0, 95% 50%, 100% 100%, 0 100%);
          width: 80px;
        }
      `}</style>
    </div>
  );
};

export default FlashSale;
```

### ClientApp\src\components\Footer\Footer.jsx
```jsx
import React from "react";
import "./Footer.css";

const Footer = () => {
  return (
    <footer className="footer-container">
      <div class="footer-top-container">
        <div class="footer-title">
          <h3>Hệ thống SHN Gear trên toàn quốc</h3>
          <p>
            Bao gồm Cửa hàng SHN Gear, Trung tâm Laptop, F.Studio, S.Studio,
            Garmin Brand Store
          </p>
        </div>
        <button class="store-button">Xem danh sách cửa hàng</button>
      </div>

      <div className="footer-content">
        {/* Kết nối mạng xã hội */}
        <div className="footer-section">
          <h4>KẾT NỐI VỚI SHN Gear</h4>
          <div className="social-icons">
            <img
              src="https://img.icons8.com/?size=96&id=118497&format=png"
              alt="Facebook"
            />
            <img
              src="https://img.icons8.com/?size=96&id=0m71tmRjlxEe&format=png"
              alt="Zalo"
            />
            <img
              src="https://img.icons8.com/?size=96&id=9a46bTk3awwI&format=png"
              alt="YouTube"
            />
            <img
              src="https://img.icons8.com/?size=100&id=118638&format=png"
              alt="TikTok"
            />
          </div>

          <h4>TỔNG ĐÀI MIỄN PHÍ</h4>
          <p>
            <strong>Tư vấn mua hàng (Miễn phí)</strong>
          </p>
          <p>
            <strong>0338397638 (Nhánh 1)</strong>
          </p>
          <p>
            <strong>Góp ý, khiếu nại</strong>
          </p>
          <p>
            <strong>0797841166 (8h00 - 22h00)</strong>
          </p>
          <p>
            <strong>Hỗ trợ kỹ thuật</strong>
          </p>
          <p>
            <strong>Gặp chuyên gia ngay!</strong>
          </p>
        </div>

        {/* Về chúng tôi */}
        <div className="footer-section">
          <h4>VỀ CHÚNG TÔI</h4>
          <ul>
            <li>Giới thiệu về công ty</li>
            <li>Quy chế hoạt động</li>
            <li>Dự án Doanh nghiệp</li>
            <li>Tin tức khuyến mại</li>
            <li>Giới thiệu máy đổi trả</li>
            <li>Hướng dẫn mua hàng & thanh toán online</li>
            <li>Tra cứu hóa đơn điện tử</li>
            <li>Câu hỏi thường gặp</li>
          </ul>
        </div>

        {/* Chính sách */}
        <div className="footer-section">
          <h4>CHÍNH SÁCH</h4>
          <ul>
            <li>Chính sách bảo hành</li>
            <li>Chính sách đổi trả</li>
            <li>Chính sách bảo mật</li>
            <li>Chính sách trả góp</li>
            <li>Chính sách giao hàng & lắp đặt</li>
            <li>Chính sách thu thập & xử lý dữ liệu cá nhân</li>
          </ul>
        </div>

        {/* Hỗ trợ thanh toán */}
        <div className="footer-section">
          <h4>HỖ TRỢ THANH TOÁN</h4>
          <div className="payment-icons">
            <img
              src="https://img.icons8.com/?size=96&id=13608&format=png"
              alt="Visa"
            />
            <img
              src="https://img.icons8.com/?size=96&id=Sq0VNi1Afgmj&format=png"
              alt="Mastercard"
            />
            <img
              src="https://img.icons8.com/?size=160&id=ikCy0r3I68vX&format=png"
              alt="Momo"
            />
            <img
              src="https://img.icons8.com/?size=96&id=0m71tmRjlxEe&format=png"
              alt="ZaloPay"
            />
            <img
              src="https://img.icons8.com/?size=160&id=cFdvD3H13wdO&format=png"
              alt="Apple Pay"
            />
            <img
              src="https://img.icons8.com/?size=160&id=PjkFdGXiQbvY&format=png"
              alt="Samsung Pay"
            />
          </div>

          <h4>CHỨNG NHẬN</h4>
          <div className="certification-icons">
            <img
              src="https://th.bing.com/th?id=OIP.vZ2cjkL0u4w45jFKiHnkyQHaHa&w=104&h=104&c=7&bgcl=552c98&r=0&o=6&dpr=1.3&pid=13.1"
              alt="DMCA"
            />
            <img
              src="https://th.bing.com/th?id=OIP.JWsl39NXvjcGkxk3H3aB8wHaCz&w=349&h=132&c=8&rs=1&qlt=90&o=6&dpr=1.3&pid=3.1&rm=2"
              alt="Bộ Công Thương"
            />
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

### ClientApp\src\components\HeroBanner\HeroBanner.jsx
```jsx
import { useState, useEffect } from "react";
import Banner1 from "../../assets/img/anhcuanghia/banner1.png";
import Banner2 from "../../assets/img/anhcuanghia/bannervip.png";
import Banner3 from "../../assets/img/anhcuanghia/hieuthuhai.png";

const Slider = () => {
  const slides = [
    { img: Banner1 },
    { img: Banner2 },
    { img: Banner3 },
  ];

  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);

  // Auto-rotate slides
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide();
    }, 5000);
    return () => clearInterval(interval);
  }, [currentIndex]);

  const nextSlide = () => {
    setIsTransitioning(true);
    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);
  };

  const prevSlide = () => {
    setIsTransitioning(true);
    setCurrentIndex((prevIndex) => (prevIndex - 1 + slides.length) % slides.length);
  };

  const goToSlide = (index) => {
    setIsTransitioning(true);
    setCurrentIndex(index);
  };

  // Reset transitioning state after animation completes
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsTransitioning(false);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentIndex]);

  return (
    <div className="relative w-full overflow-hidden">
      {/* Slider container */}
      <div className="relative">
        {/* Slider */}
        <div className={`flex relative ${isTransitioning ? "transition-opacity duration-500 ease-in-out" : ""}`}>
          {slides.map((slide, index) => (
            <div
              key={index}
              className={`flex-shrink-0 w-full transition-opacity duration-500 ${index === currentIndex ? "opacity-100" : "opacity-0 absolute"}`}
            >
              <div className="relative">
                <img
                  src={slide.img}
                  alt={`Slide ${index + 1}`}
                  className="w-full h-auto object-cover"
                  loading="lazy"
                />
                {/* Gradient overlay để tạo hiệu ứng trong suốt dần về phía dưới */}
                <div 
                  className="absolute inset-0 bg-gradient-to-t from-transparent via-transparent to-black/20 pointer-events-none"
                  style={{
                    maskImage: "linear-gradient(to bottom, black 50%, transparent 100%)",
                    WebkitMaskImage: "linear-gradient(to bottom, black 50%, transparent 100%)"
                  }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Navigation buttons */}
      <button 
        className="absolute top-1/2 left-5 -translate-y-1/2 w-12 h-12 bg-white/70 rounded-full flex items-center justify-center z-10 transition-all hover:bg-white/90 hover:scale-105 shadow-md"
        onClick={prevSlide}
      >
        <svg className="w-6 h-6 text-gray-800" viewBox="0 0 24 24">
          <path fill="currentColor" d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"/>
        </svg>
      </button>
      <button 
        className="absolute top-1/2 right-5 -translate-y-1/2 w-12 h-12 bg-white/70 rounded-full flex items-center justify-center z-10 transition-all hover:bg-white/90 hover:scale-105 shadow-md"
        onClick={nextSlide}
      >
        <svg className="w-6 h-6 text-gray-800" viewBox="0 0 24 24">
          <path fill="currentColor" d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
        </svg>
      </button>

      {/* Indicators - Phiên bản cao cấp gọn nhẹ */}
<div className="absolute bottom-6 left-1/2 -translate-x-1/2 flex space-x-1.5 z-20">
  {slides.map((_, index) => (
    <button
      key={index}
      onClick={() => goToSlide(index)}
      className={`relative w-2 h-2 rounded-full transition-all duration-300 ease-out ${
        index === currentIndex 
          ? "bg-white scale-[1.8] shadow-[0_0_8px_rgba(255,255,255,0.8)]" 
          : "bg-white/40 hover:bg-white/60 scale-100"
      }`}
    >
      {index === currentIndex && (
        <span className="absolute inset-0 rounded-full bg-white/20 animate-ping" />
      )}
    </button>
  ))}
</div>
    </div>
  );
};

export default Slider;
```

### ClientApp\src\components\HeroSlider\HeroSlider.jsx
```jsx
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import slider1 from "../../assets/img/HeadPhone/banner_headphone.jpg";
import slider2 from "../../assets/img/Laptop/banner_laptop.jpg";
import slider3 from "../../assets/img/Phone/banner_iphone.jpg";
import "./HeroSlider.css";

const HeroSlider = () => {
  return (
    <div className="hero-slider">
      <Swiper
        modules={[Navigation, Autoplay]}
        spaceBetween={20} // Khoảng cách giữa các slide
        slidesPerView={2} // Hiển thị 2 slide cùng lúc
        autoplay={{ delay: 3000, disableOnInteraction: false }} // Tự động chuyển slide
        loop={true} // Lặp vô hạn
        pagination={{ clickable: true }} // Hiển thị dots điều hướng
        // navigation // Hiển thị nút điều hướng
        className="custom-swiper"
      >
        <SwiperSlide>
          <img src={slider1} alt="Slide 1" className="slide-image" />
        </SwiperSlide>
        <SwiperSlide>
          <img src={slider2} alt="Slide 2" className="slide-image" />
        </SwiperSlide>
        <SwiperSlide>
          <img src={slider3} alt="Slide 3" className="slide-image" />
        </SwiperSlide>
      </Swiper>
    </div>
  );
};

export default HeroSlider;

```

### ClientApp\src\components\layouts\AdminLayout.js
```js
import React from 'react';
import Sidebar from "../Admin/common/Sidebar";

const AdminLayout = ({ children }) => {
  return (
    <div className='flex h-screen bg-gray-900 text-gray-100 overflow-hidden'>
      {/* BG */}
      <div className='fixed inset-0 z-0'>
        <div className='absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 opacity-80' />
        <div className='absolute inset-0 backdrop-blur-sm' />
      </div>

      <Sidebar />
      <div className='flex-1 overflow-auto'>
        {children}
      </div>
    </div>
  );
};

export default AdminLayout;
```

### ClientApp\src\components\List\CategoryMenu.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const CategoryMenu = () => {
  const [categories, setCategories] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
        const data = await response.json();
        setCategories(data);
      } catch (error) {
        console.error("Lỗi khi lấy danh mục:", error);
      }
    };

    fetchCategories();
  }, []);

  // Chuyển hướng đến danh sách sản phẩm khi chọn danh mục
  const handleCategorySelect = (categoryId) => {
    navigate(`/ProductList?categoryId=${categoryId}`);
  };

  return (
    <div style={styles.categoryMenu}>
      {categories.map((category) => (
        <div
          key={category.id}
          style={styles.categoryItem}
          onClick={() => handleCategorySelect(category.id)}
        >
          {/* Hiển thị hình ảnh danh mục */}
          <img
    src={
        category.image?.startsWith("http")
            ? category.image // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${category.image}`
    }
    alt={`${category.name} logo`}
    className="size-10 rounded-full"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/>
          <span>{category.name}</span>
        </div>
      ))}
    </div>
  );
};

const styles = {
  categoryMenu: {
    display: "flex",
    justifyContent: "flex-start",
    gap: "30px",
    background: "white",
    padding: "15px",
    borderRadius: "8px",
    boxShadow: "0 2px 5px rgba(0, 0, 0, 0.1)",
    marginBottom: "20px",
    marginTop: "60px",
  },
  categoryItem: {
    display: "flex",
    alignItems: "center",
    gap: "10px",
    fontSize: "16px",
    fontWeight: "bold",
    cursor: "pointer",
    padding: "8px 12px",
    borderRadius: "12px",
    background: "#f7f7f7",
    transition: "all 0.3s ease",
  },
  categoryImage: {
    width: "32px",
    height: "32px",
    objectFit: "cover",
  },
};

export default CategoryMenu;

```

### ClientApp\src\components\List\FilterSection.jsx
```jsx
import React, { useState, useEffect } from "react";
import {
  Checkbox,
  FormControlLabel,
  FormGroup,
  CircularProgress,
} from "@mui/material";
import { ExpandMore, ExpandLess } from "@mui/icons-material";

const priceRanges = [
  { label: "Tất cả", value: "all" },
  { label: "Dưới 2 triệu", value: "0-2000000" },
  { label: "Từ 2 - 4 triệu", value: "2000000-4000000" },
  { label: "Từ 4 - 7 triệu", value: "4000000-7000000" },
  { label: "Từ 7 - 13 triệu", value: "7000000-13000000" },
  { label: "Từ 13 - 20 triệu", value: "13000000-20000000" },
  { label: "Trên 20 triệu", value: "20000000-99999999" },
];

const FilterSection = ({ onPriceChange, onBrandChange }) => {
  const [expandedPrice, setExpandedPrice] = useState(true);
  const [expandedBrand, setExpandedBrand] = useState(true);
  const [selectedPrice, setSelectedPrice] = useState("all");
  const [selectedBrands, setSelectedBrands] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`);
        if (!response.ok)
          throw new Error("Không thể tải danh sách thương hiệu");
        const data = await response.json();
        setBrands(Array.isArray(data.$values) ? data.$values : data);
      } catch (err) {
        console.error("Lỗi khi tải danh sách thương hiệu:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchBrands();
  }, []);

  const handlePriceChange = (event) => {
    const value = event.target.value;
    setSelectedPrice(value);
    onPriceChange(value);
  };

  const handleBrandChange = (event) => {
    const value = parseInt(event.target.value);
    let updatedBrands = selectedBrands.includes(value)
      ? selectedBrands.filter((id) => id !== value)
      : [...selectedBrands, value];

    setSelectedBrands(updatedBrands);
    onBrandChange(updatedBrands.length > 0 ? updatedBrands : null);
  };

  return (
    <aside className="max-w-[320px] w-full bg-white p-4 shadow-md border border-gray-200">
      <h2 className="text-xl font-semibold text-gray-800 mb-2">
        Bộ lọc tìm kiếm
      </h2>

      {/* Lọc theo giá */}
      <div
        className="flex justify-between items-center cursor-pointer py-2 border-b border-gray-300 hover:bg-gray-100"
        onClick={() => setExpandedPrice(!expandedPrice)}
      >
        <h3 className="text-lg font-semibold text-gray-700">Mức giá</h3>
        {expandedPrice ? (
          <ExpandLess fontSize="large" />
        ) : (
          <ExpandMore fontSize="large" />
        )}
      </div>

      {expandedPrice && (
        <FormGroup className="mt-2 space-y-1">
          {priceRanges.map((range) => (
            <FormControlLabel
              key={range.value}
              label={
                <span className="text-sm text-gray-700 pl-2">
                  {range.label}
                </span>
              }
              control={
                <Checkbox
                  checked={selectedPrice === range.value}
                  onChange={handlePriceChange}
                  value={range.value}
                  sx={{
                    "& .MuiSvgIcon-root": { fontSize: 20 },
                    "&.Mui-checked": { color: "#d70018" },
                  }}
                />
              }
              className={`flex items-center w-full py-1 border-b border-gray-200 ${
                selectedPrice === range.value
                  ? "bg-red-50 text-red-500"
                  : "hover:bg-gray-100"
              }`}
            />
          ))}
        </FormGroup>
      )}

      {/* Lọc theo thương hiệu */}
      <div
        className="flex justify-between items-center cursor-pointer py-2 border-b border-gray-300 hover:bg-gray-100 mt-3"
        onClick={() => setExpandedBrand(!expandedBrand)}
      >
        <h3 className="text-lg font-semibold text-gray-700">Thương hiệu</h3>
        {expandedBrand ? (
          <ExpandLess fontSize="large" />
        ) : (
          <ExpandMore fontSize="large" />
        )}
      </div>

      {expandedBrand && (
        <FormGroup className="mt-2 space-y-1">
          {loading ? (
            <div className="flex justify-center py-4">
              <CircularProgress size={24} />
            </div>
          ) : brands.length > 0 ? (
            brands.map((brand) => (
              <FormControlLabel
                key={brand.id}
                label={
                  <div className="flex items-center w-full">
                    {/* Logo thương hiệu */}
                    <img
                      src={brand.logo}
                      alt={brand.name}
                      className="w-8 h-8 object-contain mr-2"
                      onError={(e) => (e.target.style.display = "none")}
                    />
                    <span className="text-sm text-gray-700">{brand.name}</span>
                  </div>
                }
                control={
                  <Checkbox
                    checked={selectedBrands.includes(brand.id)}
                    onChange={handleBrandChange}
                    value={brand.id}
                    sx={{
                      "& .MuiSvgIcon-root": { fontSize: 20 },
                      "&.Mui-checked": { color: "#d70018" },
                    }}
                  />
                }
                className={`flex items-center w-full px-3 py-2 border-b border-gray-200 ${
                  selectedBrands.includes(brand.id)
                    ? "bg-red-50 text-red-500"
                    : "hover:bg-gray-100"
                }`}
              />
            ))
          ) : (
            <p className="text-sm text-gray-500 px-3 py-2">
              Không có thương hiệu nào.
            </p>
          )}
        </FormGroup>
      )}
    </aside>
  );
};

export default FilterSection;

```

### ClientApp\src\components\List\ProductGrid.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";

const ProductGrid = ({
  selectedCategory,
  selectedPriceRange,
  selectedBrand,
}) => {
  const [products, setProducts] = useState([]);
  const [brands, setBrands] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const searchQuery = searchParams.get("search") || "";

  useEffect(() => {
    const fetchProductsAndBrands = async () => {
      setLoading(true);
      try {
        const [productsRes, brandsRes] = await Promise.all([
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
        ]);

        if (!productsRes.ok) throw new Error("Không thể tải sản phẩm");
        if (!brandsRes.ok) throw new Error("Không thể tải thương hiệu");

        const productsData = await productsRes.json();
        const brandsData = await brandsRes.json();

        const brandsMap = (brandsData.$values || brandsData || []).reduce(
          (acc, brand) => {
            acc[brand.id] = brand.name;
            return acc;
          },
          {}
        );

        let filteredProducts = productsData.$values || productsData || [];

        if (searchQuery) {
          filteredProducts = filteredProducts.filter((product) =>
            product.name.toLowerCase().includes(searchQuery.toLowerCase())
          );
        }

        if (selectedCategory) {
          filteredProducts = filteredProducts.filter(
            (product) => product.categoryId === selectedCategory
          );
        }

        if (selectedPriceRange && selectedPriceRange !== "all") {
          const [minPrice, maxPrice] = selectedPriceRange
            .split("-")
            .map(Number);
          filteredProducts = filteredProducts.filter((product) => {
            const price =
              product.variants?.[0]?.discountPrice ||
              product.variants?.[0]?.price ||
              0;
            return price >= minPrice && price <= maxPrice;
          });
        }

        if (selectedBrand && selectedBrand.length > 0) {
          const selectedBrandsArray = selectedBrand.map(Number); // Chuyển ID thương hiệu thành số
          filteredProducts = filteredProducts.filter((product) =>
            selectedBrandsArray.includes(product.brandId)
          );
        }

        const processedProducts = filteredProducts.map((product) => {
          const variant = product.variants?.[0] || {};
          const image =
            product.images?.[0]?.imageUrl || "/images/placeholder.jpg";
          const oldPrice = variant.price || 0;
          const newPrice = variant.discountPrice || oldPrice;
          const discountAmount = oldPrice - newPrice;
          const discount =
            oldPrice > 0
              ? `-${Math.round((discountAmount / oldPrice) * 100)}%`
              : "0%";

          return {
            id: product.id,
            name: product.name,
            categoryId: product.categoryId,
            oldPrice,
            newPrice,
            discount,
            discountAmount,
            image,
            features: [
              variant.storage || "Không xác định",
              brandsMap[product.brandId] || "Không có thương hiệu",
              "Hiệu suất cao",
            ],
          };
        });

        setProducts(processedProducts);
        setBrands(brandsMap);
      } catch (err) {
        setError("Không thể tải dữ liệu: " + err.message);
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchProductsAndBrands();
  }, [selectedCategory, selectedPriceRange, selectedBrand, searchQuery]);

  if (loading) {
    return <div className="text-center py-6">Đang tải sản phẩm...</div>;
  }

  if (error) {
    return <div className="text-center py-6 text-red-500">{error}</div>;
  }

  return (
    <div className="w-full flex justify-center py-6">
      <div className="max-w-[1200px] w-full px-4 bg-white rounded-lg shadow-lg p-6">
        {products.length === 0 ? (
          <p className="text-center text-gray-500 text-lg mt-12">
            Không có sản phẩm phù hợp
          </p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {products.map((product) => (
              <div
                key={product.id}
                className="bg-white p-4 rounded-lg shadow-md border cursor-pointer"
                onClick={() => navigate(`/product/${product.id}`)}
              >
                <img
                    src={
                        product.image?.startsWith("http")
                            ? product.image // Ảnh từ API (URL đầy đủ)
                            : `${process.env.REACT_APP_API_BASE_URL}/${product.image}` // Ảnh local từ wwwroot
                    }
                    alt={product.name}
                    className="w-full h-40 object-contain mb-3 hover:scale-110"
                    onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/150"; }}
                />
                <div className="text-gray-700 text-sm space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-500 line-through">
                      {product.oldPrice.toLocaleString()} đ
                    </span>
                    <span className="text-red-500 text-sm">
                      {product.discount}
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {product.newPrice.toLocaleString()} đ
                  </p>
                  <p className="text-green-600 text-sm">
                    Giảm {product.discountAmount.toLocaleString()} đ
                  </p>
                  <p className="text-gray-800 text-sm">{product.name}</p>
                  <ul className="text-xs text-gray-600 list-disc pl-4">
                    {product.features.map((feature, index) => (
                      <li key={index}>{feature}</li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ProductGrid;

```

### ClientApp\src\components\Navbar\Navbar.jsx
```jsx
import React, { useState, useEffect, useRef } from "react";
import { ShoppingCart, User, Search, Star, MapPin, LogOut, ShoppingBag, Settings } from "lucide-react";
import { useNavigate, NavLink } from "react-router-dom";
import "./Navbar.css";
import axios from 'axios';
import { jwtDecode } from "jwt-decode"; // Import jwt-decode
import menuIcon from "../../assets/icon/menu.svg";
import logo from "../../assets/img/Phone/logo.png";
import AuthModal from "../Auth/AuthModal";
import CartDrawer from "../shoppingcart/CartDrawer"; // Import Drawer

const Navbar = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const searchRef = useRef(null);
  const [isDropdownProfileOpen, setIsDropdownProfileOpen] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem("token"));
  const [anchorEl, setAnchorEl] = useState(null);
  const dropdownRef = useRef(null);
  const [user, setUser] = useState(null);
  const navigate = useNavigate();
  const [isCartOpen, setIsCartOpen] = useState(false);

  const [userId, setUserId] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
        try {
            const decoded = jwtDecode(token);
            const id = parseInt(decoded.sub, 10); // Lấy `sub` từ token và chuyển thành số nguyên
            if (!Number.isInteger(id)) return;
            setUserId(id);
            fetchUserProfile(id); // Gọi API với `userId`
        } catch (error) {
            console.error("Lỗi khi giải mã token:", error);
        }
    }
  }, []);

  // 📌 Lấy thông tin user từ API
  const fetchUserProfile = async (id) => {
    try {
        const token = localStorage.getItem("token");
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users/${id}`, {
            headers: { Authorization: `Bearer ${token}` },
        });
        setUser(response.data);
    } catch (error) {
        console.error("Lỗi khi lấy thông tin user:", error);
    } finally {
        setIsLoading(false);
    }
  };

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
        if (!response.ok) throw new Error("Không thể tải danh mục");
        const data = await response.json();
        setCategories(data.$values || data || []);
      } catch (error) {
        console.error("Lỗi tải danh mục:", error);
      }
    };
    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`);
        if (!response.ok) throw new Error("Không thể tải danh mục");
        const data = await response.json();
        setBrands(data.$values || data || []);
      } catch (error) {
        console.error("Lỗi tải danh mục:", error);
      }
    };
    fetchBrands();
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("AvatarUrl");
    setIsLoggedIn(false);
    setAnchorEl(null);
  };
  // thanh tìm kiếm
  // Gọi API tìm kiếm với debounce
  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchTerm.trim().length > 0) {
        fetchSearchResults();
      } else {
        setSearchResults(null);
      }
    }, 300);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  // Đóng dropdown khi click bên ngoài
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (searchRef.current && !searchRef.current.contains(event.target)) {
        setSearchResults(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const fetchSearchResults = async () => {
  try {
    setIsLoading(true);
    const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/search`, {
      params: {
        query: searchTerm,  // Thay đổi từ 'keyword' thành 'query'
        limit: 5  // Có thể điều chỉnh số lượng kết quả mong muốn
      }
    });
    setSearchResults(response.data);
  } catch (error) {
    console.error('Search error:', error);
    setSearchResults({ 
      products: [], 
      categories: [], 
      brands: [],
      totalResults: 0
    });
  } finally {
    setIsLoading(false);
  }
};

const handleSearchSubmit = (e) => {
  e.preventDefault();
  if (searchTerm.trim()) {
    navigate(`/search?q=${encodeURIComponent(searchTerm)}`);
    setSearchResults(null);
  }
};

  const handleItemClick = (type, id) => {
    navigate(
      type === 'product' ? `/product/${id}` :
      type === 'category' ? `/ProductList?categoryId=${id}` :
      `/ProductList?brandIds=${id}`
    );
    setSearchTerm('');
    setSearchResults(null);
  };
  return (
          <div className="navbar-wrapper">
    <nav className="navbar">
      <div className="navbar-container">
        {/* Logo */}
        <img
          src={logo}
          alt="SHN Gear"
          className="navbar-logo"
          onClick={() => navigate("/")}
          style={{ cursor: "pointer" }}
        />

        {/* Menu Premium - Giữ nguyên nút gốc */}
<div className="menu-container relative font-sans" ref={dropdownRef}>
  {/* Nút menu giữ nguyên 100% như thiết kế của bạn */}
  <button 
    className="menu-button"
    onClick={() => setIsDropdownOpen(!isDropdownOpen)}
  >
    <img src={menuIcon} alt="Menu" />
    Danh mục
  </button>

  {isDropdownOpen && (
    <div className="dropdown-menu absolute left-0 mt-1 w-[320px] bg-white shadow-2xl rounded-lg border border-gray-100 z-50 overflow-hidden animate-fadeIn">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-3 border-b border-gray-100">
        <h3 className="text-sm font-semibold text-gray-700 flex items-center">
          <svg className="w-4 h-4 mr-2 text-purple-500" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" />
          </svg>
          DANH MỤC SẢN PHẨM
        </h3>
      </div>

      {/* Content with scroll */}
      <div className="max-h-[65vh] overflow-y-auto custom-scrollbar">
        {/* Categories Section */}
        <div className="p-2">
          {categories.filter(c => !c.parentId).map((category) => (
            <div key={category.id} className="mb-1 group">
              {/* Parent Category */}
              <div className="flex items-center justify-between px-3 py-2.5 rounded-lg hover:bg-purple-50 transition-colors cursor-pointer"
                onClick={() => navigate(`/ProductList?categoryId=${category.id}`)}>
                <div className="flex items-center">
                  <div className="w-8 h-8 flex items-center justify-center bg-blue-100 rounded-lg mr-3 text-blue-600">
                    {category.icon || (
                      <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12z" clipRule="evenodd" />
                      </svg>
                    )}
                  </div>
                  <span className="font-medium text-gray-800">{category.name}</span>
                </div>
                {categories.some(c => c.parentId === category.id) && (
                  <svg className="w-4 h-4 text-gray-400 group-hover:text-purple-500 transition-colors" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                )}
              </div>

              {/* Subcategories */}
              {categories.some(c => c.parentId === category.id) && (
                <div className="ml-12 mt-1 space-y-1">
                  {categories.filter(c => c.parentId === category.id).map((subCategory) => (
                    <div key={subCategory.id} className="px-3 py-1.5 text-sm rounded-lg hover:bg-blue-50 cursor-pointer flex items-center transition-colors"
                      onClick={() => navigate(`/ProductList?categoryId=${subCategory.id}`)}>
                      <div className="w-2 h-2 bg-blue-300 rounded-full mr-2"></div>
                      <span className="text-gray-700">{subCategory.name}</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Brands Section */}
        <div className="border-t border-gray-100 mx-3"></div>
        <div className="p-3">
          <div className="flex justify-between items-center mb-3">
            <h4 className="text-xs font-semibold text-gray-500 uppercase tracking-wider">THƯƠNG HIỆU</h4>
            <button className="text-xs text-blue-600 hover:text-blue-800 transition-colors" 
              onClick={() => navigate('/Productlist')}>
              Xem tất cả →
            </button>
          </div>
          
          <div className="grid grid-cols-3 gap-3">
            {brands.slice(0, 6).map((brand) => (
              <div key={brand.id} className="text-center cursor-pointer group" 
                onClick={() => navigate(`/ProductList?brandId=${brand.id}`)}>
                <div className="w-full aspect-square bg-white border border-gray-200 rounded-lg flex items-center justify-center p-2 group-hover:border-blue-300 transition-all shadow-sm">
                  {brand.logo ? (
                    <img src={brand.logo} alt={brand.name} className="w-full h-full object-contain" />
                  ) : (
                    <span className="text-lg font-bold text-gray-400">{brand.name.charAt(0)}</span>
                  )}
                </div>
                <span className="block mt-2 text-xs font-medium text-gray-700 truncate px-1">{brand.name}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="bg-gray-50 px-3 py-2 border-t border-gray-100 text-center">
        <button className="text-xs text-blue-600 hover:text-blue-800 font-medium transition-colors"
          onClick={() => navigate('/productlist')}>
          Xem tất cả sản phẩm →
        </button>
      </div>
    </div>
  )}
</div>

{/* Thêm vào file CSS */}
<style jsx>{`
  .animate-fadeIn {
    animation: fadeIn 0.2s ease-out forwards;
  }
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(0,0,0,0.1);
    border-radius: 3px;
  }
`}</style>

        {/* Thanh tìm kiếm (giữ nguyên) */}
<div className="search-bar" ref={searchRef}>
  <form 
    onSubmit={handleSearchSubmit} 
    className="relative flex items-center justify-between w-full"
  >
    <input
      type="text"
      placeholder="Tìm kiếm sản phẩm..."
      className="search-input flex-1 px-4 py-2"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
      onFocus={() => searchTerm && fetchSearchResults()}
    />
    <button 
      type="submit" 
      className="search-button"
    >
      <Search className="h-5 w-5" />
    </button>
  </form>

  {/* Dropdown kết quả - Phiên bản tinh chỉnh */}
{searchResults && (
  <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-1 bg-white shadow-lg rounded-lg border border-gray-200 z-50 w-[28rem] max-h-[70vh] overflow-y-auto">
    {isLoading ? (
      <div className="p-4 flex items-center justify-center text-sm text-gray-500">
        <svg className="animate-spin h-5 w-5 mr-3 text-blue-500" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Đang tìm kiếm...
      </div>
    ) : (
      <div className="divide-y divide-gray-100">
        {/* Sản phẩm */}
        {searchResults.products.length > 0 && (
          <div className="py-2">
            <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">Sản phẩm</div>
            {searchResults.products.slice(0, 3).map((product) => (
              <div
                key={product.id}
                className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                onClick={() => handleItemClick('product', product.id)}
              >
                <div className="flex-shrink-0 w-10 h-10 bg-gray-100 rounded-md overflow-hidden">
                  <img
                    src={product.imageUrl?.startsWith("http") 
                      ? product.imageUrl 
                      : `${process.env.REACT_APP_API_BASE_URL}${product.imageUrl?.startsWith('/') ? '' : '/'}${product.imageUrl}`}
                    alt={product.name}
                    className="w-full h-full object-contain"
                    onError={(e) => { 
                      e.target.onerror = null; 
                      e.target.src = "/images/default-product.png";
                    }}
                  />
                </div>
                <div className="ml-3 min-w-0">
                  <p className="text-sm font-medium text-gray-800 truncate">{product.name}</p>
                  <div className="flex items-center mt-1">
                    <span className="text-sm font-semibold text-blue-600">
                      {product.price.toLocaleString('vi-VN')}đ
                    </span>
                    {product.discountedPrice && (
                      <span className="ml-2 text-xs text-gray-400 line-through">
                        {product.discountedPrice.toLocaleString('vi-VN')}đ
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Danh mục */}
        {searchResults.categories.length > 0 && (
          <div className="py-2">
            <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">Danh mục</div>
            {searchResults.categories.slice(0, 3).map((category) => (
              <div
                key={category.id}
                className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                onClick={() => handleItemClick('category', category.id)}
              >
                <div className="flex-shrink-0 w-10 h-10 bg-blue-50 rounded-md flex items-center justify-center">
                  <svg className="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeWidth="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-800">{category.name}</p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Thương hiệu */}
        {searchResults.brands.length > 0 && (
          <div className="py-2">
            <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">Thương hiệu</div>
            {searchResults.brands.slice(0, 3).map((brand) => (
              <div
                key={brand.id}
                className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                onClick={() => handleItemClick('brand', brand.id)}
              >
                <div className="flex-shrink-0 w-10 h-10 bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                  {brand.logoUrl ? (
                    <img 
                      src={brand.logoUrl} 
                      alt={brand.name} 
                      className="w-full h-full object-contain"
                    />
                  ) : (
                    <span className="text-lg font-bold text-gray-400">{brand.name.charAt(0)}</span>
                  )}
                </div>
                <div className="ml-3">
                  <p className="text-sm font-medium text-gray-800">{brand.name}</p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Footer */}
        {(searchResults.products.length > 0 || searchResults.categories.length > 0 || searchResults.brands.length > 0) ? (
          <div className="p-3 text-center bg-gray-50">
            <button
              className="text-sm text-blue-600 hover:text-blue-800 font-medium"
              onClick={() => {
                navigate(`/productlist`);
                setSearchResults(null);
              }}
            >
              Xem tất cả {searchResults.totalResults} kết quả →
            </button>
          </div>
        ) : (
          <div className="p-6 text-center">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeWidth="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h3 className="mt-2 text-sm font-medium text-gray-700">Không tìm thấy kết quả</h3>
            <p className="mt-1 text-sm text-gray-500">Thử với từ khóa tìm kiếm khác</p>
          </div>
        )}
      </div>
    )}
  </div>
)}
</div>
        {/* Avatar và Giỏ hàng */}
        <div className="avatarandcart">
          {/* Avatar và Giỏ hàng */}
<div className="flex items-center gap-4">
  {isLoggedIn ? (
  <div className="relative">
    <button
    onClick={() => setIsDropdownProfileOpen(!isDropdownProfileOpen)}
      className="p-1 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"
      aria-label="Menu người dùng"
      aria-haspopup="true"
      aria-expanded={!!anchorEl}
    >
      <User className="w-8 h-8 text-white" />
    </button>
    
    {isDropdownProfileOpen && (
      <div 
        className="absolute right-0 mt-2 w-56 origin-top-right bg-white rounded-lg shadow-xl z-50 overflow-hidden transition-all duration-200 ease-out"
      >
        <div className="py-1 flex flex-col">
          <div className="px-4 py-3 border-b border-gray-100">
  <p className="text-sm font-medium text-gray-900">
    Xin chào, {user?.fullName || 'Khách'}
  </p>
  <p className="text-xs text-gray-500 truncate">
    {user?.email || 'user@example.com'}
  </p>
</div>
           {/* Thêm điều kiện hiển thị cho admin */}
          {user.role?.id === 1 && (
            <NavLink 
              to="/admin/overview"
              className="px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center"
              activeClassName="bg-blue-50 text-blue-600"
            >
              <Settings className="w-4 h-4 mr-3" />
              Trang quản trị
            </NavLink>
          )}
          <NavLink 
            to="/profile/info"
            className="px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center"
            activeClassName="bg-blue-50 text-blue-600"
          >
            <User className="w-4 h-4 mr-3" />
            Thông tin cá nhân
          </NavLink>
          
          <NavLink 
            to="/profile/orders"
            className="px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center"
            activeClassName="bg-blue-50 text-blue-600"
          >
            <ShoppingBag className="w-4 h-4 mr-3" />
            Đơn hàng của tôi
          </NavLink>
          
          <NavLink 
            to="/profile/loyalty"
            className="px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center"
            activeClassName="bg-blue-50 text-blue-600"
          >
            <Star className="w-4 h-4 mr-3" />
            Khách hàng thân thiết
          </NavLink>
          
          <NavLink 
            to="/profile/address"
            className="px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center"
            activeClassName="bg-blue-50 text-blue-600"
          >
            <MapPin className="w-4 h-4 mr-3" />
            Sổ địa chỉ
          </NavLink>
          
          <NavLink
            to="/"
            onClick={() => {
              handleLogout();
            }}
            className="px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-colors flex items-center mt-1 border-t border-gray-100"
          >
            <LogOut className="w-4 h-4 mr-3" />
            Đăng xuất
          </NavLink>
        </div>
      </div>
    )}
  </div>
) : (
  <button
    onClick={() => setIsAuthModalOpen(true)}
    className="p-1 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"
    aria-label="Đăng nhập"
  >
    <User className="w-8 h-8 text-white" />
  </button>
)}
</div>
          <button className="cart-button"onClick={() => setIsCartOpen(true)}>
            <ShoppingCart size={22} />
            Giỏ Hàng
          </button>
        </div>
      </div>

      {/* Modal đăng nhập */}
      <AuthModal isOpen={isAuthModalOpen} onClose={() => setIsAuthModalOpen(false)} />
      <CartDrawer isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
    </nav>
  </div>
  );
};

export default Navbar;
```

### ClientApp\src\components\NotificationBar\notification.jsx
```jsx
import React from 'react';
import './notification.css'; // Đảm bảo bạn import file CSS nếu chưa

const Notification = () => {
  return (
    <div className="notification-container">
      <nav>
        <ul className="items-center pc:flex">
          <li className="pr-4">
            <div className="flex cursor-pointer items-center b2-medium">
              <img 
                alt="Deal chớp nhoáng" 
                loading="lazy" 
                width="32" 
                height="32" 
                decoding="async" 
                data-nimg="1" 
                className="mr-2" 
                srcSet="https://cdn2.fptshop.com.vn/unsafe/32x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png 1x, https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png 2x" 
                src="https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png"
              />
              Deal chớp nhoáng
            </div>
          </li>
          <li className="pr-4">
            <a className="flex items-center b2-medium" href="https://localhost:44479/ProductList?brandId=1">
              <img 
                alt="Xả kho giá sốc, số lượng có hạn!" 
                loading="lazy" 
                width="32" 
                height="32" 
                decoding="async" 
                data-nimg="1" 
                className="mr-2" 
                srcSet="https://cdn2.fptshop.com.vn/unsafe/32x0/filters:quality(100)/soc_2f6cbf28ff.png 1x, https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/soc_2f6cbf28ff.png 2x" 
                src="https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/soc_2f6cbf28ff.png"
              />
              Xả kho giá sốc, số lượng có hạn!
            </a>
          </li>
        </ul>
      </nav>
    </div>
  );
}

export default Notification;

```

### ClientApp\src\components\Order\OrderLookup.jsx
```jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Box, 
  TextField, 
  Button, 
  Typography, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  Divider,
  Stack,
  Chip
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import PrintIcon from '@mui/icons-material/Print';
import VisibilityIcon from '@mui/icons-material/Visibility';
import axios from 'axios';
import { motion } from 'framer-motion';

const OrderLookup = () => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleSearch = async () => {
    if (!phoneNumber.trim()) {
      setError('Vui lòng nhập số điện thoại');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setOrders([]);
      
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/by-phone/${phoneNumber}`);
      
      if (response.data && Array.isArray(response.data)) {
        if (response.data.length > 0) {
          setOrders(response.data);
        } else {
          setError('Không tìm thấy đơn hàng nào với số điện thoại này');
        }
      } else {
        setError('Dữ liệu trả về không hợp lệ');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Lỗi khi tra cứu đơn hàng. Vui lòng thử lại sau.');
      console.error('Error fetching orders:', err);
    } finally {
      setLoading(false);
    }
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case 'Pending': return 'Chờ xác nhận';
      case 'Processing': return 'Đã xác nhận';
      case 'Shipped': return 'Đang vận chuyển';
      case 'Delivered': return 'Đã giao hàng';
      case 'Cancelled': return 'Đã hủy';
      case 'Paid': return 'Đã thanh toán';
      default: return status;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'Delivered': return 'success';
      case 'Shipped': return 'info';
      case 'Processing': return 'warning';
      case 'Cancelled': return 'error';
      case 'Paid': return 'success';
      default: return 'default';
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price);
  };

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto', p: 3 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <Paper elevation={3} sx={{ p: 4, mb: 4, borderRadius: 2 }}>
          <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', mb: 3 }}>
            Tra cứu đơn hàng
          </Typography>
          
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center" mb={3}>
            <TextField
              fullWidth
              label="Nhập số điện thoại"
              variant="outlined"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              placeholder="Ví dụ: 0778706084"
              InputProps={{
                startAdornment: <SearchIcon sx={{ color: 'action.active', mr: 1 }} />
              }}
              sx={{ flex: 1 }}
            />
            <Button
              variant="contained"
              onClick={handleSearch}
              disabled={loading}
              sx={{ height: 56, px: 4, minWidth: 150 }}
              startIcon={loading ? <CircularProgress size={20} color="inherit" /> : null}
            >
              {loading ? 'Đang tìm...' : 'Tra cứu'}
            </Button>
          </Stack>

          {error && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {error}
            </Alert>
          )}
        </Paper>

        {orders.length > 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
              Kết quả tra cứu ({orders.length} đơn hàng)
            </Typography>
            
            {orders.map((order) => (
              <Card key={order.orderId} sx={{ mb: 4, boxShadow: 3 }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                      Đơn hàng #{order.orderId}
                    </Typography>
                    <Chip 
                      label={getStatusLabel(order.orderStatus)}
                      color={getStatusColor(order.orderStatus)}
                      sx={{ fontWeight: 'bold' }}
                    />
                  </Box>

                  <Divider sx={{ my: 2 }} />

                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3, mb: 3 }}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">Ngày đặt:</Typography>
                      <Typography>{order.orderDate}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">Dự kiến giao:</Typography>
                      <Typography>{order.estimatedDelivery}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">Tổng tiền:</Typography>
                      <Typography sx={{ fontWeight: 'bold' }}>{order.formattedTotal}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">Phương thức:</Typography>
                      <Typography>{order.paymentMethod}</Typography>
                    </Box>
                  </Box>

                  <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                      Thông tin giao hàng:
                    </Typography>
                    <Box sx={{ pl: 2 }}>
                      <Typography>
                        <strong>{order.shippingInfo.fullName}</strong> | {order.shippingInfo.phone}
                      </Typography>
                      <Typography sx={{ mb: 1 }}>{order.shippingInfo.address}</Typography>
                      <Typography>Email: {order.shippingInfo.email}</Typography>
                    </Box>
                  </Box>

                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>
                    Sản phẩm đã đặt:
                  </Typography>
                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Sản phẩm</TableCell>
                          <TableCell align="center">Biến thể</TableCell>
                          <TableCell align="right">Số lượng</TableCell>
                          <TableCell align="right">Đơn giá</TableCell>
                          <TableCell align="right">Thành tiền</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {order.products.map((product, index) => (
                          <TableRow key={index}>
                            <TableCell>
                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                <Box 
                            component="img"
                             src={
                                    product.image.startsWith("http")
                                        ? product.image // Ảnh từ API (URL đầy đủ)
                                        : `${process.env.REACT_APP_API_BASE_URL}/${product.image}` // Ảnh local trong wwwroot
                                }
                            alt={product.name || 'Ảnh sản phẩm'}
                            sx={{ 
                                width: 60, 
                                height: 60, 
                                objectFit: 'contain', 
                                mr: 2, 
                                borderRadius: 1,
                                backgroundColor: 'grey.100'
                            }}
                                                    />
                                <Typography>{product.name}</Typography>
                              </Box>
                            </TableCell>
                            <TableCell align="center">
                              <Chip label={product.variant} size="small" />
                            </TableCell>
                            <TableCell align="right">{product.quantity}</TableCell>
                            <TableCell align="right">{formatPrice(product.price)}</TableCell>
                            <TableCell align="right">
                              <Typography fontWeight="bold">
                                {formatPrice(product.total)}
                              </Typography>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
                    <Button 
                      variant="outlined"
                      startIcon={<VisibilityIcon />}
                      onClick={() => navigate(`/orders/${order.orderId}`)}
                      sx={{ mr: 2 }}
                    >
                      Xem chi tiết
                    </Button>
                    <Button 
                      variant="contained"
                      startIcon={<PrintIcon />}
                      onClick={() => window.print()}
                    >
                      In hóa đơn
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            ))}
          </motion.div>
        )}
      </motion.div>
    </Box>
  );
};

export default OrderLookup;
```

### ClientApp\src\components\Order\PaymentSuccess.jsx
```jsx
import React from 'react';
import { Box, Typography, Button, Container, Stack } from '@mui/material';
import { motion } from 'framer-motion';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import SearchIcon from '@mui/icons-material/Search';
import { useNavigate } from 'react-router-dom';

const PaymentSuccess = () => {
  const navigate = useNavigate();

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Box
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            textAlign: 'center',
            p: 4,
            borderRadius: 2,
            boxShadow: 3,
            backgroundColor: 'background.paper',
          }}
        >
          {/* Icon thành công */}
          <motion.div
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 0.5 }}
          >
            <CheckCircleOutlineIcon
              sx={{ fontSize: 80, color: 'success.main', mb: 2 }}
            />
          </motion.div>

          {/* Tiêu đề */}
          <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 'bold' }}>
            Thanh toán thành công!
          </Typography>

          {/* Thông báo */}
          <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
            Cảm ơn bạn đã mua hàng. Đơn hàng của bạn đã được xác nhận và sẽ được xử lý trong thời gian sớm nhất.
          </Typography>

          {/* Chi tiết đơn hàng giả lập */}
          <Box
            sx={{
              width: '100%',
              p: 2,
              mb: 3,
              borderRadius: 1,
              backgroundColor: 'grey.100',
              textAlign: 'left',
            }}
          >
            <Typography variant="subtitle1" sx={{ mb: 1 }}>
              Thông tin đơn hàng:
            </Typography>
            <Typography variant="body2">
              Bạn có thể tra cứu đơn hàng bất kỳ lúc nào bằng số điện thoại đã đăng ký
            </Typography>
          </Box>

          {/* Nút hành động */}
          <Stack direction="row" spacing={2} sx={{ width: '100%', justifyContent: 'center' }}>
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="outlined"
                size="large"
                startIcon={<SearchIcon />}
                onClick={() => navigate('/order-lookup')}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 2,
                  fontWeight: 'bold',
                  textTransform: 'none',
                }}
              >
                Tra cứu đơn hàng
              </Button>
            </motion.div>
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="contained"
                size="large"
                onClick={() => navigate('/')}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 2,
                  fontWeight: 'bold',
                  textTransform: 'none',
                }}
              >
                Về trang chủ
              </Button>
            </motion.div>
          </Stack>

          {/* Thông báo phụ */}
          <Typography variant="caption" color="text.secondary" sx={{ mt: 3 }}>
            Bạn sẽ nhận được email xác nhận đơn hàng trong ít phút.
          </Typography>
        </Box>
      </motion.div>
    </Container>
  );
};

export default PaymentSuccess;
```

### ClientApp\src\components\productinformationpage\ProductImage.jsx
```jsx
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Pagination } from "swiper/modules";
import "swiper/css";
import "swiper/css/pagination";

const ProductImage = ({ images, name }) => {
  return (
    <div className="flex justify-center">
      {images?.length > 0 ? (
        <div className="relative w-96">
          <Swiper
            modules={[Pagination]}
            pagination={{ clickable: true }}
            spaceBetween={20}
            slidesPerView={1}
            className="w-full h-auto"
          >
            {images.map((image, index) => (
              <SwiperSlide key={index}>
                <img
                  src={
                    image?.imageUrl?.startsWith("http")
                      ? image.imageUrl
                      : `${process.env.REACT_APP_API_BASE_URL}/${image.imageUrl}`
                  }
                  alt={name || "Product Image"}
                  className="w-full h-auto object-contain mb-3 transition-transform"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = "/images/placeholder.jpg";
                  }}
                />
              </SwiperSlide>
            ))}
          </Swiper>
        </div>
      ) : (
        <p className="text-gray-500">Không có ảnh</p>
      )}
    </div>
  );
};

export default ProductImage;

```

### ClientApp\src\components\productinformationpage\ProductInfo.jsx
```jsx
import React from "react";
import { Card, CardContent, Typography } from "@mui/material";

const ProductInfo = ({ product }) => {
  return (
    <Card className="shadow-lg">
      <CardContent>
        <Typography variant="h4" gutterBottom>
          {product?.name}
        </Typography>
        <Typography variant="body1" color="textSecondary">
          {product?.description}
        </Typography>
        <div className="flex items-center gap-4 mt-4">
          <img
            src={product?.brand?.logo}
            alt={product?.brand?.name}
            className="w-10"
          />
        </div>
      </CardContent>
    </Card>
  );
};

export default ProductInfo;

```

### ClientApp\src\components\productinformationpage\ProductReviews.jsx
```jsx
import React, { useState, useEffect } from "react";

const ProductReviews = ({ productVariantId }) => {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [userId] = useState(1); // 🔹 ID người dùng (có thể lấy từ Auth)

  useEffect(() => {
    const fetchReviews = async () => {
      try {
        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/review/product/${productVariantId}`
        );
        if (!response.ok) {
          throw new Error("Chưa có đánh giá.");
        }
        const data = await response.json();
        setReviews(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchReviews();
  }, [productVariantId]);

  // 📌 Gửi đánh giá mới
  const handleSubmitReview = async (e) => {
    e.preventDefault();
    if (comment.trim() === "" || rating < 1 || rating > 5) {
      alert("Vui lòng nhập nội dung và chọn số sao từ 1-5.");
      return;
    }

    const newReview = {
      productVariantId,
      userId,
      rating,
      comment,
    };

    try {
      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/review`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newReview),
      });

      if (!response.ok) throw new Error("Gửi đánh giá thất bại.");

      const addedReview = await response.json();
      setReviews([addedReview, ...reviews]); // Thêm đánh giá mới vào đầu danh sách
      setShowForm(false);
      setComment("");
      setRating(5);
    } catch (err) {
      alert(err.message);
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-xl font-semibold mb-4">Đánh giá & Bình luận</h3>

      {/* Hiển thị trạng thái tải hoặc lỗi */}
      {loading && <p className="text-gray-500 text-center">Đang tải...</p>}
      {error && <p className="text-red-500 text-center">{error}</p>}

      {/* Hiển thị danh sách đánh giá */}
      {!loading && !error && (
        <div className="space-y-4">
          {reviews.length > 0 ? (
            reviews.map((review, index) => (
              <div key={index} className="border-b pb-3">
                <p className="font-bold text-red-500">
                  {review.user?.username || "Người dùng ẩn danh"}
                </p>
                <p className="text-gray-700">{review.comment}</p>
                <p className="text-yellow-500">⭐ {review.rating} / 5</p>
              </div>
            ))
          ) : (
            <p className="text-center text-gray-500">Chưa có đánh giá nào.</p>
          )}
        </div>
      )}

      {/* Nút Đánh giá sản phẩm */}
      <button
        className="mt-4 w-1/4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition mx-auto block"
        onClick={() => setShowForm(!showForm)}
      >
        {showForm ? "Đóng" : "Đánh giá sản phẩm"}
      </button>

      {/* Form nhập đánh giá */}
      {showForm && (
        <form
          onSubmit={handleSubmitReview}
          className="mt-4 p-4 border rounded-lg"
        >
          <label className="block mb-2">Số sao:</label>
          <select
            value={rating}
            onChange={(e) => setRating(Number(e.target.value))}
            className="border p-2 rounded w-full"
          >
            {[5, 4, 3, 2, 1].map((star) => (
              <option key={star} value={star}>
                {star} ⭐
              </option>
            ))}
          </select>

          <label className="block mt-2">Nhận xét:</label>
          <textarea
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            className="border p-2 rounded w-full"
            rows="3"
            placeholder="Nhập đánh giá..."
          ></textarea>

          <button
            type="submit"
            className="mt-2 w-full py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition"
          >
            Gửi đánh giá
          </button>
        </form>
      )}
    </div>
  );
};

export default ProductReviews;

```

### ClientApp\src\components\productinformationpage\ProductSpecifications.jsx
```jsx
import React, { useState, useEffect } from 'react';
import {
  Smartphone,
  Laptop,
  Headphones,
  Monitor,
  Cpu,
  MemoryStick,
  Battery,
  Nfc,
  Weight,
  HardDrive,
  Camera,
  Wifi,
  Plug,
  ChevronDown,
  ChevronUp,
  Star,
  Plus,
  Minus
} from 'lucide-react';

const SpecificationDisplay = ({ productType, productId }) => {
  const [specs, setSpecs] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expanded, setExpanded] = useState(true);
  const [showAllSpecs, setShowAllSpecs] = useState(false);

  useEffect(() => {
    const fetchSpecifications = async () => {
      try {
        setLoading(true);
        setError(null);
        
        let endpoint;
        switch (productType) {
          case 'phone':
            endpoint = 'PhoneSpecifications';
            break;
          case 'laptop':
            endpoint = 'LaptopSpecifications';
            break;
          case 'headphone':
            endpoint = 'HeadphoneSpecifications';
            break;
          default:
            throw new Error('Loại sản phẩm không hợp lệ');
        }

        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/Specifications/${endpoint}/product/${productId}`
        );
        
        if (!response.ok) {
          throw new Error('Không tìm thấy thông số kỹ thuật');
        }
        
        const data = await response.json();
        setSpecs(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (productId && productType) {
      fetchSpecifications();
    }
  }, [productId, productType]);

  const SpecItem = ({ icon: Icon, label, value, isHighlight = false }) => (
    <div className={`flex items-center py-3 px-4 ${isHighlight ? 'bg-blue-50 rounded-lg' : ''}`}>
      <div className={`p-2 mr-3 rounded-full ${isHighlight ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'}`}>
        <Icon className="w-4 h-4" />
      </div>
      <div className="flex-1 min-w-0">
        <div className="flex justify-between items-center">
          <span className={`text-sm ${isHighlight ? 'font-semibold text-blue-700' : 'text-gray-600'}`}>{label}</span>
          <span className={`text-right ${isHighlight ? 'font-bold text-blue-900' : 'font-medium text-gray-900'}`}>
            {value || '--'}
            {isHighlight && <Star className="w-3 h-3 text-yellow-500 ml-1 inline" fill="currentColor" />}
          </span>
        </div>
      </div>
    </div>
  );

  const renderPhoneSpecs = () => {
    const basicSpecs = [
      { icon: Cpu, label: "Bộ xử lý", value: `${specs.cpuModel} (${specs.cpuCores} nhân)`, highlight: true },
      { icon: MemoryStick, label: "RAM", value: `${specs.ram}GB`, highlight: true },
      { icon: Monitor, label: "Màn hình", value: `${specs.screenSize}" ${specs.screenType}`, highlight: true },
      { icon: HardDrive, label: "Bộ nhớ trong", value: `${specs.internalStorage}` }
    ];

    const additionalSpecs = [
      { icon: Battery, label: "Pin", value: `${specs.batteryCapacity}mAh`, highlight: true },
      { icon: Camera, label: "Camera trước", value: specs.frontCamera },
      { icon: Camera, label: "Camera sau", value: specs.rearCamera },
      { icon: Nfc, label: "NFC", value: specs.supportsNFC ? 'Có' : 'Không' },
      { icon: Weight, label: "Trọng lượng", value: `${specs.weight}g` },
      { icon: Monitor, label: "Độ phân giải", value: specs.resolution },
      { icon: Nfc, label: "Hỗ trợ 5G", value: specs.supports5G ? 'Có' : 'Không' },
      { icon: HardDrive, label: "Khe cắm thẻ nhớ", value: specs.hasSDCardSlot ? 'Có' : 'Không' }
    ];

    return (
      <>
        {basicSpecs.map((spec, index) => (
          <SpecItem key={`basic-${index}`} {...spec} />
        ))}
        
        {showAllSpecs && additionalSpecs.map((spec, index) => (
          <SpecItem key={`additional-${index}`} {...spec} />
        ))}
      </>
    );
  };

  const renderLaptopSpecs = () => {
    const basicSpecs = [
      { icon: Cpu, label: "CPU", value: `${specs.cpuType} (${specs.cpuNumberOfCores} nhân)`, highlight: true },
      { icon: MemoryStick, label: "RAM", value: `${specs.ram}GB (Tối đa ${specs.maxRAMSupport}GB)`, highlight: true },
      { icon: HardDrive, label: "Ổ cứng SSD", value: `${specs.ssdStorage}`, highlight: true },
      { icon: Monitor, label: "Màn hình", value: `${specs.screenSize}"` }
    ];

    const additionalSpecs = [
      { icon: Monitor, label: "Độ phân giải", value: specs.resolution },
      { icon: Monitor, label: "Tần số quét", value: `${specs.refreshRate}Hz` },
      { icon: Weight, label: "Trọng lượng", value: `${specs.weight}g` },
      { icon: Nfc, label: "Card đồ họa", value: specs.graphicsCard },
      { icon: HardDrive, label: "Ổ cứng SSD", value: specs.ssdStorage ? `${specs.ssdStorage}` : 'Không có' },
      { icon: Battery, label: "Thời lượng pin", value: specs.batteryLife },
      { icon: Nfc, label: "Cổng kết nối", value: specs.ports },
      { icon: Wifi, label: "Chuẩn WiFi", value: specs.wifiStandard }
    ];

    return (
      <>
        {basicSpecs.map((spec, index) => (
          <SpecItem key={`basic-${index}`} {...spec} />
        ))}
        
        {showAllSpecs && additionalSpecs.map((spec, index) => (
          <SpecItem key={`additional-${index}`} {...spec} />
        ))}
      </>
    );
  };

  const renderHeadphoneSpecs = () => {
    const basicSpecs = [
      { icon: Headphones, label: "Loại tai nghe", value: specs.type, highlight: true },
      { icon: Wifi, label: "Kết nối", value: specs.connectionType, highlight: true },
      { icon: Weight, label: "Trọng lượng", value: `${specs.weight}g` }
    ];

    const additionalSpecs = [
      { icon: Plug, label: "Cổng kết nối", value: specs.port },
      { icon: Battery, label: "Thời lượng pin", value: specs.batteryLife || 'Không có' },
      { icon: Nfc, label: "Kháng nước", value: specs.waterResistant ? 'Có' : 'Không' },
      { icon: Nfc, label: "Microphone", value: specs.hasMicrophone ? 'Có' : 'Không' },
      { icon: Nfc, label: "Điều khiển cảm ứng", value: specs.hasTouchControl ? 'Có' : 'Không' },
      { icon: Nfc, label: "Chống ồn", value: specs.noiseCancelling ? 'Có' : 'Không' }
    ];

    return (
      <>
        {basicSpecs.map((spec, index) => (
          <SpecItem key={`basic-${index}`} {...spec} />
        ))}
        
        {showAllSpecs && additionalSpecs.map((spec, index) => (
          <SpecItem key={`additional-${index}`} {...spec} />
        ))}
      </>
    );
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center my-8 py-12">
        <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4 my-6">
        <p className="text-red-600 font-medium">{error}</p>
      </div>
    );
  }

  if (!specs) {
    return null;
  }

  return (
    <div className="bg-white rounded-xl border border-gray-200 overflow-hidden shadow-sm mb-8">
      <button 
        onClick={() => setExpanded(!expanded)}
        className="w-full flex items-center justify-between p-5 hover:bg-gray-50 transition-colors"
      >
        <div className="flex items-center space-x-4">
          <div className="bg-blue-100 p-2 rounded-lg text-blue-600">
            {productType === 'phone' && <Smartphone className="w-5 h-5" />}
            {productType === 'laptop' && <Laptop className="w-5 h-5" />}
            {productType === 'headphone' && <Headphones className="w-5 h-5" />}
          </div>
          <h3 className="text-lg font-semibold text-gray-800">Thông số kỹ thuật</h3>
        </div>
        {expanded ? 
          <ChevronUp className="w-5 h-5 text-gray-500" /> : 
          <ChevronDown className="w-5 h-5 text-gray-500" />
        }
      </button>
      
      {expanded && (
        <div className="divide-y divide-gray-100">
          {productType === 'phone' && renderPhoneSpecs()}
          {productType === 'laptop' && renderLaptopSpecs()}
          {productType === 'headphone' && renderHeadphoneSpecs()}
          
          <div className="p-4 text-center">
            <button 
              onClick={() => setShowAllSpecs(!showAllSpecs)}
              className="flex items-center justify-center space-x-2 text-blue-600 hover:text-blue-800 font-medium text-sm mx-auto"
            >
              {showAllSpecs ? (
                <>
                  <Minus className="w-4 h-4" />
                  <span>Thu gọn thông số</span>
                </>
              ) : (
                <>
                  <Plus className="w-4 h-4" />
                  <span>Xem thêm thông số chi tiết</span>
                </>
              )}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default SpecificationDisplay;
```

### ClientApp\src\components\productinformationpage\ProductVariants.jsx
```jsx
import React, { useState } from "react";
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActionArea,
  Button,
  Snackbar,
  Alert
} from "@mui/material";
import { CheckCircle, ShoppingCart } from "@mui/icons-material";
import { jwtDecode } from "jwt-decode";
import axios from "axios";
const ProductVariants = ({ variants, onAddToCart }) => {
  const [selectedColor, setSelectedColor] = useState(variants[0].color);
  const availableStorages = variants
    .filter((v) => v.color === selectedColor)
    .map((v) => v.storage);
  const [selectedStorage, setSelectedStorage] = useState(availableStorages[0]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState("success");

  const handleSelectColor = (color) => {
    setSelectedColor(color);
    const newStorages = variants
      .filter((v) => v.color === color) 
      .map((v) => v.storage);
    setSelectedStorage(newStorages[0]);
  };

  const handleSelectStorage = (storage) => {
    if (availableStorages.includes(storage)) {
      setSelectedStorage(storage);
    }
  };

  const selectedVariant = variants.find(
    (v) => v.storage === selectedStorage && v.color === selectedColor
  );

  const formatCurrency = (price) => {
    return new Intl.NumberFormat("vi-VN", { 
      style: "currency", 
      currency: "VND" 
    }).format(price);
  };

  const handleAddToCart = async () => {
  try {
    if (!selectedVariant) {
      showSnackbar("⚠️ Vui lòng chọn biến thể sản phẩm trước khi thêm vào giỏ hàng!", "warning");
      return;
    }

    if (selectedVariant.stockQuantity <= 0) {
      showSnackbar("❌ Sản phẩm này đã hết hàng!", "error");
      return;
    }

    const token = localStorage.getItem("token");
    
    // Lấy thông tin hiển thị trực tiếp từ component hiện tại
    const primaryImage = selectedVariant.product?.images?.find(img => img.isPrimary)?.imageUrl || "";
    const productName = selectedVariant.product?.name || "Sản phẩm không tên";
    const variantColor = selectedColor;
    const variantStorage = selectedStorage;
    const price = selectedVariant.price || 0;
    const discountPrice = selectedVariant.discountPrice || 0;

    if (token) {
      // Gọi API chỉ với dữ liệu cần thiết
      const decoded = jwtDecode(token);
      const userId = parseInt(decoded.sub, 10);
      await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/Cart`,
        {
          productVariantId: selectedVariant.id,
          quantity: 1,
          userId: userId
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } else {
      // Lưu đầy đủ thông tin hiển thị vào session
      const sessionCart = JSON.parse(sessionStorage.getItem("cart")) || [];
      const existingItemIndex = sessionCart.findIndex(
        item => item.productVariantId === selectedVariant.id
      );

      if (existingItemIndex >= 0) {
        sessionCart[existingItemIndex].quantity += 1;
      } else {
        sessionCart.push({
          productVariantId: selectedVariant.id,
          quantity: 1,
          // Thông tin hiển thị lấy từ trang hiện tại
          productImage: primaryImage,
          productName: productName,
          variantColor: variantColor,
          variantStorage: variantStorage,
          productPrice: price,
          productDiscountPrice: discountPrice,
          // Thêm timestamp để quản lý
          addedAt: new Date().toISOString()
        });
      }

      sessionStorage.setItem("cart", JSON.stringify(sessionCart));
    }

    showSnackbar("🛒 Sản phẩm đã được thêm vào giỏ hàng!", "success");
    if (onAddToCart) onAddToCart();
  } catch (error) {
    console.error("❌ Lỗi khi thêm vào giỏ hàng:", error);
    showSnackbar(`❌ Không thể thêm vào giỏ hàng: ${error.message}`, "error");
  }
};

  const showSnackbar = (message, severity) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  const handleCloseSnackbar = () => {
    setSnackbarOpen(false);
  };

  return (
    <Box mt={4}>
      {/* Chọn màu sắc trước */}
      <Typography variant="h6" fontWeight="bold" gutterBottom>
        Màu sắc
      </Typography>
      <Grid container spacing={1.5}>
        {[...new Set(variants.map((v) => v.color))].map((color) => (
          <Grid item key={color}>
            <Card
              sx={{
                border: selectedColor === color ? "2px solid #d32f2f" : "1px solid #ddd",
                boxShadow: selectedColor === color ? "0px 4px 12px rgba(211, 47, 47, 0.3)" : "none",
                transition: "0.3s",
                width: "auto",
                textAlign: "center",
              }}
            >
              <CardActionArea onClick={() => handleSelectColor(color)}>
                <CardContent sx={{ padding: "4px" }}>
                  <Typography
                    variant="caption"
                    sx={{
                      fontWeight: "bold",
                      color: selectedColor === color ? "#d32f2f" : "#333",
                    }}
                  >
                    {color}
                  </Typography>
                  {selectedColor === color && <CheckCircle color="error" fontSize="small" />}
                </CardContent>
              </CardActionArea>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Hiển thị dung lượng sau khi chọn màu */}
      <Typography variant="h6" fontWeight="bold" gutterBottom mt={3}>
        Dung lượng
      </Typography>
      <Grid container spacing={2}>
        {[...new Set(variants.map((v) => v.storage))].map((storage) => (
          <Grid item key={storage}>
            <Card
              sx={{
                border: selectedStorage === storage ? "2px solid #d32f2f" : "1px solid #ddd",
                boxShadow: selectedStorage === storage ? "0px 4px 12px rgba(211, 47, 47, 0.3)" : "none",
                transition: "0.3s",
                padding: "6px 12px",
                opacity: availableStorages.includes(storage) ? 1 : 0.5,
              }}
            >
              <CardActionArea
                onClick={() => handleSelectStorage(storage)}
                disabled={!availableStorages.includes(storage)}
                sx={{ display: "flex", alignItems: "center", gap: "8px" }}
              >
                <Typography
                  variant="body1"
                  sx={{
                    fontWeight: "bold",
                    color: selectedStorage === storage ? "#d32f2f" : "#333",
                    flexGrow: 1,
                  }}
                >
                  {storage}
                </Typography>
                {selectedStorage === storage && <CheckCircle color="error" />}
              </CardActionArea>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Giá tiền */}
      {selectedVariant && (
        <Box mt={3} textAlign="center">
          <Typography variant="body1" color="textSecondary" sx={{ textDecoration: "line-through" }}>
            {formatCurrency(selectedVariant.price)}
          </Typography>
          <Typography variant="h5" fontWeight="bold" color="error">
            {formatCurrency(selectedVariant.discountPrice)}
          </Typography>
        </Box>
      )}

      {/* Nút thao tác */}
      <Box mt={2} display="flex" gap={2}>
        <Button
          onClick={handleAddToCart}
          variant="outlined"
          sx={{
            width: "50px",
            height: "60px",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            borderColor: "#d32f2f",
            color: "#d32f2f",
            "&:hover": {
              borderColor: "#b71c1c",
              backgroundColor: "rgba(211, 47, 47, 0.1)",
            },
          }}
        >
          <ShoppingCart />
        </Button>
        <Button
          variant="contained"
          sx={{
            flex: 1,
            backgroundColor: "#d32f2f",
            color: "#fff",
            fontSize: "16px",
            fontWeight: "bold",
            "&:hover": {
              backgroundColor: "#b71c1c",
            },
          }}
        >
          {selectedVariant ? `Mua ngay - ${formatCurrency(selectedVariant.discountPrice)}` : "Mua ngay"}
        </Button>
      </Box>
      {/* Snackbar thông báo */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbarSeverity}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default ProductVariants;
```

### ClientApp\src\components\productinformationpage\RelatedProducts.jsx
```jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";

const RelatedProducts = ({ productId, brandId, categoryId }) => {
  const [relatedProducts, setRelatedProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        const productsRes = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`);
        if (!productsRes.ok) throw new Error("Không thể tải sản phẩm.");
        const productsData = await productsRes.json();

        const brandsRes = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`);
        if (!brandsRes.ok) throw new Error("Không thể tải thương hiệu.");
        const brandsData = await brandsRes.json();

        const productsArray = productsData.$values || productsData || [];
        const brandsArray = brandsData.$values || brandsData || [];

        const filteredProducts = productsArray
          .filter(
            (product) =>
              product.id !== productId &&
              (product.brandId === brandId || product.categoryId === categoryId)
          )
          .map((product) => {
            const variant = product.variants?.[0] || {};
            const image =
              product.images?.[0]?.imageUrl || "/images/placeholder.jpg";
            const oldPrice = variant.price || 0;
            const newPrice = variant.discountPrice || oldPrice;
            const discountAmount = oldPrice - newPrice;
            const discount =
              oldPrice > 0
                ? `-${Math.round((discountAmount / oldPrice) * 100)}%`
                : "0%";

            const brand = brandsArray.find((b) => b.id === product.brandId);

            return {
              id: product.id,
              name: product.name,
              oldPrice,
              newPrice,
              discount,
              discountAmount,
              image,
              features: [
                variant.storage || "Không xác định",
                brand?.name || "Không có thương hiệu",
                "Hiệu suất cao",
              ],
            };
          });

        setRelatedProducts(filteredProducts);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [productId, brandId, categoryId]);

  if (loading) return <p>Đang tải sản phẩm liên quan...</p>;
  if (error) return <p className="text-red-500">{error}</p>;

  return (
    <div className="w-full flex justify-center py-6">
      <div className="max-w-[1200px] w-full px-4 bg-white rounded-lg shadow-lg p-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-6 text-left">
          Sản phẩm liên quan
        </h2>
        <Swiper
          modules={[Navigation]}
          navigation
          spaceBetween={20}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 2 },
            768: { slidesPerView: 3 },
            1024: { slidesPerView: 4 },
          }}
          className="pb-6"
        >
          {relatedProducts.map((product) => (
            <SwiperSlide key={product.id} className="flex justify-center">
              <div
                className="bg-white p-4 rounded-lg shadow-md border w-[250px] cursor-pointer"
                onClick={() => navigate(`/product/${product.id}`)}
              >
                <img
                  src={
                      product.image?.startsWith("http")
                          ? product.image // Ảnh từ API (URL đầy đủ)
                          : `${process.env.REACT_APP_API_BASE_URL}/${product.image}` // Ảnh local từ wwwroot
                  }
                  alt={product.name}
                  className="w-full h-40 object-contain mb-3 hover:scale-110"
                  onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/150"; }}
              />

                <div className="text-gray-700 text-sm space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-500 line-through">
                      {product.oldPrice.toLocaleString()} đ
                    </span>
                    <span className="text-red-500 text-sm">
                      {product.discount}
                    </span>
                  </div>
                  <p className="text-lg font-semibold text-gray-900">
                    {product.newPrice.toLocaleString()} đ
                  </p>
                  <p className="text-green-600 text-sm">
                    Giảm {product.discountAmount.toLocaleString()} đ
                  </p>
                  <p className="text-gray-800 text-sm">{product.name}</p>
                  <ul className="text-xs text-gray-600 list-disc pl-4">
                    {product.features.map((feature, index) => (
                      <li key={index}>{feature}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
};

export default RelatedProducts;

```

### ClientApp\src\components\Profile\AddPaymentMethod.jsx
```jsx
import React, { useState } from "react";

const AddPaymentMethod = () => {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();

    const paymentMethod = { name, description };

    try {
      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/PaymentMethod`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(paymentMethod),
      });

      if (!response.ok) {
        throw new Error("Không thể thêm phương thức thanh toán");
      }

      const data = await response.json();
      setMessage(`Thêm thành công: ${data.name}`);
      setName("");
      setDescription("");
    } catch (error) {
      setMessage("Lỗi: " + error.message);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-12 p-6 bg-white rounded-xl shadow-lg border-t-4 border-[#cb1c22]">
      <h2 className="text-2xl font-bold mb-6 text-[#cb1c22] text-center">
        Thêm phương thức thanh toán
      </h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-5">
          <label className="block text-gray-700 font-semibold mb-2">
            Tên phương thức
          </label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#cb1c22] focus:border-transparent transition-all duration-200"
            required
          />
        </div>
        <div className="mb-5">
          <label className="block text-gray-700 font-semibold mb-2">
            Mô tả
          </label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#cb1c22] focus:border-transparent transition-all duration-200"
            rows="4"
            required
          />
        </div>
        <button
          type="submit"
          className="w-full bg-[#cb1c22] text-white p-3 rounded-md hover:bg-[#a1161b] transition-colors duration-300 font-semibold"
        >
          Thêm
        </button>
      </form>
      {message && (
        <p
          className={`mt-5 text-center font-medium ${
            message.includes("Lỗi") ? "text-red-600" : "text-green-600"
          }`}
        >
          {message}
        </p>
      )}
      
    </div>
  );
};

export default AddPaymentMethod;
```

### ClientApp\src\components\Profile\AddressBook.jsx
```jsx
import { useEffect, useState } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  Button, 
  Typography, 
  Modal, 
  Box, 
  TextField, 
  IconButton, 
  Dialog, 
  DialogActions, 
  DialogContent, 
  DialogContentText, 
  DialogTitle,
  Divider,
  Stack,
  Paper
} from "@mui/material";
import { Delete, Edit, Add, Close } from "@mui/icons-material";
import { styled } from '@mui/material/styles';

const StyledCard = styled(Card)(({ theme }) => ({
  maxWidth: '800px',
  margin: '2rem auto',
  borderRadius: '12px',
  boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
  overflow: 'hidden'
}));

const AddressItem = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  marginBottom: theme.spacing(2),
  borderRadius: '8px',
  border: '1px solid rgba(0,0,0,0.12)',
  transition: 'box-shadow 0.3s ease',
  '&:hover': {
    boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
  }
}));

const AddressComponent = () => {
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userId, setUserId] = useState(null);
  const [openModal, setOpenModal] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [addressToDelete, setAddressToDelete] = useState(null);
  const [newAddress, setNewAddress] = useState({
    fullName: "",
    addressLine1: "",
    addressLine2: "",
    city: "",
    state: "",
    zipCode: "",
    country: "",
    phoneNumber: "",
  });

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decodedToken = jwtDecode(token);
        if (decodedToken.sub) {
          setUserId(decodedToken.sub);
        } else {
          console.error("Không tìm thấy userId trong token!");
        }
      } catch (error) {
        console.error("Lỗi khi decode token:", error);
      }
    }
  }, []);

  useEffect(() => {
    if (!userId) return;
    const fetchAddresses = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Address/user/${userId}`, {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        });
        setAddresses(response.data);
      } catch (error) {
        console.error("Lỗi khi lấy địa chỉ:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchAddresses();
  }, [userId]);

  const handleOpenModal = (address = null) => {
    setEditMode(!!address);
    setSelectedAddress(address);
    setNewAddress(address || {
      fullName: "",
      addressLine1: "",
      addressLine2: "",
      city: "",
      state: "",
      zipCode: "",
      country: "",
      phoneNumber: "",
    });
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setEditMode(false);
    setSelectedAddress(null);
  };

  const handleInputChange = (e) => {
    setNewAddress({ ...newAddress, [e.target.name]: e.target.value });
  };

  const handleSaveAddress = async () => {
    if (!userId) {
      console.error("Không tìm thấy userId, không thể thêm địa chỉ.");
      return;
    }

    try {
      if (editMode && selectedAddress) {
        const response = await axios.put(
          `${process.env.REACT_APP_API_BASE_URL}/api/Address/update/${selectedAddress.id}`,
          { ...newAddress, userId },
          { headers: { Authorization: `Bearer ${localStorage.getItem("token")}`, "Content-Type": "application/json" } }
        );
        setAddresses(addresses.map((addr) => (addr.id === selectedAddress.id ? response.data : addr)));
      } else {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/Address/add`,
          { ...newAddress, userId },
          { headers: { Authorization: `Bearer ${localStorage.getItem("token")}`, "Content-Type": "application/json" } }
        );
        setAddresses([...addresses, response.data]);
      }
      handleCloseModal();
    } catch (error) {
      console.error("Lỗi khi lưu địa chỉ:", error);
    }
  };

  const handleOpenDeleteDialog = (address) => {
    setAddressToDelete(address);
    setDeleteDialogOpen(true);
  };

  const handleCloseDeleteDialog = () => {
    setAddressToDelete(null);
    setDeleteDialogOpen(false);
  };

  const handleDeleteAddress = async () => {
    if (!addressToDelete) return;
    try {
      await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/Address/delete/${addressToDelete.id}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      setAddresses(addresses.filter((addr) => addr.id !== addressToDelete.id));
    } catch (error) {
      console.error("Lỗi khi xóa địa chỉ:", error);
    }
    handleCloseDeleteDialog();
  };

  const fieldLabels = {
    fullName: "Họ và tên",
    addressLine1: "Địa chỉ dòng 1",
    addressLine2: "Địa chỉ dòng 2 (tùy chọn)",
    city: "Thành phố",
    state: "Tỉnh/Thành phố",
    zipCode: "Mã bưu điện",
    country: "Quốc gia",
    phoneNumber: "Số điện thoại"
  };
  const hiddenFieldsInEditMode = ['id', 'userId', 'user'];

  return (
    <Box sx={{ p: 3 }}>
      <StyledCard>
        <CardHeader 
          title={<Typography variant="h5" fontWeight="600">Địa chỉ của bạn</Typography>}
          action={
            <Button 
              variant="contained" 
              startIcon={<Add />}
              onClick={() => handleOpenModal()}
              sx={{
                backgroundColor: 'primary.main',
                '&:hover': {
                  backgroundColor: 'primary.dark'
                }
              }}
            >
              Thêm địa chỉ
            </Button>
          }
          sx={{
            borderBottom: '1px solid rgba(0,0,0,0.08)'
          }}
        />
        <CardContent>
          {loading ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">Đang tải địa chỉ...</Typography>
            </Box>
          ) : addresses.length === 0 ? (
            <Box textAlign="center" py={4}>
              <Typography variant="body1" color="text.secondary" mb={2}>
                Bạn chưa có địa chỉ nào được lưu.
              </Typography>
              <Button 
                variant="contained" 
                startIcon={<Add />}
                onClick={() => handleOpenModal()}
              >
                Thêm địa chỉ mới
              </Button>
            </Box>
          ) : (
            <Stack spacing={3}>
              {addresses.map((address) => (
                <AddressItem key={address.id}>
                  <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                    <Box>
                      <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                        {address.fullName}
                      </Typography>
                      <Typography variant="body2" color="text.secondary" paragraph>
                        {address.addressLine1}
                      </Typography>
                      {address.addressLine2 && (
                        <Typography variant="body2" color="text.secondary" paragraph>
                          {address.addressLine2}
                        </Typography>
                      )}
                      <Typography variant="body2" color="text.secondary" paragraph>
                        {address.city}, {address.state}, {address.zipCode}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {address.country}
                      </Typography>
                      <Typography variant="body2" mt={1}>
                        <Box component="span" fontWeight="500">Điện thoại:</Box> {address.phoneNumber}
                      </Typography>
                    </Box>
                    <Stack direction="row" spacing={1}>
                      <IconButton 
                        onClick={() => handleOpenModal(address)}
                        sx={{
                          color: 'primary.main',
                          '&:hover': {
                            backgroundColor: 'rgba(25, 118, 210, 0.08)'
                          }
                        }}
                      >
                        <Edit fontSize="small" />
                      </IconButton>
                      <IconButton 
                        onClick={() => handleOpenDeleteDialog(address)}
                        sx={{
                          color: 'error.main',
                          '&:hover': {
                            backgroundColor: 'rgba(211, 47, 47, 0.08)'
                          }
                        }}
                      >
                        <Delete fontSize="small" />
                      </IconButton>
                    </Stack>
                  </Stack>
                </AddressItem>
              ))}
            </Stack>
          )}
        </CardContent>
      </StyledCard>

      {/* Modal thêm/sửa địa chỉ */}
      <Modal open={openModal} onClose={handleCloseModal}>
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: { xs: '90%', sm: '500px' },
            bgcolor: "background.paper",
            boxShadow: 24,
            borderRadius: "12px",
            maxHeight: "90vh",
            overflowY: "auto",
          }}
        >
          <Box sx={{ p: 3 }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center" mb={3}>
              <Typography variant="h6" fontWeight="600">
                {editMode ? "Chỉnh sửa địa chỉ" : "Thêm địa chỉ mới"}
              </Typography>
              <IconButton onClick={handleCloseModal}>
                <Close />
              </IconButton>
            </Stack>
            
            <Divider sx={{ mb: 3 }} />
            
            <Stack spacing={2}>
              {Object.keys(newAddress)
                .filter(key => !editMode || !hiddenFieldsInEditMode.includes(key))
                .map((key) => (
                  <TextField
                    key={key}
                    fullWidth
                    label={fieldLabels[key] || key}
                    name={key}
                    value={newAddress[key]}
                    onChange={handleInputChange}
                    size="small"
                    variant="outlined"
                    required={key !== 'addressLine2'} // Chỉ addressLine2 là không bắt buộc
                  />
              ))}
            </Stack>
            
            <Stack direction="row" spacing={2} justifyContent="flex-end" mt={4}>
              <Button 
                variant="outlined" 
                onClick={handleCloseModal}
                sx={{
                  color: 'text.primary',
                  borderColor: 'rgba(0,0,0,0.23)'
                }}
              >
                Hủy
              </Button>
              <Button 
                variant="contained" 
                onClick={handleSaveAddress}
                sx={{
                  backgroundColor: 'primary.main',
                  '&:hover': {
                    backgroundColor: 'primary.dark'
                  }
                }}
              >
                {editMode ? "Cập nhật" : "Lưu địa chỉ"}
              </Button>
            </Stack>
          </Box>
        </Box>
      </Modal>

      {/* Dialog xác nhận xóa */}
      <Dialog 
        open={deleteDialogOpen} 
        onClose={handleCloseDeleteDialog}
        PaperProps={{
          sx: {
            borderRadius: '12px',
            padding: '16px'
          }
        }}
      >
        <DialogTitle fontWeight="600">Xác nhận xóa địa chỉ</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Bạn có chắc chắn muốn xóa địa chỉ này? Thao tác này không thể hoàn tác.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ p: 2 }}>
          <Button 
            onClick={handleCloseDeleteDialog}
            sx={{
              color: 'text.primary',
              '&:hover': {
                backgroundColor: 'rgba(0,0,0,0.04)'
              }
            }}
          >
            Hủy
          </Button>
          <Button 
            onClick={handleDeleteAddress} 
            color="error"
            variant="contained"
            sx={{
              '&:hover': {
                backgroundColor: 'error.dark'
              }
            }}
          >
            Xóa
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AddressComponent;
```

### ClientApp\src\components\Profile\LoyaltyProgram.jsx
```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { jwtDecode } from 'jwt-decode';
import { motion } from 'framer-motion';
import {
  Box,
  Typography,
  LinearProgress,
  Button,
  Card,
  CardContent,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  CircularProgress,
  Snackbar,
  Alert,
  Paper,
  IconButton,
} from '@mui/material';
import { Casino, EmojiEvents, Celebration, InfoOutlined } from '@mui/icons-material';

const SpinWheel = ({ onSpin, spinning, disabled, spinCost }) => {
  const [rotation, setRotation] = useState(0);

  const rewards = [
    'Giải nhất',
    'Giải nhì',
    'Giải ba',
    'Khuyến khích',
    'Giải May mắn',
    'Giải ba',
  ];

  const spinVariants = {
    idle: { rotate: 0 },
    spinning: {
      rotate: 360 * 5 + Math.random() * 360,
      transition: { duration: 3, ease: 'easeOut' },
    },
  };

  const handleSpin = () => {
    if (!spinning && !disabled) {
      setRotation((prev) => prev + 360 * 5 + Math.random() * 360);
      onSpin();
    }
  };

  return (
    <Box sx={{ position: 'relative', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <motion.div
        variants={spinVariants}
        animate={spinning ? 'spinning' : 'idle'}
        style={{
          width: 450,
          height: 450,
          borderRadius: '50%',
          background: 'conic-gradient(#ff4d4d, #ffeb3b, #4caf50, #2196f3, #9c27b0, #ff9800, #ff4d4d)',
          position: 'relative',
          border: '10px solid #fff',
          boxShadow: '0 0 25px rgba(0,0,0,0.5)',
        }}
      >
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            bgcolor: 'white',
            borderRadius: '50%',
            width: 100,
            height: 100,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 0 20px rgba(0,0,0,0.3)',
          }}
        >
          <Casino sx={{ fontSize: 60, color: '#1976d2' }} />
        </Box>

        {rewards.map((reward, index) => {
          const angle = (360 / rewards.length) * index;
          return (
            <Box
              key={index}
              sx={{
                position: 'absolute',
                width: '100%',
                height: '100%',
                transform: `rotate(${angle}deg)`,
                pointerEvents: 'none',
              }}
            >
              <Typography
                sx={{
                  position: 'absolute',
                  top: '15%',
                  left: '50%',
                  transform: 'translateX(-50%) rotate(0deg)',
                  color: 'white',
                  fontWeight: 'bold',
                  fontSize: '20px',
                  textShadow: '2px 2px 5px rgba(0,0,0,0.6)',
                  whiteSpace: 'nowrap',
                }}
              >
                {reward}
              </Typography>
            </Box>
          );
        })}
      </motion.div>

      <Box
        sx={{
          position: 'absolute',
          top: -30,
          width: 50,
          height: 50,
          bgcolor: 'red',
          clipPath: 'polygon(50% 100%, 0 0, 100% 0)',
          zIndex: 1,
          boxShadow: '0 5px 15px rgba(0,0,0,0.3)',
        }}
      />

      <Button
        variant="contained"
        color="primary"
        onClick={handleSpin}
        disabled={spinning || disabled}
        sx={{
          mt: 4,
          fontWeight: 'bold',
          padding: '15px 40px',
          fontSize: '18px',
          borderRadius: '30px',
          boxShadow: '0 5px 15px rgba(0,0,0,0.2)',
          '&:hover': { boxShadow: '0 8px 25px rgba(0,0,0,0.3)' },
        }}
      >
        {spinning ? (
          <>
            <CircularProgress size={24} sx={{ mr: 1, color: 'white' }} />
            Đang quay...
          </>
        ) : (
          `Quay ngay (${spinCost.toLocaleString()} điểm)`
        )}
      </Button>
    </Box>
  );
};

const LoyaltyProgram = () => {
  const [loyaltyData, setLoyaltyData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [spinResult, setSpinResult] = useState(null);
  const [spinning, setSpinning] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [userId, setUserId] = useState(null);
  const [openRulesDialog, setOpenRulesDialog] = useState(false); // State cho modal thể lệ

  useEffect(() => {
    const fetchLoyaltyData = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setError('Vui lòng đăng nhập để xem trạng thái thành viên');
          return;
        }

        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (!Number.isInteger(id)) {
          setError('Token không hợp lệ');
          return;
        }
        setUserId(id);

        const currentTime = Date.now() / 1000;
        if (decoded.exp < currentTime) {
          setError('Token đã hết hạn, vui lòng đăng nhập lại');
          return;
        }

        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/my-status?userId=${id}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        setLoyaltyData(response.data);
      } catch (err) {
        setError('Không thể tải thông tin chương trình khách hàng thân thiết');
        showSnackbar('Không thể tải thông tin thành viên', 'error');
      } finally {
        setLoading(false);
      }
    };

    fetchLoyaltyData();
  }, []);

  const handleSpinWheel = async () => {
    try {
      setSpinning(true);
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/spin-wheel?userId=${userId}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      setSpinResult(response.data);
      setTimeout(() => {
        setOpenDialog(true);
        setSpinning(false);
        showSnackbar('Quay thành công!', 'success');
      }, 3000);

      const updatedResponse = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/my-status?userId=${userId}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setLoyaltyData(updatedResponse.data);
    } catch (err) {
      setError('Không thể quay vòng quay may mắn');
      showSnackbar(err.response?.data || 'Không thể quay vòng quay', 'error');
      setSpinning(false);
    }
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar((prev) => ({ ...prev, open: false }));
  };

  const getProgressValue = (currentPoints, rank) => {
    switch (rank) {
      case 'Admin':
        return 100;
      case 'VIP 1':
        return (currentPoints / 50000) * 100;
      case 'VIP 2':
        return (currentPoints / 125000) * 100;
      case 'VIP 3':
        return (currentPoints / 225000) * 100;
      default:
        return (currentPoints / 50000) * 100;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" bgcolor="#f5f5f5">
        <CircularProgress size={60} thickness={5} />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" bgcolor="#f5f5f5">
        <Paper elevation={3} sx={{ p: 4, borderRadius: 2 }}>
          <Typography color="error" variant="h6">
            {error}
          </Typography>
          <Button variant="outlined" color="primary" sx={{ mt: 2 }} onClick={() => window.location.reload()}>
            Thử lại
          </Button>
        </Paper>
      </Box>
    );
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#f5f5f5', py: 4 }}>
      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      <Box sx={{ maxWidth: '1000px', margin: '0 auto', px: 2, position: 'relative' }}>
        {/* Nút dấu ! ở góc trên bên phải */}
        <IconButton
          onClick={() => setOpenRulesDialog(true)}
          sx={{
            position: 'absolute',
            top: 10,
            right: 10,
            color: '#1976d2',
            bgcolor: 'white',
            boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
            '&:hover': { bgcolor: '#e3f2fd' },
          }}
        >
          <InfoOutlined sx={{ fontSize: 30 }} />
        </IconButton>

        <Paper
          elevation={4}
          sx={{
            p: 4,
            borderRadius: 3,
            background: 'linear-gradient(135deg, #ffffff 0%, #e3f2fd 100%)',
            mb: 4,
          }}
        >
          <Typography
            variant="h3"
            align="center"
            gutterBottom
            sx={{
              fontWeight: 'bold',
              color: '#1976d2',
              textShadow: '1px 1px 3px rgba(0,0,0,0.1)',
            }}
          >
            <EmojiEvents sx={{ verticalAlign: 'middle', mr: 1, fontSize: 40 }} />
            Chương trình Khách hàng Thân thiết
          </Typography>

          {loyaltyData && (
            <Card sx={{ boxShadow: '0 8px 20px rgba(0,0,0,0.1)', borderRadius: 3 }}>
              <CardContent>
                <Grid container spacing={4} alignItems="center">
                  <Grid item xs={12}>
                    <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#333', mb: 2, textAlign: 'center' }}>
                      Hạng hiện tại: <span style={{ color: '#1976d2' }}>{loyaltyData.currentRank}</span>
                    </Typography>
                    <Typography variant="h6" sx={{ color: '#555', mb: 2, textAlign: 'center' }}>
                      Điểm tích lũy:{' '}
                      <span style={{ fontWeight: 'bold', color: '#4caf50' }}>
                        {loyaltyData.currentPoints.toLocaleString()}
                      </span>
                    </Typography>
                    {loyaltyData.currentRank !== 'Admin' && (
                      <Box sx={{ mb: 4, maxWidth: 600, mx: 'auto' }}>
                        <Typography variant="body1" color="text.secondary" sx={{ textAlign: 'center' }}>
                          Cần thêm{' '}
                          <strong style={{ color: '#ff9800' }}>
                            {(loyaltyData.pointsNeededForNextRank || 0).toLocaleString()}
                          </strong>{' '}
                          điểm để lên hạng tiếp theo
                        </Typography>
                        <LinearProgress
                          variant="determinate"
                          value={getProgressValue(loyaltyData.currentPoints, loyaltyData.currentRank)}
                          sx={{
                            height: 12,
                            borderRadius: 6,
                            mt: 1,
                            backgroundColor: 'grey.200',
                            '& .MuiLinearProgress-bar': {
                              borderRadius: 6,
                              background: 'linear-gradient(to right, #4caf50, #81c784)',
                            },
                          }}
                        />
                      </Box>
                    )}
                    <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: 6 }}>
                      <SpinWheel
                        onSpin={handleSpinWheel}
                        spinning={spinning}
                        disabled={!loyaltyData.canSpin}
                        spinCost={loyaltyData.spinCost || 0}
                      />
                    </Box>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          )}
        </Paper>

        {/* Dialog kết quả vòng quay */}
        <Dialog
          open={openDialog}
          onClose={() => setOpenDialog(false)}
          PaperProps={{ sx: { borderRadius: 3, overflow: 'hidden' } }}
        >
          <DialogTitle
            sx={{
              bgcolor: 'primary.main',
              color: 'white',
              fontWeight: 'bold',
              display: 'flex',
              alignItems: 'center',
              py: 2,
            }}
          >
            <Celebration sx={{ mr: 1 }} />
            Kết quả vòng quay
          </DialogTitle>
          <DialogContent sx={{ pt: 3, pb: 2 }}>
            <DialogContentText sx={{ fontSize: '1.1rem', color: '#333' }}>
              {spinResult?.prizeType === 'Voucher' ? (
                <>
                  Chúc mừng! Bạn đã nhận được voucher trị giá{' '}
                  <strong style={{ color: '#4caf50' }}>
                    {(spinResult.voucher?.discountAmount || 0).toLocaleString()}₫
                  </strong>
                </>
              ) : (
                'Rất tiếc! Bạn không trúng phần thưởng lần này.'
              )}
            </DialogContentText>
            {spinResult?.prizeType === 'Voucher' && (
              <Paper
                elevation={2}
                sx={{
                  mt: 2,
                  p: 2,
                  background: 'linear-gradient(to right, #e8f5e9, #c8e6c9)',
                  borderRadius: 2,
                  textAlign: 'center',
                }}
              >
                <Typography variant="h5" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
                  {spinResult.voucher?.code || 'N/A'}
                </Typography>
                <Typography variant="body1" sx={{ mt: 1, color: '#555' }}>
                  Hạn sử dụng:{' '}
                  {spinResult.voucher?.expiryDate
                    ? new Date(spinResult.voucher.expiryDate).toLocaleDateString('vi-VN')
                    : 'N/A'}
                </Typography>
              </Paper>
            )}
            <DialogContentText sx={{ mt: 2, fontSize: '1.1rem', color: '#333' }}>
              Điểm còn lại:{' '}
              <strong style={{ color: '#1976d2' }}>
                {(spinResult?.remainingPoints || 0).toLocaleString()}
              </strong>
            </DialogContentText>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              onClick={() => setOpenDialog(false)}
              variant="contained"
              color="primary"
              sx={{ borderRadius: 20, px: 4 }}
            >
              Đóng
            </Button>
          </DialogActions>
        </Dialog>

        {/* Dialog thể lệ */}
        <Dialog
          open={openRulesDialog}
          onClose={() => setOpenRulesDialog(false)}
          PaperProps={{ sx: { borderRadius: 3, overflow: 'hidden', minWidth: '500px' } }}
        >
          <DialogTitle
            sx={{
              bgcolor: 'primary.main',
              color: 'white',
              fontWeight: 'bold',
              display: 'flex',
              alignItems: 'center',
              py: 2,
            }}
          >
            <InfoOutlined sx={{ mr: 1 }} />
            Thể lệ chương trình
          </DialogTitle>
          <DialogContent sx={{ pt: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
              Quy định quay vòng quay may mắn
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - Mỗi lần quay sẽ tiêu tốn số điểm tương ứng với hạng thành viên:
            </Typography>
            <Typography variant="body2" sx={{ ml: 2 }}>
              • VIP 0: 5000 điểm<br />
              • VIP 1: 5000 điểm<br />
              • VIP 2: 5000 điểm<br />
              • VIP 3: 5000 điểm
            </Typography>
            <Typography variant="h6" sx={{ fontWeight: 'bold', mt: 3, mb: 2 }}>
              Phần thưởng theo hạng thành viên
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 0</strong>:<br />
              • 50% cơ hội nhận voucher 50,000₫<br />
              • 30% cơ hội nhận voucher 20,000₫<br />
              • 20% không nhận được gì
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 1</strong>:<br />
              • 40% cơ hội nhận voucher 100,000₫<br />
              • 30% cơ hội nhận voucher 50,000₫<br />
              • 30% cơ hội nhận voucher 20,000₫
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 2</strong>:<br />
              • 30% cơ hội nhận voucher 200,000₫<br />
              • 30% cơ hội nhận voucher 100,000₫<br />
              • 40% cơ hội nhận voucher 50,000₫
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 3</strong>:<br />
              • 20% cơ hội nhận voucher 350,000₫<br />
              • 30% cơ hội nhận voucher 200,000₫<br />
              • 50% cơ hội nhận voucher 100,000₫
            </Typography>
            <Typography variant="body2" sx={{ mt: 2, color: '#555' }}>
              Lưu ý: Voucher có hạn sử dụng 30 ngày kể từ ngày nhận.
            </Typography>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              onClick={() => setOpenRulesDialog(false)}
              variant="contained"
              color="primary"
              sx={{ borderRadius: 20, px: 4 }}
            >
              Đóng
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

export default LoyaltyProgram;
```

### ClientApp\src\components\Profile\ProfileInfo.jsx
```jsx
import { useState, useEffect } from "react";
import { User } from "lucide-react";
import { 
  Modal, 
  TextField, 
  Button, 
  Typography, 
  CircularProgress, 
    Snackbar,
  Avatar,
  Alert 
} from "@mui/material";
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import EditIcon from '@mui/icons-material/Edit';
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const ProfileInfo = () => {
  const [user, setUser] = useState({ 
    fullName: "", 
    email: "", 
    role: "",
    phoneNumber: "",
    gender: "",
    dateOfBirth: ""
  });
  
  const [loading, setLoading] = useState(true);
  const [openModal, setOpenModal] = useState(false);
  const [updatedUser, setUpdatedUser] = useState({ ...user });
  const [userId, setUserId] = useState(null);
  const [birthDate, setBirthDate] = useState(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success"
  });


  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (!Number.isInteger(id)) return;
        setUserId(id);
        fetchUserProfile(id);
      } catch (error) {
        console.error("Lỗi khi giải mã token:", error);
      }
    }
  }, []);

  const fetchUserProfile = async (id) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      
      setUser(response.data);
      setUpdatedUser(response.data);
      if (response.data.dateOfBirth) {
        setBirthDate(new Date(response.data.dateOfBirth));
      }
    } catch (error) {
      console.error("Lỗi khi lấy thông tin user:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleOpenModal = () => setOpenModal(true);
  const handleCloseModal = () => setOpenModal(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdatedUser(prev => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (newValue) => {
    setBirthDate(newValue);
    setUpdatedUser(prev => ({
      ...prev,
      dateOfBirth: newValue ? newValue.toISOString().split('T')[0] : ""
    }));
  };

  const handleSaveProfile = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/users/profile`,
        updatedUser,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      setUser(response.data.user);
      showSnackbar("Cập nhật thông tin thành công", "success");
      handleCloseModal();
    } catch (error) {
      console.error("Failed to update profile:", error);
      showSnackbar(error.response?.data?.message || "Cập nhật thất bại", "error");
    }
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <CircularProgress />
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Snackbar thông báo */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      {/* Profile Card */}
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        {/* Header */}
        <div className="bg-ưhite p-6 text-black">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold">Thông tin cá nhân</h1>
            <Button 
              variant="contained" 
              startIcon={<EditIcon />}
              onClick={handleOpenModal}
              className="bg-black text-purple-600 hover:bg-gray-100 shadow-md"
            >
              Chỉnh sửa
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 grid md:grid-cols-3 gap-6">
          {/* Avatar Section */}
          <div className="md:col-span-1 flex flex-col items-center">
            <Avatar 
              sx={{ 
                width: 120, 
                height: 120,
                bgcolor: 'white',
                fontSize: '3rem'
              }}
              className="border-4 border-white shadow-lg mb-4"
            >
    <User className="w-24 h-24 text-black" />
            </Avatar>
            <Typography variant="h6" className="font-semibold">
              {user.fullName || "Khách hàng"}
            </Typography>
            <Typography variant="body2" className="text-gray-500">
              {user.role?.name || "Thành viên"}
            </Typography>
          </div>

          {/* Info Section */}
          <div className="md:col-span-2 space-y-4">
            <InfoField label="Họ và tên" value={user.fullName} />
            <InfoField label="Email" value={user.email} />
            <InfoField label="Số điện thoại" value={user.phoneNumber || "Chưa cập nhật"} />
            <InfoField label="Giới tính" value={user.gender || "Chưa cập nhật"} />
            <InfoField 
              label="Ngày sinh" 
              value={user.dateOfBirth ? new Date(user.dateOfBirth).toLocaleDateString('vi-VN') : "Chưa cập nhật"} 
            />
          </div>
        </div>
      </div>

      {/* Edit Modal */}
      <Modal open={openModal} onClose={handleCloseModal}>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full max-w-md bg-white rounded-xl shadow-2xl p-6 outline-none">
          <Typography variant="h6" className="font-bold text-center mb-4 text-purple-600">
            Chỉnh sửa thông tin
          </Typography>
          
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <div className="space-y-4">
              <TextField
                fullWidth
                label="Họ và tên"
                name="fullName"
                value={updatedUser.fullName}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
              />
              
              <TextField
                fullWidth
                label="Email"
                name="email"
                value={updatedUser.email}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
              />
              
              <TextField
                fullWidth
                label="Số điện thoại"
                name="phoneNumber"
                value={updatedUser.phoneNumber}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
              />
              
              <TextField
                fullWidth
                label="Giới tính"
                name="gender"
                value={updatedUser.gender}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
                select
                SelectProps={{ native: true }}
              >
                <option value=""></option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
                <option value="Khác">Khác</option>
              </TextField>
              
              <DatePicker
                label="Ngày sinh"
                value={birthDate}
                onChange={handleDateChange}
                renderInput={(params) => (
                  <TextField 
                    {...params} 
                    fullWidth 
                    size="small"
                  />
                )}
                inputFormat="dd/MM/yyyy"
              />
              
              <div className="flex justify-end space-x-3 pt-4">
                <Button 
                  variant="outlined" 
                  onClick={handleCloseModal}
                  className="border-gray-300 text-gray-600 hover:border-gray-400"
                >
                  Hủy
                </Button>
                <Button 
                  variant="contained" 
                  onClick={handleSaveProfile}
                  className="bg-purple-600 hover:bg-purple-700 shadow-md"
                >
                  Lưu thay đổi
                </Button>
              </div>
            </div>
          </LocalizationProvider>
        </div>
      </Modal>
    </div>
  );
};

// Reusable Info Field Component
const InfoField = ({ label, value }) => (
  <div className="border-b border-gray-100 pb-3">
    <Typography variant="subtitle2" className="text-gray-500 font-medium">
      {label}
    </Typography>
    <Typography variant="body1" className="font-semibold">
      {value}
    </Typography>
  </div>
);

export default ProfileInfo;
```

### ClientApp\src\components\Profile\ProfileSidebar.jsx
```jsx
import React from "react";
import "./ProfileSidebar.css"; // Nếu có file CSS riêng

const ProfileSidebar = ({ setActiveTab }) => {

  return (
    <div className="profile-sidebar m-24">
      <ul>
        <li onClick={() => setActiveTab("profile")}>Thông tin cá nhân</li>
        <li onClick={() => setActiveTab("orders")}>Đơn hàng của tôi</li>
        <li onClick={() => setActiveTab("loyalty")}>Khách hàng thân thiết</li>
        <li onClick={() => setActiveTab("address")}> Sổ địa chỉ nhận hàng</li>
      </ul>
    </div>
  );
};

export default ProfileSidebar;

```

### ClientApp\src\components\Profile\UserOrders.jsx
```jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  CircularProgress,
  Avatar,
  Collapse,
  IconButton,
  Box,
  Chip
} from "@mui/material";
import { KeyboardArrowDown, KeyboardArrowUp } from "@mui/icons-material";

const UserOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [userId, setUserId] = useState(null);
  const [expandedOrder, setExpandedOrder] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decodedToken = jwtDecode(token);
        if (decodedToken.sub) {
          setUserId(decodedToken.sub);
        } else {
          console.error("Không tìm thấy userId trong token!");
        }
      } catch (err) {
        console.error("Lỗi khi decode token:", err);
      }
    }
  }, []);

  useEffect(() => {
    if (!userId) return;

    const fetchOrders = async () => {
      try {
        setLoading(true);
        // Lấy danh sách đơn hàng với thông tin chi tiết sản phẩm
        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders/user/${userId}/paged`,
          {
            headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
            params: {
              page: 1,
              pageSize: 10 // Có thể điều chỉnh số lượng đơn hàng hiển thị
            }
          }
        );
        setOrders(response.data.orders);
      } catch (err) {
        console.error("Lỗi khi lấy danh sách đơn hàng:", err);
        setError("Không thể tải danh sách đơn hàng.");
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [userId]);

  const toggleOrderExpand = (orderId) => {
    setExpandedOrder(expandedOrder === orderId ? null : orderId);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Delivered":
        return "success";
      case "Pending":
        return "warning";
      case "Cancelled":
        return "error";
      case "Paid":
        return "primary";
      default:
        return "default";
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <CircularProgress />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Typography color="error">{error}</Typography>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: "1200px", margin: "6rem auto", padding: "0 1rem" }}>
      <Typography variant="h4" gutterBottom align="center">
        Danh sách đơn hàng của bạn
      </Typography>
      
      {orders.length === 0 ? (
        <Box sx={{ textAlign: 'center', p: 4 }}>
          <Typography variant="h6">Bạn chưa có đơn hàng nào</Typography>
          <Typography variant="body1" sx={{ mt: 2 }}>
            Hãy bắt đầu mua sắm ngay để trải nghiệm dịch vụ của chúng tôi!
          </Typography>
        </Box>
      ) : (
        <TableContainer component={Paper} sx={{ border: "1px solid #e0e0e0", borderRadius: "8px" }}>
          <Table>
            <TableHead sx={{ backgroundColor: "#f5f5f5" }}>
              <TableRow>
                <TableCell />
                <TableCell sx={{ fontWeight: "bold" }}>Mã đơn hàng</TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="right">Ngày đặt</TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="right">Tổng tiền</TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="center">Trạng thái</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {orders.map((order) => (
                <React.Fragment key={order.id}>
                  <TableRow hover>
                    <TableCell>
                      <IconButton
                        aria-label="expand row"
                        size="small"
                        onClick={() => toggleOrderExpand(order.id)}
                      >
                        {expandedOrder === order.id ? <KeyboardArrowUp /> : <KeyboardArrowDown />}
                      </IconButton>
                    </TableCell>
                    <TableCell component="th" scope="row">
                      #{order.id}
                    </TableCell>
                    <TableCell align="right">
                      {new Date(order.orderDate).toLocaleDateString('vi-VN')}
                    </TableCell>
                    <TableCell align="right">
                      {order.totalAmount.toLocaleString('vi-VN')}₫
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        label={order.orderStatus} 
                        color={getStatusColor(order.orderStatus)}
                        variant="outlined"
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
                      <Collapse in={expandedOrder === order.id} timeout="auto" unmountOnExit>
                        <Box sx={{ margin: 2 }}>
                          <Typography variant="h6" gutterBottom>
                            Chi tiết đơn hàng
                          </Typography>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>Sản phẩm</TableCell>
                                <TableCell align="right">Đơn giá</TableCell>
                                <TableCell align="center">Số lượng</TableCell>
                                <TableCell align="right">Thành tiền</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {order.items.map((item) => (
                                <TableRow key={`${order.id}-${item.productVariantId}`}>
                                  <TableCell>
                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                                       <Avatar
                                src={
                                    item.productImage?.startsWith("http")
                                        ? item.productImage // Ảnh từ API (URL đầy đủ)
                                        : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}` // Ảnh local trong wwwroot
                                }
                                sx={{ width: 56, height: 56 }}
                                variant="rounded"
                                alt="Product img"
                                className="size-10"
                                onError={(e) => { e.target.onerror = null; }}
                            />
                                      <Box>
                                        <Typography variant="subtitle1">{item.productName}</Typography>
                                        <Typography variant="body2" color="text.secondary">
                                          {item.variantColor} - {item.variantStorage}
                                        </Typography>
                                      </Box>
                                    </Box>
                                  </TableCell>
                                  <TableCell align="right">
                                    {item.price.toLocaleString('vi-VN')}₫
                                  </TableCell>
                                  <TableCell align="center">
                                    {item.quantity}
                                  </TableCell>
                                  <TableCell align="right">
                                    {(item.price * item.quantity).toLocaleString('vi-VN')}₫
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                          <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between' }}>
                            <Typography variant="body2">
                              Phương thức thanh toán: {order.paymentMethodId === 1 ? "Tiền mặt" : "MoMo"}
                            </Typography>
                            <Box sx={{ textAlign: 'right' }}>
                              <Typography variant="body1">
                                <strong>Tổng cộng:</strong> {order.totalAmount.toLocaleString('vi-VN')}₫
                              </Typography>
                              {order.orderStatus === "Pending" && (
                                <Typography variant="body2" color="text.secondary">
                                  Đơn hàng đang chờ xử lý
                                </Typography>
                              )}
                            </Box>
                          </Box>
                        </Box>
                      </Collapse>
                    </TableCell>
                  </TableRow>
                </React.Fragment>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </div>
  );
};

export default UserOrders;
```

### ClientApp\src\components\Profile\ViewedProducts.jsx
```jsx
import React from "react";

const products = [
  {
    id: 1,
    name: "Samsung Galaxy S25 Ultra 5G",
    price: "31.990.000 ₫",
    oldPrice: "33.990.000 ₫",
    discount: "-6%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 2,
    name: "iPhone 15 Pro Max 256GB",
    price: "29.090.000 ₫",
    oldPrice: "35.000.000 ₫",
    discount: "-17%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 3,
    name: "Xiaomi 14 Ultra 512GB",
    price: "26.990.000 ₫",
    oldPrice: "29.300.000 ₫",
    discount: "-8%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 4,
    name: "OPPO Find X7 Ultra 1TB",
    price: "27.990.000 ₫",
    oldPrice: "31.100.000 ₫",
    discount: "-10%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
];

const ViewedProducts = () => {
  return (
    <div className="viewed-products">
      <h2>Sản phẩm đã xem</h2>
      <div className="products-row">
        {products.map((product) => (
          <div key={product.id} className="product-item">
            <img src={product.img} alt={product.name} />
            <p>{product.name}</p>
            <div className="price-container">
              <s className="old-price">{product.oldPrice}</s>
              <span className="discount">{product.discount}</span>
            </div>
            <p className="price">{product.price}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ViewedProducts;

```

### ClientApp\src\components\ServiceSlider\ServiceSlider.jsx
```jsx
import React from "react";
import "./ServiceSlider.css"; // Import file CSS

const services = [
  {
    href: "dich-vu/the-game",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/the_game_a74fbf07e8_32a77df1b0.svg?w=128&q=100",
    title: "Thẻ game",
  },
  {
    href: "dich-vu/thanh-toan-hoa-don-internet",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_internet_bd9a355225_03e954c658.svg?w=128&q=100",
    title: "Đóng phí Internet",
  },
  {
    href: "dich-vu/thanh-toan-tra-gop",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tra_gop_d424d9683f_a8e4090e13.svg?w=128&q=100",
    title: "Thanh toán trả góp",
  },
  {
    href: "dich-vu/thanh-toan-tien-nuoc",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_nuoc_7f2b577ea8_fc7c4fe67e.svg?w=128&q=100",
    title: "Tiền nước",
  },
  {
    href: "dich-vu/thanh-toan-tien-dien",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_dien_522ab38b64_fc4ab62614.svg?w=128&q=100",
    title: "Tiền điện",
  },
  {
    href: "dich-vu",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/Khac_a756550960.svg?w=128&q=100",
    title: "Dịch vụ khác",
  },
];

const ServiceSlider = () => {
  return (
    <div className="service-container">
      <div className="service-wrapper">
        {services.map((service, index) => (
          <a key={index} href={service.href} className="service-item">
            <img src={service.imgSrc} alt={service.title} className="service-icon" />
            <p className="service-title">{service.title}</p>
          </a>
        ))}
      </div>
    </div>
  );
};

export default ServiceSlider;

```

### ClientApp\src\components\shoppingcart\CartDrawer.jsx
```jsx
import React, { useEffect, useState } from "react";
import { 
  Drawer, 
  IconButton, 
  List, 
  Avatar, 
  Typography, 
  Button, 
  Box, 
  TextField, 
  Modal, 
  Checkbox,
  Chip,
  Divider,
  CircularProgress
} from "@mui/material";
import { X, Delete, Plus, Minus, Gift } from "lucide-react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const CartDrawer = ({ isOpen, onClose }) => {
  const [cartItems, setCartItems] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [userId, setUserId] = useState(null);
  const [voucherCode, setVoucherCode] = useState("");
  const [discountAmount, setDiscountAmount] = useState(0);
  const [totalAmount, setTotalAmount] = useState(0);
  const [originalTotal, setOriginalTotal] = useState(0);
  const [selectedItem, setSelectedItem] = useState(null);
  const [quantityModalOpen, setQuantityModalOpen] = useState(false);
  const [voucherApplied, setVoucherApplied] = useState(false);
  const [loading, setLoading] = useState(false);
  const [voucherLoading, setVoucherLoading] = useState(false);
  const [voucherError, setVoucherError] = useState(""); // Thêm trạng thái lỗi voucher
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCart = async () => {
      const token = localStorage.getItem("token");
      setLoading(true);
      
      try {
        let items = [];
        let id = null;
        
        if (token) {
          const decoded = jwtDecode(token);
          id = parseInt(decoded.sub, 10);
          setUserId(id);
          
          const [apiResponse, sessionCart] = await Promise.all([
            axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Cart?userId=${id}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            sessionStorage.getItem("cart")
          ]);

          items = apiResponse.data;

          if (sessionCart) {
            const sessionItems = JSON.parse(sessionCart);
            const mergedItems = await mergeCartItems(items, sessionItems);
            items = mergedItems;
            sessionStorage.removeItem("cart");
          }
        } else {
          const sessionCart = sessionStorage.getItem("cart");
          if (sessionCart) {
            const sessionItems = JSON.parse(sessionCart);
            items = await Promise.all(
              sessionItems.map(async (item) => {
                try {
                  const response = await axios.get(
                    `${process.env.REACT_APP_API_BASE_URL}/api/Cart/variant-info/${item.productVariantId}`
                  );
                  return {
                    ...item,
                    productName: response.data.productName,
                    productImage: response.data.productImage,
                    variantColor: response.data.variantColor,
                    variantStorage: response.data.variantStorage,
                    productPrice: response.data.price,
                    productDiscountPrice: response.data.discountPrice
                  };
                } catch (error) {
                  console.error("Error fetching variant info:", error);
                  return {
                    ...item,
                    productName: "Sản phẩm không tên",
                    productImage: "https://via.placeholder.com/100",
                    variantColor: "Không xác định",
                    variantStorage: "Không xác định",
                    productPrice: 0,
                    productDiscountPrice: 0
                  };
                }
              })
            );
          }
        }

        setCartItems(items);
        setSelectedItems(items);
        calculateTotalAmount(items, 0); // Khởi tạo với discount = 0
      } catch (error) {
        console.error("Error fetching cart:", error);
      } finally {
        setLoading(false);
      }
    };

    const mergeCartItems = async (apiItems, sessionItems) => {
      const merged = [...apiItems];
      
      for (const sessionItem of sessionItems) {
        const existingItem = merged.find(item => 
          item.productVariantId === sessionItem.productVariantId);
        
        if (existingItem) {
          existingItem.quantity += sessionItem.quantity;
        } else {
          try {
            const response = await axios.get(
              `${process.env.REACT_APP_API_BASE_URL}/api/Cart/variant-info/${sessionItem.productVariantId}`
            );
            merged.push({
              ...sessionItem,
              productName: response.data.productName,
              productImage: response.data.productImage,
              variantColor: response.data.variantColor,
              variantStorage: response.data.variantStorage,
              productPrice: response.data.price,
              productDiscountPrice: response.data.discountPrice
            });
          } catch (error) {
            console.error("Error fetching variant info:", error);
          }
        }
      }
      
      return merged;
    };

    if (isOpen) {
      fetchCart();
    }

    // Reset trạng thái khi đóng drawer
    return () => {
      setVoucherCode("");
      setDiscountAmount(0);
      setVoucherApplied(false);
      setVoucherError("");
    };
  }, [isOpen]);

  const calculateTotalAmount = (items, discount = discountAmount) => {
    const total = items.reduce((sum, item) => {
      const price = item.productDiscountPrice || item.productPrice;
      return sum + price * item.quantity;
    }, 0);
    
    setOriginalTotal(total);
    setTotalAmount(Math.max(0, total - discount)); // Đảm bảo total không âm
  };

  const handleRemoveItem = async (id) => {
    try {
      const token = localStorage.getItem("token");
      const numericId = Number(id);

      if (token && userId) {
        await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/Cart/remove/${numericId}?userId=${userId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
      } else {
        const sessionCart = sessionStorage.getItem("cart");
        if (sessionCart) {
          const updatedCart = JSON.parse(sessionCart).filter(item => item.productVariantId !== numericId);
          sessionStorage.setItem("cart", JSON.stringify(updatedCart));
        }
      }

      const updatedItems = cartItems.filter((item) => item.productVariantId !== numericId);
      setCartItems(updatedItems);
      setSelectedItems(updatedItems);
      calculateTotalAmount(updatedItems);
    } catch (error) {
      console.error("Error removing item:", error);
    }
  };

  const handleApplyVoucher = async () => {
    if (!userId) {
      setVoucherError("Vui lòng đăng nhập để sử dụng voucher.");
      return;
    }

    if (voucherApplied) {
      setVoucherError("Voucher đã được áp dụng.");
      return;
    }

    if (!voucherCode.trim()) {
      setVoucherError("Vui lòng nhập mã voucher.");
      return;
    }

    if (selectedItems.length === 0) {
      setVoucherError("Vui lòng chọn ít nhất một sản phẩm để áp dụng voucher.");
      return;
    }

    setVoucherLoading(true);
    setVoucherError("");
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/apply`, { 
        code: voucherCode, 
        userId,
        totalAmount: originalTotal // Gửi tổng tiền để backend kiểm tra điều kiện
      }, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
      });
      
      const newDiscountAmount = response.data.discountAmount || 0;
      setDiscountAmount(newDiscountAmount);
      setVoucherApplied(true);
      calculateTotalAmount(selectedItems, newDiscountAmount);
    } catch (error) {
      console.error("Error applying voucher:", error);
      setVoucherError(error.response?.data?.message || "Voucher không hợp lệ hoặc đã hết hạn.");
    } finally {
      setVoucherLoading(false);
    }
  };

  const handleRemoveVoucher = () => {
    setVoucherCode("");
    setDiscountAmount(0);
    setVoucherApplied(false);
    setVoucherError("");
    calculateTotalAmount(selectedItems, 0);
  };

  const handlePlaceOrder = () => {
    if (selectedItems.length === 0) {
      alert("Vui lòng chọn ít nhất một sản phẩm!");
      return;
    }
    navigate("/checkout", { 
      state: { 
        selectedItems, 
        totalAmount, 
        originalTotal,
        discountAmount,
        voucherCode: voucherApplied ? voucherCode : null 
      } 
    });
  };

  const handleQuantityChange = (item) => {
    setSelectedItem(item);
    setQuantityModalOpen(true);
  };

  const updateQuantity = async (newQuantity) => {
    if (!selectedItem) return;

    const updatedItems = cartItems.map((item) =>
      item.productVariantId === selectedItem.productVariantId
        ? { ...item, quantity: newQuantity }
        : item
    ).filter(item => item.quantity > 0);

    try {
      const token = localStorage.getItem("token");
      if (token && userId) {
        await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/Cart/update`, {
          userId,
          productVariantId: selectedItem.productVariantId,
          quantity: newQuantity
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });
      } else {
        sessionStorage.setItem("cart", JSON.stringify(updatedItems));
      }

      setCartItems(updatedItems);
      setSelectedItems(updatedItems);
      calculateTotalAmount(updatedItems);
    } catch (error) {
      console.error("Error updating quantity:", error);
    }
  };

  const handleSelectItem = (item) => {
    const isSelected = selectedItems.some(
      (selectedItem) => selectedItem.productVariantId === item.productVariantId
    );
    const updatedSelectedItems = isSelected
      ? selectedItems.filter((selectedItem) => selectedItem.productVariantId !== item.productVariantId)
      : [...selectedItems, item];
    
    setSelectedItems(updatedSelectedItems);
    calculateTotalAmount(updatedSelectedItems, discountAmount);
  };

  return (
    <Drawer 
      anchor="right" 
      open={isOpen} 
      onClose={onClose} 
      PaperProps={{ 
        sx: { 
          width: { xs: '100%', sm: 500 }, 
          p: 2,
          display: 'flex',
          flexDirection: 'column'
        } 
      }}
    >
      <Box className="flex items-center justify-between p-4 border-b">
        <Typography variant="h6" fontWeight="bold">Giỏ Hàng Của Bạn</Typography>
        <IconButton onClick={onClose}>
          <X />
        </IconButton>
      </Box>

      {loading ? (
        <Box display="flex" justifyContent="center" alignItems="center" flexGrow={1}>
          <CircularProgress />
        </Box>
      ) : cartItems.length > 0 ? (
        <>
          <List sx={{ flexGrow: 1, overflowY: 'auto', px: 1 }}>
            {cartItems.map((item) => (
              <Box
                key={item.productVariantId}
                sx={{
                  p: 2,
                  border: "1px solid #e0e0e0",
                  borderRadius: 2,
                  mb: 2,
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  backgroundColor: "#fff",
                  '&:hover': {
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                  }
                }}
              >
                <Checkbox
                  checked={selectedItems.some(
                    (selectedItem) => selectedItem.productVariantId === item.productVariantId
                  )}
                  onChange={() => handleSelectItem(item)}
                  color="primary"
                />
                <Avatar
                  variant="rounded"
                  src={item.productImage?.startsWith("http") 
                    ? item.productImage 
                    : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}`}
                  alt={item.productName}
                  sx={{ width: 80, height: 80 }}
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src = "https://via.placeholder.com/80";
                  }}
                />
                <Box sx={{ flexGrow: 1 }}>
                  <Typography fontWeight="medium" sx={{ mb: 0.5 }}>
                    {item.productName}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                    {item.variantColor} - {item.variantStorage}
                  </Typography>
                  {item.productDiscountPrice ? (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="body2" sx={{ textDecoration: 'line-through', color: 'text.secondary' }}>
                        {(item.productPrice * item.quantity).toLocaleString()}₫
                      </Typography>
                      <Typography variant="body2" fontWeight="bold" color="error">
                        {(item.productDiscountPrice * item.quantity).toLocaleString()}₫
                      </Typography>
                    </Box>
                  ) : (
                    <Typography variant="body2" fontWeight="medium">
                      {(item.productPrice * item.quantity).toLocaleString()}₫
                    </Typography>
                  )}
                  <Box 
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1,
                      mt: 0.5 
                    }}
                    onClick={() => handleQuantityChange(item)}
                  >
                    <Typography 
                      variant="body2" 
                      color="text.secondary"
                      sx={{ cursor: 'pointer' }}
                    >
                      Số lượng: 
                    </Typography>
                    <Chip 
                      label={item.quantity} 
                      size="small"
                      sx={{ cursor: 'pointer' }}
                    />
                  </Box>
                </Box>
                <IconButton 
                  onClick={() => handleRemoveItem(item.productVariantId)}
                  sx={{ color: 'error.main' }}
                >
                  <Delete size={20} />
                </IconButton>
              </Box>
            ))}
          </List>

          <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fafafa' }}>
            {userId && (
              <>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Gift size={20} color="#ff6b6b" style={{ marginRight: 8 }} />
                  <Typography variant="subtitle1" fontWeight="medium">
                    Mã giảm giá
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <TextField
                    fullWidth
                    size="small"
                    variant="outlined"
                    placeholder="Nhập mã giảm giá"
                    value={voucherCode}
                    onChange={(e) => {
                      setVoucherCode(e.target.value);
                      setVoucherError("");
                    }}
                    disabled={voucherApplied}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: '4px',
                      }
                    }}
                  />
                  {voucherApplied ? (
                    <Button 
                      variant="outlined" 
                      color="error"
                      onClick={handleRemoveVoucher}
                      sx={{ minWidth: '100px' }}
                    >
                      Hủy
                    </Button>
                  ) : (
                    <Button 
                      variant="contained" 
                      color="primary"
                      onClick={handleApplyVoucher}
                      disabled={!voucherCode || voucherLoading}
                      sx={{ minWidth: '100px' }}
                    >
                      {voucherLoading ? <CircularProgress size={20} /> : 'Áp dụng'}
                    </Button>
                  )}
                </Box>
                {voucherError && (
                  <Typography variant="body2" color="error" sx={{ mb: 1 }}>
                    {voucherError}
                  </Typography>
                )}
                {discountAmount > 0 && (
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    mb: 1 
                  }}>
                    <Typography variant="body2">Giảm giá:</Typography>
                    <Typography variant="body2" color="error" fontWeight="medium">
                      -{discountAmount.toLocaleString()}₫
                    </Typography>
                  </Box>
                )}
                <Divider sx={{ my: 1 }} />
              </>
            )}
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mb: 1 
            }}>
              <Typography variant="body1">Tạm tính:</Typography>
              <Typography variant="body1" fontWeight="medium">
                {originalTotal.toLocaleString()}₫
              </Typography>
            </Box>
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mb: 2 
            }}>
              <Typography variant="h6">Tổng cộng:</Typography>
              <Typography variant="h6" fontWeight="bold" color="error">
                {totalAmount.toLocaleString()}₫
              </Typography>
            </Box>
            
            <Button
              fullWidth
              variant="contained"
              color="error"
              size="large"
              onClick={handlePlaceOrder}
              disabled={selectedItems.length === 0}
              sx={{
                py: 1.5,
                borderRadius: '4px',
                fontWeight: 'bold',
                fontSize: '1rem'
              }}
            >
              Tiến hành đặt hàng
            </Button>
          </Box>
        </>
      ) : (
        <Box 
          display="flex" 
          flexDirection="column" 
          justifyContent="center" 
          alignItems="center" 
          flexGrow={1}
          textAlign="center"
          p={4}
        >
          <Typography variant="h6" gutterBottom>
            Giỏ hàng của bạn đang trống
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            Hãy thêm sản phẩm vào giỏ hàng để bắt đầu mua sắm
          </Typography>
          <Button 
            variant="outlined" 
            color="primary"
            onClick={onClose}
          >
            Tiếp tục mua sắm
          </Button>
        </Box>
      )}

      <Modal open={quantityModalOpen} onClose={() => setQuantityModalOpen(false)}>
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 300,
            bgcolor: "background.paper",
            boxShadow: 24,
            p: 3,
            borderRadius: 2,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            gap: 2,
          }}
        >
          <Typography variant="h6" fontWeight="medium">
            Điều chỉnh số lượng
          </Typography>
          <Box display="flex" alignItems="center" gap={3}>
            <IconButton 
              onClick={() => {
                const newQuantity = Math.max(1, selectedItem.quantity - 1);
                setSelectedItem({...selectedItem, quantity: newQuantity});
              }}
              disabled={selectedItem?.quantity <= 1}
              sx={{ 
                border: '1px solid #e0e0e0',
                '&:hover': { bgcolor: '#f5f5f5' }
              }}
            >
              <Minus size={20} />
            </IconButton>
            <Typography variant="h5" sx={{ minWidth: 40, textAlign: 'center' }}>
              {selectedItem?.quantity}
            </Typography>
            <IconButton 
              onClick={() => {
                const newQuantity = selectedItem.quantity + 1;
                setSelectedItem({...selectedItem, quantity: newQuantity});
              }}
              sx={{ 
                border: '1px solid #e0e0e0',
                '&:hover': { bgcolor: '#f5f5f5' }
              }}
            >
              <Plus size={20} />
            </IconButton>
          </Box>
          <Box display="flex" gap={2} width="100%">
            <Button 
              variant="outlined" 
              fullWidth
              onClick={() => setQuantityModalOpen(false)}
              sx={{ py: 1 }}
            >
              Hủy
            </Button>
            <Button 
              variant="contained" 
              fullWidth
              onClick={() => {
                updateQuantity(selectedItem.quantity);
                setQuantityModalOpen(false);
              }}
              sx={{ py: 1 }}
            >
              Xác nhận
            </Button>
          </Box>
        </Box>
      </Modal>
    </Drawer>
  );
};

export default CartDrawer;
```

### ClientApp\src\components\shoppingcart\CartItem.jsx
```jsx
import React, { useState } from "react";
import { FaTrash } from "react-icons/fa";

const CartItem = ({ item }) => {
  const [quantity, setQuantity] = useState(item.quantity || 1);

  const addToCart = async (productVariantId, quantity) => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/cart/add`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productVariantId, quantity }),
        credentials: "include",
      });

      const data = await response.json();
      console.log("Thêm vào giỏ hàng:", data);
    } catch (error) {
      console.error("Lỗi khi thêm vào giỏ hàng:", error);
    }
  };

  const handleIncrease = async () => {
    const newQuantity = quantity + 1;
    setQuantity(newQuantity);
    await addToCart(item.id, 1);
  };

  return (
    <div className="border p-4 rounded-lg bg-white shadow-md">
      <div className="flex items-center justify-between">
        <input type="checkbox" className="mr-2" />
        {item.image && (
          <img
            src={item.image}
            alt={item.name || "Sản phẩm"}
            className="w-16 h-16 rounded"
          />
        )}
        <div className="ml-4 flex-1">
          <h2 className="font-bold text-lg">
            {item.name || "Sản phẩm không có tên"}
          </h2>
          <span className="text-gray-600">
            Màu: {item.color || "Không xác định"}
          </span>
        </div>
        <span className="text-red-500 font-bold text-lg">
          {item.price ? item.price.toLocaleString() : "0"} đ
        </span>
        <div className="flex items-center">
          <button
            onClick={() => setQuantity(quantity > 1 ? quantity - 1 : 1)}
            className="px-2 border bg-gray-200"
          >
            -
          </button>
          <span className="px-4">{quantity}</span>
          <button onClick={handleIncrease} className="px-2 border bg-gray-200">
            +
          </button>
        </div>
        <button className="ml-4 text-gray-500 hover:text-red-500">
          <FaTrash size={18} />
        </button>
      </div>
    </div>
  );
};

export default CartItem;

```

### ClientApp\src\components\shoppingcart\OrderSummary.jsx
```jsx
import React from "react";

const OrderSummary = ({ total = 0, payable = 0 }) => {
  return (
    <div className="border p-4 rounded-lg bg-white shadow-md">
      <h2 className="font-bold text-lg mb-4">Thông tin đơn hàng</h2>

      <div className="flex justify-between mb-2">
        <span>Tổng tiền</span>
        <span className="font-bold">{(total ?? 0).toLocaleString()} đ</span>
      </div>

      <div className="flex justify-between mb-2 border-t pt-2">
        <span>Cần thanh toán</span>
        <span className="font-bold text-red-500">
          {(payable ?? 0).toLocaleString()} đ
        </span>
      </div>

      <button className="w-full bg-red-500 text-white py-2 rounded-lg font-bold text-lg">
        Xác nhận đơn
      </button>
    </div>
  );
};

export default OrderSummary;

```

### ClientApp\src\pages\ProductList.jsx
```jsx
import React, { useState } from "react";
import { useLocation } from "react-router-dom";
import Navbar from "../components/Navbar/Navbar";
import CategoryMenu from "../components/List/CategoryMenu";
import FilterSection from "../components/List/FilterSection";
import ProductGrid from "../components/List/ProductGrid";
import Commitment from "../components/Commitment/Commitment";
import Footer from "../components/Footer/Footer";

const ProductList = () => {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const categoryId = queryParams.get("categoryId");

  // Quản lý bộ lọc
  const [selectedPriceRange, setSelectedPriceRange] = useState("all");
  const [selectedBrand, setSelectedBrand] = useState(null);

  return (
    <div style={styles.productListPage}>
      <Navbar />
      <CategoryMenu />
      <div style={styles.mainContainer}>
        <FilterSection
          onPriceChange={setSelectedPriceRange}
          onBrandChange={setSelectedBrand}
        />
        <ProductGrid
          selectedCategory={categoryId ? parseInt(categoryId) : null}
          selectedPriceRange={selectedPriceRange}
          selectedBrand={selectedBrand}
        />
      </div>
      <Commitment />
      <Footer />
    </div>
  );
};

const styles = {
  productListPage: { padding: "20px", fontFamily: "Arial, sans-serif" },
  mainContainer: { display: "flex", gap: "20px" },
};

export default ProductList;

```

### ClientApp\src\pages\ProductPage.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import Navbar from "../components/Navbar/Navbar";
import ProductImage from "../components/Productinformationpage/ProductImage";
import ProductInfo from "../components/Productinformationpage/ProductInfo";
import ProductVariants from "../components/Productinformationpage/ProductVariants";
import Footer from "../components/Footer/Footer";
import CircularProgress from "@mui/material/CircularProgress";
import Alert from "@mui/material/Alert";
import ProductReviews from "../components/Productinformationpage/ProductReviews";
import RelatedProducts from "../components/Productinformationpage/RelatedProducts";
import SpecificationDisplay from "../components/Productinformationpage/ProductSpecifications";
import Commitment from "../components/Commitment/Commitment";

const ProductPage = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/${id}`);
        if (!response.ok) {
          throw new Error("Không thể tải dữ liệu sản phẩm.");
        }
        const data = await response.json();
        setProduct(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProduct();
  }, [id]);

  const getProductType = () => {
    if (!product?.category?.name) return null;
    
    const categoryName = product.category.name.toLowerCase();
    if (categoryName.includes('phone') || categoryName.includes('điện thoại')) {
      return 'phone';
    } else if (categoryName.includes('laptop') || categoryName.includes('máy tính')) {
      return 'laptop';
    } else if (categoryName.includes('headphone') || categoryName.includes('tai nghe')) {
      return 'headphone';
    }
    return null;
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <CircularProgress />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Alert severity="error">{error}</Alert>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Alert severity="warning">Không tìm thấy sản phẩm</Alert>
      </div>
    );
  }

  const productType = getProductType();

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />

      <div className="container mx-auto px-4 py-8 pt-40 flex flex-col gap-10">
        <div className="grid md:grid-cols-2 gap-8">
          <ProductImage images={product.images || []} name={product.name} />
          <div className="flex flex-col gap-6">
            <ProductInfo product={product} />
            <ProductVariants variants={product.variants || []} />
          </div>
        </div>

       {productType && (
        <SpecificationDisplay 
          productType={productType} 
          productId={product.id} 
        />
      )}

        <div className="md:col-span-2 mt-16">
          <ProductReviews reviews={product.reviews || []} />
        </div>

        <div className="md:col-span-2 mt-16">
          <RelatedProducts 
            brandId={product.brand?.id} 
            currentProductId={id} 
          />
        </div>
      </div>
      
      <Commitment />
      <Footer />
    </div>
  );
};

export default ProductPage;
```

### ClientApp\src\pages\ProfilePage.jsx
```jsx
import React from "react";
import { NavLink, Outlet, useLocation } from "react-router-dom";
import Navbar from "../components/Navbar/Navbar";
import Footer from "../components/Footer/Footer";

const ProfilePage = () => {
  const location = useLocation();
  const activeTab = location.pathname.split("/profile/")[1] || "profile";

  const tabs = [
    { id: "info", label: "Thông tin cá nhân", icon: "👤" },
    { id: "address", label: "Sổ địa chỉ", icon: "🏠" },
    { id: "orders", label: "Đơn hàng", icon: "📦" },
    { id: "loyalty", label: "Tích điểm", icon: "⭐" },
  ];

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar />
      
      <div className="flex flex-1 container mx-auto px-4 py-8 gap-6">
        {/* Sidebar Navigation */}
        <div className="w-64 flex-shrink-0">
          <div className="bg-white rounded-lg shadow-sm p-4 sticky top-24">
            <h2 className="text-xl font-bold mb-6 text-gray-800 border-b pb-2">Tài khoản của tôi</h2>
            <nav className="space-y-1">
              {tabs.map((tab) => (
                <NavLink
                  key={tab.id}
                  to={`/profile/${tab.id}`}
                  className={({ isActive }) =>
                    `flex items-center px-4 py-3 rounded-lg transition-colors ${
                      isActive
                        ? "bg-blue-50 text-blue-600 font-medium"
                        : "text-gray-600 hover:bg-gray-100"
                    }`
                  }
                >
                  <span className="mr-3 text-lg">{tab.icon}</span>
                  {tab.label}
                </NavLink>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          <div className="bg-white rounded-lg shadow-sm p-6 min-h-[calc(100vh-180px)]">
            <Outlet />
          </div>
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default ProfilePage;
```

### ClientApp\src\pages\shoppingcart.jsx
```jsx
import React, { useState, useEffect } from "react";
import Navbar from "../components/Navbar/Navbar";
import CartItem from "../components/shoppingcart/CartItem";
import OrderSummary from "../components/shoppingcart/OrderSummary";
import Commitment from "../components/Commitment/Commitment";
import Footer from "../components/Footer/Footer";

const Shoppingcart = () => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [total, setTotal] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [payable, setPayable] = useState(0);
  const [rewardPoints, setRewardPoints] = useState(0);

  useEffect(() => {
    const fetchCart = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/cart`, {
          method: "GET",
          credentials: "include",
        });

        if (!response.ok) {
          throw new Error("Không thể lấy dữ liệu giỏ hàng");
        }

        const data = await response.json();
        setCartItems(data.items);
        setTotal(data.total);
        setDiscount(data.discount);
        setPayable(data.payable);
        setRewardPoints(data.rewardPoints);
      } catch (error) {
        console.error("Lỗi khi tải giỏ hàng:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, []);

  return (
    <div className="shoppingcart-container mt-14">
      <Navbar />

      <div className="flex gap-6 p-6">
        <div className="w-2/3">
          {loading ? (
            <p className="text-center text-gray-500">Đang tải giỏ hàng...</p>
          ) : cartItems.length > 0 ? (
            cartItems.map((item) => <CartItem key={item.id} item={item} />)
          ) : (
            <div className="text-center text-gray-500 font-semibold p-4">
              🛒 Giỏ hàng của bạn đang trống
            </div>
          )}
        </div>

        <div className="w-1/3">
          <OrderSummary
            total={total}
            discount={discount}
            payable={payable}
            rewardPoints={rewardPoints}
          />
        </div>
      </div>

      <Commitment />
      <Footer />
    </div>
  );
};

export default Shoppingcart;

```

### ClientApp\src\pages\Unauthorized.jsx
```jsx
import { useNavigate } from 'react-router-dom';
import { 
  Container,
  Typography,
  Paper,
  Button,
  Divider
} from '@mui/material';
import { 
  Lock as LockIcon,
  Home as HomeIcon
} from '@mui/icons-material';

const Unauthorized = () => {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate("/");
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>
        <LockIcon color="error" sx={{ fontSize: 80, mb: 2 }} />
        
        <Typography variant="h4" component="h1" gutterBottom color="error">
          Truy Cập Bị Từ Chối
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3 }}>
          Bạn không có quyền truy cập trang này. Vui lòng liên hệ quản trị viên nếu bạn cho rằng đây là lỗi.
        </Typography>
        
        <Divider sx={{ my: 3 }} />
        
        <Button
          variant="contained"
          size="large"
          startIcon={<HomeIcon />}
          onClick={handleGoHome}
        >
          Quay Về Trang Chủ
        </Button>
      </Paper>
    </Container>
  );
};

export default Unauthorized;
```

### ClientApp\src\pages\Admin\AnalyticsPage.jsx
```jsx
import Header from "../../components/Admin/common/Header";
import OverviewCards from "../../components/Admin/analytics/OverviewCards";
import RevenueChart from "../../components/Admin/analytics/RevenueChart";
import ChannelPerformance from "../../components/Admin/analytics/ChannelPerformance";
import ProductPerformance from "../../components/Admin/analytics/ProductPerformance";
import UserRetention from "../../components/Admin/analytics/UserRetention";
import CustomerSegmentation from "../../components/Admin/analytics/CustomerSegmentation";
import AIPoweredInsights from "../../components/Admin/analytics/AIPoweredInsights";

const AnalyticsPage = () => {
	return (
		<div className='flex-1 overflow-auto relative z-10 bg-gray-900'>
			<Header title={"Phân tích dữ liệu"} />

			<main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
				<OverviewCards />
				<RevenueChart />

				<div className='grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8'>
					<ChannelPerformance />
					<ProductPerformance />
					<UserRetention />
					<CustomerSegmentation />
				</div>

				<AIPoweredInsights />
			</main>
		</div>
	);
};
export default AnalyticsPage;

```

### ClientApp\src\pages\Admin\OrdersPage.jsx
```jsx
import { useState, useEffect } from "react";
import { CheckCircle, Clock, DollarSign, ShoppingBag } from "lucide-react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
// import DailyOrders from "../../components/Admin/orders/DailyOrders";
// import OrderDistribution from "../../components/Admin/orders/OrderDistribution";
import OrdersTable from "../../components/Admin/orders/OrdersTable";

const OrdersPage = () => {
    const [orderStats, setOrderStats] = useState({
        totalOrders: 0,
        pendingOrders: 0,
        completedOrders: 0,
        totalRevenue: 0,
    });

    useEffect(() => {
        const fetchOrderStats = async () => {
            try {
                const [totalOrdersRes, pendingOrdersRes, completedOrdersRes, totalRevenueRes] = await Promise.all([
                    axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders`),
                    axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/pending-orders`),
                    axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/completed-orders`),
                    axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/total-revenue`),
                ]);

                setOrderStats({
                    totalOrders: totalOrdersRes.data.length,
                    pendingOrders: pendingOrdersRes.data.pendingOrders,
                    completedOrders: completedOrdersRes.data.completedOrders,
                    totalRevenue: totalRevenueRes.data.totalRevenue,
                });
            } catch (error) {
                console.error("Lỗi khi lấy dữ liệu thống kê đơn hàng:", error);
            }
        };

        fetchOrderStats();
    }, []);

    return (
        <div className='flex-1 relative z-10 overflow-auto'>
            <Header title={"Đơn Hàng"} />

            <main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
                <motion.div
                    className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 1 }}
                >
                    <StatCard name='Tổng đơn hàng' icon={ShoppingBag} value={orderStats.totalOrders} color='#6366F1' />
                    <StatCard name='Đơn chờ xác nhận' icon={Clock} value={orderStats.pendingOrders} color='#F59E0B' />
                    <StatCard
                        name='Đơn hàng đã hoàn thành'
                        icon={CheckCircle}
                        value={orderStats.completedOrders}
                        color='#10B981'
                    />
                    <StatCard name='Tổng tiền dự tính' icon={DollarSign} value={orderStats.totalRevenue+" VND"} color='#EF4444' />
                </motion.div>

                <div className='grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8'>
                </div>

                <OrdersTable />
            </main>
        </div>
    );
};

export default OrdersPage;
```

### ClientApp\src\pages\Admin\OverviewPage.jsx
```jsx
import { BarChart2, ShoppingBag, Users, Zap } from "lucide-react";
import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import useSWR from "swr";

import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
import SalesOverviewChart from "../../components/Admin/overview/SalesOverviewChart";
import CategoryDistributionChart from "../../components/Admin/overview/CategoryDistributionChart";
import { formatCurrency } from "../../utils/formatCurrency";

const fetcher = (url) => fetch(url).then(res => res.json());

const OverviewPage = () => {
  // Fetch data từ API
  const { data: statsData, error: statsError } = useSWR(`${process.env.REACT_APP_API_BASE_URL}/api/orders/stats`, fetcher);
  const { data: revenueData, error: revenueError } = useSWR(`${process.env.REACT_APP_API_BASE_URL}/api/orders/revenue`, fetcher);
  
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (statsData || revenueData || statsError || revenueError) {
      setLoading(false);
    }
  }, [statsData, revenueData, statsError, revenueError]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (statsError || revenueError) {
    return <div>Error loading data</div>;
  }

  return (
    <div className='flex-1 overflow-auto relative z-10'>
      <Header title='Tổng quan' />

      <main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
        {/* STATS */}
        <motion.div
          className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard 
            name='Tổng doanh thu' 
            icon={Zap} 
            value={formatCurrency(statsData?.totalRevenue || 0)} 
            color='#6366F1' 
          />
          <StatCard 
            name='Đơn hàng hoàn thành' 
            icon={Users} 
            value={statsData?.completedOrders || 0} 
            color='#8B5CF6' 
          />
          <StatCard 
            name='Đơn hàng chờ xử lý' 
            icon={ShoppingBag} 
            value={statsData?.pendingOrders || 0} 
            color='#EC4899' 
          />
          <StatCard 
            name='Tổng số đơn hàng' 
            icon={BarChart2} 
            value={statsData?.totalOrders || 0} 
            color='#10B981' 
          />
        </motion.div>

        {/* CHARTS */}
        <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
          <SalesOverviewChart data={revenueData} />
          <CategoryDistributionChart />
        </div>
      </main>
    </div>
  );
};

export default OverviewPage;
```

### ClientApp\src\pages\Admin\ProductsPage.jsx
```jsx
import { useEffect, useState, useCallback } from "react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
// import CardProduct from "../../components/Admin/common/CardProduct";

import { AlertTriangle, DollarSign, Package, TrendingUp } from "lucide-react";
import CategoryDistributionChart from "../../components/Admin/overview/CategoryDistributionChart";
import SalesTrendChart from "../../components/Admin/products/SalesTrendChart";
import ProductsTable from "../../components/Admin/products/ProductsTable";

const ProductsPage = () => {
	const [totalProducts, setTotalProducts] = useState(0);
	const [lowStockProducts, setLowStockProducts] = useState(0);
	const [topSelling, setTopSelling] = useState(0);


	// Hàm fetch thống kê sản phẩm
	const fetchStats = useCallback(async () => {
		try {
			const [lowStockRes, totalProductsRes] = await Promise.all([
				axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Products/low-stock`),
				axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Products/count`)			]);

			setLowStockProducts(lowStockRes.data);
			setTotalProducts(totalProductsRes.data);
		} catch (error) {
			console.error("Lỗi khi lấy dữ liệu sản phẩm:", error);
		}
	}, []);
	// Gọi API khi component mount và khi filterType thay đổi
	useEffect(() => {
		fetchStats();
	}, [fetchStats]);

	return (
		<div className='flex-1 overflow-auto relative z-10'>
			<Header title='Sản Phẩm' />

			<main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
				{/* STATS */}
				<motion.div
					className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ duration: 1 }}
				>
					<StatCard name='Tổng sản phẩm' icon={Package} value={totalProducts} color='#6366F1' />
					<StatCard
						name="Bán chạy"
						icon={TrendingUp}
						value={topSelling}
						color="#10B981"
					/>
					<StatCard name='Gần hết hàng' icon={AlertTriangle} value={lowStockProducts} color='#F59E0B' />
					<StatCard name='Tổng thu' icon={DollarSign} value={"145002000VND"} color='#EF4444' />
				</motion.div>

				<ProductsTable />

				{/* CHARTS */}
				<div className='grid grid-col-1 lg:grid-cols-2 gap-8'>
					<SalesTrendChart />
					<CategoryDistributionChart />
				</div>
			</main>
		</div>
	);
};

export default ProductsPage;

```

### ClientApp\src\pages\Admin\SalesPage.jsx
```jsx
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
import { CreditCard, DollarSign, ShoppingCart, TrendingUp, CheckCircle, Clock } from "lucide-react";
import SalesOverviewChart from "../../components/Admin/sales/SalesOverviewChart";
import SalesByCategoryChart from "../../components/Admin/sales/SalesByCategoryChart";
import DailySalesTrend from "../../components/Admin/sales/DailySalesTrend";

const SalesPage = () => {
  const [stats, setStats] = useState({
    totalRevenue: 0,
    totalOrders: 0,
    completedOrders: 0,
    pendingOrders: 0,
    averageOrderValue: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/orders/stats`);
        if (!response.ok) {
          throw new Error('Failed to fetch stats');
        }
        const data = await response.json();
        
        // Calculate average order value
        const avgOrderValue = data.totalRevenue / (data.completedOrders || 1);
        
        setStats({
          totalRevenue: data.totalRevenue,
          totalOrders: data.totalOrders,
          completedOrders: data.completedOrders,
          pendingOrders: data.pendingOrders,
          averageOrderValue: avgOrderValue
        });
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  // Format currency
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(value);
  };

  if (loading) return <div className="text-center py-8">Loading...</div>;
  if (error) return <div className="text-center py-8 text-red-500">Error: {error}</div>;

  return (
    <div className='flex-1 overflow-auto relative z-10'>
      <Header title='Bán Hàng' />

      <main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
        {/* SALES STATS */}
        <motion.div
          className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard 
            name='Tổng doanh thu' 
            icon={DollarSign} 
            value={formatCurrency(stats.totalRevenue)} 
            color='#6366F1' 
          />
          <StatCard
            name='Giá trị đơn trung bình'
            icon={ShoppingCart}
            value={formatCurrency(stats.averageOrderValue)}
            color='#10B981'
          />
          <StatCard
            name='Đơn hoàn thành'
            icon={CheckCircle}
            value={`${stats.completedOrders}/${stats.totalOrders}`}
            color='#F59E0B'
          />
          <StatCard 
            name='Đơn đang chờ' 
            icon={Clock} 
            value={stats.pendingOrders.toString()} 
            color='#EF4444' 
          />
        </motion.div>

        <SalesOverviewChart />

        <div className='grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8'>
          <SalesByCategoryChart />
          <DailySalesTrend />
        </div>
      </main>
    </div>
  );
};

export default SalesPage;
```

### ClientApp\src\pages\Admin\SettingsPage.jsx
```jsx
import Header from "../../components/Admin/common/Header";
import ConnectedAccounts from "../../components/Admin/settings/ConnectedAccounts";
import DangerZone from "../../components/Admin/settings/DangerZone";
import Notifications from "../../components/Admin/settings/Notifications";
import Profile from "../../components/Admin/settings/Profile";
import Security from "../../components/Admin/settings/Security";

const SettingsPage = () => {
	return (
		<div className='flex-1 overflow-auto relative z-10 bg-gray-900'>
			<Header title='Settings' />
			<main className='max-w-4xl mx-auto py-6 px-4 lg:px-8'>
				<Profile />
				<Notifications />
				<Security />
				<ConnectedAccounts />
				<DangerZone />
			</main>
		</div>
	);
};
export default SettingsPage;

```

### ClientApp\src\pages\Admin\UsersPage.jsx
```jsx
import { useState, useEffect } from "react";
import { UserCheck, UserPlus, UsersIcon } from "lucide-react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
import UsersTable from "../../components/Admin/users/UsersTable";
import UserGrowthChart from "../../components/Admin/users/UserGrowthChart";
import UserActivityHeatmap from "../../components/Admin/users/UserActivityHeatmap";
import UserDemographicsChart from "../../components/Admin/users/UserDemographicsChart";

const UsersPage = () => {
	const [userStats, setUserStats] = useState({
		totalUsers: 0,
		newUsersToday: 0,
		activeUsers: 0,
		retentionRate: "0%", // Thay churnRate thành retentionRate
	});

	useEffect(() => {
		const fetchUserStats = async () => {
			try {
				const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users/statistics`);
				setUserStats(response.data);
			} catch (error) {
				console.error("Lỗi khi lấy dữ liệu người dùng:", error);
			}
		};

		fetchUserStats();
	}, []);

	return (
		<div className='flex-1 overflow-auto relative z-10'>
			<Header title='Người dùng' />

			<main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
				{/* STATS */}
				<motion.div
					className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ duration: 1 }}
				>
					<StatCard
						name='Tổng người dùng'
						icon={UsersIcon}
						value={userStats.totalUsers.toLocaleString()}
						color='#6366F1'
					/>
					<StatCard
						name='Người dùng mới tạo'
						icon={UserPlus}
						value={userStats.newUsersToday.toLocaleString()}
						color='#10B981'
					/>
					<StatCard
						name='Trạng thái đã kích hoạt'
						icon={UserCheck}
						value={userStats.activeUsers.toLocaleString()}
						color='#F59E0B'
					/>
					<StatCard
						name='Tỉ lệ giữ chân người dùng' // Cập nhật tên
						icon={UserCheck} // Có thể giữ UserCheck hoặc đổi icon phù hợp
						value={userStats.retentionRate}
						color='#34D399' // Màu xanh lá thể hiện mức độ giữ chân tốt hơn
					/>
				</motion.div>

                <UsersTable />

                {/* USER CHARTS */}
                <div className='grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8'>
                    <UserGrowthChart />
                    <UserActivityHeatmap />
                    <UserDemographicsChart />
                </div>
            </main>
        </div>
    );
};

export default UsersPage;

```

### ClientApp\src\pages\Home\Home.jsx
```jsx
import React from "react";
import Navbar from "../../components/Navbar/Navbar";
import Notification from "../../components/NotificationBar/notification";
import HeroBanner from "../../components/HeroBanner/HeroBanner";
import FeaturedCategories from "../../components/FeaturedCategories/FeaturedCategories";
import BestSellers from "../../components/BestSellers/BestSellers";
import FlashSale  from "../../components/FlashSale/FlashSale";
import ServiceSlider from "../../components/ServiceSlider/ServiceSlider";
import Commitment from "../../components/Commitment/Commitment";
import HeroSlider from "../../components/HeroSlider/HeroSlider";
import Footer from "../../components/Footer/Footer";
import "./Home.css";

const Home = () => {
  return (
    <div className="home-container">
      <Navbar />
      <Notification />
      <HeroBanner />
      <HeroSlider />
      <FeaturedCategories />
      <BestSellers />
      <FlashSale /> {/* Thêm component FlashSale vào đây */}
      <ServiceSlider /> 
      <Commitment /> {/* Thêm component Commitment vào đây */}
      <Footer />
    </div>
  );
};

export default Home;

```

### ClientApp\src\utils\formatCurrency.js
```js
export const formatCurrency = (amount) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(amount);
};
```

### Controllers\AddressController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/address")]
    public class AddressController : ControllerBase
    {
        private readonly AppDbContext _context;

        public AddressController(AppDbContext context)
        {
            _context = context;
        }

        // Thêm địa chỉ mới
        [HttpPost("add")]
        public async Task<IActionResult> AddAddress([FromBody] Address address)
        {
            if (address.UserId.HasValue)
            {
                var user = await _context.Users.FindAsync(address.UserId.Value);
                if (user == null)
                {
                    return NotFound("Người dùng không tồn tại.");
                }
            }

            _context.Addresses.Add(address);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Địa chỉ đã được thêm.", AddressId = address.Id });
        }

        // Lấy địa chỉ theo UserId
        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetAddressesByUserId(int userId)
        {
            var addresses = await _context.Addresses
                .Where(a => a.UserId == userId)
                .ToListAsync();

            return Ok(addresses);
        }

        // Lấy địa chỉ theo AddressId
        [HttpGet("{id}")]
        public async Task<IActionResult> GetAddressById(int id)
        {
            var address = await _context.Addresses.FindAsync(id);

            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            return Ok(address);
        }

        // Cập nhật địa chỉ
        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateAddress(int id, [FromBody] CreateAddressDTO addressDTO)
        {
            var address = await _context.Addresses.FindAsync(id);
            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            address.FullName = addressDTO.FullName;
            address.PhoneNumber = addressDTO.PhoneNumber;
            address.AddressLine1 = addressDTO.AddressLine1;
            address.AddressLine2 = addressDTO.AddressLine2;
            address.City = addressDTO.City;
            address.State = addressDTO.State;
            address.ZipCode = addressDTO.ZipCode;
            address.Country = addressDTO.Country;

            _context.Addresses.Update(address);
            await _context.SaveChangesAsync();

            return Ok(address);
        }

        // Xóa địa chỉ
        [HttpDelete("delete/{id}")]
        public async Task<IActionResult> DeleteAddress(int id)
        {
            var address = await _context.Addresses.FindAsync(id);
            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            _context.Addresses.Remove(address);
            await _context.SaveChangesAsync();

            return Ok("Địa chỉ đã được xóa.");
        }
    }
}

```

### Controllers\AuthController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using SHN_Gear.Services;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Authorization;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [EnableCors("AllowFrontend")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly UserService _userService;
        private readonly EmailService _emailService;
        private readonly IConfiguration _config;

        public AuthController(UserService userService, EmailService emailService, IConfiguration config)
        {
            _userService = userService;
            _emailService = emailService;
            _config = config;
        }

        // Kiểm tra email có tồn tại không
        [HttpPost("check-email")]
        public async Task<IActionResult> CheckEmailExists([FromBody] EmailDto emailDto)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(emailDto.Email))
                return BadRequest(new { message = "Email không hợp lệ" });

            bool exists = await _userService.CheckEmailExistsAsync(emailDto.Email);
            return Ok(new { exists });
        }

        // Đăng ký tài khoản
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto registerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(new { message = "Dữ liệu không hợp lệ" });

            var result = await _userService.RegisterUserAsync(registerDto);
            if (!result)
                return BadRequest(new { message = "Email đã tồn tại" });

            return Ok(new { message = "Đăng ký thành công" });
        }

        // Đăng nhập bằng Email
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDto loginDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(new { message = "Dữ liệu không hợp lệ" });

            var user = await _userService.AuthenticateUserAsync(loginDto);
            if (user == null)
                return Unauthorized(new { message = "Sai email hoặc mật khẩu" });

            var token = GenerateJwtToken(user);
            return Ok(new { token });
        }

        // Gửi OTP qua Email
        [HttpPost("send-otp")]
        public async Task<IActionResult> SendOtp([FromBody] OtpRequestDto otpDto)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(otpDto.Email))
                return BadRequest(new { message = "Email không hợp lệ" });

            var success = await _emailService.SendOTPAsync(otpDto.Email);
            if (!success)
                return BadRequest(new { message = "Gửi OTP thất bại" });

            return Ok(new { message = "OTP đã được gửi" });
        }
        // 🔹 API lấy thông tin người dùng đang đăng nhập
        [HttpGet("profile")]
        [Authorize]
        public async Task<IActionResult> GetProfile()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized(new { message = "Không tìm thấy ID trong token" });
            }

            var user = _userService.GetUserById(int.Parse(userId));

            if (user == null)
            {
                return NotFound(new { message = "User không tồn tại" });
            }

            return Ok(new
            {
                user.Id,
                user.FullName,
                user.Email,
                user.PhoneNumber,
                user.Gender,
                DateOfBirth = user.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }
        // 🔹 API chỉnh sửa thông tin cá nhân
        [HttpPut("profile")]
        [Authorize]
        public async Task<IActionResult> UpdateProfile([FromBody] EditProfileDto editDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized();

            var updatedUser = await _userService.UpdateUserProfileAsync(int.Parse(userId), editDto);
            if (updatedUser == null)
                return BadRequest();

            return Ok(new
            {
                updatedUser.Id,
                updatedUser.FullName,
                updatedUser.Email,
                updatedUser.PhoneNumber,
                updatedUser.Gender,
                DateOfBirth = updatedUser.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }

        // 🔹 API chỉnh sửa thông tin cá nhân
        [HttpPut("profile/{id}")]
        [Authorize]
        public async Task<IActionResult> EditProfile([FromBody] EditProfileDto editDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized();

            var updatedUser = await _userService.UpdateUserProfileAsync(int.Parse(userId), editDto);
            if (updatedUser == null)
                return BadRequest();

            return Ok(new
            {
                updatedUser.Id,
                updatedUser.FullName,
                updatedUser.Email,
                updatedUser.PhoneNumber,
                updatedUser.Gender,
                DateOfBirth = updatedUser.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }



        // Tạo JWT Token
        private string GenerateJwtToken(User user)
        {
            var key = Encoding.UTF8.GetBytes(_config["Jwt:Key"]);
            var roleName = user.Role?.Name ?? "User";

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // Chỉ dùng MỘT trong hai cách sau:
                
                new Claim("roleId", user.RoleId.ToString()), // Quan trọng
                new Claim(ClaimTypes.Role, user.Role?.Name ?? "User"),
                new Claim("http://schemas.microsoft.com/.../role", user.Role?.Name ?? "User"),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            var token = new JwtSecurityToken(
                issuer: _config["Jwt:Issuer"],
                audience: _config["Jwt:Audience"],
                claims: claims,
                expires: DateTime.UtcNow.AddHours(3),
                signingCredentials: new SigningCredentials(
                    new SymmetricSecurityKey(key),
                    SecurityAlgorithms.HmacSha256)
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
```

### Controllers\BrandController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/brands")]
    [ApiController]
    public class BrandController : ControllerBase
    {
        private readonly AppDbContext _context;

        public BrandController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy tất cả thương hiệu
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Brand>>> GetBrands()
        {
            var brands = await _context.Brands.ToListAsync();
            return Ok(brands);
        }

        // Lấy thương hiệu theo Id
        [HttpGet("{id}")]
        public async Task<ActionResult<Brand>> GetBrand(int id)
        {
            var brand = await _context.Brands.FindAsync(id);
            if (brand == null)
            {
                return NotFound();
            }
            return Ok(brand);
        }

        // Thêm thương hiệu mới
        [HttpPost]
        public async Task<ActionResult<Brand>> CreateBrand(Brand brand)
        {
            _context.Brands.Add(brand);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetBrand), new { id = brand.Id }, brand);
        }

        // Cập nhật thương hiệu
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateBrand(int id, Brand brand)
        {
            if (id != brand.Id)
            {
                return BadRequest();
            }

            _context.Entry(brand).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Brands.Any(e => e.Id == id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // Xóa thương hiệu
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteBrand(int id)
        {
            var brand = await _context.Brands.FindAsync(id);
            if (brand == null)
            {
                return NotFound();
            }

            // Kiểm tra xem có sản phẩm nào thuộc thương hiệu này không
            var hasProducts = await _context.Products.AnyAsync(p => p.BrandId == id);
            if (hasProducts)
            {
                return BadRequest("Không thể xóa thương hiệu này vì có sản phẩm thuộc thương hiệu này.");
            }

            _context.Brands.Remove(brand);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
```

### Controllers\CartController.cs
```cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using SHN_Gear.Data;
using SHN_Gear.DTOs;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CartController(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        // Thêm sản phẩm vào giỏ hàng
        [HttpPost]
        public async Task<IActionResult> AddToCart([FromBody] CartDto request)
        {
            if (request.ProductVariantId <= 0 || request.Quantity <= 0)
            {
                return BadRequest("Thông tin sản phẩm không hợp lệ.");
            }

            if (request.UserId > 0)
            {
                // Người dùng đã đăng nhập
                var cart = await _context.Carts
                    .Include(c => c.Items)
                    .FirstOrDefaultAsync(c => c.UserId == request.UserId);

                if (cart == null)
                {
                    cart = new Cart { UserId = request.UserId, Items = new List<CartItem>() };
                    _context.Carts.Add(cart);
                }

                var existingItem = cart.Items.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (existingItem != null)
                {
                    existingItem.Quantity += request.Quantity;
                    existingItem.UpdatedAt = DateTime.UtcNow;
                }
                else
                {
                    cart.Items.Add(new CartItem
                    {
                        ProductVariantId = request.ProductVariantId,
                        Quantity = request.Quantity,
                        AddedAt = DateTime.UtcNow
                    });
                }

                await _context.SaveChangesAsync();
            }
            else
            {
                // Người dùng chưa đăng nhập - Lưu vào session
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var existingItem = cartItems.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (existingItem != null)
                {
                    existingItem.Quantity += request.Quantity;
                }
                else
                {
                    cartItems.Add(new CartItemSession
                    {
                        ProductVariantId = request.ProductVariantId,
                        Quantity = request.Quantity
                    });
                }

                session.SetString("Cart", JsonSerializer.Serialize(cartItems));
            }

            return Ok("Sản phẩm đã được thêm vào giỏ hàng.");
        }

        // Lấy giỏ hàng
        [HttpGet]
        public async Task<IActionResult> GetCart([FromQuery] int? userId)
        {
            if (userId > 0)
            {
                // Logic cũ cho người dùng đã đăng nhập
                var cart = await _context.Carts
                    .Include(c => c.Items)
                        .ThenInclude(i => i.ProductVariant)
                            .ThenInclude(v => v.Product)
                                .ThenInclude(p => p.Images)
                    .FirstOrDefaultAsync(c => c.UserId == userId);

                if (cart == null || cart.Items.Count == 0)
                {
                    return Ok(new List<object>());
                }

                var cartItems = cart.Items.Select(i => new
                {
                    i.Id,
                    i.Quantity,
                    i.ProductVariantId,
                    ProductName = i.ProductVariant.Product.Name,
                    ProductImage = i.ProductVariant.Product.Images
        .OrderByDescending(img => img.IsPrimary) // Ưu tiên ảnh IsPrimary
        .ThenBy(img => img.Id)                  // Sau đó sắp xếp theo ID
        .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png", // Fallback image
                    VariantColor = i.ProductVariant.Color,
                    VariantStorage = i.ProductVariant.Storage,
                    ProductPrice = i.ProductVariant.Price,
                    ProductDiscountPrice = i.ProductVariant.DiscountPrice
                }).ToList();

                return Ok(cartItems);
            }
            else
            {
                // Xử lý cho người dùng chưa đăng nhập
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                // Lấy thông tin sản phẩm cho từng item trong giỏ hàng session
                var result = new List<object>();
                foreach (var item in cartItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(v => v.Product)
                            .ThenInclude(p => p.Images)
                        .FirstOrDefaultAsync(v => v.Id == item.ProductVariantId);

                    if (variant != null)
                    {
                        result.Add(new
                        {
                            item.ProductVariantId,
                            item.Quantity,
                            ProductName = variant.Product.Name,
                            ProductImage = variant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                            VariantColor = variant.Color,
                            VariantStorage = variant.Storage,
                            ProductPrice = variant.Price,
                            ProductDiscountPrice = variant.DiscountPrice
                        });
                    }
                }

                return Ok(result);
            }
        }

        // Cập nhật số lượng sản phẩm trong giỏ hàng
        [HttpPut("update")]
        public async Task<IActionResult> UpdateCartItem([FromBody] CartDto request)
        {
            if (request.UserId > 0)
            {
                var cartItem = await _context.CartItems
                    .FirstOrDefaultAsync(i => i.Cart.UserId == request.UserId && i.ProductVariantId == request.ProductVariantId);

                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItem.Quantity = request.Quantity;
                cartItem.UpdatedAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var cartItem = cartItems.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItem.Quantity = request.Quantity;
                session.Set("Cart", JsonSerializer.SerializeToUtf8Bytes(cartItems));

            }

            return Ok("Cập nhật số lượng thành công.");
        }

        // Xóa sản phẩm khỏi giỏ hàng
        [HttpDelete("remove/{productVariantId}")]
        public async Task<IActionResult> RemoveFromCart(int productVariantId, [FromQuery] int? userId)
        {
            if (userId > 0)
            {
                var cartItem = await _context.CartItems
                    .FirstOrDefaultAsync(i => i.Cart.UserId == userId && i.ProductVariantId == productVariantId);

                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                _context.CartItems.Remove(cartItem);
                await _context.SaveChangesAsync();
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var cartItem = cartItems.FirstOrDefault(i => i.ProductVariantId == productVariantId);
                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItems.Remove(cartItem);
                session.SetString("Cart", JsonSerializer.Serialize(cartItems));
            }

            return Ok("Sản phẩm đã được xóa khỏi giỏ hàng.");
        }

        // Xóa toàn bộ giỏ hàng
        [HttpDelete("clear")]
        public async Task<IActionResult> ClearCart([FromQuery] int? userId)
        {
            if (userId > 0)
            {
                var cart = await _context.Carts.Include(c => c.Items).FirstOrDefaultAsync(c => c.UserId == userId);
                if (cart != null)
                {
                    _context.CartItems.RemoveRange(cart.Items);
                    await _context.SaveChangesAsync();
                }
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                session.Remove("Cart");
            }

            return Ok("Giỏ hàng đã được làm trống.");
        }

        [HttpDelete("remove-paid-items")]
        public async Task<IActionResult> RemovePaidCartItems([FromQuery] int? userId)
        {
            if (userId == null || userId <= 0)
            {
                return BadRequest("UserId không hợp lệ.");
            }

            // Lấy giỏ hàng của user
            var cart = await _context.Carts.Include(c => c.Items)
                                           .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null || cart.Items == null || !cart.Items.Any())
            {
                return NotFound("Giỏ hàng trống hoặc không tồn tại.");
            }

            // Lấy danh sách các sản phẩm đã đặt hàng (có trong OrderItem)
            var paidProductVariantIds = await _context.OrderItems
                                                      .Select(oi => oi.ProductVariantId)
                                                      .ToListAsync();

            // Lọc các sản phẩm trong giỏ hàng đã được thanh toán
            var paidCartItems = cart.Items
                                    .Where(item => paidProductVariantIds.Contains(item.ProductVariantId))
                                    .ToList();

            if (!paidCartItems.Any())
            {
                return Ok("Không có sản phẩm nào đã thanh toán để xóa.");
            }

            // Xóa các sản phẩm đã thanh toán khỏi giỏ hàng
            _context.CartItems.RemoveRange(paidCartItems);
            await _context.SaveChangesAsync();

            return Ok(new { message = "Đã xóa các sản phẩm đã thanh toán khỏi giỏ hàng.", removedItems = paidCartItems.Count });
        }


        // lấy tên và ảnh product dựa trên productVariantId
        [HttpGet("variant-info/{productVariantId}")]
        public async Task<IActionResult> GetProductVariantInfo(int productVariantId)
        {
            try
            {
                var variant = await _context.ProductVariants
                    .Include(v => v.Product)
                        .ThenInclude(p => p.Images)
                    .FirstOrDefaultAsync(v => v.Id == productVariantId);

                if (variant == null)
                {
                    return NotFound("Biến thể sản phẩm không tồn tại");
                }

                var result = new
                {
                    ProductName = variant.Product.Name,
                    ProductImage = variant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    VariantColor = variant.Color,
                    VariantStorage = variant.Storage,
                    Price = variant.Price,
                    DiscountPrice = variant.DiscountPrice
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi lấy thông tin biến thể: {ex.Message}");
            }
        }
    }
}

```

### Controllers\CategoryController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/categories")]
    [ApiController]
    public class CategoryController : ControllerBase
    {
        private readonly AppDbContext _context;

        public CategoryController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy tất cả danh mục
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Category>>> GetCategories()
        {
            var categories = await _context.Categories.ToListAsync();
            return Ok(categories);
        }

        // Lấy danh mục theo Id
        [HttpGet("{id}")]
        public async Task<ActionResult<Category>> GetCategory(int id)
        {
            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }
            return Ok(category);
        }

        // Thêm danh mục mới
        [HttpPost]
        public async Task<ActionResult<Category>> CreateCategory(Category category)
        {
            _context.Categories.Add(category);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetCategory), new { id = category.Id }, category);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateCategory(int id, Category category)
        {
            if (id != category.Id)
            {
                return BadRequest("ID không khớp với danh mục.");
            }

            var existingCategory = await _context.Categories.FindAsync(id);
            if (existingCategory == null)
            {
                return NotFound("Không tìm thấy danh mục.");
            }

            existingCategory.Name = category.Name;
            existingCategory.Description = category.Description;
            existingCategory.Image = category.Image;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                return StatusCode(500, "Lỗi cập nhật danh mục.");
            }

            return Ok(existingCategory);
        }


        // Xóa danh mục
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCategory(int id)
        {
            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }

            _context.Categories.Remove(category);
            await _context.SaveChangesAsync();
            return NoContent();
        }
        [HttpGet("product-count")]
        public async Task<IActionResult> GetProductCountByCategory()
        {
            var result = await _context.Categories
                .Select(c => new
                {
                    Name = c.Name,
                    Value = c.Products.Count()
                })
                .ToListAsync();

            return Ok(result);
        }
    }
}

```

### Controllers\LoyaltyController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using System;
using System.Threading.Tasks;
using System.Linq;

[Route("api/loyalty")]
[ApiController]
public class LoyaltyController : ControllerBase
{
    private readonly AppDbContext _context;
    private readonly Random _random = new Random();

    public LoyaltyController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet("my-status")]
    public async Task<IActionResult> GetMyLoyaltyStatus([FromQuery] int userId)
    {
        if (userId <= 0)
        {
            return BadRequest("Invalid user ID");
        }

        var user = await _context.Users
            .Include(u => u.Role)
            .FirstOrDefaultAsync(u => u.Id == userId);

        if (user == null)
        {
            return NotFound("User not found");
        }

        if (!user.IsActive)
        {
            return BadRequest("User account is not active");
        }

        string currentRank = user.Role.Name == "Admin" ? "Admin" : DetermineRank(user.Points);

        // Cập nhật Role nếu không phải Admin
        if (user.Role.Name != "Admin" && user.Role.Name != currentRank)
        {
            var newRole = await _context.Roles
                .FirstOrDefaultAsync(r => r.Name == currentRank);
            if (newRole == null)
            {
                return StatusCode(500, $"Role '{currentRank}' not found in database");
            }
            user.RoleId = newRole.Id;
            user.Role = newRole;
            _context.Users.Update(user);
            await _context.SaveChangesAsync();
        }

        string nextRank = currentRank == "Admin" ? null : DetermineNextRank(currentRank);
        int pointsNeeded = currentRank == "Admin" ? 0 : CalculatePointsNeededForNextRank(user.Points, currentRank, nextRank);
        int spinCost = CalculateSpinCost(currentRank);

        return Ok(new
        {
            CurrentRank = currentRank,
            CurrentPoints = user.Points,
            PointsNeededForNextRank = pointsNeeded,
            CanSpin = user.Points >= spinCost, // Chỉ Admin quay với 0 điểm, còn lại cần đủ điểm
            SpinCost = spinCost
        });
    }

    [HttpPost("spin-wheel")]
    public async Task<IActionResult> SpinWheel([FromQuery] int userId)
    {
        if (userId <= 0)
        {
            return BadRequest("Invalid user ID");
        }

        var user = await _context.Users
            .Include(u => u.Role)
            .FirstOrDefaultAsync(u => u.Id == userId);

        if (user == null)
        {
            return NotFound("User not found");
        }

        if (!user.IsActive)
        {
            return BadRequest("User account is not active");
        }

        string currentRank = user.Role.Name == "Admin" ? "Admin" : DetermineRank(user.Points);
        int spinCost = CalculateSpinCost(currentRank);

        // Kiểm tra đủ điểm để quay (Admin miễn phí, các rank khác cần đủ điểm)
        if (currentRank != "Admin" && user.Points < spinCost)
        {
            return BadRequest("Not enough points to spin the wheel.");
        }

        // Trừ điểm khi quay (Admin không bị trừ, các rank khác bị trừ)
        if (currentRank != "Admin")
        {
            user.Points -= spinCost;
        }

        // Tạo phần thưởng ngẫu nhiên
        var (voucherValue, prizeType) = GenerateRandomPrize(currentRank);
        object responseData;

        if (prizeType == "Voucher")
        {
            var voucher = new Voucher
            {
                Code = $"SPIN-{currentRank}-{Guid.NewGuid().ToString().Substring(0, 8)}",
                DiscountAmount = voucherValue,
                ExpiryDate = DateTime.UtcNow.AddDays(30),
                IsActive = true
            };

            _context.Vouchers.Add(voucher);
            await _context.SaveChangesAsync();

            var userVoucher = new UserVoucher
            {
                UserId = user.Id,
                VoucherId = voucher.Id,
                UsedAt = DateTime.UtcNow,
                IsUsed = false // Trạng thái sử dụng mặc định là false khi nhận từ vòng quay
            };

            _context.UserVouchers.Add(userVoucher);

            responseData = new
            {
                PrizeType = prizeType,
                Voucher = new VoucherDto
                {
                    Id = voucher.Id,
                    Code = voucher.Code,
                    DiscountAmount = voucher.DiscountAmount,
                    ExpiryDate = voucher.ExpiryDate,
                    IsActive = voucher.IsActive
                },
                RemainingPoints = user.Points
            };
        }
        else
        {
            responseData = new
            {
                PrizeType = prizeType,
                Voucher = (object)null,
                RemainingPoints = user.Points
            };
        }

        // Cập nhật điểm người dùng vào cơ sở dữ liệu
        _context.Users.Update(user);
        await _context.SaveChangesAsync();

        return Ok(responseData);
    }

    private string DetermineRank(int points)
    {
        if (points >= 225000) return "VIP 3";
        if (points >= 125000) return "VIP 2";
        if (points >= 50000) return "VIP 1";
        return "VIP 0";
    }

    private string DetermineNextRank(string currentRank)
    {
        return currentRank switch
        {
            "VIP 0" => "VIP 1",
            "VIP 1" => "VIP 2",
            "VIP 2" => "VIP 3",
            "VIP 3" => null,
            _ => "VIP 1"
        };
    }

    private int CalculatePointsNeededForNextRank(int currentPoints, string currentRank, string nextRank)
    {
        if (nextRank == null) return 0;
        return nextRank switch
        {
            "VIP 1" => 50000 - currentPoints,
            "VIP 2" => 125000 - currentPoints,
            "VIP 3" => 225000 - currentPoints,
            _ => 50000 - currentPoints
        };
    }

    private int CalculateSpinCost(string currentRank)
    {
        return currentRank switch
        {
            "Admin" => 0,     // 
            "VIP 0" => 500, // 
            "VIP 1" => 5000,
            "VIP 2" => 5000,
            "VIP 3" => 5000,  // 
            _ => 10000
        };
    }

    private (decimal voucherValue, string prizeType) GenerateRandomPrize(string currentRank)
    {
        int chance = _random.Next(1, 101);
        switch (currentRank)
        {
            case "Admin":
                if (chance <= 50) return (500000, "Voucher"); // 50% nhận 500k
                else if (chance <= 80) return (350000, "Voucher"); // 30% nhận 350k
                else return (200000, "Voucher"); // 20% nhận 200k
            case "VIP 0":
                if (chance <= 50) return (50000, "Voucher"); // 50% nhận 50k
                else if (chance <= 80) return (20000, "Voucher"); // 30% nhận 20k
                else return (0, "No Prize"); // 20% không trúng
            case "VIP 1":
                if (chance <= 40) return (100000, "Voucher"); // 40% nhận 100k
                else if (chance <= 70) return (50000, "Voucher"); // 30% nhận 50k
                else return (20000, "Voucher"); // 30% nhận 20k
            case "VIP 2":
                if (chance <= 30) return (200000, "Voucher"); // 30% nhận 200k
                else if (chance <= 60) return (100000, "Voucher"); // 30% nhận 100k
                else return (50000, "Voucher"); // 40% nhận 50k
            case "VIP 3":
                if (chance <= 20) return (350000, "Voucher"); // 20% nhận 350k
                else if (chance <= 50) return (200000, "Voucher"); // 30% nhận 200k
                else return (100000, "Voucher"); // 50% nhận 100k
            default:
                return (0, "No Prize");
        }
    }
}
```

### Controllers\OrderController.cs
```cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using SHN_Gear.Services;
using System.Security.Claims;
using System.Linq;
using System.Threading.Tasks;
using System;
using Newtonsoft.Json;
using System.IO;
using OfficeOpenXml;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization; // Cho hàm ConvertToUnsigned
using System.Text;         // Cho NormalizationForm
using OfficeOpenXml.Style;
using Microsoft.AspNetCore.JsonPatch;
namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/orders")]
    public class OrderController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly MoMoPaymentService _momoService;
        private readonly IConfiguration _configuration;

        public OrderController(
            AppDbContext context,
            MoMoPaymentService momoService,
            IConfiguration configuration)
        {
            _context = context;
            _momoService = momoService;
            _configuration = configuration;
        }


        // Lấy thông tin đơn hàng
        [HttpGet("confirm/{orderId}")]
        public async Task<IActionResult> GetOrderConfirmationDetails(int orderId)
        {
            try
            {
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                        .ThenInclude(oi => oi.ProductVariant)
                            .ThenInclude(pv => pv.Product)
                                .ThenInclude(p => p.Images)
                    .Include(o => o.Address)
                    .Include(o => o.PaymentMethod)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound(new { Message = "Không tìm thấy đơn hàng" });
                }

                var result = new
                {
                    OrderId = order.Id,
                    OrderDate = order.OrderDate.ToString("dd/MM/yyyy HH:mm"),
                    TotalAmount = order.TotalAmount,
                    FormattedTotal = order.TotalAmount.ToString("N0") + " VNĐ",
                    PaymentMethod = order.PaymentMethod?.Name ?? "Tiền mặt",
                    OrderStatus = order.OrderStatus,
                    ShippingInfo = new
                    {
                        FullName = order.Address?.FullName ?? "N/A",
                        Phone = order.Address?.PhoneNumber ?? "N/A",
                        Address = $"{order.Address?.AddressLine1}, {order.Address?.City}, {order.Address?.State}",
                        Email = order.User?.Email ?? "N/A"
                    },
                    Products = order.OrderItems.Select(oi => new
                    {
                        Id = oi.ProductVariant.Product.Id,
                        Name = oi.ProductVariant.Product.Name,
                        Image = oi.ProductVariant.Product.Images.FirstOrDefault(i => i.IsPrimary)?.ImageUrl
                               ?? "/images/default-product.png",
                        Variant = $"{oi.ProductVariant.Color} - {oi.ProductVariant.Storage}",
                        Quantity = oi.Quantity,
                        Price = oi.Price,
                        Total = oi.Price * oi.Quantity
                    }),
                    EstimatedDelivery = order.OrderDate.AddDays(3).ToString("dd/MM/yyyy")
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thông tin đơn hàng", Error = ex.Message });
            }
        }
        // Lấy danh sách đơn hàng
        [HttpGet]
        public async Task<IActionResult> GetOrders()
        {
            var orders = await _context.Orders
                .Include(o => o.OrderItems)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            var orderDtos = orders.Select(order => new OrderDto
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                {
                    ProductVariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(orderDtos);
        }
        [HttpPut("{id}")]
        [Authorize]
        public async Task<IActionResult> UpdateOrder(int id, [FromBody] UpdateOrderDto updateOrderDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Lấy đơn hàng hiện tại
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Đơn hàng không tồn tại.");
                }

                // Kiểm tra trạng thái đơn hàng - chỉ cho phép chỉnh sửa khi ở trạng thái Pending
                if (order.OrderStatus != "Pending")
                {
                    return BadRequest("Chỉ có thể chỉnh sửa đơn hàng khi ở trạng thái 'Chờ xử lý'");
                }

                // Cập nhật địa chỉ nếu có
                if (updateOrderDto.AddressId.HasValue)
                {
                    var address = await _context.Addresses.FindAsync(updateOrderDto.AddressId.Value);
                    if (address == null)
                    {
                        return BadRequest("Địa chỉ không tồn tại");
                    }
                    order.AddressId = updateOrderDto.AddressId.Value;
                }

                // Xử lý voucher
                Voucher? voucher = null;
                if (updateOrderDto.VoucherId.HasValue)
                {
                    voucher = await _context.Vouchers.FindAsync(updateOrderDto.VoucherId.Value);
                    if (voucher == null || !voucher.IsActive || voucher.ExpiryDate < DateTime.UtcNow)
                    {
                        return BadRequest("Voucher không hợp lệ.");
                    }
                    order.VoucherId = updateOrderDto.VoucherId;
                }
                else
                {
                    order.VoucherId = null;
                }

                // Xử lý các sản phẩm trong đơn hàng
                if (updateOrderDto.OrderItems != null && updateOrderDto.OrderItems.Count > 0)
                {
                    // Xóa các items cũ
                    _context.OrderItems.RemoveRange(order.OrderItems);

                    // Thêm các items mới
                    foreach (var itemDto in updateOrderDto.OrderItems)
                    {
                        var variant = await _context.ProductVariants
                            .Include(pv => pv.Product)
                            .FirstOrDefaultAsync(pv => pv.Id == itemDto.ProductVariantId);

                        if (variant == null)
                        {
                            return BadRequest($"Không tìm thấy biến thể sản phẩm với ID {itemDto.ProductVariantId}");
                        }

                        if (variant.StockQuantity < itemDto.Quantity)
                        {
                            return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm {variant.Product.Name}");
                        }

                        order.OrderItems.Add(new OrderItem
                        {
                            ProductVariantId = itemDto.ProductVariantId,
                            Quantity = itemDto.Quantity,
                            Price = variant.DiscountPrice ?? variant.Price
                        });
                    }
                }

                // Tính toán lại tổng tiền
                order.TotalAmount = order.OrderItems.Sum(oi => oi.Quantity * oi.Price);

                // Áp dụng voucher nếu có
                if (voucher != null)
                {
                    order.TotalAmount -= voucher.DiscountAmount;
                    if (order.TotalAmount < 0) order.TotalAmount = 0;
                }
                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new { Message = "Đơn hàng đã được cập nhật thành công." });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        //cập nhật một phần đơn
        [HttpPatch("{id}")]
        [Authorize]
        public async Task<IActionResult> PartialUpdateOrder(int id, [FromBody] JsonPatchDocument<Order> patchDoc)
        {
            if (patchDoc == null)
            {
                return BadRequest("Dữ liệu cập nhật không hợp lệ");
            }

            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại");
            }

            // Kiểm tra trạng thái đơn hàng
            if (order.OrderStatus != "Pending")
            {
                return BadRequest("Chỉ có thể chỉnh sửa đơn hàng khi ở trạng thái 'Chờ xử lý'");
            }

            // Áp dụng các thay đổi
            patchDoc.ApplyTo(order);

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Kiểm tra số lượng tồn kho nếu có thay đổi về sản phẩm
            if (patchDoc.Operations.Any(op => op.path.Contains("OrderItems")))
            {
                var orderWithItems = await _context.Orders
                    .Include(o => o.OrderItems)
                    .FirstOrDefaultAsync(o => o.Id == id);

                foreach (var item in orderWithItems.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    if (variant.StockQuantity < item.Quantity)
                    {
                        return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm ID {item.ProductVariantId}");
                    }
                }
            }
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Đơn hàng đã được cập nhật thành công." });
        }
        [HttpPost]
        public async Task<IActionResult> CreateOrder([FromBody] OrderDto orderDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Validate user
                User? user = null;
                if (orderDto.UserId.HasValue && orderDto.UserId.Value != 0)
                {
                    user = await _context.Users.FindAsync(orderDto.UserId.Value);
                    if (user == null) return NotFound("Người dùng không tồn tại.");
                }

                // Validate voucher
                Voucher? voucher = null;
                UserVoucher? userVoucher = null;
                if (orderDto.VoucherId.HasValue)
                {
                    voucher = await _context.Vouchers.FindAsync(orderDto.VoucherId.Value);
                    if (voucher == null || !voucher.IsActive || voucher.ExpiryDate < DateTime.UtcNow)
                    {
                        return BadRequest("Voucher không hợp lệ hoặc đã hết hạn.");
                    }

                    // Kiểm tra xem voucher đã được gán cho người dùng chưa
                    userVoucher = await _context.UserVouchers
                        .FirstOrDefaultAsync(uv => uv.VoucherId == voucher.Id && uv.UserId == orderDto.UserId.Value);
                    if (userVoucher == null)
                    {
                        return BadRequest("Bạn chưa sở hữu voucher này.");
                    }

                    // Kiểm tra trạng thái IsUsed
                    if (userVoucher.IsUsed)
                    {
                        return BadRequest("Voucher đã được sử dụng.");
                    }
                }

                // Kiểm tra số lượng tồn kho
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(pv => pv.Product)
                        .FirstOrDefaultAsync(pv => pv.Id == item.ProductVariantId);

                    if (variant == null) return BadRequest($"Không tìm thấy biến thể sản phẩm với ID {item.ProductVariantId}");
                    if (variant.StockQuantity < item.Quantity)
                        return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm {variant.Product.Name}");
                }

                // Create order
                var order = new Order
                {
                    UserId = orderDto.UserId,
                    OrderDate = DateTime.UtcNow,
                    TotalAmount = orderDto.TotalAmount,
                    OrderStatus = orderDto.PaymentMethodId == 1 ? "Pending" : "WaitingForPayment",
                    AddressId = orderDto.AddressId,
                    PaymentMethodId = orderDto.PaymentMethodId,
                    VoucherId = orderDto.VoucherId,
                    OrderItems = orderDto.OrderItems.Select(oi => new OrderItem
                    {
                        ProductVariantId = oi.ProductVariantId,
                        Quantity = oi.Quantity,
                        Price = oi.Price
                    }).ToList()
                };

                // Apply voucher discount
                if (voucher != null)
                {
                    order.TotalAmount -= voucher.DiscountAmount;
                    if (order.TotalAmount < 0) order.TotalAmount = 0;
                }

                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // Trừ số lượng tồn kho
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    variant.StockQuantity -= item.Quantity;
                }

                // Thanh toán với MoMo (cả QR và thẻ)
                if (orderDto.PaymentMethodId == 2)
                {
                    try
                    {
                        var momoOrderId = $"SHN{order.Id}";
                        bool isCardPayment = Request.Headers["Payment-Type"].ToString() == "card";

                        var payUrl = await _momoService.CreatePaymentAsync(
                            momoOrderId,
                            $"Thanh toán đơn hàng SHN#{order.Id}",
                            (long)order.TotalAmount,
                            isCardPayment);

                        await transaction.CommitAsync();

                        return Ok(new
                        {
                            Success = true,
                            OrderId = order.Id,
                            PaymentUrl = payUrl,
                            Message = isCardPayment
                                ? "Vui lòng thanh toán bằng thẻ Visa/MasterCard"
                                : "Vui lòng thanh toán qua QR MoMo"
                        });
                    }
                    catch (Exception ex)
                    {
                        await transaction.RollbackAsync();
                        return BadRequest(new
                        {
                            Success = false,
                            Message = "Lỗi khi khởi tạo thanh toán MoMo: " + ex.Message
                        });
                    }
                }

                // Process voucher and mark as used
                if (voucher != null && userVoucher != null)
                {
                    // Cập nhật IsUsed thành true khi đơn hàng hoàn tất
                    userVoucher.IsUsed = true;
                    _context.UserVouchers.Update(userVoucher);
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new { Message = "Đơn hàng đã được tạo.", OrderId = order.Id });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        // MoMo payment callback
        [HttpPost("momo/callback")]
        public async Task<IActionResult> MoMoCallback([FromBody] MoMoCallbackModel callback)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Verify signature
                var rawData = $"accessKey={_configuration["MoMoConfig:AccessKey"]}" +
                             $"&amount={callback.Amount}" +
                             $"&extraData=" +
                             $"&ipnUrl={_configuration["MoMoConfig:NotifyUrl"]}" +
                             $"&orderId={callback.OrderId}" +
                             $"&orderInfo={callback.OrderInfo}" +
                             $"&partnerCode={callback.PartnerCode}" +
                             $"&redirectUrl={_configuration["MoMoConfig:ReturnUrl"]}" +
                             $"&requestId={callback.RequestId}" +
                             $"&requestType={_configuration["MoMoConfig:RequestType"]}";

                if (!_momoService.VerifySignature(callback.Signature, rawData))
                {
                    return BadRequest("Invalid signature");
                }

                // Find order
                var orderIdStr = callback.OrderId.Replace("SHN", "");
                if (!int.TryParse(orderIdStr, out int orderId))
                {
                    return BadRequest("Invalid order ID");
                }

                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .Include(o => o.User)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound("Order not found");
                }

                // Update payment info
                order.MoMoTransId = callback.TransId;
                order.MoMoResponse = JsonConvert.SerializeObject(callback);

                // Process payment result
                if (callback.ResultCode == 0) // Success
                {
                    order.OrderStatus = "Paid";

                    // Trừ số lượng tồn kho (nếu chưa trừ)
                    foreach (var item in order.OrderItems)
                    {
                        var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                        if (variant != null)
                        {
                            variant.StockQuantity -= item.Quantity;
                        }
                    }

                    // Mark voucher as used if exists
                    if (order.VoucherId.HasValue && order.UserId.HasValue)
                    {
                        var userVoucher = new UserVoucher
                        {
                            UserId = order.UserId.Value,
                            VoucherId = order.VoucherId.Value,
                            UsedAt = DateTime.UtcNow
                        };
                        _context.UserVouchers.Add(userVoucher);
                    }

                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();

                    // Trả về URL xác nhận
                    return Ok(new
                    {
                        Success = true,
                        RedirectUrl = $"/order-confirmation/{orderId}",
                        OrderId = orderId
                    });
                }
                else // Failed
                {
                    order.OrderStatus = "PaymentFailed";
                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();

                    return Ok(new
                    {
                        Success = false,
                        RedirectUrl = $"/checkout?payment=failed&orderId={orderId}",
                        Message = callback.Message
                    });
                }


            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // Lấy thông tin đơn hàng theo Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetOrderById(int id)
        {
            var order = await _context.Orders
                .Include(o => o.OrderItems)
                .FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            var orderDto = new OrderDto
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                {
                    ProductVariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            };

            return Ok(orderDto);
        }

        // Xóa đơn hàng
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Đơn hàng đã được xóa." });
        }

        // Cập nhật trạng thái đơn hàng
        [HttpPut("{id}/status")]
        public async Task<IActionResult> UpdateOrderStatus(int id, [FromBody] UpdateStatusDto updateStatusDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                var order = await _context.Orders
                    .Include(o => o.User)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Đơn hàng không tồn tại.");
                }

                // Lưu trạng thái cũ để kiểm tra
                var oldStatus = order.OrderStatus;
                order.OrderStatus = updateStatusDto.NewStatus;

                // Nếu chuyển sang trạng thái "Delivered" và trước đó chưa phải là "Delivered"
                if (updateStatusDto.NewStatus == "Delivered" && oldStatus != "Delivered")
                {
                    // Cộng 500 điểm cho user
                    if (order.UserId.HasValue && order.User != null)
                    {
                        order.User.Points += 500;
                    }
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new { Message = "Trạng thái đơn hàng đã được cập nhật." });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        // Lấy danh sách đơn hàng theo userId
        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetOrdersByUserId(int userId)
        {
            var orders = await _context.Orders
                .Where(o => o.UserId == userId)
                .Include(o => o.OrderItems)
                .ThenInclude(oi => oi.ProductVariant)
                .ThenInclude(pv => pv.Product)
                .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                .ToListAsync();

            if (orders == null || orders.Count == 0)
            {
                return NotFound("Không tìm thấy đơn hàng nào cho người dùng này.");
            }

            var orderDtos = orders.Select(order => new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    ProductName = oi.ProductVariant.Product.Name,
                    ProductDescription = oi.ProductVariant.Product.Description,
                    ProductImage = oi.ProductVariant.Product.Images.FirstOrDefault(img => img.IsPrimary)?.ImageUrl,
                    VariantColor = oi.ProductVariant.Color,
                    VariantStorage = oi.ProductVariant.Storage,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(orderDtos);
        }

        [HttpGet("user/{userId}/paged")]
        public async Task<IActionResult> GetPagedOrdersByUserId(int userId, int page = 1, int pageSize = 10)
        {
            var query = _context.Orders
                .Where(o => o.UserId == userId)
                .Include(o => o.OrderItems)
                .ThenInclude(oi => oi.ProductVariant)
                .ThenInclude(pv => pv.Product)
                .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                .OrderByDescending(o => o.OrderDate);

            var totalOrders = await query.CountAsync();
            var orders = await query
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var orderDtos = orders.Select(order => new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    ProductName = oi.ProductVariant.Product.Name,
                    ProductDescription = oi.ProductVariant.Product.Description,
                    ProductImage = oi.ProductVariant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    VariantColor = oi.ProductVariant.Color,
                    VariantStorage = oi.ProductVariant.Storage,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(new
            {
                TotalOrders = totalOrders,
                Page = page,
                PageSize = pageSize,
                Orders = orderDtos
            });
        }
        // Tổng doanh thu theo ngày
        [HttpGet("revenue/day")]
        public async Task<IActionResult> GetDailyRevenue()
        {
            var today = DateTime.UtcNow.Date;
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date == today && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo tuần
        [HttpGet("revenue/week")]
        public async Task<IActionResult> GetWeeklyRevenue()
        {
            var startOfWeek = DateTime.UtcNow.Date.AddDays(-(int)DateTime.UtcNow.DayOfWeek);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfWeek && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo tháng
        [HttpGet("revenue/month")]
        public async Task<IActionResult> GetMonthlyRevenue()
        {
            var startOfMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfMonth && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo năm
        [HttpGet("revenue/year")]
        public async Task<IActionResult> GetYearlyRevenue()
        {
            var startOfYear = new DateTime(DateTime.UtcNow.Year, 1, 1);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfYear && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Số lượng đơn hàng đã hoàn thành
        [HttpGet("completed-orders")]
        public async Task<IActionResult> GetCompletedOrdersCount()
        {
            var count = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .CountAsync();

            return Ok(new { CompletedOrders = count });
        }

        // Số lượng đơn hàng chờ xác nhận
        [HttpGet("pending-orders")]
        public async Task<IActionResult> GetPendingOrdersCount()
        {
            var count = await _context.Orders
                .Where(o => o.OrderStatus == "Pending")
                .CountAsync();

            return Ok(new { PendingOrders = count });
        }

        // Tổng tiền đơn hàng đã hoàn thành
        [HttpGet("completed-orders-total")]
        public async Task<IActionResult> GetCompletedOrdersTotal()
        {
            var total = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { CompletedOrdersTotal = total });
        }

        // Tổng doanh thu
        [HttpGet("total-revenue")]
        public async Task<IActionResult> GetTotalRevenue()
        {
            var totalRevenue = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { TotalRevenue = totalRevenue });
        }

        [HttpGet("{id}/details")]
        public async Task<IActionResult> GetOrderDetails(int id)
        {
            var order = await _context.Orders
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                        .ThenInclude(pv => pv.Product) // Thêm ThenInclude để lấy Product
                                        .ThenInclude(p => p.Images) // QUAN TRỌNG: Include cả Images

                .Include(o => o.Address)
                .FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            Console.WriteLine($"Order {id} has {order.OrderItems.Count} items");

            var orderDetails = new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                Address = order.Address != null ? new
                {
                    Id = order.Address.Id,
                    FullName = order.Address.FullName,
                    PhoneNumber = order.Address.PhoneNumber,
                    AddressLine1 = order.Address.AddressLine1,
                    AddressLine2 = order.Address.AddressLine2,
                    City = order.Address.City,
                    State = order.Address.State,
                    ZipCode = order.Address.ZipCode,
                    Country = order.Address.Country
                } : null,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    VariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price,
                    // ProductImage = oi.ProductVariant?.Product?.Images, // Lấy ảnh từ Product
                    ProductImage = oi.ProductVariant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    ProductName = oi.ProductVariant?.Product?.Name // Có thể thêm tên sản phẩm nếu cần
                }).ToList()
            };

            return Ok(orderDetails);
        }
        [HttpGet("{orderId}/export/excel")]
        public async Task<IActionResult> ExportOrderToExcel(int orderId)
        {
            try
            {
                // Lấy thông tin đơn hàng từ database
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                    .ThenInclude(pv => pv.Product)
                    .Include(o => o.Address)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound(new { Message = $"Không tìm thấy đơn hàng với ID {orderId}" });
                }

                // Tạo file Excel với EPPlus
                using (var excelPackage = new ExcelPackage())
                {
                    // Tạo worksheet
                    var worksheet = excelPackage.Workbook.Worksheets.Add("Hóa đơn");

                    // Định dạng tiêu đề
                    worksheet.Cells["A1"].Value = "HÓA ĐƠN BÁN HÀNG";
                    worksheet.Cells["A1:E1"].Merge = true;
                    worksheet.Cells["A1"].Style.Font.Bold = true;
                    worksheet.Cells["A1"].Style.Font.Size = 16;
                    worksheet.Cells["A1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    // Thông tin đơn hàng
                    worksheet.Cells["A3"].Value = "Mã đơn hàng:";
                    worksheet.Cells["B3"].Value = order.Id;
                    worksheet.Cells["A4"].Value = "Ngày tạo:";
                    worksheet.Cells["B4"].Value = order.OrderDate.ToString("dd/MM/yyyy HH:mm");
                    worksheet.Cells["A5"].Value = "Khách hàng:";
                    worksheet.Cells["B5"].Value = order.Address?.FullName ?? "N/A";

                    // Tiêu đề bảng
                    var headerRow = 7;
                    worksheet.Cells[headerRow, 1].Value = "STT";
                    worksheet.Cells[headerRow, 2].Value = "Tên sản phẩm";
                    worksheet.Cells[headerRow, 3].Value = "Số lượng";
                    worksheet.Cells[headerRow, 4].Value = "Đơn giá";
                    worksheet.Cells[headerRow, 5].Value = "Thành tiền";

                    // Định dạng tiêu đề bảng
                    using (var range = worksheet.Cells[headerRow, 1, headerRow, 5])
                    {
                        range.Style.Font.Bold = true;
                        range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        range.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    }

                    // Đổ dữ liệu sản phẩm
                    int row = 8;
                    foreach (var item in order.OrderItems)
                    {
                        worksheet.Cells[row, 1].Value = row - headerRow;
                        worksheet.Cells[row, 2].Value = item.ProductVariant.Product.Name;
                        worksheet.Cells[row, 3].Value = item.Quantity;
                        worksheet.Cells[row, 4].Value = item.Price;
                        worksheet.Cells[row, 4].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[row, 5].Value = item.Quantity * item.Price;
                        worksheet.Cells[row, 5].Style.Numberformat.Format = "#,##0";
                        row++;
                    }

                    // Tổng cộng
                    worksheet.Cells[row, 4].Value = "Tổng cộng:";
                    worksheet.Cells[row, 4].Style.Font.Bold = true;
                    worksheet.Cells[row, 5].Value = order.TotalAmount;
                    worksheet.Cells[row, 5].Style.Font.Bold = true;
                    worksheet.Cells[row, 5].Style.Numberformat.Format = "#,##0";

                    // Tự động điều chỉnh độ rộng cột
                    worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                    // Xuất file
                    var stream = new MemoryStream();
                    excelPackage.SaveAs(stream);
                    stream.Position = 0;

                    return File(
                        fileContents: stream.ToArray(),
                        contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileDownloadName: $"HoaDon_{orderId}.xlsx");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi xuất file Excel" });
            }
        }

        [HttpGet("{id}/export/image")]
        public async Task<IActionResult> ExportOrderToImage(int id)
        {
            try
            {
                // Lấy thông tin đơn hàng từ database
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                    .ThenInclude(pv => pv.Product)
                    .Include(o => o.Address)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Không tìm thấy đơn hàng");
                }

                // Tính toán kích thước hình ảnh dựa trên số lượng sản phẩm
                int width = 800;
                int itemHeight = 30;
                int headerHeight = 200;
                int footerHeight = 50;
                int height = headerHeight + (order.OrderItems.Count * itemHeight) + footerHeight;

                // Tạo bitmap và graphics
                using (var bitmap = new System.Drawing.Bitmap(width, height))
                using (var graphics = System.Drawing.Graphics.FromImage(bitmap))
                {
                    // Vẽ nền trắng
                    graphics.Clear(System.Drawing.Color.White);

                    // Định dạng font và brush
                    var titleFont = new System.Drawing.Font("Arial", 20, System.Drawing.FontStyle.Bold);
                    var headerFont = new System.Drawing.Font("Arial", 12, System.Drawing.FontStyle.Bold);
                    var normalFont = new System.Drawing.Font("Arial", 10);
                    var blackBrush = System.Drawing.Brushes.Black;
                    var grayBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Gray);

                    // Vẽ tiêu đề
                    graphics.DrawString("HÓA ĐƠN BÁN HÀNG", titleFont, blackBrush,
                        new System.Drawing.PointF(width / 2 - 150, 20));

                    // Vẽ thông tin đơn hàng
                    graphics.DrawString($"Mã đơn hàng: {order.Id}", normalFont, blackBrush, 20, 60);
                    graphics.DrawString($"Ngày tạo: {order.OrderDate:dd/MM/yyyy HH:mm}", normalFont, blackBrush, 20, 85);
                    graphics.DrawString($"Khách hàng: {order.Address?.FullName ?? "N/A"}", normalFont, blackBrush, 20, 110);
                    graphics.DrawString($"Địa chỉ: {order.Address?.AddressLine1 ?? "N/A"}", normalFont, blackBrush, 20, 135);

                    // Vẽ tiêu đề bảng
                    graphics.DrawString("STT", headerFont, blackBrush, 20, 170);
                    graphics.DrawString("Tên sản phẩm", headerFont, blackBrush, 60, 170);
                    graphics.DrawString("Số lượng", headerFont, blackBrush, 400, 170);
                    graphics.DrawString("Đơn giá", headerFont, blackBrush, 500, 170);
                    graphics.DrawString("Thành tiền", headerFont, blackBrush, 600, 170);

                    // Vẽ đường kẻ ngang dưới tiêu đề
                    graphics.DrawLine(System.Drawing.Pens.Gray, 20, 190, width - 20, 190);

                    // Vẽ từng sản phẩm
                    int yPos = 200;
                    int index = 1;
                    foreach (var item in order.OrderItems)
                    {
                        graphics.DrawString(index.ToString(), normalFont, blackBrush, 20, yPos);
                        graphics.DrawString(item.ProductVariant.Product.Name, normalFont, blackBrush, 60, yPos);
                        graphics.DrawString(item.Quantity.ToString(), normalFont, blackBrush, 400, yPos);
                        graphics.DrawString(item.Price.ToString("N0"), normalFont, blackBrush, 500, yPos);
                        graphics.DrawString((item.Quantity * item.Price).ToString("N0"), normalFont, blackBrush, 600, yPos);

                        yPos += itemHeight;
                        index++;
                    }

                    // Vẽ tổng cộng
                    graphics.DrawLine(System.Drawing.Pens.Gray, 20, yPos, width - 20, yPos);
                    yPos += 10;
                    graphics.DrawString("TỔNG CỘNG:  ", headerFont, blackBrush, 500, yPos);
                    graphics.DrawString(order.TotalAmount.ToString("N0"), headerFont, blackBrush, 600, yPos);

                    // Vẽ footer
                    yPos += 30;
                    graphics.DrawString("Cảm ơn quý khách đã mua hàng!", normalFont, grayBrush,
                        new System.Drawing.PointF(width / 2 - 100, yPos));

                    // Lưu hình ảnh vào memory stream
                    using (var stream = new MemoryStream())
                    {
                        bitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
                        stream.Position = 0;

                        // Trả về file hình ảnh
                        return File(stream.ToArray(), "image/png", $"HoaDon_{order.Id}.png");
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi xuất hóa đơn: {ex.Message}");
            }
        }
        private string ConvertToUnsigned(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return text;

            text = text.Normalize(NormalizationForm.FormD);
            var chars = text.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark).ToArray();
            return new string(chars).Normalize(NormalizationForm.FormC);
        }

        [HttpGet("{id}/export/template")]
        public async Task<IActionResult> ExportOrderToTemplate(int id)
        {
            try
            {
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                    .ThenInclude(pv => pv.Product)
                    .Include(o => o.Address)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Order not found");
                }

                using (var stream = new MemoryStream())
                {
                    var document = new Document(PageSize.A4);
                    var writer = PdfWriter.GetInstance(document, stream);
                    document.Open();

                    // Add title
                    var titleFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 18);
                    var title = new Paragraph(ConvertToUnsigned("HOA DON BAN HANG"), titleFont)
                    {
                        Alignment = Element.ALIGN_CENTER,
                        SpacingAfter = 20f
                    };
                    document.Add(title);

                    // Add order info
                    var infoFont = FontFactory.GetFont(FontFactory.HELVETICA, 12);
                    document.Add(new Paragraph(ConvertToUnsigned($"Mã đơn hàng: {order.Id}"), infoFont));
                    document.Add(new Paragraph(ConvertToUnsigned($"Ngày tạo: {order.OrderDate:dd/MM/yyyy}"), infoFont));
                    document.Add(new Paragraph(ConvertToUnsigned($"Khách hàng: {order.Address?.FullName ?? "N/A"}"), infoFont));
                    document.Add(new Paragraph(" "));

                    // Create table
                    var table = new PdfPTable(5)
                    {
                        WidthPercentage = 100,
                        SpacingBefore = 10f,
                        SpacingAfter = 10f
                    };

                    // Table headers
                    table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned("STT"), infoFont)));
                    table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned("Tên sản phẩm"), infoFont)));
                    table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned("Số lượng"), infoFont)));
                    table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned("Don Gia"), infoFont)));
                    table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned("Thành tiền"), infoFont)));

                    // Table data
                    int index = 1;
                    foreach (var item in order.OrderItems)
                    {
                        table.AddCell(new PdfPCell(new Phrase(index.ToString(), infoFont)));
                        table.AddCell(new PdfPCell(new Phrase(ConvertToUnsigned(item.ProductVariant.Product.Name), infoFont)));
                        table.AddCell(new PdfPCell(new Phrase(item.Quantity.ToString(), infoFont)));
                        table.AddCell(new PdfPCell(new Phrase(item.Price.ToString("N0"), infoFont)));
                        table.AddCell(new PdfPCell(new Phrase((item.Quantity * item.Price).ToString("N0"), infoFont)));
                        index++;
                    }

                    document.Add(table);

                    // Add total
                    var totalFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);
                    document.Add(new Paragraph(ConvertToUnsigned($"Tổng cộng: {order.TotalAmount.ToString("N0")}"), totalFont)
                    {
                        Alignment = Element.ALIGN_RIGHT
                    });

                    document.Close();
                    writer.Close();

                    return File(stream.ToArray(), "application/pdf", $"HoaDon_{order.Id}.pdf");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error exporting to template: {ex.Message}");
            }
        }
        // Lấy địa chỉ theo đơn
        [HttpGet("by-phone/{phoneNumber}")]
        public async Task<IActionResult> GetOrdersByPhoneNumber(string phoneNumber)
        {
            try
            {
                // Tìm các địa chỉ có số điện thoại trùng khớp
                var addresses = await _context.Addresses
                    .Where(a => a.PhoneNumber == phoneNumber)
                    .Select(a => a.Id) // Chỉ lấy ID
                    .ToListAsync();

                if (!addresses.Any())
                {
                    return NotFound(new { Message = "Không tìm thấy đơn hàng nào với số điện thoại này" });
                }

                // Lấy các đơn hàng
                var orders = await _context.Orders
                    .Where(o => addresses.Contains(o.Id))
                    .Include(o => o.OrderItems)
                        .ThenInclude(oi => oi.ProductVariant)
                            .ThenInclude(pv => pv.Product)
                            .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                    .Include(o => o.Address)
                    .Include(o => o.PaymentMethod)
                    .OrderByDescending(o => o.OrderDate)
                    .ToListAsync();

                var result = orders.Select(order => new
                {
                    OrderId = order.Id,
                    OrderDate = order.OrderDate.ToString("dd/MM/yyyy HH:mm"),
                    TotalAmount = order.TotalAmount,
                    FormattedTotal = order.TotalAmount.ToString("N0") + " VNĐ",
                    PaymentMethod = order.PaymentMethod != null ? order.PaymentMethod.Name : "Tiền mặt",
                    OrderStatus = order.OrderStatus,
                    ShippingInfo = new
                    {
                        FullName = order.Address != null ? order.Address.FullName : "N/A",
                        Phone = order.Address != null ? order.Address.PhoneNumber : "N/A",
                        Address = order.Address != null
                            ? $"{order.Address.AddressLine1}, {order.Address.City}, {order.Address.State}"
                            : "N/A",
                        Email = order.User != null ? order.User.Email : "N/A"
                    },
                    Products = order.OrderItems.Select(oi => new
                    {
                        Id = oi.ProductVariant.Product.Id,
                        Name = oi.ProductVariant.Product.Name,
                        Image = oi.ProductVariant.Product.Images
        .OrderByDescending(i => i.IsPrimary) // Ưu tiên ảnh IsPrimary
        .ThenBy(i => i.Id)                  // Sắp xếp thứ tự
        .FirstOrDefault()?                  // Lấy ảnh đầu tiên
        .ImageUrl ?? "/images/default-product.png", // Fallback nếu null
                        Variant = $"{oi.ProductVariant.Color} - {oi.ProductVariant.Storage}",
                        Quantity = oi.Quantity,
                        Price = oi.Price,
                        Total = oi.Price * oi.Quantity
                    }),
                    EstimatedDelivery = order.OrderDate.AddDays(3).ToString("dd/MM/yyyy")
                });

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thông tin đơn hàng", Error = ex.Message });
            }
        }
        [HttpGet("dashboard/sales-overview")]
        public async Task<IActionResult> GetSalesOverview([FromQuery] string range = "month")
        {
            try
            {
                DateTime startDate;
                Func<DateTime, string> groupByFormat;
                Func<string, string> formatPeriodLabel;
                string xAxisKey;

                switch (range.ToLower())
                {
                    case "week":
                        startDate = DateTime.UtcNow.Date.AddDays(-7);
                        groupByFormat = date => ((int)date.DayOfWeek).ToString();
                        formatPeriodLabel = periodNum =>
                        {
                            var daysOfWeek = new[] { "Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy" };
                            int dayIndex;
                            return int.TryParse(periodNum, out dayIndex) && dayIndex >= 0 && dayIndex < 7
                                ? daysOfWeek[dayIndex]
                                : periodNum;
                        };
                        xAxisKey = "day";
                        break;

                    case "year":
                        // Thay đổi ở đây: chỉ lấy từ đầu năm hiện tại
                        startDate = new DateTime(DateTime.UtcNow.Year, 1, 1);
                        groupByFormat = date => date.Month.ToString();
                        formatPeriodLabel = period => $"Tháng {period}";
                        xAxisKey = "month";
                        break;

                    default: // month
                        startDate = DateTime.UtcNow.Date.AddMonths(-1);
                        groupByFormat = date => date.Day.ToString();
                        formatPeriodLabel = period => $"Ngày {period}";
                        xAxisKey = "day";
                        break;
                }

                // Get data from database
                var orders = await _context.Orders
                    .Where(o => o.OrderDate >= startDate && o.OrderStatus == "Delivered")
                    .Select(o => new { o.OrderDate, o.TotalAmount })
                    .ToListAsync();

                // Group and format data
                var salesData = orders
                    .GroupBy(o => groupByFormat(o.OrderDate))
                    .Select(g => new
                    {
                        Period = g.Key,
                        FormattedPeriod = formatPeriodLabel(g.Key),
                        ShortPeriod = range switch
                        {
                            "week" => formatPeriodLabel(g.Key).Replace("Chủ Nhật", "CN").Replace("Thứ ", ""),
                            "year" => $"T{g.Key}",
                            _ => g.Key
                        },
                        Sales = g.Sum(o => o.TotalAmount),
                        OrderCount = g.Count()
                    })
                    .OrderBy(x => int.Parse(x.Period))
                    .ToList();

                // Fill missing periods
                var allPeriods = range switch
                {
                    "week" => Enumerable.Range(0, 7).Select(i => i.ToString()),
                    "year" => Enumerable.Range(1, 12).Select(i => i.ToString()),
                    _ => Enumerable.Range(1, DateTime.DaysInMonth(DateTime.UtcNow.Year, DateTime.UtcNow.Month))
                        .Select(i => i.ToString())
                };

                salesData = allPeriods
                    .GroupJoin(salesData,
                        period => period,
                        data => data.Period,
                        (period, data) => new
                        {
                            Period = period,
                            FormattedPeriod = formatPeriodLabel(period),
                            ShortPeriod = range switch
                            {
                                "week" => formatPeriodLabel(period).Replace("Chủ Nhật", "CN").Replace("Thứ ", ""),
                                "year" => $"T{period}",
                                _ => period
                            },
                            Sales = data.FirstOrDefault()?.Sales ?? 0,
                            OrderCount = data.FirstOrDefault()?.OrderCount ?? 0
                        })
                    .OrderBy(x => int.Parse(x.Period))
                    .ToList();

                // Create summary object based on range
                object summary;
                switch (range.ToLower())
                {
                    case "week":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageDailySales = salesData.Average(x => x.Sales)
                        };
                        break;
                    case "month":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageDailySales = salesData.Average(x => x.Sales)
                        };
                        break;
                    case "year":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageMonthlySales = salesData.Average(x => x.Sales),
                            BestMonth = salesData.OrderByDescending(x => x.Sales).FirstOrDefault()?.FormattedPeriod,
                            WorstMonth = salesData.OrderBy(x => x.Sales).FirstOrDefault()?.FormattedPeriod
                        };
                        break;
                    default:
                        summary = new { };
                        break;
                }

                return Ok(new
                {
                    Data = salesData,
                    XAxisKey = xAxisKey,
                    TimeRange = range,
                    Currency = "VND",
                    Summary = summary
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu tổng quan bán hàng", Error = ex.Message });
            }
        }
        // Đếm tổng số đơn hàng
        [HttpGet("total-count")]
        public async Task<IActionResult> GetTotalOrderCount()
        {
            try
            {
                var totalOrders = await _context.Orders.CountAsync();
                return Ok(new { TotalOrders = totalOrders });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi đếm số lượng đơn hàng", Error = ex.Message });
            }
        }

        // Thêm vào OrderController
        [HttpGet("stats")]
        public async Task<IActionResult> GetOrderStats()
        {
            try
            {
                var totalOrders = await _context.Orders.CountAsync();
                var completedOrders = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered")
                    .CountAsync();
                var pendingOrders = await _context.Orders
                    .Where(o => o.OrderStatus == "Pending")
                    .CountAsync();
                var totalRevenue = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered")
                    .SumAsync(o => o.TotalAmount);

                return Ok(new
                {
                    TotalOrders = totalOrders,
                    CompletedOrders = completedOrders,
                    PendingOrders = pendingOrders,
                    TotalRevenue = totalRevenue
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thống kê", Error = ex.Message });
            }
        }
        [HttpGet("revenue-year")]
        public async Task<IActionResult> GetRevenueDataYear([FromQuery] string range = "year")
        {
            try
            {
                DateTime startDate = DateTime.UtcNow.AddYears(-1); // Luôn lấy 1 năm gần nhất
                var currentDate = DateTime.UtcNow;

                var revenueData = await _context.Orders
                    .Where(o => o.OrderDate >= startDate &&
                               o.OrderDate <= currentDate &&
                               o.OrderStatus == "Delivered")
                    .GroupBy(o => new { o.OrderDate.Month, o.OrderDate.Year })
                    .Select(g => new
                    {
                        Month = g.Key.Month,
                        Year = g.Key.Year,
                        Revenue = g.Sum(o => o.TotalAmount)
                    })
                    .OrderBy(x => x.Year)
                    .ThenBy(x => x.Month)
                    .ToListAsync();

                // Đảm bảo luôn có đủ 12 tháng
                var fullYearData = Enumerable.Range(0, 12)
                    .Select(i => new
                    {
                        Date = startDate.AddMonths(i),
                        Month = startDate.AddMonths(i).Month,
                        Year = startDate.AddMonths(i).Year,
                        Revenue = revenueData
                            .FirstOrDefault(d => d.Month == startDate.AddMonths(i).Month &&
                                               d.Year == startDate.AddMonths(i).Year)?.Revenue ?? 0
                    })
                    .ToList();

                return Ok(fullYearData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu doanh thu", Error = ex.Message });
            }
        }

        [HttpGet("revenue")]
        public async Task<IActionResult> GetRevenueData([FromQuery] string range = "month")
        {
            try
            {
                DateTime startDate = range switch
                {
                    "week" => DateTime.UtcNow.AddDays(-7),
                    "year" => DateTime.UtcNow.AddYears(-1),
                    _ => DateTime.UtcNow.AddMonths(-1)
                };

                var revenueData = await _context.Orders
                    .Where(o => o.OrderDate >= startDate && o.OrderStatus == "Delivered")
                    .GroupBy(o => new { o.OrderDate.Date })
                    .Select(g => new
                    {
                        Date = g.Key.Date,
                        Revenue = g.Sum(o => o.TotalAmount)
                    })
                    .OrderBy(x => x.Date)
                    .ToListAsync();

                return Ok(revenueData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu doanh thu", Error = ex.Message });
            }
        }

        [HttpGet("sales-by-category")]
        public async Task<IActionResult> GetSalesByCategory()
        {
            try
            {
                // Lấy dữ liệu đơn hàng đã hoàn thành (Delivered) và nhóm theo danh mục
                var salesData = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered")
                    .Include(o => o.OrderItems)
                        .ThenInclude(oi => oi.ProductVariant)
                            .ThenInclude(pv => pv.Product)
                                .ThenInclude(p => p.Category)
                    .SelectMany(o => o.OrderItems.Select(oi => new
                    {
                        CategoryName = oi.ProductVariant.Product.Category.Name,
                        Total = oi.Quantity * oi.Price
                    }))
                    .GroupBy(x => x.CategoryName)
                    .Select(g => new
                    {
                        Category = g.Key,
                        TotalSales = g.Sum(x => x.Total)
                    })
                    .OrderByDescending(x => x.TotalSales)
                    .ToListAsync();

                // Nếu không có dữ liệu, trả về mảng rỗng
                if (!salesData.Any())
                {
                    return Ok(new List<object>());
                }

                // Format dữ liệu phù hợp với biểu đồ
                var result = salesData.Select(x => new
                {
                    name = x.Category,
                    value = x.TotalSales
                });

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu doanh thu theo danh mục", Error = ex.Message });
            }
        }
        [HttpGet("daily-sales")]
        public async Task<IActionResult> GetDailySalesTrend(
    [FromQuery] int days = 7,
    [FromQuery] string timeZone = "UTC")
        {
            try
            {
                // Xác định múi giờ
                TimeZoneInfo timeZoneInfo;
                try
                {
                    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
                }
                catch
                {
                    timeZoneInfo = TimeZoneInfo.Utc;
                }

                var endDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZoneInfo).Date;
                var startDate = endDate.AddDays(-days + 1);

                // Lấy dữ liệu từ database (vẫn giữ server-side evaluation cho phần này)
                var orders = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered" &&
                               o.OrderDate >= startDate &&
                               o.OrderDate <= endDate)
                    .ToListAsync(); // First materialize the query

                // Client-side processing
                var salesData = orders
                    .GroupBy(o => TimeZoneInfo.ConvertTimeFromUtc(o.OrderDate, timeZoneInfo).Date)
                    .Select(g => new
                    {
                        Date = g.Key,
                        DayName = g.Key.ToString("ddd"),
                        TotalSales = g.Sum(o => o.TotalAmount)
                    })
                    .OrderBy(x => x.Date)
                    .ToList(); // Use ToList() instead of ToListAsync()

                // Tạo dữ liệu đầy đủ cho tất cả các ngày trong khoảng
                var fullData = new List<object>();
                for (var date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    var dayData = salesData.FirstOrDefault(d => d.Date == date);
                    fullData.Add(new
                    {
                        name = date.ToString("ddd"),
                        sales = dayData?.TotalSales ?? 0,
                        fullDate = date.ToString("MMM dd")
                    });
                }

                return Ok(fullData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    Message = "Lỗi khi lấy dữ liệu xu hướng bán hàng hàng ngày",
                    Error = ex.Message
                });
            }
        }
    }




    public class MoMoCallbackModel
    {
        public string PartnerCode { get; set; }
        public string OrderId { get; set; }
        public string RequestId { get; set; }
        public long Amount { get; set; }
        public string OrderInfo { get; set; }
        public string OrderType { get; set; }
        public string TransId { get; set; }
        public int ResultCode { get; set; }
        public string Message { get; set; }
        public string PayType { get; set; }
        public string Signature { get; set; }
    }
}
```

### Controllers\PaymentMethodController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PaymentMethodController : ControllerBase
    {
        private readonly AppDbContext _context;

        public PaymentMethodController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/PaymentMethod
        [HttpGet]
        public async Task<ActionResult<IEnumerable<PaymentMethod>>> GetPaymentMethods()
        {
            return await _context.PaymentMethods.ToListAsync();
        }

        // GET: api/PaymentMethod/5
        [HttpGet("{id}")]
        public async Task<ActionResult<PaymentMethod>> GetPaymentMethod(int id)
        {
            var paymentMethod = await _context.PaymentMethods.FindAsync(id);

            if (paymentMethod == null)
            {
                return NotFound();
            }

            return paymentMethod;
        }

        // POST: api/PaymentMethod
        [HttpPost]
        public async Task<ActionResult<PaymentMethod>> PostPaymentMethod(PaymentMethod paymentMethod)
        {
            _context.PaymentMethods.Add(paymentMethod);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetPaymentMethod", new { id = paymentMethod.Id }, paymentMethod);
        }

        // PUT: api/PaymentMethod/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutPaymentMethod(int id, PaymentMethod paymentMethod)
        {
            if (id != paymentMethod.Id)
            {
                return BadRequest();
            }

            _context.Entry(paymentMethod).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PaymentMethodExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/PaymentMethod/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeletePaymentMethod(int id)
        {
            var paymentMethod = await _context.PaymentMethods.FindAsync(id);
            if (paymentMethod == null)
            {
                return NotFound();
            }

            _context.PaymentMethods.Remove(paymentMethod);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool PaymentMethodExists(int id)
        {
            return _context.PaymentMethods.Any(e => e.Id == id);
        }

        // Thêm endpoint để seed dữ liệu phương thức thanh toán mẫu
        [HttpPost("seed")]
        public async Task<IActionResult> SeedPaymentMethods()
        {
            if (await _context.PaymentMethods.AnyAsync())
            {
                return Conflict("Payment methods already exist in database");
            }

            var paymentMethods = new List<PaymentMethod>
            {
                new PaymentMethod
                {
                    Id = 1,
                    Name = "Tiền mặt khi nhận hàng",
                    Description = "Thanh toán bằng tiền mặt khi nhận hàng"
                },
                new PaymentMethod
                {
                    Id = 2,
                    Name = "Ví điện tử MoMo",
                    Description = "Thanh toán qua ứng dụng MoMo"
                }
            };

            await _context.PaymentMethods.AddRangeAsync(paymentMethods);
            await _context.SaveChangesAsync();

            return Ok("Payment methods seeded successfully");
        }
    }
}
```

### Controllers\PayPalController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using PayPalCheckoutSdk.Core;
using PayPalCheckoutSdk.Orders;
using Microsoft.Extensions.Logging;
using SHN_Gear.Data;
using SHN_Gear.Services;
using System.Globalization;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class PayPalController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly PayPalService _payPalService;
        private readonly ILogger<PayPalController> _logger;
        private const decimal VND_TO_USD_RATE = 25000m;

        public PayPalController(
            AppDbContext context,
            PayPalService payPalService,
            ILogger<PayPalController> logger)
        {
            _context = context;
            _payPalService = payPalService;
            _logger = logger;
        }

        [HttpPost("create-order")]
        public async Task<ActionResult<PayPalOrderResponse>> CreatePayPalOrder([FromBody] OrderDto orderDto)
        {
            if (orderDto.PaymentMethodId != 3)
            {
                return BadRequest(new { Message = "Invalid payment method. Only PayPal is accepted." });
            }

            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Validate and create order in database
                var order = await CreateDatabaseOrder(orderDto);
                if (order is null)
                {
                    return BadRequest(new { Message = "Could not create order. Please check your request." });
                }

                // Convert VND to USD (tối thiểu $0.01 USD)
                decimal amountInUSD = Math.Max(order.TotalAmount / VND_TO_USD_RATE, 0.01m);
                amountInUSD = Math.Round(amountInUSD, 2);

                // Create PayPal order
                var payPalOrderId = await _payPalService.CreateOrder(
                    amountInUSD,
                    "USD",
                    $"SHN{order.Id}",
                    $"{Request.Scheme}://{Request.Host}/api/paypal/capture-order?orderId={order.Id}",
                    $"{Request.Scheme}://{Request.Host}/payment-canceled?orderId={order.Id}"
                );

                if (string.IsNullOrEmpty(payPalOrderId))
                {
                    throw new Exception("Failed to create PayPal order");
                }

                // Update order with PayPal information
                order.PayPalOrderId = payPalOrderId;
                order.PayPalPaymentUrl = $"https://www.sandbox.paypal.com/checkoutnow?token={payPalOrderId}";
                await _context.SaveChangesAsync();

                await transaction.CommitAsync();

                return Ok(new PayPalOrderResponse
                {
                    OrderId = order.Id,
                    PayPalOrderId = payPalOrderId,
                    ApprovalUrl = order.PayPalPaymentUrl,
                    TotalAmount = amountInUSD,
                    Currency = "USD"
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Failed to create PayPal order");
                return StatusCode(500, new
                {
                    Error = "Payment processing failed",
                    Details = ex.Message
                });
            }
        }

        private async Task<Models.Order?> CreateDatabaseOrder(OrderDto orderDto)
        {
            try
            {
                // Validate user
                if (orderDto.UserId.HasValue &&
                    !await _context.Users.AnyAsync(u => u.Id == orderDto.UserId.Value))
                {
                    return null;
                }

                // Validate product variants
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(pv => pv.Product)
                        .FirstOrDefaultAsync(pv => pv.Id == item.ProductVariantId);

                    if (variant is null || variant.StockQuantity < item.Quantity)
                    {
                        return null;
                    }
                }

                // Create order
                var order = new Models.Order
                {
                    UserId = orderDto.UserId,
                    OrderDate = DateTime.UtcNow,
                    TotalAmount = orderDto.TotalAmount,
                    OrderStatus = "WaitingForPayment",
                    AddressId = orderDto.AddressId,
                    PaymentMethodId = 3, // PayPal
                    VoucherId = orderDto.VoucherId,
                    OrderItems = orderDto.OrderItems.Select(oi => new OrderItem
                    {
                        ProductVariantId = oi.ProductVariantId,
                        Quantity = oi.Quantity,
                        Price = oi.Price
                    }).ToList()
                };

                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // Update stock
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    if (variant is not null)
                    {
                        variant.StockQuantity -= item.Quantity;
                    }
                }
                await _context.SaveChangesAsync();

                return order;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create order in database");
                return null;
            }
        }

        [HttpGet("capture-order")]
        public async Task<IActionResult> CaptureOrder([FromQuery] string token, [FromQuery] int orderId)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var order = await _context.Orders.FindAsync(orderId);
                if (order is null || order.PayPalOrderId != token)
                {
                    return NotFound(new { Message = "Order not found or invalid PayPal token" });
                }

                var captureResult = await _payPalService.CaptureOrder(token);

                if (!captureResult.Success)
                {
                    order.OrderStatus = "PaymentFailed";
                    await _context.SaveChangesAsync();
                    return Redirect($"{Request.Scheme}://{Request.Host}/payment-failed?orderId={order.Id}");
                }

                // Update order status
                order.OrderStatus = "Paid";
                order.PayPalTransactionId = captureResult.TransactionId;
                order.PayPalResponse = captureResult.RawResponse;

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Redirect($"{Request.Scheme}://{Request.Host}/payment-success?orderId={order.Id}");
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, $"Failed to capture PayPal payment for order {orderId}");
                return Redirect($"{Request.Scheme}://{Request.Host}/payment-error?message={Uri.EscapeDataString(ex.Message)}");
            }
        }
    }

    public class PayPalOrderResponse
    {
        public int OrderId { get; set; }
        public string PayPalOrderId { get; set; } = null!;
        public string ApprovalUrl { get; set; } = null!;
        public decimal TotalAmount { get; set; }
        public string Currency { get; set; } = null!;
    }
}
```

### Controllers\ProductsController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class ProductsController : ControllerBase
{
    private readonly AppDbContext _context;

    public ProductsController(AppDbContext context)
    {
        _context = context;
    }

    // Lấy danh sách sản phẩm (có hỗ trợ lọc theo danh mục)
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Product>>> GetProducts([FromQuery] int? categoryId = null)
    {
        var query = _context.Products
            .Include(p => p.Images)
            .Include(p => p.Variants)
            .Include(p => p.Category)
            .Include(p => p.Brand)
            .AsQueryable();

        if (categoryId.HasValue)
        {
            query = query.Where(p => p.CategoryId == categoryId.Value);
        }

        return await query.ToListAsync();
    }

    //Lấy thông tin chi tiết sản phẩm theo ID
    [HttpGet("{id}")]
    public async Task<ActionResult<Product>> GetProduct(int id)
    {
        var product = await _context.Products
            .Include(p => p.Images)
            .Include(p => p.Variants)
            .Include(p => p.Category)
            .Include(p => p.Brand)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (product == null)
        {
            return NotFound();
        }

        return product;
    }

    // Thêm sản phẩm mới
    [HttpPost]
    public async Task<ActionResult<Product>> PostProduct([FromBody] ProductDto productDto)
    {
        if (productDto == null)
            return BadRequest("Dữ liệu sản phẩm không hợp lệ.");

        if (string.IsNullOrWhiteSpace(productDto.Name) || productDto.CategoryId <= 0 || productDto.BrandId <= 0)
            return BadRequest("Tên, danh mục hoặc thương hiệu không hợp lệ.");

        var product = new Product
        {
            Name = productDto.Name,
            Description = productDto.Description,
            CategoryId = productDto.CategoryId,
            BrandId = productDto.BrandId,
            Images = productDto.Images?.Select(img => new ProductImage
            {
                ImageUrl = img.ImageUrl,
                IsPrimary = img.IsPrimary
            }).ToList() ?? new List<ProductImage>(),
            Variants = productDto.Variants?.Select(v => new ProductVariant
            {
                Color = v.Color,
                Storage = v.Storage,
                Price = v.Price,
                DiscountPrice = v.DiscountPrice,
                StockQuantity = v.StockQuantity,
                FlashSaleStart = v.FlashSaleStart,
                FlashSaleEnd = v.FlashSaleEnd
            }).ToList() ?? new List<ProductVariant>()
        };

        _context.Products.Add(product);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, product);
    }

    // Cập nhật sản phẩm
    [HttpPut("{id}")]
    public async Task<IActionResult> PutProduct(int id, [FromBody] ProductDto productDto)
    {
        if (productDto == null || id <= 0)
            return BadRequest("Dữ liệu sản phẩm không hợp lệ.");

        var existingProduct = await _context.Products
            .Include(p => p.Images)
            .Include(p => p.Variants)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (existingProduct == null)
            return NotFound("Sản phẩm không tồn tại.");

        existingProduct.Name = productDto.Name;
        existingProduct.Description = productDto.Description;
        existingProduct.CategoryId = productDto.CategoryId;
        existingProduct.BrandId = productDto.BrandId;

        existingProduct.Images = productDto.Images?.Select(img => new ProductImage
        {
            ImageUrl = img.ImageUrl,
            IsPrimary = img.IsPrimary
        }).ToList() ?? new List<ProductImage>();

        existingProduct.Variants = productDto.Variants?.Select(v => new ProductVariant
        {
            Color = v.Color,
            Storage = v.Storage,
            Price = v.Price,
            DiscountPrice = v.DiscountPrice,
            StockQuantity = v.StockQuantity,
            FlashSaleStart = v.FlashSaleStart,
            FlashSaleEnd = v.FlashSaleEnd
        }).ToList() ?? new List<ProductVariant>();

        _context.Products.Update(existingProduct);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    // Xóa sản phẩm
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProduct(int id)
    {
        var product = await _context.Products
            .Include(p => p.Images)
            .Include(p => p.Variants)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (product == null)
        {
            return NotFound();
        }

        _context.Products.Remove(product);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    // Lấy danh sách sản phẩm liên quan theo thương hiệu (brand)
    [HttpGet("related-by-brand/{brandId}/{currentProductId}")]
    public async Task<ActionResult<IEnumerable<Product>>> GetRelatedProductsByBrand(int brandId, int currentProductId)
    {
        var relatedProducts = await _context.Products
            .Where(p => p.BrandId == brandId && p.Id != currentProductId)
            .Include(p => p.Images)
            .ToListAsync();

        return Ok(relatedProducts);
    }
    // API lấy danh sách biến thể (màu sắc + dung lượng + số lượng tồn) của sản phẩm
    [HttpGet("{id}/variants")]
    public async Task<ActionResult<IEnumerable<object>>> GetProductVariants(int id)
    {
        var product = await _context.Products
            .Include(p => p.Variants)
            .FirstOrDefaultAsync(p => p.Id == id);

        if (product == null)
        {
            return NotFound("Sản phẩm không tồn tại.");
        }

        var variants = product.Variants
            .Select(v => new
            {
                v.Color,
                v.Storage,
                v.StockQuantity
            })
            .ToList();

        return Ok(variants);
    }
    // Lấy tổng số sản phẩm
    [HttpGet("count")]
    public async Task<ActionResult<int>> GetProductCount()
    {
        int totalProducts = await _context.Products.CountAsync();
        return Ok(totalProducts);
    }

    [HttpGet("search")]
    public async Task<ActionResult<IEnumerable<Product>>> SearchProducts([FromQuery] string keyword)
    {
        if (string.IsNullOrWhiteSpace(keyword))
        {
            return BadRequest("Vui lòng nhập từ khóa tìm kiếm.");
        }

        var products = await _context.Products
            .Include(p => p.Images)
            .Include(p => p.Category)
            .Include(p => p.Brand)
            .Where(p =>
                p.Name.Contains(keyword) ||
                p.Description.Contains(keyword) ||
                (p.Category != null && p.Category.Name.Contains(keyword)) ||
                (p.Brand != null && p.Brand.Name.Contains(keyword))
            )
            .ToListAsync();

        if (products.Count == 0)
        {
            return NotFound("Không tìm thấy sản phẩm nào phù hợp.");
        }

        return Ok(products);
    }

    [HttpGet("low-stock")]
    public async Task<ActionResult<int>> GetLowStockProducts()
    {
        int lowStockThreshold = 20;

        var lowStockProducts = await _context.Products
            .Where(p => p.Variants.Sum(v => v.StockQuantity) <= lowStockThreshold) // Sửa logic ở đây
            .CountAsync();

        return Ok(lowStockProducts);
    }

    [HttpGet("by-category")]
    public async Task<ActionResult> GetProductCountByCategory()
    {
        var categoryCounts = await _context.Products
            .GroupBy(p => p.Category.Name)
            .Select(g => new { Category = g.Key, Count = g.Count() })
            .ToListAsync();

        return Ok(categoryCounts);
    }
    // Lấy brand có số lượng sản phẩm nhiều nhất
    [HttpGet("by-brand")]
    public async Task<ActionResult> GetProductCountByBrand()
    {
        var topBrand = await _context.Products
        .GroupBy(p => p.Brand.Name)
        .Select(g => new { Brand = g.Key, Count = g.Count() })
        .OrderByDescending(g => g.Count) // Sắp xếp giảm dần theo số lượng
        .FirstOrDefaultAsync(); // Lấy thương hiệu có số lượng cao nhất

        return Ok(topBrand);
    }

    // GET: api/Products/lowest-price
    [HttpGet("lowest-price")]
    public async Task<ActionResult<IEnumerable<Product>>> GetProductsWithLowestPrice()
    {
        var now = DateTime.UtcNow;

        var products = await _context.Products
            .Include(p => p.Images)
            .Include(p => p.Variants)
            .Include(p => p.Brand)  // Bao gồm thông tin Brand
            .Include(p => p.Category)  // Bao gồm thông tin Category
            .Where(p => p.Variants.Any())  // Chỉ lấy sản phẩm có ít nhất 1 variant
            .Select(p => new
            {
                Product = p,
                // Lấy giá thấp nhất (ưu tiên giá khuyến mãi nếu có)
                MinPrice = p.Variants.Min(v =>
                    v.FlashSaleStart <= now && now <= v.FlashSaleEnd
                        ? v.DiscountPrice ?? v.Price
                        : v.Price)
            })
            .OrderBy(x => x.MinPrice)  // Sắp xếp theo giá thấp nhất
            .Take(10)  // Lấy 10 sản phẩm
            .Select(x => x.Product)  // Chỉ lấy thông tin Product
            .ToListAsync();

        return Ok(products);
    }

    // Lấy thông tin sản phẩm và hình ảnh dựa trên variantId
    [HttpGet("by-variant/{variantId}")]
    public async Task<ActionResult<object>> GetProductByVariantId(int variantId)
    {
        // Tìm variant theo variantId và bao gồm thông tin sản phẩm và hình ảnh
        var variant = await _context.ProductVariants
            .Include(v => v.Product)
                .ThenInclude(p => p.Images)
            .Include(v => v.Product)
                .ThenInclude(p => p.Category)
            .Include(v => v.Product)
                .ThenInclude(p => p.Brand)
            .FirstOrDefaultAsync(v => v.Id == variantId);

        if (variant == null)
        {
            return NotFound("Không tìm thấy biến thể sản phẩm.");
        }

        // Tạo đối tượng trả về với thông tin sản phẩm và hình ảnh
        var result = new
        {
            Product = new
            {
                variant.Product.Id,
                variant.Product.Name,
                variant.Product.Description,
                Category = variant.Product.Category?.Name,
                Brand = variant.Product.Brand?.Name
            },
            Variant = new
            {
                variant.Id,
                variant.Color,
                variant.Storage,
                variant.Price,
                variant.DiscountPrice,
                variant.StockQuantity
            },
            Images = variant.Product.Images.Select(img => new
            {
                img.Id,
                img.ImageUrl,
                img.IsPrimary
            }).ToList()
        };

        return Ok(result);
    }
}

```

### Controllers\ReviewsController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class ReviewController : ControllerBase
{
    private readonly AppDbContext _context;

    public ReviewController(AppDbContext context)
    {
        _context = context;
    }

    // 📌 Lấy danh sách đánh giá của một sản phẩm
    [HttpGet("product/{productVariantId}")]
    public async Task<ActionResult<IEnumerable<Review>>> GetReviewsByProduct(int productVariantId)
    {
        var reviews = await _context.Reviews
            .Where(r => r.ProductVariantId == productVariantId)
            .Include(r => r.User)
            .OrderByDescending(r => r.CreatedAt)
            .ToListAsync();

        return Ok(reviews);
    }

    // 📌 Lấy trung bình đánh giá của sản phẩm
    [HttpGet("product/{productVariantId}/average-rating")]
    public async Task<ActionResult<double>> GetAverageRating(int productVariantId)
    {
        var averageRating = await _context.Reviews
            .Where(r => r.ProductVariantId == productVariantId)
            .AverageAsync(r => (double?)r.Rating) ?? 0;

        return Ok(averageRating);
    }

    // 📌 Thêm đánh giá mới
    [HttpPost]
    public async Task<ActionResult<Review>> AddReview([FromBody] Review reviewDto)
    {
        if (reviewDto == null || reviewDto.Rating < 1 || reviewDto.Rating > 5)
            return BadRequest("Dữ liệu đánh giá không hợp lệ.");

        var review = new Review
        {
            ProductVariantId = reviewDto.ProductVariantId,
            UserId = reviewDto.UserId,
            Rating = reviewDto.Rating,
            Comment = reviewDto.Comment,
            CreatedAt = DateTime.UtcNow
        };

        _context.Reviews.Add(review);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetReviewsByProduct), new { productVariantId = review.ProductVariantId }, review);
    }

    // 📌 Chỉnh sửa đánh giá
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateReview(int id, [FromBody] Review reviewDto)
    {
        if (reviewDto == null)
            return BadRequest("Dữ liệu đánh giá không hợp lệ.");

        var existingReview = await _context.Reviews.FindAsync(id);
        if (existingReview == null)
            return NotFound("Không tìm thấy đánh giá.");

        existingReview.Rating = reviewDto.Rating;
        existingReview.Comment = reviewDto.Comment;

        _context.Reviews.Update(existingReview);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    // 📌 Xóa đánh giá
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteReview(int id)
    {
        var review = await _context.Reviews.FindAsync(id);
        if (review == null)
            return NotFound("Không tìm thấy đánh giá.");

        _context.Reviews.Remove(review);
        await _context.SaveChangesAsync();

        return NoContent();
    }
}

```

### Controllers\RoleController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/roles")]
    public class RoleController : ControllerBase
    {
        private readonly AppDbContext _context;

        public RoleController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách vai trò
        [HttpGet]
        public async Task<IActionResult> GetRoles()
        {
            var roles = await _context.Roles.ToListAsync();
            return Ok(roles);
        }

        // Thêm vai trò mới
        [HttpPost]
        public async Task<IActionResult> AddRole([FromBody] Role role)
        {
            if (string.IsNullOrWhiteSpace(role.Name))
            {
                return BadRequest("Tên vai trò không được để trống.");
            }

            _context.Roles.Add(role);
            await _context.SaveChangesAsync();
            return Ok(role);
        }

        // Chỉnh sửa vai trò
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateRole(int id, [FromBody] Role updatedRole)
        {
            if (string.IsNullOrWhiteSpace(updatedRole.Name))
            {
                return BadRequest("Tên vai trò không được để trống.");
            }

            var existingRole = await _context.Roles.FirstOrDefaultAsync(r => r.Id == id);
            if (existingRole == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            existingRole.Name = updatedRole.Name;
            await _context.SaveChangesAsync();

            return Ok(existingRole);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRole(int id)
        {
            // Tìm vai trò theo Id
            var role = await _context.Roles.Include(r => r.Users).FirstOrDefaultAsync(r => r.Id == id);
            if (role == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            // Kiểm tra nếu vai trò đang được sử dụng bởi bất kỳ người dùng nào
            if (role.Users.Any())
            {
                return BadRequest("Không thể xóa vai trò vì đang được sử dụng bởi người dùng.");
            }

            // Xóa vai trò
            _context.Roles.Remove(role);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Vai trò đã được xóa thành công." });
        }
    }
}
```

### Controllers\SearchController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models.DTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SearchController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly ILogger<SearchController> _logger;

        public SearchController(AppDbContext context, ILogger<SearchController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// Tìm kiếm tổng hợp sản phẩm, danh mục và thương hiệu
        /// </summary>
        /// <param name="query">Từ khóa tìm kiếm</param>
        /// <param name="limit">Số lượng kết quả tối đa cho mỗi loại (mặc định: 3)</param>
        /// <returns>Kết quả tìm kiếm gồm sản phẩm, danh mục và thương hiệu</returns>
        [HttpGet]
        public async Task<ActionResult<SearchResultDto>> Search(
            [FromQuery] string query,
            [FromQuery] int limit = 3)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(query))
                {
                    return Ok(new SearchResultDto()); // Trả về kết quả rỗng nếu query trống
                }

                var normalizedQuery = query.Trim().ToLower();
                var result = new SearchResultDto();

                // Tìm kiếm sản phẩm
                result.Products = await SearchProducts(normalizedQuery, limit);

                // Tìm kiếm danh mục
                result.Categories = await SearchCategories(normalizedQuery, limit);

                // Tìm kiếm thương hiệu
                result.Brands = await SearchBrands(normalizedQuery, limit);

                result.TotalResults = result.Products.Count + result.Categories.Count + result.Brands.Count;

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi thực hiện tìm kiếm");
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi tìm kiếm" });
            }
        }

        private async Task<List<SearchProductDto>> SearchProducts(string query, int limit)
        {
            return await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Where(p => p.Name.ToLower().Contains(query) ||
                           p.Description.ToLower().Contains(query))
                .OrderBy(p => p.Name)
                .Take(limit)
                .Select(p => new SearchProductDto
                {
                    Id = p.Id,
                    Name = p.Name,
                    ImageUrl = p.Images.FirstOrDefault(i => i.IsPrimary).ImageUrl
                             ?? p.Images.FirstOrDefault().ImageUrl
                             ?? "/images/default-product.png",
                    Price = p.Variants.Min(v => v.Price)
                })
                .ToListAsync();
        }

        private async Task<List<SearchCategoryDto>> SearchCategories(string query, int limit)
        {
            return await _context.Categories
                .Where(c => c.Name.ToLower().Contains(query))
                .OrderBy(c => c.Name)
                .Take(limit)
                .Select(c => new SearchCategoryDto
                {
                    Id = c.Id,
                    Name = c.Name
                })
                .ToListAsync();
        }

        private async Task<List<SearchBrandDto>> SearchBrands(string query, int limit)
        {
            return await _context.Brands
                .Where(b => b.Name.ToLower().Contains(query))
                .OrderBy(b => b.Name)
                .Take(limit)
                .Select(b => new SearchBrandDto
                {
                    Id = b.Id,
                    Name = b.Name,
                    LogoUrl = b.Logo ?? "/images/default-brand.png"
                })
                .ToListAsync();
        }

        /// <summary>
        /// API tìm kiếm nâng cao với phân trang
        /// </summary>
        [HttpGet("advanced")]
        public async Task<ActionResult<SearchResultDto>> AdvancedSearch(
            [FromQuery] string query,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(query))
                {
                    return Ok(new SearchResultDto());
                }

                var normalizedQuery = query.Trim().ToLower();
                var result = new SearchResultDto
                {
                    Page = page,
                    PageSize = pageSize
                };

                // Tìm kiếm sản phẩm với phân trang
                var productQuery = _context.Products
                    .Include(p => p.Images)
                    .Where(p => p.Name.ToLower().Contains(normalizedQuery) ||
                               p.Description.ToLower().Contains(normalizedQuery));

                result.Products = await productQuery
                    .OrderBy(p => p.Name)
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .Select(p => new SearchProductDto
                    {
                        Id = p.Id,
                        Name = p.Name,
                        ImageUrl = p.Images.FirstOrDefault().ImageUrl,
                        Price = p.Variants.Min(v => v.Price)
                    })
                    .ToListAsync();

                // Đếm tổng số sản phẩm
                var totalProducts = await productQuery.CountAsync();
                result.TotalResults = totalProducts;

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi thực hiện tìm kiếm nâng cao");
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi tìm kiếm" });
            }
        }
    }
}
```

### Controllers\SpecificationsController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SpecificationsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public SpecificationsController(AppDbContext context)
        {
            _context = context;
        }

        #region Phone Specifications
        // POST: api/Specifications/PhoneSpecifications
        [HttpPost("PhoneSpecifications")]
        public async Task<ActionResult<PhoneSpecification>> CreatePhoneSpecification([FromBody] PhoneSpecificationDto specDto)
        {
            var product = await _context.Products.FindAsync(specDto.ProductId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var phoneSpec = new PhoneSpecification
            {
                ProductId = specDto.ProductId,
                Product = product,
                ScreenSize = specDto.ScreenSize,
                Resolution = specDto.Resolution,
                ScreenType = specDto.ScreenType,
                Weight = specDto.Weight,
                Material = specDto.Material,
                CPUModel = specDto.CPUModel,
                CPUCores = specDto.CPUCores,
                RAM = specDto.RAM,
                InternalStorage = specDto.InternalStorage,
                FrontCamera = specDto.FrontCamera,
                RearCamera = specDto.RearCamera,
                BatteryCapacity = specDto.BatteryCapacity,
                SupportsNFC = specDto.SupportsNFC
            };

            _context.PhoneSpecifications.Add(phoneSpec);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetPhoneSpecification), new { id = phoneSpec.Id }, phoneSpec);
        }

        // GET: api/Specifications/PhoneSpecifications/{id}
        [HttpGet("PhoneSpecifications/{id}")]
        public async Task<ActionResult<PhoneSpecification>> GetPhoneSpecification(int id)
        {
            var spec = await _context.PhoneSpecifications.FindAsync(id);
            if (spec == null) return NotFound();
            return spec;
        }

        // PUT: api/Specifications/PhoneSpecifications/{id}
        [HttpPut("PhoneSpecifications/{id}")]
        public async Task<IActionResult> UpdatePhoneSpecification(int id, [FromBody] PhoneSpecificationDto specDto)
        {
            var existingSpec = await _context.PhoneSpecifications.FindAsync(id);
            if (existingSpec == null)
            {
                return NotFound();
            }

            // Cập nhật từng thuộc tính
            existingSpec.ScreenSize = specDto.ScreenSize;
            existingSpec.Resolution = specDto.Resolution;
            existingSpec.ScreenType = specDto.ScreenType;
            existingSpec.Weight = specDto.Weight;
            existingSpec.Material = specDto.Material;
            existingSpec.CPUModel = specDto.CPUModel;
            existingSpec.CPUCores = specDto.CPUCores;
            existingSpec.RAM = specDto.RAM;
            existingSpec.InternalStorage = specDto.InternalStorage;
            existingSpec.FrontCamera = specDto.FrontCamera;
            existingSpec.RearCamera = specDto.RearCamera;
            existingSpec.BatteryCapacity = specDto.BatteryCapacity;
            existingSpec.SupportsNFC = specDto.SupportsNFC;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PhoneSpecificationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // PATCH: api/Specifications/PhoneSpecifications/{id}
        [HttpPatch("PhoneSpecifications/{id}")]
        public async Task<IActionResult> PartialUpdatePhoneSpecification(int id, [FromBody] Dictionary<string, object> patchDoc)
        {
            var existingSpec = await _context.PhoneSpecifications.FindAsync(id);
            if (existingSpec == null)
            {
                return NotFound();
            }

            foreach (var item in patchDoc)
            {
                var property = typeof(PhoneSpecification).GetProperty(item.Key);
                if (property != null && property.CanWrite)
                {
                    property.SetValue(existingSpec, Convert.ChangeType(item.Value, property.PropertyType));
                }
            }

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PhoneSpecificationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Specifications/PhoneSpecifications/{id}
        [HttpDelete("PhoneSpecifications/{id}")]
        public async Task<IActionResult> DeletePhoneSpecification(int id)
        {
            var phoneSpec = await _context.PhoneSpecifications.FindAsync(id);
            if (phoneSpec == null)
            {
                return NotFound();
            }

            _context.PhoneSpecifications.Remove(phoneSpec);
            await _context.SaveChangesAsync();

            return NoContent();
        }
        private bool PhoneSpecificationExists(int id)
        {
            return _context.PhoneSpecifications.Any(e => e.Id == id);
        }
        #endregion

        #region Laptop Specifications
        // POST: api/Specifications/LaptopSpecifications
        [HttpPost("LaptopSpecifications")]
        public async Task<ActionResult<LaptopSpecification>> CreateLaptopSpecification([FromBody] LaptopSpecificationDto specDto)
        {
            var product = await _context.Products.FindAsync(specDto.ProductId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var laptopSpec = new LaptopSpecification
            {
                ProductId = specDto.ProductId,
                Product = product,
                Weight = specDto.Weight,
                Material = specDto.Material,
                CPUType = specDto.CPUType,
                CPUNumberOfCores = specDto.CPUNumberOfCores,
                RAM = specDto.RAM,
                MaxRAMSupport = specDto.MaxRAMSupport,
                SSDStorage = specDto.SSDStorage,
                ScreenSize = specDto.ScreenSize,
                Resolution = specDto.Resolution,
                RefreshRate = specDto.RefreshRate,
                SupportsTouch = specDto.SupportsTouch
            };

            _context.LaptopSpecifications.Add(laptopSpec);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetLaptopSpecification), new { id = laptopSpec.Id }, laptopSpec);
        }

        // GET: api/Specifications/LaptopSpecifications/{id}
        [HttpGet("LaptopSpecifications/{id}")]
        public async Task<ActionResult<LaptopSpecification>> GetLaptopSpecification(int id)
        {
            var spec = await _context.LaptopSpecifications.FindAsync(id);
            if (spec == null) return NotFound();
            return spec;
        }

        // PUT: api/Specifications/LaptopSpecifications/{id}
        [HttpPut("LaptopSpecifications/{id}")]
        public async Task<IActionResult> UpdateLaptopSpecification(int id, [FromBody] LaptopSpecificationDto specDto)
        {
            var existingSpec = await _context.LaptopSpecifications.FindAsync(id);
            if (existingSpec == null)
            {
                return NotFound();
            }

            existingSpec.Weight = specDto.Weight;
            existingSpec.Material = specDto.Material;
            existingSpec.CPUType = specDto.CPUType;
            existingSpec.CPUNumberOfCores = specDto.CPUNumberOfCores;
            existingSpec.RAM = specDto.RAM;
            existingSpec.MaxRAMSupport = specDto.MaxRAMSupport;
            existingSpec.SSDStorage = specDto.SSDStorage;
            existingSpec.ScreenSize = specDto.ScreenSize;
            existingSpec.Resolution = specDto.Resolution;
            existingSpec.RefreshRate = specDto.RefreshRate;
            existingSpec.SupportsTouch = specDto.SupportsTouch;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!LaptopSpecificationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Specifications/LaptopSpecifications/{id}
        [HttpDelete("LaptopSpecifications/{id}")]
        public async Task<IActionResult> DeleteLaptopSpecification(int id)
        {
            var laptopSpec = await _context.LaptopSpecifications.FindAsync(id);
            if (laptopSpec == null)
            {
                return NotFound();
            }

            _context.LaptopSpecifications.Remove(laptopSpec);
            await _context.SaveChangesAsync();

            return NoContent();
        }
        private bool LaptopSpecificationExists(int id)
        {
            return _context.LaptopSpecifications.Any(e => e.Id == id);
        }
        #endregion

        #region Headphone Specifications
        // POST: api/Specifications/HeadphoneSpecifications
        [HttpPost("HeadphoneSpecifications")]
        public async Task<ActionResult<HeadphoneSpecification>> CreateHeadphoneSpecification([FromBody] HeadphoneSpecificationDto specDto)
        {
            var product = await _context.Products.FindAsync(specDto.ProductId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var headphoneSpec = new HeadphoneSpecification
            {
                ProductId = specDto.ProductId,
                Product = product,
                Weight = specDto.Weight,
                Type = specDto.Type,
                ConnectionType = specDto.ConnectionType,
                Port = specDto.Port
            };

            _context.HeadphoneSpecifications.Add(headphoneSpec);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetHeadphoneSpecification), new { id = headphoneSpec.Id }, headphoneSpec);
        }

        // GET: api/Specifications/HeadphoneSpecifications/{id}
        [HttpGet("HeadphoneSpecifications/{id}")]
        public async Task<ActionResult<HeadphoneSpecification>> GetHeadphoneSpecification(int id)
        {
            var spec = await _context.HeadphoneSpecifications.FindAsync(id);
            if (spec == null) return NotFound();
            return spec;
        }

        // PUT: api/Specifications/HeadphoneSpecifications/{id}
        [HttpPut("HeadphoneSpecifications/{id}")]
        public async Task<IActionResult> UpdateHeadphoneSpecification(int id, [FromBody] HeadphoneSpecificationDto specDto)
        {
            var existingSpec = await _context.HeadphoneSpecifications.FindAsync(id);
            if (existingSpec == null)
            {
                return NotFound();
            }

            existingSpec.Weight = specDto.Weight;
            existingSpec.Type = specDto.Type;
            existingSpec.ConnectionType = specDto.ConnectionType;
            existingSpec.Port = specDto.Port;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!HeadphoneSpecificationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Specifications/HeadphoneSpecifications/{id}
        [HttpDelete("HeadphoneSpecifications/{id}")]
        public async Task<IActionResult> DeleteHeadphoneSpecification(int id)
        {
            var headphoneSpec = await _context.HeadphoneSpecifications.FindAsync(id);
            if (headphoneSpec == null)
            {
                return NotFound();
            }

            _context.HeadphoneSpecifications.Remove(headphoneSpec);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool HeadphoneSpecificationExists(int id)
        {
            return _context.HeadphoneSpecifications.Any(e => e.Id == id);
        }
        #endregion

        // GET: api/Specifications/{endpoint}/product/{productId}
        [HttpGet("{endpoint}/product/{productId}")]
        public async Task<ActionResult> GetSpecificationByProduct(string endpoint, int productId)
        {
            switch (endpoint)
            {
                case "PhoneSpecifications":
                    var phoneSpec = await _context.PhoneSpecifications
                        .FirstOrDefaultAsync(s => s.ProductId == productId);
                    if (phoneSpec == null) return NotFound();
                    return Ok(phoneSpec);

                case "LaptopSpecifications":
                    var laptopSpec = await _context.LaptopSpecifications
                        .FirstOrDefaultAsync(s => s.ProductId == productId);
                    if (laptopSpec == null) return NotFound();
                    return Ok(laptopSpec);

                case "HeadphoneSpecifications":
                    var headphoneSpec = await _context.HeadphoneSpecifications
                        .FirstOrDefaultAsync(s => s.ProductId == productId);
                    if (headphoneSpec == null) return NotFound();
                    return Ok(headphoneSpec);

                default:
                    return BadRequest("Loại thông số không hợp lệ");
            }
        }
    }
}
```

### Controllers\UploadController.cs
```cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.IO;
using System.Threading.Tasks;

[Route("api/upload")]
[ApiController]
public class UploadController : ControllerBase
{
    private readonly string _uploadFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");


    [HttpPost]
    public async Task<IActionResult> UploadImage(IFormFile file)
    {
        if (file == null || file.Length == 0)
        {
            return BadRequest(new { message = "Không có file nào được tải lên!" });
        }

        string uniqueFileName = $"{DateTime.Now.Ticks}_{file.FileName}";
        string filePath = Path.Combine(_uploadFolder, uniqueFileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.CopyToAsync(stream);
        }

        string imageUrl = $"/{uniqueFileName}";
        return Ok(new { imageUrl });
    }
    /// <summary>
    /// Lấy danh sách tất cả ảnh đã tải lên
    /// </summary>
    [HttpGet]
    public IActionResult GetAllImages()
    {
        if (!Directory.Exists(_uploadFolder))
        {
            return NotFound(new { message = "Thư mục ảnh trống!" });
        }

        var files = Directory.GetFiles(_uploadFolder)
            .Select(Path.GetFileName)
.Select(fileName => new { imageUrl = $"/{fileName}" })
            .ToList();

        return Ok(files);
    }

    /// Xóa ảnh theo tên file
    [HttpDelete("{fileName}")]
    public IActionResult DeleteImage(string fileName)
    {
        string filePath = Path.Combine(_uploadFolder, fileName);

        if (!System.IO.File.Exists(filePath))
        {
            return NotFound(new { message = "Ảnh không tồn tại!" });
        }

        System.IO.File.Delete(filePath);
        return Ok(new { message = "Ảnh đã được xóa!" });
    }
    [HttpGet("get-image/{fileName}")]
    public IActionResult GetImage(string fileName)
    {
        var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", fileName);
        if (!System.IO.File.Exists(imagePath))
        {
            return NotFound();
        }
        return PhysicalFile(imagePath, "image/png");
    }
}

```

### Controllers\UserController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Threading.Tasks;
using System.Collections.Generic;
using SHN_Gear.DTOs;
using SHN_Gear.Services;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/users")]
    public class UserController : ControllerBase
    {
        private readonly AppDbContext _context;

        public UserController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách người dùng
        [HttpGet]
        public async Task<IActionResult> GetUsers()
        {
            var users = await _context.Users.Include(u => u.Role).ToListAsync();
            return Ok(users);
        }

        // Lấy thông tin người dùng theo Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUserById(int id)
        {
            var user = await _context.Users.Include(u => u.Role).FirstOrDefaultAsync(u => u.Id == id);

            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            return Ok(user);
        }

        [HttpPost]
        public async Task<IActionResult> AddUser([FromBody] UserDto userDto, [FromServices] UserService userService)
        {
            // Kiểm tra RoleId có tồn tại trong bảng Roles không
            var role = await _context.Roles.FindAsync(userDto.RoleId);
            if (role == null)
            {
                return BadRequest("Vai trò không tồn tại.");
            }

            // Kiểm tra email đã tồn tại chưa
            if (await _context.Users.AnyAsync(u => u.Email == userDto.Email))
            {
                return BadRequest("Email đã được sử dụng.");
            }

            // Mã hóa mật khẩu
            string hashedPassword = userService.HashPassword(userDto.Password);

            // Tạo đối tượng User từ UserDto
            var user = new User
            {
                FullName = userDto.FullName,
                Email = userDto.Email,
                PhoneNumber = userDto.PhoneNumber,
                Password = hashedPassword, // Lưu mật khẩu đã mã hóa
                RoleId = userDto.RoleId,
                CreatedAt = DateTime.UtcNow,
                IsActive = true

            };

            // Thêm người dùng mới vào cơ sở dữ liệu
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return Ok(user);
        }
        // Cập nhật thông tin người dùng (Admin)
        [HttpPut("{id}")]
        public async Task<IActionResult> AdminUpdateUser(int id, [FromBody] AdminUserUpdateDto userUpdateDto)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var role = await _context.Roles.FindAsync(userUpdateDto.RoleId);
            if (role == null)
            {
                return BadRequest("Vai trò không hợp lệ.");
            }

            user.FullName = userUpdateDto.FullName;
            user.Gender = userUpdateDto.Gender;
            user.PhoneNumber = userUpdateDto.PhoneNumber;
            user.Email = userUpdateDto.Email;
            user.DateOfBirth = userUpdateDto.DateOfBirth;
            user.RoleId = userUpdateDto.RoleId;
            user.IsActive = userUpdateDto.IsActive;

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Cập nhật thông tin người dùng thành công." });
        }

        [HttpPut("profile")]
        public async Task<IActionResult> UpdateProfile([FromBody] EditProfileDto dto)
        {
            // Lấy ID người dùng từ token
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized(new { Message = "Không xác thực được người dùng" });

            // Tìm người dùng trong database
            var user = await _context.Users.FindAsync(int.Parse(userId));
            if (user == null)
                return NotFound(new { Message = "Người dùng không tồn tại" });

            // Cập nhật thông tin
            user.FullName = dto.FullName;
            user.Email = dto.Email;
            user.PhoneNumber = dto.PhoneNumber;
            user.Gender = dto.Gender;
            user.DateOfBirth = dto.DateOfBirth;

            try
            {
                await _context.SaveChangesAsync();
                return Ok(new
                {
                    Message = "Cập nhật thông tin thành công",
                    User = new
                    {
                        user.FullName,
                        user.Email,
                        user.PhoneNumber,
                        user.Gender,
                        DateOfBirth = user.DateOfBirth?.ToString("yyyy-MM-dd")
                    }
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi cập nhật", Error = ex.Message });
            }
        }

        // Cập nhật vai trò của người dùng
        [HttpPut("{id}/role")]
        public async Task<IActionResult> UpdateUserRole(int id, [FromBody] RoleUpdateDto roleUpdateDto)
        {
            if (roleUpdateDto == null || roleUpdateDto.RoleId <= 0)
            {
                return BadRequest("Dữ liệu vai trò không hợp lệ.");
            }

            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var role = await _context.Roles.FindAsync(roleUpdateDto.RoleId);
            if (role == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            user.RoleId = roleUpdateDto.RoleId;
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Vai trò người dùng đã được cập nhật thành công." });
        }

        [HttpGet("statistics")]
        public async Task<IActionResult> GetUserStatistics()
        {
            var totalUsers = await _context.Users.CountAsync(); // Tổng số người dùng

            var today = DateTime.UtcNow.Date;
            var newUsersToday = await _context.Users.CountAsync(u => u.CreatedAt.Date == today); // Người dùng mới hôm nay

            var activeUsers = await _context.Users.CountAsync(u => u.IsActive); // Người dùng đang hoạt động

            var oneMonthAgo = DateTime.UtcNow.AddMonths(-1);
            var usersLastMonth = await _context.Users.CountAsync(u => u.CreatedAt <= oneMonthAgo); // Người dùng từ tháng trước
                                                                                                   // Tính tỷ lệ duy trì
            double retentionRate = usersLastMonth > 0 ? (double)activeUsers / usersLastMonth * 100 : 0;


            return Ok(new
            {
                TotalUsers = totalUsers,
                NewUsersToday = newUsersToday,
                ActiveUsers = activeUsers,
                RetentionRate = retentionRate.ToString("0.00") + "%"
            });
        }
        [HttpGet("growth")]
        public async Task<IActionResult> GetUserGrowth()
        {
            var userGrowth = await _context.Users
                .GroupBy(u => new { u.CreatedAt.Year, u.CreatedAt.Month })
                .Select(g => new
                {
                    Month = g.Key.Month,
                    Year = g.Key.Year,
                    Users = g.Count()
                })
                .OrderBy(g => g.Year)
                .ThenBy(g => g.Month)
                .ToListAsync();

            // Chuyển đổi dữ liệu thành format cần thiết
            var formattedData = userGrowth.Select(g => new
            {
                Month = new DateTime(g.Year, g.Month, 1).ToString("MMM"), // "Jan", "Feb", ...
                Users = g.Users
            });

            return Ok(formattedData);
        }
        //api lấy role của người dùng hiện tại
        // [HttpGet("current/role")]
        // [Authorize]
        // public async Task<IActionResult> GetCurrentUserRole()
        // {
        //     try
        //     {
        //         // Lấy UserId từ claims trong token
        //         var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);

        //         if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
        //         {
        //             return Unauthorized(new { Message = "Token không hợp lệ - Không xác định được người dùng" });
        //         }

        //         // Lấy thông tin user và role từ database
        //         var userWithRole = await _context.Users
        //             .Where(u => u.Id == userId)
        //             .Select(u => new
        //             {
        //                 UserId = u.Id,
        //                 RoleId = u.Role.Id,
        //                 RoleName = u.Role.Name,
        //                 // Thêm các thông tin cần thiết khác
        //                 Email = u.Email,
        //                 IsActive = u.IsActive
        //             })
        //             .FirstOrDefaultAsync();

        //         if (userWithRole == null)
        //         {
        //             return NotFound(new { Message = "Không tìm thấy thông tin người dùng" });
        //         }

        //         // Tạo response object
        //         var response = new
        //         {
        //             userWithRole.UserId,
        //             userWithRole.Email,
        //             userWithRole.IsActive,
        //             Role = new
        //             {
        //                 userWithRole.RoleId,
        //                 userWithRole.RoleName
        //             },
        //             // Thêm thông tin từ token nếu cần
        //             Claims = new
        //             {
        //                 // Lấy trực tiếp từ claims hiện tại
        //                 RoleClaim = User.FindFirst(ClaimTypes.Role)?.Value,
        //                 MicrosoftRoleClaim = User.FindFirst("http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value
        //             }
        //         };

        //         return Ok(response);
        //     }
        //     catch (Exception ex)
        //     {
        //         return StatusCode(500, new
        //         {
        //             Message = "Lỗi server khi lấy thông tin role",
        //             Error = ex.Message
        //         });
        //     }
        // }
    }
}
```

### Controllers\VoucherController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/vouchers")]
    public class VoucherController : ControllerBase
    {
        private readonly AppDbContext _context;

        public VoucherController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách tất cả các voucher
        [HttpGet]
        public async Task<IActionResult> GetAllVouchers()
        {
            var vouchers = await _context.Vouchers
                .Select(v => new VoucherDto
                {
                    Id = v.Id,
                    Code = v.Code,
                    DiscountAmount = v.DiscountAmount,
                    ExpiryDate = v.ExpiryDate,
                    IsActive = v.IsActive
                })
                .ToListAsync();

            return Ok(vouchers);
        }

        // Lấy thông tin chi tiết của một voucher
        [HttpGet("{id}")]
        public async Task<IActionResult> GetVoucherById(int id)
        {
            var voucher = await _context.Vouchers
                .Where(v => v.Id == id)
                .Select(v => new VoucherDto
                {
                    Id = v.Id,
                    Code = v.Code,
                    DiscountAmount = v.DiscountAmount,
                    ExpiryDate = v.ExpiryDate,
                    IsActive = v.IsActive
                })
                .FirstOrDefaultAsync();

            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            return Ok(voucher);
        }

        [HttpGet("code/{code}")]
        public async Task<IActionResult> GetVoucherByCode(string code)
        {
            var voucher = await _context.Vouchers.FirstOrDefaultAsync(v => v.Code == code);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            return Ok(new { id = voucher.Id });
        }

        // Thêm mới một voucher
        [HttpPost]
        public async Task<IActionResult> AddVoucher([FromBody] VoucherDto dto)
        {
            var voucher = new Voucher
            {
                Code = dto.Code,
                DiscountAmount = dto.DiscountAmount,
                ExpiryDate = dto.ExpiryDate,
                IsActive = dto.IsActive
            };

            _context.Vouchers.Add(voucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được thêm.", VoucherId = voucher.Id });
        }

        // Cập nhật thông tin của một voucher
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateVoucher(int id, [FromBody] VoucherDto dto)
        {
            var voucher = await _context.Vouchers.FindAsync(id);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            voucher.Code = dto.Code;
            voucher.DiscountAmount = dto.DiscountAmount;
            voucher.ExpiryDate = dto.ExpiryDate;
            voucher.IsActive = dto.IsActive;

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được cập nhật." });
        }

        // Xóa một voucher
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteVoucher(int id)
        {
            var voucher = await _context.Vouchers.FindAsync(id);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            _context.Vouchers.Remove(voucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được xóa." });
        }

        // Gán voucher cho người dùng
        [HttpPost("assign")]
        public async Task<IActionResult> AssignVoucherToUser([FromBody] UserVoucherDto dto)
        {
            var user = await _context.Users.FindAsync(dto.UserId);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var voucher = await _context.Vouchers.FindAsync(dto.VoucherId);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            var userVoucher = new UserVoucher
            {
                UserId = dto.UserId,
                VoucherId = dto.VoucherId,
                UsedAt = dto.UsedAt
            };

            _context.UserVouchers.Add(userVoucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được gán cho người dùng." });
        }

        [HttpPost("apply")]
        public async Task<IActionResult> ApplyVoucher([FromBody] ApplyVoucherDto dto)
        {
            // Kiểm tra voucher hợp lệ
            var voucher = await _context.Vouchers
                .FirstOrDefaultAsync(v => v.Code == dto.Code && v.IsActive && v.ExpiryDate >= DateTime.UtcNow);
            if (voucher == null)
            {
                return BadRequest("Voucher không hợp lệ hoặc đã hết hạn.");
            }

            // Kiểm tra xem voucher đã được gán cho người dùng nào chưa
            var userVoucher = await _context.UserVouchers
                .FirstOrDefaultAsync(uv => uv.VoucherId == voucher.Id);

            // Nếu voucher chưa được gán cho bất kỳ ai
            if (userVoucher == null)
            {
                return BadRequest("Voucher này chưa được gán cho người dùng nào.");
            }

            // Nếu voucher đã được gán, kiểm tra xem người dùng hiện tại có phải là chủ sở hữu không
            if (userVoucher.UserId != dto.UserId)
            {
                return BadRequest("Voucher này chỉ có thể được sử dụng bởi người dùng đã được gán.");
            }

            // Kiểm tra trạng thái IsUsed
            if (userVoucher.IsUsed)
            {
                return BadRequest("Voucher đã được sử dụng.");
            }

            // Nếu IsUsed = false và UserId khớp, cho phép áp dụng
            return Ok(new { discountAmount = voucher.DiscountAmount });
        }
    }
}
```

### Controllers\WeatherForecastController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;

namespace SHN_Gear.Controllers;

[ApiController]
[Route("[controller]")]
public class WeatherForecastController : ControllerBase
{
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private readonly ILogger<WeatherForecastController> _logger;

    public WeatherForecastController(ILogger<WeatherForecastController> logger)
    {
        _logger = logger;
    }

    [HttpGet]
    public IEnumerable<WeatherForecast> Get()
    {
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
        })
        .ToArray();
    }
}

```

### Data\AppDbContext.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;

namespace SHN_Gear.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // Định nghĩa các bảng
        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<PhoneSpecification> PhoneSpecifications { get; set; }
        public DbSet<LaptopSpecification> LaptopSpecifications { get; set; }
        public DbSet<HeadphoneSpecification> HeadphoneSpecifications { get; set; }
        public DbSet<ProductImage> ProductImages { get; set; }
        public DbSet<Cart> Carts { get; set; }
        public DbSet<CartItem> CartItems { get; set; }
        public DbSet<ProductVariant> ProductVariants { get; set; } // Thêm DbSet cho ProductVariant
        public DbSet<Category> Categories { get; set; } // Thêm DbSet cho Category
        public DbSet<Brand> Brands { get; set; } // Thêm DbSet cho Brand
        public DbSet<Order> Orders { get; set; } // Thêm DbSet cho Order
        public DbSet<OrderItem> OrderItems { get; set; } // Thêm DbSet cho OrderItem
        public DbSet<Address> Addresses { get; set; } // Thêm DbSet cho Address
        public DbSet<PaymentMethod> PaymentMethods { get; set; } // Thêm DbSet cho PaymentMethod
        public DbSet<Review> Reviews { get; set; } // Thêm DbSet cho Review
        public DbSet<Delivery> Deliveries { get; set; } // Thêm DbSet cho Delivery
        public DbSet<Voucher> Vouchers { get; set; }
        public DbSet<UserVoucher> UserVouchers { get; set; } // Thêm DbSet cho UserVoucher

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Seed dữ liệu mặc định cho Role
            modelBuilder.Entity<Role>().HasData(
                new Role { Id = 1, Name = "Admin" },
                new Role { Id = 2, Name = "VIP 1" },
                new Role { Id = 3, Name = "VIP 2" },
                new Role { Id = 4, Name = "VIP 3" }
            );
            // ✅ Seed dữ liệu mặc định cho PaymentMethod
            modelBuilder.Entity<PaymentMethod>().HasData(
                new PaymentMethod { Id = 1, Name = "Tiền Mặt", Description = "Thanh toán bằng tiền mặt" },
                new PaymentMethod { Id = 2, Name = "MoMo", Description = "Thanh toán bằng Momo" },
                new PaymentMethod { Id = 3, Name = "Paypal", Description = "Thanh toán bằng ví Paypal" }
            );
            // ✅ Thiết lập quan hệ Category - Product (1-N)
            modelBuilder.Entity<Product>()
                .HasOne(p => p.Category)
                .WithMany(c => c.Products)
                .HasForeignKey(p => p.CategoryId);

            // Thiết lập duy nhất cho số điện thoại (Không cho phép số trùng)
            modelBuilder.Entity<User>()
                .HasIndex(u => u.PhoneNumber)
                .IsUnique();

            // Specify the SQL Server column type for the Price property in ProductVariant
            modelBuilder.Entity<ProductVariant>()
                .Property(pv => pv.Price)
                .HasColumnType("decimal(18,2)");

            // Specify the SQL Server column type for the DiscountPrice property in ProductVariant
            modelBuilder.Entity<ProductVariant>()
                .Property(pv => pv.DiscountPrice)
                .HasPrecision(18, 2);

            modelBuilder.Entity<OrderItem>()
                .HasOne(oi => oi.Order)
                .WithMany(o => o.OrderItems)
                .OnDelete(DeleteBehavior.Cascade); // Xóa đơn hàng thì xóa cả các mặt hàng trong đơn hàng.

            // Thiết lập khóa chính cho bảng UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasKey(uv => new { uv.UserId, uv.VoucherId });

            // Thiết lập quan hệ giữa User và UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasOne(uv => uv.User)
                .WithMany(u => u.UserVouchers)
                .HasForeignKey(uv => uv.UserId);

            // Thiết lập quan hệ giữa Voucher và UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasOne(uv => uv.Voucher)
                .WithMany(v => v.UserVouchers)
                .HasForeignKey(uv => uv.VoucherId);

            // Thêm các quan hệ khác tương tự ở đây.
        }
    }
}

```

### DTOs\AccountDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class EmailDto
    {
        public string Email { get; set; } = string.Empty;
    }

    public class LoginDto
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class RegisterDto
    {
        public string FullName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }


    public class OtpRequestDto
    {
        public string Email { get; set; } = string.Empty;
    }


    public class EditProfileDto
    {

        public string FullName { get; set; } = string.Empty;


        public string Email { get; set; } = string.Empty;

        public string? PhoneNumber { get; set; }

        public string? Gender { get; set; }

        public DateTime? DateOfBirth { get; set; }
    }

}
```

### DTOs\AddressDTO.cs
```cs
namespace SHN_Gear.DTOs
{
    public class AddressDTO
    {
        public int Id { get; set; }
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string? AddressLine2 { get; set; }
        public string City { get; set; } = null!;
        public string? State { get; set; }
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }

    public class CreateAddressDTO
    {
        public int UserId { get; set; } // ✅ Đã sửa thành kiểu int
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string? AddressLine2 { get; set; }
        public string City { get; set; } = null!;
        public string? State { get; set; }
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }
}

```

### DTOs\AdminUserUpdateDto.cs
```cs
public class AdminUserUpdateDto
{
    public string FullName { get; set; } = string.Empty;
    public string? Gender { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public int RoleId { get; set; }
    public string PhoneNumber { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;

    public bool IsActive { get; set; } = true;
}

```

### DTOs\CartDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class CartDto
    {
        public int UserId { get; set; }
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }
    }

    public class CartItemSession
    {
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }

    }

}
```

### DTOs\CreateProductDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class CreateProductDto
    {
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public int CategoryId { get; set; }
        public int BrandId { get; set; }
        public List<IFormFile> Images { get; set; } = new();
    }
}

```

### DTOs\HeadphoneSpecificationDto.cs
```cs
namespace SHN_Gear
{
    public class HeadphoneSpecificationDto
    {
        public int ProductId { get; set; }
        public string Weight { get; set; } = null!;

        public string Type { get; set; } = null!; // Không dây, Chụp tai
        public string ConnectionType { get; set; } = null!;
        public string Port { get; set; } = null!;
    }

}
```

### DTOs\LaptopSpecificationDto.cs
```cs
namespace SHN_Gear{
     public class LaptopSpecificationDto
{
    public int ProductId { get; set; }
    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUType { get; set; } = null!;
    public int CPUNumberOfCores { get; set; }
    public string RAM { get; set; } = null!;
    public string MaxRAMSupport { get; set; } = null!;
    public string SSDStorage { get; set; } = null!;
    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string RefreshRate { get; set; } = null!;
    public bool SupportsTouch { get; set; }
}

}
```

### DTOs\LoyaltyStatusDto.cs
```cs
namespace SHN_Gear.DTOs
{
    // DTO cho thông tin trạng thái loyalty
    public class LoyaltyStatusDto
    {
        public string CurrentRank { get; set; } = string.Empty;
        public int CurrentPoints { get; set; }
        public int PointsNeededForNextRank { get; set; }
        public bool CanClaimVoucher { get; set; }
        public decimal VoucherValue { get; set; }
    }

    // DTO cho phản hồi khi claim voucher
    public class VoucherClaimResponseDto
    {
        public VoucherDto Voucher { get; set; } = new VoucherDto();
        public string Message { get; set; } = string.Empty;
    }

    // DTO mở rộng từ VoucherDto để bao gồm thông tin sử dụng
    public class UserVoucherDetailDto : VoucherDto
    {
        public DateTime UsedAt { get; set; }
        public bool IsUsed => UsedAt != DateTime.MinValue;
    }

    // DTO cho thông tin người dùng trong chương trình loyalty
    public class LoyaltyUserDto
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Points { get; set; }
        public string RoleName { get; set; } = string.Empty;
        public DateTime MemberSince { get; set; }
    }
}
```

### DTOs\OrderDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class OrderDto
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public DateTime OrderDate { get; set; } = DateTime.UtcNow;
        public decimal TotalAmount { get; set; }
        public string OrderStatus { get; set; } = "Pending";
        public int? AddressId { get; set; }
        public int PaymentMethodId { get; set; }
        public List<OrderItemDto> OrderItems { get; set; } = new List<OrderItemDto>();
        public int? VoucherId { get; set; }
    }

    public class OrderItemDto
    {
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
    public class UpdateStatusDto
    {
        public string NewStatus { get; set; }
    }
    public class UpdateOrderDto
    {
        public int? AddressId { get; set; }
        public List<OrderItemDto> OrderItems { get; set; } = new List<OrderItemDto>();
        public int? VoucherId { get; set; }
    }

}

```

### DTOs\PhoneSpecificationDto.cs
```cs
namespace SHN_Gear{
    public class PhoneSpecificationDto
{
    public int ProductId { get; set; }
    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string ScreenType { get; set; } = null!;
    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUModel { get; set; } = null!;
    public int CPUCores { get; set; }
    public string RAM { get; set; } = null!;
    public string InternalStorage { get; set; } = null!;
    public string FrontCamera { get; set; } = null!;
    public string RearCamera { get; set; } = null!;
    public string BatteryCapacity { get; set; } = null!;
    public bool SupportsNFC { get; set; }
}

}
```

### DTOs\ProductDto.cs
```cs
public class ProductDto
{
    public string Name { get; set; } = null!;
    public string Description { get; set; } = null!;
    public int CategoryId { get; set; }
    public int BrandId { get; set; }
    public List<ProductImageDto> Images { get; set; } = new();
    public List<ProductVariantDto> Variants { get; set; } = new();
}

public class ProductImageDto
{
    public string ImageUrl { get; set; } = null!;
    public bool IsPrimary { get; set; }
}

public class ProductVariantDto
{
    public string Color { get; set; } = null!;
    public string Storage { get; set; } = null!;
    public decimal Price { get; set; }
    public decimal? DiscountPrice { get; set; }
    public int StockQuantity { get; set; }
    public DateTime? FlashSaleStart { get; set; }
    public DateTime? FlashSaleEnd { get; set; }
}

```

### DTOs\SearchDto.cs
```cs
// Models/DTOs/SearchDto.cs
namespace SHN_Gear.Models.DTOs
{
    public class SearchResultDto
    {
        public List<SearchProductDto> Products { get; set; } = new List<SearchProductDto>();
        public List<SearchCategoryDto> Categories { get; set; } = new List<SearchCategoryDto>();
        public List<SearchBrandDto> Brands { get; set; } = new List<SearchBrandDto>();
        public int TotalResults { get; set; }
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 10;
    }

    public class SearchProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
    }

    public class SearchCategoryDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class SearchBrandDto
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string LogoUrl { get; set; }
    }
}
```

### DTOs\UploadResponseDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class UploadResponseDto
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public string Url { get; set; }
        public string PublicId { get; set; }
    }
}
```

### DTOs\UserDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class UserDto
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public int RoleId { get; set; }
    }
    public class RoleUpdateDto
    {
        public int RoleId { get; set; }
    }
    public class UserRoleDto
    {
        public int RoleId { get; set; }
        public string RoleName { get; set; } = string.Empty;
    }
}
```

### DTOs\VoucherDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class VoucherDto
    {
        public int Id { get; set; }
        public string Code { get; set; } = null!; // Mã voucher
        public decimal DiscountAmount { get; set; } // Số tiền giảm giá
        public DateTime ExpiryDate { get; set; } // Ngày hết hạn
        public bool IsActive { get; set; } = true; // Trạng thái hoạt động của voucher
    }
    public class UserVoucherDto
    {
        public int UserId { get; set; }
        public int VoucherId { get; set; }
        public DateTime UsedAt { get; set; } // Thời gian sử dụng voucher
    }
    public class ApplyVoucherDto
    {
        public string Code { get; set; } = null!;
        public int UserId { get; set; }
    }
}
```

### Migrations\20250330191225_AddPaypal.cs
```cs
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SHN_Gear.Migrations
{
    /// <inheritdoc />
    public partial class AddPaypal : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

```

### Migrations\20250330191225_AddPaypal.Designer.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250330191225_AddPaypal")]
    partial class AddPaypal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("HeadphoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUNumberOfCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSDStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsTouch")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LaptopSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsNFC")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Migrations\20250330191310_AddIsActiveToUser.cs
```cs
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SHN_Gear.Migrations
{
    /// <inheritdoc />
    public partial class AddIsActiveToUser : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

```

### Migrations\20250330191310_AddIsActiveToUser.Designer.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250330191310_AddIsActiveToUser")]
    partial class AddIsActiveToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("HeadphoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUNumberOfCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSDStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsTouch")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LaptopSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsNFC")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Migrations\20250330191701_AddPayPalFieldsToOrder.cs
```cs
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SHN_Gear.Migrations
{
    /// <inheritdoc />
    public partial class AddPayPalFieldsToOrder : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "PayPalOrderId",
                table: "Orders",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "PayPalPaymentUrl",
                table: "Orders",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "PayPalResponse",
                table: "Orders",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "PayPalTransactionId",
                table: "Orders",
                type: "nvarchar(max)",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "PayPalOrderId",
                table: "Orders");

            migrationBuilder.DropColumn(
                name: "PayPalPaymentUrl",
                table: "Orders");

            migrationBuilder.DropColumn(
                name: "PayPalResponse",
                table: "Orders");

            migrationBuilder.DropColumn(
                name: "PayPalTransactionId",
                table: "Orders");
        }
    }
}
```

### Migrations\20250330191701_AddPayPalFieldsToOrder.Designer.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250330191701_AddPayPalFieldsToOrder")]
    partial class AddPayPalFieldsToOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("HeadphoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUNumberOfCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSDStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsTouch")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LaptopSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsNFC")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Migrations\20250402100228_AddIsUsedToUserVoucher.cs
```cs
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace SHN_Gear.Migrations
{
    /// <inheritdoc />
    public partial class AddIsUsedToUserVoucher : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "IsUsed",
                table: "UserVouchers",
                type: "bit",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsUsed",
                table: "UserVouchers");
        }
    }
}

```

### Migrations\20250402100228_AddIsUsedToUserVoucher.Designer.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250402100228_AddIsUsedToUserVoucher")]
    partial class AddIsUsedToUserVoucher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("HeadphoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUNumberOfCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSDStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsTouch")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LaptopSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsNFC")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Migrations\AppDbContextModelSnapshot.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("HeadphoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUNumberOfCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxRAMSupport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSDStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsTouch")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("LaptopSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatteryCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CPUCores")
                        .HasColumnType("int");

                    b.Property<string>("CPUModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RearCamera")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsNFC")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PhoneSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.HeadphoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.LaptopSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.PhoneSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Models\Address.cs
```cs
namespace SHN_Gear.Models
{
    public class Address
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public User? User { get; set; } = null!;
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string AddressLine2 { get; set; } = null!;
        public string City { get; set; } = null!;
        public string State { get; set; } = null!;
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }

}

```

### Models\Brand.cs
```cs
namespace SHN_Gear.Models
{
    public class Brand
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Logo { get; set; } = null!;

        // Danh sách sản phẩm thuộc Brand này
        public List<Product> Products { get; set; } = new();
    }
}

```

### Models\Cart.cs
```cs
namespace SHN_Gear.Models
{
    public class Cart
    {
        public int Id { get; set; }
        public int UserId { get; set; } // Id của người dùng hoặc khách vãng lai
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow; // Thời gian tạo giỏ hàng
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow; // Thời gian cập nhật giỏ hàng

        public ICollection<CartItem> Items { get; set; } = new List<CartItem>(); // Danh sách sản phẩm trong giỏ hàng
    }
}
```

### Models\CartItem.cs
```cs
namespace SHN_Gear.Models
{
    public class CartItem
{
    public int Id { get; set; }
    public int CartId { get; set; }
    public Cart Cart { get; set; } = null!;

    public int ProductVariantId { get; set; }  // 🔹 Thay đổi từ ProductId sang ProductVariantId
    public ProductVariant ProductVariant { get; set; } = null!;  // 🔹 Liên kết đến ProductVariant

    public int Quantity { get; set; }
    public DateTime AddedAt { get; set; } = DateTime.UtcNow;
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
}

}
```

### Models\Category.cs
```cs
namespace SHN_Gear.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Image { get; set; } = null!;

        // ✅ Thêm danh sách sản phẩm
        public List<Product> Products { get; set; } = new();
    }
}

```

### Models\Delivery.cs
```cs
namespace SHN_Gear.Models
{
    public class Delivery
    {
        public int Id { get; set; }
        public int OrderId { get; set; }
        public Order Order { get; set; } = null!;
        public string ShippingMethod { get; set; } = null!;
        public decimal ShippingCost { get; set; }
        public DateTime? DeliveryDate { get; set; }
        public string TrackingNumber { get; set; } = null!;
    }
}

```

### Models\Headphones_Specifications.cs
```cs
namespace SHN_Gear.Models
{
    public class HeadphoneSpecification
{
    public int Id { get; set; }
    public int ProductId { get; set; }
    public Product Product { get; set; } = null!; // Khóa ngoại

    public string Weight { get; set; } = null!;
    public string Type { get; set; } = null!; // Không dây, Chụp tai
    public string ConnectionType { get; set; } = null!;
    public string Port { get; set; } = null!;
}

}
```

### Models\Laptops_Specifications.cs
```cs
namespace SHN_Gear.Models
{
    public class LaptopSpecification
{
    public int Id { get; set; }
    public int ProductId { get; set; }
    public Product Product { get; set; } = null!; // Khóa ngoại

    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUType { get; set; } = null!;
    public int CPUNumberOfCores { get; set; }
    public string RAM { get; set; } = null!;
    public string MaxRAMSupport { get; set; } = null!;
    public string SSDStorage { get; set; } = null!;
    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string RefreshRate { get; set; } = null!;
    public bool SupportsTouch { get; set; }
}

}
```

### Models\Order.cs
```cs
namespace SHN_Gear.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public User? User { get; set; }
        public DateTime OrderDate { get; set; } = DateTime.UtcNow;
        public decimal TotalAmount { get; set; }
        public string OrderStatus { get; set; } = "Pending";
        public int? AddressId { get; set; }
        public Address? Address { get; set; }
        public int PaymentMethodId { get; set; }
        public PaymentMethod PaymentMethod { get; set; } = null!;
        public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
        public int? VoucherId { get; set; }
        public Voucher? Voucher { get; set; }

        // Thêm các trường mới cho MoMo
        public string? MoMoRequestId { get; set; } // Mã request từ MoMo
        public string? MoMoOrderId { get; set; } // Mã đơn hàng gửi sang MoMo
        public string? MoMoTransId { get; set; } // Mã giao dịch từ MoMo
        public string? MoMoPayUrl { get; set; } // URL thanh toán MoMo
        public string? MoMoResponse { get; set; } // Raw response từ MoMo
        // paypal
        public string? PayPalOrderId { get; set; }
        public string? PayPalPaymentUrl { get; set; }
        public string? PayPalTransactionId { get; set; }
        public string? PayPalResponse { get; set; }
    }
}
```

### Models\OrderItem.cs
```cs
namespace SHN_Gear.Models
{
    public class OrderItem
    {
        public int Id { get; set; }
        public int OrderId { get; set; } // Khóa ngoại tới Order
        public Order Order { get; set; } = null!;
        public int ProductVariantId { get; set; } // Khóa ngoại tới ProductVariant
        public ProductVariant ProductVariant { get; set; } = null!;
        public int Quantity { get; set; }
        public decimal Price { get; set; } // Giá sản phẩm tại thời điểm đặt hàng (có thể khác với giá hiện tại)
    }
}

```

### Models\PaymentMethod.cs
```cs
namespace SHN_Gear.Models
{
    public class PaymentMethod
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!; // Ví dụ: "Cash on Delivery", "Momo"
        public string Description { get; set; } = null!; // Mô tả ngắn gọn về phương thức thanh toán
    }
}

```

### Models\Phones_Specifications.cs
```cs
namespace SHN_Gear.Models
{
    public class PhoneSpecification
{
    public int Id { get; set; }
    public int ProductId { get; set; }
    public Product Product { get; set; } = null!; // Khóa ngoại

    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string ScreenType { get; set; } = null!;
    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUModel { get; set; } = null!;
    public int CPUCores { get; set; }
    public string RAM { get; set; } = null!;
    public string InternalStorage { get; set; } = null!;
    public string FrontCamera { get; set; } = null!;
    public string RearCamera { get; set; } = null!;
    public string BatteryCapacity { get; set; } = null!;
    public bool SupportsNFC { get; set; }
}

}
```

### Models\ProductImages.cs
```cs
namespace SHN_Gear.Models
{
    public class ProductImage
    {
        public int Id { get; set; }
        public int ProductId { get; set; } // Khóa ngoại liên kết với sản phẩm
        public string ImageUrl { get; set; } = null!;
        public bool IsPrimary { get; set; } // Ảnh chính hay không

        // Khóa ngoại
        public Product Product { get; set; } = null!;
    }
}

```

### Models\Products.cs
```cs
namespace SHN_Gear.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public List<ProductImage> Images { get; set; } = new();
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public int CategoryId { get; set; }
        public Category Category { get; set; } = null!;
        public int BrandId { get; set; } // ✅ Thêm BrandId vào model
        public Brand Brand { get; set; } = null!; // ✅ Thiết lập quan hệ với Brand
        public List<ProductVariant> Variants { get; set; } = new();

        public bool IsOutOfStock()
        {
            return Variants.Sum(v => v.StockQuantity) <= 0;
        }
    }
}

```

### Models\ProductVariant.cs
```cs
namespace SHN_Gear.Models
{
    public class ProductVariant
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public Product Product { get; set; } = null!;
        public string Color { get; set; } = null!;
        public string Storage { get; set; } = null!;
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public int StockQuantity { get; set; }

        public DateTime? FlashSaleStart { get; set; }  // ✅ Flash Sale riêng cho từng variant
        public DateTime? FlashSaleEnd { get; set; }
    }
}

```

### Models\Review.cs
```cs
namespace SHN_Gear.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ProductVariantId { get; set; }
        public ProductVariant ProductVariant { get; set; } = null!;
        public string UserId { get; set; } = null!; // Khóa ngoại tới User
        public User User { get; set; } = null!;
        public int Rating { get; set; } // Ví dụ: từ 1 đến 5 sao
        public string Comment { get; set; } = null!;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}

```

### Models\Role.cs
```cs
namespace SHN_Gear.Models
{
    public class Role
    {
        public int Id { get; set; }  // Id của vai trò (Admin, VIP 1, VIP 2,...)
        public string Name { get; set; } = string.Empty;  // Tên vai trò (Admin, VIP 1, VIP 2,...)
        
        public ICollection<User> Users { get; set; } = new List<User>(); // Danh sách người dùng có role này
    }
}

```

### Models\User.cs
```cs
namespace SHN_Gear.Models
{
    public class User
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string? Gender { get; set; }  // Có thể null
        public DateTime? DateOfBirth { get; set; }  // Có thể null
        public string Email { get; set; } = string.Empty;
        public string? AvatarUrl { get; set; }  // Có thể null
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public int Points { get; set; } = 0;
        public string Password { get; set; } = string.Empty;

        public bool IsActive { get; set; } = true;  // Mặc định là kích hoạt

        // OTP Login
        public string? OtpCode { get; set; }  // Có thể null
        public DateTime? OtpExpiry { get; set; }  // Có thể null

        // Quan hệ với Role
        public int RoleId { get; set; }
        public Role Role { get; set; } = null!;

        // Quan hệ với UserVoucher
        public ICollection<UserVoucher> UserVouchers { get; set; } = new List<UserVoucher>();
    }

}
```

### Models\UserVoucher.cs
```cs
namespace SHN_Gear.Models
{
    public class UserVoucher
    {
        public int UserId { get; set; }
        public User User { get; set; } = null!;

        public int VoucherId { get; set; }
        public Voucher Voucher { get; set; } = null!;

        public DateTime UsedAt { get; set; } // Thời gian nhận/gán voucher
        public bool IsUsed { get; set; } = true; // Trạng thái sử dụng
    }
}
```

### Models\Voucher.cs
```cs
namespace SHN_Gear.Models
{
    public class Voucher
    {
        public int Id { get; set; }
        public string Code { get; set; } = null!; // Mã voucher
        public decimal DiscountAmount { get; set; } // Số tiền giảm giá
        public DateTime ExpiryDate { get; set; } // Ngày hết hạn
        public bool IsActive { get; set; } = true; // Trạng thái hoạt động của voucher

        public ICollection<UserVoucher> UserVouchers { get; set; } = new List<UserVoucher>(); // Quan hệ với UserVoucher
    }
}
```

### Pages\Error.cshtml.cs
```cs
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace SHN_Gear.Pages;

[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
public class ErrorModel : PageModel
{
    private readonly ILogger<ErrorModel> _logger;

    public ErrorModel(ILogger<ErrorModel> logger)
    {
        _logger = logger;
    }

    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    public void OnGet()
    {
        RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
    }
}

```

### Services\CloudinaryService.cs
```cs
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Microsoft.Extensions.Configuration;

public class CloudinaryService : ICloudinaryService
{
    private readonly Cloudinary _cloudinary;

    public CloudinaryService(IConfiguration configuration)
    {
        var cloudName = configuration["Cloudinary:CloudName"];
        var apiKey = configuration["Cloudinary:ApiKey"];
        var apiSecret = configuration["Cloudinary:ApiSecret"];

        var account = new Account(
            cloudName,
            apiKey,
            apiSecret);

        _cloudinary = new Cloudinary(account);
        _cloudinary.Api.Secure = true;
    }

    public async Task<string> UploadImageAsync(IFormFile file)
    {
        if (file == null || file.Length == 0)
            throw new ArgumentException("No file uploaded");

        using var stream = file.OpenReadStream();
        var uploadParams = new ImageUploadParams
        {
            File = new FileDescription(file.FileName, stream),
            Transformation = new Transformation()
                .Width(800)
                .Height(800)
                .Crop("limit")
        };

        var uploadResult = await _cloudinary.UploadAsync(uploadParams);

        if (uploadResult.Error != null)
            throw new Exception(uploadResult.Error.Message);

        return uploadResult.SecureUrl.ToString();
    }

    public async Task DeleteImageAsync(string publicId)
    {
        var deletionParams = new DeletionParams(publicId);
        var result = await _cloudinary.DestroyAsync(deletionParams);

        if (result.Result != "ok")
            throw new Exception($"Failed to delete image with publicId: {publicId}");
    }
}
```

### Services\EmailService.cs
```cs
using System;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.Extensions.Configuration;
using MimeKit;
namespace SHN_Gear.Services
{
public class EmailService
{
    private readonly IConfiguration _config;

    public EmailService(IConfiguration config)
    {
        _config = config;
    }

    public async Task<bool> SendOTPAsync(string recipientEmail)
    {
        try
        {
            var emailSettings = _config.GetSection("EmailSettings");
            string otpCode = GenerateOTP();

            var message = new MimeMessage();
            message.From.Add(new MailboxAddress("SHN Gear", emailSettings["SenderEmail"]));
            message.To.Add(new MailboxAddress("", recipientEmail));
            message.Subject = "Mã OTP của bạn";
            message.Body = new TextPart("plain") { Text = $"Mã OTP của bạn là: {otpCode}" };

            using var client = new SmtpClient();
            await client.ConnectAsync(emailSettings["SMTPHost"], int.Parse(emailSettings["SMTPPort"]), SecureSocketOptions.StartTls);
            await client.AuthenticateAsync(emailSettings["SenderEmail"], emailSettings["SenderPassword"]);
            await client.SendAsync(message);
            await client.DisconnectAsync(true);

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi gửi email: {ex.Message}");
            return false;
        }
    }

    private string GenerateOTP()
    {
        using var rng = new RNGCryptoServiceProvider();
        var data = new byte[4];
        rng.GetBytes(data);
        int otp = BitConverter.ToUInt16(data, 0) % 1000000;
        return otp.ToString("D6");
    }
}
}
```

### Services\ICloudinaryService.cs
```cs
public interface ICloudinaryService
{
    Task<string> UploadImageAsync(IFormFile file);
    Task DeleteImageAsync(string publicId);
}
```

### Services\JwtService.cs
```cs
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class JwtService
    {
        private readonly IConfiguration _config;

        public JwtService(IConfiguration config)
        {
            _config = config;
        }

        public string GenerateToken(User user)
        {
            var key = Encoding.UTF8.GetBytes(_config["Jwt:Key"]);
            var tokenHandler = new JwtSecurityTokenHandler();

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(ClaimTypes.Name, user.FullName),
                    new Claim(ClaimTypes.Email, user.Email),
                    new Claim(ClaimTypes.Role, user.Role.Name)
                }),
                Expires = DateTime.UtcNow.AddMinutes(int.Parse(_config["Jwt:ExpireMinutes"])),
                Issuer = _config["Jwt:Issuer"],
                Audience = _config["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}

```

### Services\MoMoPaymentService.cs
```cs
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace SHN_Gear.Services
{
    public class MoMoPaymentService
    {
        private readonly IConfiguration _configuration;

        public MoMoPaymentService(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public async Task<string> CreatePaymentAsync(string orderId, string orderInfo, long amount, bool isCardPayment = false)
        {
            var momoConfig = _configuration.GetSection("MoMoConfig");

            // Tạo requestId mới cho mỗi lần gọi API
            var requestId = Guid.NewGuid().ToString();
            var requestType = isCardPayment ? "capture" : "captureWallet";
            var extraData = isCardPayment ? "{\"paymentType\":\"CREDIT_CARD\"}" : "";

            // Tạo rawHash với requestId
            var rawHash = "accessKey=" + momoConfig["AccessKey"] +
                         "&amount=" + amount +
                         "&extraData=" + extraData +
                         "&ipnUrl=" + momoConfig["NotifyUrl"] +
                         "&orderId=" + orderId +
                         "&orderInfo=" + orderInfo +
                         "&partnerCode=" + momoConfig["PartnerCode"] +
                         "&redirectUrl=" + momoConfig["ReturnUrl"] +
                         "&requestId=" + requestId +  // Đảm bảo requestId được thêm vào
                         "&requestType=" + requestType;

            var signature = ComputeHmacSha256(rawHash, momoConfig["SecretKey"]);

            var requestBody = new
            {
                partnerCode = momoConfig["PartnerCode"],
                partnerName = "SHN Gear",
                requestId = requestId,  // Truyền requestId vào body
                amount = amount,
                orderId = orderId,
                orderInfo = orderInfo,
                redirectUrl = momoConfig["ReturnUrl"],
                ipnUrl = momoConfig["NotifyUrl"],
                requestType = requestType,
                extraData = extraData,
                signature = signature,
                lang = "vi"
            };

            using (var httpClient = new HttpClient())
            {
                var content = new StringContent(
                    JsonConvert.SerializeObject(requestBody),
                    Encoding.UTF8,
                    "application/json");

                var response = await httpClient.PostAsync(momoConfig["ApiEndpoint"], content);

                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Lỗi từ MoMo API: {response.StatusCode} - {errorContent}");
                }

                var responseContent = await response.Content.ReadAsStringAsync();
                var responseData = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseContent);

                return responseData?["payUrl"] ?? throw new Exception("Không nhận được URL thanh toán từ MoMo");
            }
        }

        public bool VerifySignature(string signature, string rawData)
        {
            var secretKey = _configuration["MoMoConfig:SecretKey"];
            var computedSignature = ComputeHmacSha256(rawData, secretKey);
            return signature.Equals(computedSignature, StringComparison.OrdinalIgnoreCase);
        }

        private string ComputeHmacSha256(string message, string secretKey)
        {
            using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
            {
                var hashMessage = hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message));
                return BitConverter.ToString(hashMessage).Replace("-", "").ToLower();
            }
        }
    }
}
```

### Services\PayPalService.cs
```cs
using PayPalCheckoutSdk.Core;
using PayPalCheckoutSdk.Orders;
using System.Text.Json;
using System.Globalization;

namespace SHN_Gear.Services
{
    public class PayPalService
    {
        private readonly PayPalHttpClient _client;
        private readonly IConfiguration _config;
        private readonly ILogger<PayPalService> _logger;

        public PayPalService(IConfiguration config, ILogger<PayPalService> logger)
        {
            _config = config;
            _logger = logger;

            var clientId = _config["PayPal:ClientId"];
            var secret = _config["PayPal:Secret"];

            PayPalEnvironment environment = _config["PayPal:Mode"] == "Sandbox"
                ? new SandboxEnvironment(clientId, secret)
                : new LiveEnvironment(clientId, secret);

            _client = new PayPalHttpClient(environment);
        }

        public async Task<string> CreateOrder(
            decimal amount,
            string currency,
            string invoiceId,
            string returnUrl,
            string cancelUrl)
        {
            try
            {
                var amountString = amount.ToString("0.00", CultureInfo.InvariantCulture);
                _logger.LogInformation($"Creating PayPal order with amount: {amountString} {currency}");

                var orderRequest = new OrderRequest()
                {
                    CheckoutPaymentIntent = "CAPTURE", // Sử dụng CheckoutPaymentIntent thay vì Intent
                    PurchaseUnits = new List<PurchaseUnitRequest>
                    {
                        new PurchaseUnitRequest
                        {
                            ReferenceId = "default",
                            InvoiceId = invoiceId,
                            AmountWithBreakdown = new AmountWithBreakdown
                            {
                                CurrencyCode = currency,
                                Value = amountString,
                                AmountBreakdown = new AmountBreakdown
                                {
                                    ItemTotal = new Money
                                    {
                                        CurrencyCode = currency,
                                        Value = amountString
                                    }
                                }
                            }
                        }
                    },
                    ApplicationContext = new ApplicationContext
                    {
                        ReturnUrl = returnUrl,
                        CancelUrl = cancelUrl,
                        BrandName = "SHN Gear",
                        UserAction = "PAY_NOW",
                        ShippingPreference = "NO_SHIPPING"
                    }
                };

                var request = new OrdersCreateRequest();
                request.Prefer("return=representation");
                request.RequestBody(orderRequest);

                var response = await _client.Execute(request);
                var result = response.Result<Order>();

                _logger.LogInformation($"Created PayPal Order ID: {result.Id}");
                return result.Id;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create PayPal order");
                return string.Empty;
            }
        }

        public async Task<PayPalCaptureResult> CaptureOrder(string orderId)
        {
            try
            {
                var request = new OrdersCaptureRequest(orderId);
                request.RequestBody(new OrderActionRequest());
                request.Prefer("return=representation");

                var response = await _client.Execute(request);
                var result = response.Result<Order>();

                var transactionId = result.PurchaseUnits?[0]?.Payments?.Captures?[0]?.Id;
                _logger.LogInformation($"Captured PayPal Order: {orderId}, Transaction ID: {transactionId}");

                return new PayPalCaptureResult
                {
                    Success = result.Status == "COMPLETED",
                    TransactionId = transactionId,
                    RawResponse = JsonSerializer.Serialize(result)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Failed to capture PayPal order {orderId}");
                return new PayPalCaptureResult
                {
                    Success = false,
                    ErrorMessage = ex.Message
                };
            }
        }
    }

    public class PayPalCaptureResult
    {
        public bool Success { get; set; }
        public string? TransactionId { get; set; }
        public string? RawResponse { get; set; }
        public string? ErrorMessage { get; set; }
    }
}
```

### Services\UserService.cs
```cs
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class UserService
    {
        private readonly AppDbContext _context;
        public User? GetUserById(int userId)
        {
            return _context.Users
                .Include(u => u.Role) // Nếu User có Role, ta include vào để lấy thông tin
                .FirstOrDefault(u => u.Id == userId);
        }

        public UserService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<bool> RegisterUserAsync(RegisterDto registerDto)
        {
            if (await _context.Users.AnyAsync(u => u.Email == registerDto.Email))
            {
                return false; // Email đã tồn tại
            }

            var role = await _context.Roles.FindAsync(2);
            if (role == null)
            {
                return false;
            }

            string hashedPassword = HashPassword(registerDto.Password);

            var user = new User
            {
                Email = registerDto.Email,
                Password = hashedPassword,
                CreatedAt = DateTime.UtcNow,
                RoleId = role.Id,
                Role = role,

                // Gán giá trị từ DTO
                FullName = !string.IsNullOrWhiteSpace(registerDto.FullName) ? registerDto.FullName : "",
                PhoneNumber = !string.IsNullOrWhiteSpace(registerDto.PhoneNumber) ? registerDto.PhoneNumber : ""
            };

            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            return true;
        }


        public async Task<User> AuthenticateUserAsync(LoginDto loginDto)
        {
            // Thêm Include để load thông tin Role
            var user = await _context.Users
                .Include(u => u.Role) // Quan trọng
                .FirstOrDefaultAsync(u => u.Email == loginDto.Email);

            if (user == null || !VerifyPassword(loginDto.Password, user.Password))
                return null;

            return user;
        }

        public string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            return Convert.ToBase64String(hashedBytes);
        }

        private bool VerifyPassword(string inputPassword, string storedHash)
        {
            return HashPassword(inputPassword) == storedHash;
        }
        public async Task<bool> CheckEmailExistsAsync(string email)
        {
            return await _context.Users.AnyAsync(u => u.Email == email);
        }

        public async Task<User?> GetUserByIdAsync(int userId)
        {
            return await _context.Users.FindAsync(userId);
        }
        public async Task<User?> UpdateUserProfileAsync(int userId, EditProfileDto editDto)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null) return null;

            user.FullName = editDto.FullName;
            user.Email = editDto.Email;
            user.PhoneNumber = editDto.PhoneNumber;
            user.Gender = editDto.Gender;
            user.DateOfBirth = editDto.DateOfBirth;

            await _context.SaveChangesAsync();
            return user;
        }
    }
}

```
