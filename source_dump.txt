# ==================================================
# Path: C:\SAN\DA\SHNGEar\SHNGear
# Detected tech: csharp, docker, gitlab_ci, javascript, python, react, rust, typescript
# ==================================================

## DIRECTORY STRUCTURE
```
SHNGear/
├── .git/
├── .vscode/
├── ClientApp/
│   ├── .vscode/
│   ├── node_modules/
│   ├── public/
│   │   ├── images/
│   │   │   ├── IMG_3351.JPG
│   │   │   ├── IMG_3403.JPG
│   │   │   ├── IMG_4202.JPG
│   │   │   ├── IMG_4208.jpg
│   │   │   ├── IMG_4237.JPG
│   │   │   ├── IMG_4242.JPG
│   │   │   ├── herobanner.JPG
│   │   │   └── sale-banner.jpg
│   │   ├── favicon.ico
│   │   ├── index.html
│   │   └── manifest.webmanifest
│   ├── scripts/
│   │   ├── convert-all-imports.bat
│   │   └── convert-imports.js
│   ├── src/
│   │   ├── assets/
│   │   │   ├── icon/
│   │   │   │   ├── facebook.svg
│   │   │   │   ├── gmail.svg
│   │   │   │   ├── linkedin.svg
│   │   │   │   ├── menu.svg
│   │   │   │   └── search.svg
│   │   │   ├── img/
│   │   │   │   ├── HeadPhone/
│   │   │   │   │   ├── SonyWH-1000XM5.jpg
│   │   │   │   │   ├── banner_headphone.jpg
│   │   │   │   │   └── headphones.jpg
│   │   │   │   ├── Laptop/
│   │   │   │   │   ├── Laptop_Dell_XPS_13.jpg
│   │   │   │   │   ├── banner_laptop.jpg
│   │   │   │   │   └── laptops.jpg
│   │   │   │   ├── Phone/
│   │   │   │   │   ├── banner_iphone.jpg
│   │   │   │   │   ├── logo.png
│   │   │   │   │   ├── samsung_S24.jpg
│   │   │   │   │   └── smartphones.jpg
│   │   │   │   └── anhcuanghia/
│   │   │   │       ├── background1.png
│   │   │   │       ├── background2.png
│   │   │   │       ├── background3.png
│   │   │   │       ├── banner1.jpg
│   │   │   │       ├── banner1.png
│   │   │   │       ├── banner2.png
│   │   │   │       ├── banner_1.png
│   │   │   │       ├── bannervip.png
│   │   │   │       ├── dien_gia_dung_thumb_2_54c5efa451.png
│   │   │   │       ├── dienthoai_banner.png
│   │   │   │       ├── herobanner.JPG
│   │   │   │       ├── hieuthuhai.png
│   │   │   │       ├── hot-sale-cuoi-tuan.gif
│   │   │   │       ├── laptop_thumb_2_4df0fab60f.png
│   │   │   │       ├── phu_kien_thum_2_21c419aa09.png
│   │   │   │       ├── sale-banner.jpg
│   │   │   │       ├── tivi_baber.png
│   │   │   │       └── tu_lanh_cate_thumb_77da11d0c4.png
│   │   │   └── styles/
│   │   │       ├── MonumentExtended-Regular.woff
│   │   │       ├── MonumentExtended-Regular.woff2
│   │   │       └── base.css
│   │   ├── components/
│   │   │   ├── Admin/
│   │   │   │   ├── analytics/
│   │   │   │   │   ├── AIPoweredInsights.jsx
│   │   │   │   │   ├── ChannelPerformance.jsx
│   │   │   │   │   ├── CustomerSegmentation.jsx
│   │   │   │   │   ├── OverviewCards.jsx
│   │   │   │   │   ├── ProductPerformance.jsx
│   │   │   │   │   ├── RevenueChart.jsx
│   │   │   │   │   └── UserRetention.jsx
│   │   │   │   ├── common/
│   │   │   │   │   ├── CardProduct.jsx
│   │   │   │   │   ├── Header.jsx
│   │   │   │   │   ├── Sidebar.jsx
│   │   │   │   │   └── StatCard.jsx
│   │   │   │   ├── orders/
│   │   │   │   │   ├── DailyOrders.jsx
│   │   │   │   │   ├── EditOrder.jsx
│   │   │   │   │   ├── OrderDetailDrawer.jsx
│   │   │   │   │   ├── OrderDetailItem.jsx
│   │   │   │   │   ├── OrderDistribution.jsx
│   │   │   │   │   ├── OrderItem.jsx
│   │   │   │   │   └── OrdersTable.jsx
│   │   │   │   ├── overview/
│   │   │   │   │   ├── CategoryDistributionChart.jsx
│   │   │   │   │   ├── SalesChannelChart.jsx
│   │   │   │   │   └── SalesOverviewChart.jsx
│   │   │   │   ├── products/
│   │   │   │   │   ├── AddProductDrawer.jsx
│   │   │   │   │   ├── AddSpecificationDrawer.jsx
│   │   │   │   │   ├── BrandDrawer.jsx
│   │   │   │   │   ├── BrandModal.jsx
│   │   │   │   │   ├── CategoryBrandDrawer.jsx
│   │   │   │   │   ├── CategoryModal.jsx
│   │   │   │   │   ├── EditProductDrawer.jsx
│   │   │   │   │   ├── ProductsTable.jsx
│   │   │   │   │   ├── SalesTrendChart.jsx
│   │   │   │   │   └── VoucherDrawer.jsx
│   │   │   │   ├── sales/
│   │   │   │   │   ├── DailySalesTrend.jsx
│   │   │   │   │   ├── SalesByCategoryChart.jsx
│   │   │   │   │   └── SalesOverviewChart.jsx
│   │   │   │   ├── settings/
│   │   │   │   │   ├── ConnectedAccounts.jsx
│   │   │   │   │   ├── DangerZone.jsx
│   │   │   │   │   ├── Notifications.jsx
│   │   │   │   │   ├── Profile.jsx
│   │   │   │   │   ├── Security.jsx
│   │   │   │   │   ├── SettingSection.jsx
│   │   │   │   │   └── ToggleSwitch.jsx
│   │   │   │   └── users/
│   │   │   │       ├── RoleDrawer.jsx
│   │   │   │       ├── UpdateUserDrawer.jsx
│   │   │   │       ├── UserActivityHeatmap.jsx
│   │   │   │       ├── UserDemographicsChart.jsx
│   │   │   │       ├── UserGrowthChart.jsx
│   │   │   │       └── UsersTable.jsx
│   │   │   ├── Auth/
│   │   │   │   ├── AuthModal.css
│   │   │   │   └── AuthModal.jsx
│   │   │   ├── BestSellerManager/
│   │   │   │   └── BestSellerManager.js
│   │   │   ├── BestSellers/
│   │   │   │   ├── BestSellers.css
│   │   │   │   ├── BestSellers.js
│   │   │   │   └── BestSellers.jsx
│   │   │   ├── Chat/
│   │   │   │   ├── AdminChatDashboard.css
│   │   │   │   ├── AdminChatDashboard.jsx
│   │   │   │   ├── ChatWidget.css
│   │   │   │   └── ChatWidget.jsx
│   │   │   ├── Checkout/
│   │   │   │   └── Checkout.jsx
│   │   │   ├── Commitment/
│   │   │   │   ├── Commitment.css
│   │   │   │   ├── Commitment.js
│   │   │   │   └── Commitment.jsx
│   │   │   ├── CompareProduct/
│   │   │   │   ├── CompareModal.css
│   │   │   │   ├── CompareModal.jsx
│   │   │   │   ├── ComparePage.jsx
│   │   │   │   ├── SpecificationComparison.jsx
│   │   │   │   └── SpecificationFilter.jsx
│   │   │   ├── FeaturedBrands/
│   │   │   │   ├── FeaturedBrands.css
│   │   │   │   └── FeaturedBrands.js
│   │   │   ├── FeaturedCategories/
│   │   │   │   ├── CategoryLarge.jsx
│   │   │   │   ├── FeaturedCategories.js
│   │   │   │   └── FeaturedCategories.jsx
│   │   │   ├── FlashSale/
│   │   │   │   ├── FlashSale.js
│   │   │   │   └── FlashSale.jsx
│   │   │   ├── FlashSaleManager/
│   │   │   │   └── FlashSaleManager.js
│   │   │   ├── Footer/
│   │   │   │   ├── Footer.css
│   │   │   │   └── Footer.jsx
│   │   │   ├── HeroBanner/
│   │   │   │   ├── HeroBanner.js
│   │   │   │   └── HeroBanner.jsx
│   │   │   ├── HeroSlider/
│   │   │   │   ├── HeroSlider.css
│   │   │   │   └── HeroSlider.jsx
│   │   │   ├── Homepage/
│   │   │   │   ├── BannerSlider.js
│   │   │   │   ├── BannerSlider.jsx
│   │   │   │   ├── BrandTrustSection.js
│   │   │   │   ├── CategoriesSection.js
│   │   │   │   ├── FeaturedProductsSection.js
│   │   │   │   ├── HeroSection.js
│   │   │   │   └── SpecialOfferSection.js
│   │   │   ├── List/
│   │   │   │   ├── CategoryMenu.jsx
│   │   │   │   ├── FilterSection.jsx
│   │   │   │   ├── ProductActions.css
│   │   │   │   ├── ProductCard.css
│   │   │   │   ├── ProductGrid.jsx
│   │   │   │   ├── ProductHoverPreview.css
│   │   │   │   ├── ProductHoverPreview.jsx
│   │   │   │   └── ProductPagination.jsx
│   │   │   ├── Navbar/
│   │   │   │   ├── Navbar.css
│   │   │   │   └── Navbar.jsx
│   │   │   ├── NotificationBar/
│   │   │   │   ├── notification.css
│   │   │   │   └── notification.jsx
│   │   │   ├── Order/
│   │   │   │   ├── OrderLookup.jsx
│   │   │   │   └── PaymentSuccess.jsx
│   │   │   ├── PaymentSuccess/
│   │   │   │   └── PaymentSuccess.jsx
│   │   │   ├── ProductInfoPage/
│   │   │   │   ├── ProductImage.jsx
│   │   │   │   ├── ProductInfo.jsx
│   │   │   │   ├── ProductReviews.jsx
│   │   │   │   ├── ProductSpecifications.jsx
│   │   │   │   ├── ProductVariants.jsx
│   │   │   │   └── RelatedProducts.jsx
│   │   │   ├── Profile/
│   │   │   │   ├── AddPaymentMethod.jsx
│   │   │   │   ├── AddressBook.css
│   │   │   │   ├── AddressBook.jsx
│   │   │   │   ├── LoyaltyProgram.jsx
│   │   │   │   ├── ProfileInfo.jsx
│   │   │   │   ├── ProfileSidebar.css
│   │   │   │   ├── ProfileSidebar.jsx
│   │   │   │   ├── UserOrders.jsx
│   │   │   │   └── ViewedProducts.jsx
│   │   │   ├── ServiceSlider/
│   │   │   │   ├── ServiceSlider.css
│   │   │   │   └── ServiceSlider.jsx
│   │   │   ├── layouts/
│   │   │   │   ├── AdminLayout.js
│   │   │   │   └── DefaultLayout.js
│   │   │   ├── shared/
│   │   │   │   └── ProductCard.js
│   │   │   ├── shoppingcart/
│   │   │   │   ├── CartDrawer.jsx
│   │   │   │   ├── CartItem.jsx
│   │   │   │   └── OrderSummary.jsx
│   │   │   ├── ProtectedRoute.jsx
│   │   │   └── SessionExpiredModal.jsx
│   │   ├── hooks/
│   │   │   ├── api/
│   │   │   │   ├── useAddresses.js
│   │   │   │   ├── useAdmin.js
│   │   │   │   ├── useApi.js
│   │   │   │   ├── useBrands.js
│   │   │   │   ├── useCart.js
│   │   │   │   ├── useCategories.js
│   │   │   │   ├── useChat.js
│   │   │   │   ├── useFeatures.js
│   │   │   │   ├── useFlashSaleProducts.js
│   │   │   │   ├── useLoyalty.js
│   │   │   │   ├── useOrderLookup.js
│   │   │   │   ├── useOrders.js
│   │   │   │   ├── usePaymentMethod.js
│   │   │   │   ├── useProductData.js
│   │   │   │   ├── useProductForm.js
│   │   │   │   ├── useProductImageManager.js
│   │   │   │   ├── useProductSpecificationManager.js
│   │   │   │   ├── useProducts.js
│   │   │   │   ├── useReviews.js
│   │   │   │   ├── useSearch.js
│   │   │   │   └── useUserProfile.js
│   │   │   ├── auth/
│   │   │   │   └── useAuth.js
│   │   │   ├── ui/
│   │   │   │   └── useUI.js
│   │   │   ├── EXAMPLES.md
│   │   │   ├── MIGRATION.md
│   │   │   ├── README.md
│   │   │   └── index.js
│   │   ├── pages/
│   │   │   ├── Admin/
│   │   │   │   ├── AnalyticsPage.jsx
│   │   │   │   ├── BestSellerAdminPage.js
│   │   │   │   ├── CategoryAdminPage.js
│   │   │   │   ├── FlashSaleAdminPage.js
│   │   │   │   ├── HomepageAdminPage.js
│   │   │   │   ├── HomepageOverviewPage.js
│   │   │   │   ├── OrdersPage.jsx
│   │   │   │   ├── OverviewPage.jsx
│   │   │   │   ├── ProductsPage.jsx
│   │   │   │   ├── ReviewManagementPage.jsx
│   │   │   │   ├── SalesPage.jsx
│   │   │   │   ├── SettingsPage.jsx
│   │   │   │   └── UsersPage.jsx
│   │   │   ├── Home/
│   │   │   │   └── HomePage.js
│   │   │   ├── OrderLookupPage/
│   │   │   │   └── OrderLookupPage.jsx
│   │   │   ├── ProductList/
│   │   │   │   ├── ProductList.css
│   │   │   │   └── ProductList.jsx
│   │   │   ├── ProductPage/
│   │   │   │   ├── ProductPage.css
│   │   │   │   └── ProductPage.jsx
│   │   │   ├── ProfilePage/
│   │   │   │   ├── ProfilePage.css
│   │   │   │   └── ProfilePage.jsx
│   │   │   ├── Unauthorized/
│   │   │   │   └── Unauthorized.jsx
│   │   │   ├── blog/
│   │   │   │   ├── BlogList.js
│   │   │   │   ├── BlogPostDetail.js
│   │   │   │   └── BlogPostEditor.js
│   │   │   └── shoppingcart/
│   │   │       └── shoppingcart.jsx
│   │   ├── services/
│   │   │   └── ChatSignalRService.js
│   │   ├── utils/
│   │   │   ├── ChatTestRunner.js
│   │   │   ├── FormatInfo.js
│   │   │   ├── formatCurrency.js
│   │   │   ├── timezoneTest.js
│   │   │   └── useDebounce.js
│   │   ├── App.js
│   │   ├── App.test.js
│   │   ├── AppRoutes.js
│   │   ├── index.js
│   │   ├── reportWebVitals.js
│   │   ├── service-worker.js
│   │   ├── serviceWorkerRegistration.js
│   │   └── setupProxy.js
│   ├── .env
│   ├── .env.development
│   ├── .env.development.local
│   ├── .gitignore
│   ├── IMPORT_ALIAS_GUIDE.md
│   ├── README.md
│   ├── SETUP_COMPLETE.md
│   ├── aspnetcore-https.js
│   ├── aspnetcore-react.js
│   ├── craco.config.js
│   ├── jsconfig.json
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   └── tailwind.config.js
├── Configuration/
│   └── CorsConfiguration.cs
├── Controllers/
│   ├── AddressController.cs
│   ├── AuthController.cs
│   ├── BlogPostsController.cs
│   ├── BrandController.cs
│   ├── CartController.cs
│   ├── CategoriesController.cs
│   ├── ChatController.cs
│   ├── CorsTestController.cs
│   ├── HomepageConfigController.cs
│   ├── LoyaltyController.cs
│   ├── OrderController.cs
│   ├── PayPalController.cs
│   ├── PaymentMethodController.cs
│   ├── ProductsController.cs
│   ├── ReviewsController.cs
│   ├── RoleController.cs
│   ├── SearchController.cs
│   ├── SpecificationsController.cs
│   ├── UploadController.cs
│   ├── UserController.cs
│   ├── VoucherController.cs
│   └── WeatherForecastController.cs
├── DTOs/
│   ├── AccountDto.cs
│   ├── AddressDTO.cs
│   ├── AdminMessageDto.cs
│   ├── AdminUserUpdateDto.cs
│   ├── BlogPostDto.cs
│   ├── CartDto.cs
│   ├── CategoryDto.cs
│   ├── ChatDto.cs
│   ├── CreateBlogPostDto.cs
│   ├── CreateProductDto.cs
│   ├── FlashSaleUpdateDto.cs
│   ├── HeadphoneSpecificationDto.cs
│   ├── HomepageDtos.cs
│   ├── LaptopSpecificationDto.cs
│   ├── LoyaltyStatusDto.cs
│   ├── OrderDto.cs
│   ├── PhoneSpecificationDto.cs
│   ├── ProductDto.cs
│   ├── ProductSpecificationDetailDto.cs
│   ├── ProductSpecificationDto.cs
│   ├── ReviewDto.cs
│   ├── SearchDto.cs
│   ├── UpdateBlogPostDto.cs
│   ├── UploadResponseDto.cs
│   ├── UserDto.cs
│   └── VoucherDto.cs
├── Data/
│   ├── AppDbContext.cs
│   └── WebsiteKnowledgeBase.json
├── Docs/
│   ├── AI_Architecture_Analysis.md
│   ├── AI_Chat_Implementation_Status.md
│   ├── AI_Chat_Operation_Manual.md
│   ├── AI_Test_Cases.md
│   ├── Fallback_Escalation_Logic.md
│   ├── Project_Functionalities_Summary.md
│   ├── Prompt_Templates_Flow.md
│   └── UX_UI_Optimization.md
├── Hubs/
│   └── ChatHub.cs
├── Middleware/
│   ├── CorsDebugMiddleware.cs
│   ├── GlobalCorsMiddleware.cs
│   ├── HeaderLoggingMiddleware.cs
│   ├── SignalRCorsMiddleware.cs
│   ├── SignalRNegotiationCorsMiddleware.cs
│   ├── SimpleRateLimitMiddleware.cs
│   └── UnifiedCorsMiddleware.cs
├── Migrations/
│   └── AppDbContextModelSnapshot.cs
├── Models/
│   ├── AIKnowledgeBase.cs
│   ├── Address.cs
│   ├── BlogPost.cs
│   ├── Brand.cs
│   ├── Cart.cs
│   ├── CartItem.cs
│   ├── Category.cs
│   ├── ChatMessage.cs
│   ├── ChatSession.cs
│   ├── Delivery.cs
│   ├── HomepageConfig.cs
│   ├── Order.cs
│   ├── OrderItem.cs
│   ├── PaymentMethod.cs
│   ├── ProductImages.cs
│   ├── ProductSpecification.cs
│   ├── ProductVariant.cs
│   ├── Products.cs
│   ├── Review.cs
│   ├── Role.cs
│   ├── User.cs
│   ├── UserVoucher.cs
│   └── Voucher.cs
├── Pages/
│   ├── Admin/
│   │   ├── Blog.cshtml
│   │   └── Blog.cshtml.cs
│   ├── Error.cshtml
│   ├── Error.cshtml.cs
│   └── _ViewImports.cshtml
├── Properties/
│   └── launchSettings.json
├── Services/
│   ├── AIService.cs
│   ├── AIService_New.cs
│   ├── ChatService.cs
│   ├── CloudinaryService.cs
│   ├── ContextManager.cs
│   ├── DatabaseSeeder.cs
│   ├── EmailService.cs
│   ├── GeminiService.cs
│   ├── ICloudinaryService.cs
│   ├── JwtService.cs
│   ├── KnowledgeBaseSeeder.cs
│   ├── KnowledgeExportService.cs
│   ├── MoMoPaymentService.cs
│   ├── PayPalService.cs
│   └── UserService.cs
├── bin/
├── obj/
├── wwwroot/
│   ├── 638777289693476398_FB_IMG_1555386600216.jpg
│   ├── 638777301336393535_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638777308153943069_FB_IMG_1555386600216.jpg
│   ├── 638781973986999931_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638782724359458464_Screenshot 2024-12-14 110409.png
│   ├── 638785860496963266_iphone-16-pro-max-titan-tu-nhien_2.webp
│   ├── 638786227099043452_nappa.jpg
│   ├── 638787272129082719_JAY_2020.jpg
│   ├── 638787272807398721_JAY_2055.jpg
│   ├── 638787272833945420_JAY_2055.jpg
│   ├── 638787272897870762_JAY_2055.jpg
│   ├── 638787273014418338_JAY_2046.jpg
│   ├── 638787273063720114_JAY_2046.jpg
│   ├── 638787273194311800_JAY_2055.jpg
│   ├── 638787273230303421_JAY_2055.jpg
│   ├── 638788272033742183_dell_xps_13_9350_xam_1_adcc33cd57.jpg
│   ├── 638788276476562956_dell_xps_13_9350_xam_1_adcc33cd57.jpg
│   ├── 638788288762590589_tai_nghe_chup_tai_gaming_sony_inzone_h3_dd_cd6ab0d099.jpg
│   ├── 638789596878470228_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638789600041707668_iphone_16_pro_max_desert_titan_3552a28ae0.png
│   ├── 638789608324917318_SonyWH-1000XM5.jpg
│   ├── 638789613041488955_SonyWH-1000XM5.jpg
│   ├── 638789696909576202_Screenshot 2024-02-29 215741.png
│   ├── 638792361638664844_JAY_2055.jpg
│   └── 638832540143370150_596c5b52-9dd0-4544-840e-e895e2e6bcbd.jpg
├── .gitignore
├── .hintrc
├── CORS_CONFIGURATION.md
├── CORS_SOLUTION_SUMMARY.md
├── CORS_TESTING.md
├── Program.cs
├── SHN-Gear.csproj
├── SHNGear.sln
├── WeatherForecast.cs
├── appsettings.Development.json
├── appsettings.json
├── appsettings.ratelimit.json
├── package.json
└── tailwind.config.js
```

## FILE CONTENTS

### Program.cs
```cs
using Microsoft.Extensions.FileProviders;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using SHN_Gear.Data;
using System.Text.Json.Serialization;
using CloudinaryDotNet;
using SHN_Gear.Services;
using Microsoft.OpenApi.Models;
using SHN_Gear.Middleware;
using SHN_Gear.Configuration;
// using SHN_Gear.Export; // KnowledgeExportService nằm trong SHN_Gear.Services, không cần dòng này

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddMemoryCache();

// 🔹 Kết nối SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"),
    sqlOptions => sqlOptions.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery)));

// 🔹 Session
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

// 🔹 Các dịch vụ
builder.Services.AddScoped<UserService>();
builder.Services.AddScoped<EmailService>();
builder.Services.AddSingleton<PayPalService>();
builder.Services.AddScoped<MoMoPaymentService>();

// 🔹 Chat & AI Services
builder.Services.AddScoped<ContextManager>();
// builder.Services.AddScoped<AIService>(); // Tạm thời vô hiệu hóa AI

// Đăng ký KnowledgeExportService để export tri thức từ DB
// Ensure KnowledgeExportService exists in your project and the correct namespace is used above.
// If it does not exist, comment out or remove the following line:
// builder.Services.AddScoped<KnowledgeExportService>();
builder.Services.AddScoped<KnowledgeExportService>();
builder.Services.AddScoped<ChatService>();
builder.Services.AddScoped<DatabaseSeeder>();

// 🔹 HttpClient for external API calls
builder.Services.AddHttpClient<GeminiService>();
builder.Services.AddMemoryCache();

// 🔹 SignalR for real-time chat
builder.Services.AddSignalR(options =>
{
    options.EnableDetailedErrors = true;
}).AddJsonProtocol(options =>
{
    options.PayloadSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
});

// 🔹 JWT Authentication
var jwtKey = builder.Configuration["Jwt:Key"] ?? throw new InvalidOperationException("JWT Key not configured");
var key = Encoding.UTF8.GetBytes(jwtKey);
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(key),
            RoleClaimType = System.Security.Claims.ClaimTypes.Role
        };


        // Configure for SignalR
        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = context =>
            {
                var accessToken = context.Request.Query["access_token"];
                var path = context.HttpContext.Request.Path;

                // If the request is for our hub and there's a token, use it
                if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments("/chatHub"))
                {
                    context.Token = accessToken;
                }

                return Task.CompletedTask;
            }
        };
    });

// 🔹 CORS Configuration
builder.Services.ConfigureCors(builder.Environment);

// 🔹 Swagger + JWT Support
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "SHN_Gear API", Version = "v1" });

    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "Nhập token theo định dạng: Bearer {token}",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

// 🔹 JSON vòng lặp
builder.Services.AddControllersWithViews()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
        // Ensure UTC DateTimes are serialized with 'Z' suffix for proper timezone handling
        options.JsonSerializerOptions.WriteIndented = false;
        // Default converter will serialize DateTime as ISO 8601 with 'Z' for UTC
    });

builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// 🔹 Unified CORS Middleware - handles ALL CORS scenarios in one place
app.UseMiddleware<UnifiedCorsMiddleware>();

// 🔹 CORS Debug Middleware (development only)
if (app.Environment.IsDevelopment())
{
    app.UseMiddleware<HeaderLoggingMiddleware>();
    app.UseMiddleware<CorsDebugMiddleware>();
}

// Thêm middleware rate limit đơn giản cho API Gemini/chat
app.UseMiddleware<SimpleRateLimitMiddleware>();

// 🔹 Middlewares (đúng thứ tự)
if (!app.Environment.IsDevelopment())
{
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// 🔹 CORS Configuration
app.UseCorsConfiguration();

app.UseAuthentication();
app.UseAuthorization();

app.UseSession();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}



// Tự động export tri thức website ra file JSON khi khởi động (đồng bộ, đảm bảo chắc chắn export xong trước khi app chạy)
try
{
    using (var scope = app.Services.CreateScope())
    {
        var exportService = scope.ServiceProvider.GetService<KnowledgeExportService>();
        if (exportService != null)
        {
            // Đảm bảo export ra đúng thư mục Data ở gốc project
            var projectRoot = AppContext.BaseDirectory;
            while (!string.IsNullOrEmpty(projectRoot) && !File.Exists(Path.Combine(projectRoot, "SHNGear.sln")))
            {
                projectRoot = Directory.GetParent(projectRoot)?.FullName ?? "";
            }
            var dataDir = Path.Combine(projectRoot, "Data");
            if (!Directory.Exists(dataDir)) Directory.CreateDirectory(dataDir);
            var knowledgePath = Path.Combine(dataDir, "WebsiteKnowledgeBase.json");
            exportService.ExportWebsiteKnowledgeBaseAsync(knowledgePath).GetAwaiter().GetResult();
            Console.WriteLine($"[KnowledgeExport] Exported tri thức website ra {knowledgePath}");
        }
    }
}
catch (Exception ex)
{
    Console.WriteLine($"[KnowledgeExport] Export failed: {ex.Message}");
}

app.MapControllers();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");

// 🔹 Map SignalR Hub với CORS policy riêng
app.MapHub<SHN_Gear.Hubs.ChatHub>("/chatHub").RequireCors("SignalRPolicy");

app.MapFallbackToFile("index.html");

// 🔹 Seed database on startup if requested
if (args.Contains("--seed-data"))
{
    using (var scope = app.Services.CreateScope())
    {
        var seeder = scope.ServiceProvider.GetRequiredService<DatabaseSeeder>();
        await seeder.SeedAsync();
        Console.WriteLine("Database seeding completed!");
        return;
    }
}

app.Run();

```

### tailwind.config.js
```js
module.exports = {
    content: ["./src/**/*.{js,jsx,ts,tsx}"],
    theme: {
      extend: {},
    },
    plugins: [require("tailwindcss-animate")],
  };
  
```

### WeatherForecast.cs
```cs
namespace SHN_Gear;

public class WeatherForecast
{
    public DateOnly Date { get; set; }

    public int TemperatureC { get; set; }

    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    public string? Summary { get; set; }
}

```

### ClientApp\aspnetcore-https.js
```js
// This script sets up HTTPS for the application using the ASP.NET Core HTTPS certificate
const fs = require('fs');
const spawn = require('child_process').spawn;
const path = require('path');

const baseFolder =
  process.env.APPDATA !== undefined && process.env.APPDATA !== ''
    ? `${process.env.APPDATA}/ASP.NET/https`
    : `${process.env.HOME}/.aspnet/https`;

const certificateArg = process.argv.map(arg => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;

if (!certificateName) {
  console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.')
  process.exit(-1);
}

const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
  spawn('dotnet', [
    'dev-certs',
    'https',
    '--export-path',
    certFilePath,
    '--format',
    'Pem',
    '--no-password',
  ], { stdio: 'inherit', })
  .on('exit', (code) => process.exit(code));
}

```

### ClientApp\aspnetcore-react.js
```js
// This script configures the .env.development.local file with additional environment variables to configure HTTPS using the ASP.NET Core
// development certificate in the webpack development proxy.

const fs = require('fs');
const path = require('path');

const baseFolder =
  process.env.APPDATA !== undefined && process.env.APPDATA !== ''
    ? `${process.env.APPDATA}/ASP.NET/https`
    : `${process.env.HOME}/.aspnet/https`;

const certificateArg = process.argv.map(arg => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;

if (!certificateName) {
  console.error('Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly.')
  process.exit(-1);
}

const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync('.env.development.local')) {
  fs.writeFileSync(
    '.env.development.local',
`SSL_CRT_FILE=${certFilePath}
SSL_KEY_FILE=${keyFilePath}`
  );
} else {
  let lines = fs.readFileSync('.env.development.local')
    .toString()
    .split('\n');

  let hasCert, hasCertKey = false;
  for (const line of lines) {
    if (/SSL_CRT_FILE=.*/i.test(line)) {
      hasCert = true;
    }
    if (/SSL_KEY_FILE=.*/i.test(line)) {
      hasCertKey = true;
    }
  }
  if (!hasCert) {
    fs.appendFileSync(
      '.env.development.local',
      `\nSSL_CRT_FILE=${certFilePath}`
    );
  }
  if (!hasCertKey) {
    fs.appendFileSync(
      '.env.development.local',
      `\nSSL_KEY_FILE=${keyFilePath}`
    );
  }
}

```

### ClientApp\craco.config.js
```js
const path = require("path");

module.exports = {
  webpack: {
    alias: {
      "@": path.resolve(__dirname, "src"),
      "@/components": path.resolve(__dirname, "src/components"),
      "@/pages": path.resolve(__dirname, "src/pages"),
      "@/utils": path.resolve(__dirname, "src/utils"),
      "@/services": path.resolve(__dirname, "src/services"),
      "@/assets": path.resolve(__dirname, "src/assets"),
      "@/styles": path.resolve(__dirname, "src/assets/styles"),
      "@/contexts": path.resolve(__dirname, "src/contexts"),
      "@/hooks": path.resolve(__dirname, "src/hook"),
      "@/config": path.resolve(__dirname, "src/config"),
    },
  },
  jest: {
    configure: {
      moduleNameMapping: {
        "^@/(.*)$": "<rootDir>/src/$1",
        "^@/components/(.*)$": "<rootDir>/src/components/$1",
        "^@/pages/(.*)$": "<rootDir>/src/pages/$1",
        "^@/utils/(.*)$": "<rootDir>/src/utils/$1",
        "^@/services/(.*)$": "<rootDir>/src/services/$1",
        "^@/assets/(.*)$": "<rootDir>/src/assets/$1",
        "^@/styles/(.*)$": "<rootDir>/src/assets/styles/$1",
        "^@/contexts/(.*)$": "<rootDir>/src/contexts/$1",
        "^@/hooks/(.*)$": "<rootDir>/src/hook/$1",
        "^@/config/(.*)$": "<rootDir>/src/config/$1",
      },
    },
  },
};

```

### ClientApp\postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

```

### ClientApp\tailwind.config.js
```js
const { fontFamily } = require('tailwindcss/defaultTheme');

module.exports = {
  content: [
    "./src/**/*.{html,js,jsx,ts,tsx}",
    "./public/index.html",
  ],
  theme: {
    extend: {
      colors: {
        'primary-dark': '#121212',
        'electric-blue': '#00BFFF',
        'neon-magenta': '#FF00FF',
        'light-gray': '#A0A0A0',
      },
      fontFamily: {
        sans: ['Inter', ...fontFamily.sans],
        display: ['"Monument Extended"', ...fontFamily.sans],
      },
      borderColor: {
        'white-20': 'rgba(255, 255, 255, 0.2)',
      },
      scale: {
        '102': '1.02',
        '105': '1.05',
      },
      boxShadow: {
        'neon-blue': '0 0 15px rgba(0, 191, 255, 0.6)',
        'neon-magenta': '0 0 15px rgba(255, 0, 255, 0.6)',
      },
    },
  },
  plugins: [require('flowbite/plugin')],
};

```

### ClientApp\scripts\convert-imports.js
```js
#!/usr/bin/env node

/**
 * Script để chuyển đổi relative imports thành alias imports
 * Sử dụng: node convert-imports.js [file-path]
 */

const fs = require("fs");
const path = require("path");

// Mapping của các alias
const ALIAS_MAPPINGS = {
  components: "@/components",
  pages: "@/pages",
  utils: "@/utils",
  services: "@/services",
  assets: "@/assets",
  contexts: "@/contexts",
  hook: "@/hooks",
  config: "@/config",
};

function convertImports(filePath) {
  if (!fs.existsSync(filePath)) {
    console.error(`File không tồn tại: ${filePath}`);
    return;
  }

  let content = fs.readFileSync(filePath, "utf8");
  const originalContent = content;

  // Regex để tìm các import statements
  const importRegex = /import\s+(?:[\w\s{},*]+\s+from\s+)?['"]([^'"]+)['"]/g;

  content = content.replace(importRegex, (match, importPath) => {
    // Bỏ qua nếu không phải relative import
    if (!importPath.startsWith(".")) {
      return match;
    }

    // Chuyển đổi relative path thành absolute path
    const currentDir = path.dirname(filePath);
    const resolvedPath = path.resolve(currentDir, importPath);
    const srcDir = path.resolve(
      path.dirname(filePath),
      "../".repeat(importPath.split("../").length - 1)
    );

    // Tính relative path từ src directory
    let relativePath = path.relative(srcDir, resolvedPath);

    // Chuẩn hóa path separators cho Windows
    relativePath = relativePath.replace(/\\/g, "/");

    // Tìm alias phù hợp
    for (const [folder, alias] of Object.entries(ALIAS_MAPPINGS)) {
      if (relativePath.startsWith(folder + "/") || relativePath === folder) {
        const newPath = relativePath.replace(new RegExp(`^${folder}`), alias);
        return match.replace(importPath, newPath);
      }
    }

    // Nếu không tìm thấy alias phù hợp, sử dụng @ root
    if (!relativePath.startsWith("@")) {
      const newPath = "@/" + relativePath;
      return match.replace(importPath, newPath);
    }

    return match;
  });

  // Chỉ ghi file nếu có thay đổi
  if (content !== originalContent) {
    fs.writeFileSync(filePath, content, "utf8");
    console.log(`✅ Đã cập nhật: ${filePath}`);
  } else {
    console.log(`⏭️  Không có thay đổi: ${filePath}`);
  }
}

function convertDirectory(dirPath) {
  if (!fs.existsSync(dirPath)) {
    console.error(`Thư mục không tồn tại: ${dirPath}`);
    return;
  }

  const files = fs.readdirSync(dirPath);

  files.forEach((file) => {
    const fullPath = path.join(dirPath, file);
    const stat = fs.statSync(fullPath);

    if (
      stat.isDirectory() &&
      !file.startsWith(".") &&
      file !== "node_modules"
    ) {
      convertDirectory(fullPath);
    } else if (
      stat.isFile() &&
      (file.endsWith(".js") ||
        file.endsWith(".jsx") ||
        file.endsWith(".ts") ||
        file.endsWith(".tsx"))
    ) {
      convertImports(fullPath);
    }
  });
}

// Main execution
const targetPath = process.argv[2];

if (!targetPath) {
  console.log(
    "Sử dụng: node convert-imports.js [file-path hoặc directory-path]"
  );
  process.exit(1);
}

const resolvedPath = path.resolve(targetPath);

if (fs.statSync(resolvedPath).isDirectory()) {
  console.log(`🔄 Chuyển đổi tất cả files trong thư mục: ${resolvedPath}`);
  convertDirectory(resolvedPath);
} else {
  console.log(`🔄 Chuyển đổi file: ${resolvedPath}`);
  convertImports(resolvedPath);
}

console.log("✨ Hoàn thành!");

```

### ClientApp\src\App.js
```js
import React, { Component, useEffect } from "react";
import { useAuthContext } from "@/hooks/auth/useAuth";
import SessionExpiredModal from "@/components/SessionExpiredModal";
import { Route, Routes, Navigate, useLocation } from "react-router-dom";
import AppRoutes from "./AppRoutes";
import AdminLayout from "@/components/layouts/AdminLayout"; // Add this line back
import DefaultLayout from "@/components/layouts/DefaultLayout";
import ProductPage from "@/pages/ProductPage/ProductPage";
import ProfilePage from "@/pages/ProfilePage/ProfilePage";
import ProfileInfo from "@/components/Profile/ProfileInfo";
import AddressBook from "@/components/Profile/AddressBook";
import UserOrders from "@/components/Profile/UserOrders";
import LoyaltyProgram from "@/components/Profile/LoyaltyProgram";
import ProductList from "@/pages/ProductList/ProductList";
import Shoppingcart from "@/pages/shoppingcart/shoppingcart";
import Checkout from "@/components/Checkout/Checkout";
import PaymentSuccess from "@/components/PaymentSuccess/PaymentSuccess";
// import OrderLookup from "@/components/Order/OrderLookup";
import ComparePage from "@/components/CompareProduct/ComparePage";
import Unauthorized from "@/pages/Unauthorized/Unauthorized";
import { jwtDecode } from "jwt-decode";

// Import Chat Components
import ChatWidget from "@/components/Chat/ChatWidget";
import AdminChatDashboard from "@/components/Chat/AdminChatDashboard";

// Protected Route Component - Phiên bản tối ưu
const ProtectedRoute = ({ children, adminOnly = false }) => {
  const token = localStorage.getItem("token");

  if (!token) {
    return <Navigate to="/" replace />;
  }

  try {
    const decoded = jwtDecode(token);
    const isAdmin = decoded.roleId === "1"; // So sánh trực tiếp với string "1"

    // Nếu route yêu cầu admin mà user không phải admin
    if (adminOnly && !isAdmin) {
      return <Navigate to="/unauthorized" replace />;
    }

    return children;
  } catch (error) {
    console.error("Token error:", error);
    localStorage.removeItem("token"); // Clear token invalid
    return <Navigate to="/" replace />;
  }
};

// Component to conditionally render ChatWidget
const ConditionalChatWidget = () => {
  const location = useLocation();
  const isAdminPage = location.pathname.startsWith("/admin");

  // Don't show ChatWidget on admin pages
  if (isAdminPage) {
    return null;
  }

  return <ChatWidget />;
};

// Functional App component để dùng hook
const App = () => {
  const { sessionExpired, logout } = useAuthContext();
  const location = useLocation();

  useEffect(() => {
    if (sessionExpired) {
      logout();
    }
  }, [sessionExpired, logout]);

  const handleLoginRedirect = () => {
    window.location.href = "/"; // hoặc chuyển hướng đến trang đăng nhập nếu có
  };

  return (
    <>
      <SessionExpiredModal open={sessionExpired} onLogin={handleLoginRedirect} />
      <Routes>
        {/* Các route đặc biệt không cần bảo vệ */}
        <Route path="/checkout" element={<DefaultLayout><Checkout /></DefaultLayout>} />
        <Route path="/shoppingcart" element={<DefaultLayout><Shoppingcart /></DefaultLayout>} />
        <Route path="/productlist" element={<DefaultLayout><ProductList /></DefaultLayout>} />
        <Route path="/profile" element={<DefaultLayout><ProfilePage /></DefaultLayout>} />
        <Route path="/product/:id" element={<DefaultLayout><ProductPage /></DefaultLayout>} />
        <Route path="/unauthorized" element={<DefaultLayout><Unauthorized /></DefaultLayout>} />
        <Route path="/payment-success" element={<DefaultLayout><PaymentSuccess /></DefaultLayout>} />
        <Route path="/order-lookup" element={<DefaultLayout><React.Suspense fallback={<div>Đang tải trang tra cứu đơn hàng...</div>}>
          {React.createElement(require("@/pages/OrderLookupPage/OrderLookupPage.jsx").default)}
        </React.Suspense></DefaultLayout>} />
        <Route path="/compare" element={<DefaultLayout><ComparePage /></DefaultLayout>} />

        {/* Admin Chat Dashboard Route */}
        <Route
          path="/admin/chat"
          element={
            <ProtectedRoute adminOnly={true}>
              <AdminLayout>
                <AdminChatDashboard />
              </AdminLayout>
            </ProtectedRoute>
          }
        />

        {/* Protected Profile routes */}
        <Route
          path="/profile"
          element={
            <ProtectedRoute>
              <ProfilePage />
            </ProtectedRoute>
          }
        >
          <Route index element={<ProfileInfo />} />
          <Route path="info" element={<ProfileInfo />} />
          <Route path="address" element={<AddressBook />} />
          <Route path="orders" element={<UserOrders />} />
          <Route path="loyalty" element={<LoyaltyProgram />} />
        </Route>
        {/* Xử lý các route từ AppRoutes */}
        {AppRoutes.map((route) => {
          const isAdminRoute = route.path?.startsWith("/admin");

          return (
            <Route
              key={route.path}
              path={route.path}
              element={
                isAdminRoute ? (
                  <ProtectedRoute adminOnly={true}>
                    <AdminLayout>{route.element}</AdminLayout>
                  </ProtectedRoute>
                ) : (
                  <DefaultLayout>{route.element}</DefaultLayout>
                )
              }
            />
          );
        })}
      </Routes>

      {/* Chat Widget - ẩn trên các trang admin */}
      <ConditionalChatWidget />
    </>
  );
};

export default App;

```

### ClientApp\src\App.test.js
```js
import React from 'react';
import { createRoot } from 'react-dom/client';
import { MemoryRouter } from 'react-router-dom';
import App from './App';

it('renders without crashing', async () => {
  const div = document.createElement('div');
  const root = createRoot(div);
  root.render(
    <MemoryRouter>
      <App />
    </MemoryRouter>);
  await new Promise(resolve => setTimeout(resolve, 1000));
});

```

### ClientApp\src\AppRoutes.js
```js
import HomePage from "@/pages/Home/HomePage";
import OverviewPage from "@/pages/Admin/OverviewPage";
import ProductsPage from "@/pages/Admin/ProductsPage";
import UsersPage from "@/pages/Admin/UsersPage";
import SalesPage from "@/pages/Admin/SalesPage";
import OrdersPage from "@/pages/Admin/OrdersPage";
import AnalyticsPage from "@/pages/Admin/AnalyticsPage";
import HomepageAdminPage from "@/pages/Admin/HomepageAdminPage";
import CategoryAdminPage from "@/pages/Admin/CategoryAdminPage";
import FlashSaleAdminPage from "@/pages/Admin/FlashSaleAdminPage";
import HomepageOverviewPage from "@/pages/Admin/HomepageOverviewPage";
import SettingsPage from "@/pages/Admin/SettingsPage";
import ProductPage from "@/pages/ProductPage/ProductPage";
import ProfilePage from "@/pages/ProfilePage/ProfilePage";
import ProductList from "@/pages/ProductList/ProductList";
import Shoppingcart from "@/pages/shoppingcart/shoppingcart";
import Unauthorized from "@/pages/Unauthorized/Unauthorized";
import BestSellerAdminPage from "@/pages/Admin/BestSellerAdminPage";
import ReviewManagementPage from "@/pages/Admin/ReviewManagementPage";
import BlogList from "@/pages/blog/BlogList";
import BlogPostDetail from "@/pages/blog/BlogPostDetail";
import BlogPostEditor from "@/pages/blog/BlogPostEditor";

const AppRoutes = [
  {
    path: "/admin/reviews",
    element: <ReviewManagementPage />,
    requiresAdmin: true,
  },
  // Blog routes
  {
    path: "/blog",
    element: <BlogList />,
  },
  {
    path: "/blog/:id",
    element: <BlogPostDetail />,
  },
  {
    path: "/admin/blog",
    element: <BlogList />,
    requiresAdmin: true,
  },
  {
    path: "/admin/blog/new",
    element: <BlogPostEditor />,
    requiresAdmin: true,
  },
  {
    path: "/admin/blog/edit/:id",
    element: <BlogPostEditor />,
    requiresAdmin: true,
  },
  {
    path: "/admin/best-sellers",
    element: <BestSellerAdminPage />,
    requiresAdmin: true,
  },
  {
    path: "/",
    element: <HomePage />,
  },
  // Admin routes - will be protected by ProtectedRoute
  {
    path: "/admin/overview",
    element: <OverviewPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/products",
    element: <ProductsPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/users",
    element: <UsersPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/sales",
    element: <SalesPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/orders",
    element: <OrdersPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/analytics",
    element: <AnalyticsPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/settings",
    element: <SettingsPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/homepage",
    element: <HomepageAdminPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/categories",
    element: <CategoryAdminPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/flash-sale",
    element: <FlashSaleAdminPage />,
    requiresAdmin: true,
  },
  {
    path: "/admin/homepage-dashboard",
    element: <HomepageOverviewPage />,
    requiresAdmin: true,
  },
  // Public routes
  {
    path: "/ProductPage/",
    element: <ProductPage />,
  },
  {
    path: "/Profile/",
    element: <ProfilePage />,
  },
  {
    path: "/productlist/",
    element: <ProductList />,
  },
  {
    path: "/shoppingcart/",
    element: <Shoppingcart />,
  },
  {
    path: "/unauthorized",
    element: <Unauthorized />,
  },
];

export default AppRoutes;

```

### ClientApp\src\index.js
```js
import "bootstrap/dist/css/bootstrap.css";
import React from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import { AuthProvider } from "@/hooks/auth/useAuth";
import * as serviceWorkerRegistration from "./serviceWorkerRegistration";
import reportWebVitals from "./reportWebVitals";
import "./assets/styles/base.css";
const baseUrl = document.getElementsByTagName("base")[0].getAttribute("href");
const rootElement = document.getElementById("root");
const root = createRoot(rootElement);

root.render(
  <BrowserRouter basename={baseUrl}>
    <AuthProvider>
      <App />
    </AuthProvider>
  </BrowserRouter>
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

### ClientApp\src\reportWebVitals.js
```js
const reportWebVitals = (onPerfEntry) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

### ClientApp\src\service-worker.js
```js
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

```

### ClientApp\src\serviceWorkerRegistration.js
```js
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch((error) => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log('No internet connection found. App is running in offline mode.');
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister();
      })
      .catch((error) => {
        console.error(error.message);
      });
  }
}

```

### ClientApp\src\setupProxy.js
```js
const { createProxyMiddleware } = require('http-proxy-middleware');
const { env } = require('process');

const target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` :
  env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(';')[0] : 'https://localhost:7107';

const context = [
  "/weatherforecast",
  "/api/homepage-config",
  "/api/products",
];

const onError = (err, req, resp, target) => {
    console.error(`${err.message}`);
}

module.exports = function (app) {
  const appProxy = createProxyMiddleware(context, {
    proxyTimeout: 10000,
    target: target,
    // Handle errors to prevent the proxy middleware from crashing when
    // the ASP NET Core webserver is unavailable
    onError: onError,
    secure: false,
    // Uncomment this line to add support for proxying websockets
    //ws: true, 
    headers: {
      Connection: 'Keep-Alive'
    }
  });

  app.use(appProxy);
};

```

### ClientApp\src\components\ProtectedRoute.jsx
```jsx
// src/components/ProtectedRoute.jsx
import { jwtDecode } from "jwt-decode";
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const token = localStorage.getItem("token");
  
  if (!token) return <Navigate to="/" replace />;

  try {
    const decoded = jwtDecode(token);
    
    // Lấy role name từ standard claim hoặc Microsoft claim
    const roleName = (
      decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || 
      decoded.role || 
      ''
    ).toString().toLowerCase(); // Chuẩn hóa về chữ thường
    
    const isAdmin = roleName === 'Admin'; // So sánh không phân biệt hoa thường
    
    if (!isAdmin) return <Navigate to="/unauthorized" replace />;
    
    return children;
  } catch (error) {
    console.error("Token error:", error);
    return <Navigate to="/" replace />;
  }
};
```

### ClientApp\src\components\SessionExpiredModal.jsx
```jsx
import React from "react";

const SessionExpiredModal = ({ open, onLogin }) => {
  if (!open) return null;
  return (
    <div style={{
      position: "fixed",
      top: 0,
      left: 0,
      width: "100vw",
      height: "100vh",
      background: "rgba(0,0,0,0.4)",
      zIndex: 9999,
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }}>
      <div style={{
        background: "#fff",
        padding: 32,
        borderRadius: 8,
        boxShadow: "0 2px 16px rgba(0,0,0,0.2)",
        minWidth: 320,
        textAlign: "center"
      }}>
        <h2>Phiên đăng nhập đã hết hạn</h2>
        <p>Vui lòng đăng nhập lại để tiếp tục sử dụng dịch vụ.</p>
        <button
          style={{
            marginTop: 16,
            padding: "8px 24px",
            background: "#007bff",
            color: "#fff",
            border: "none",
            borderRadius: 4,
            cursor: "pointer"
          }}
          onClick={onLogin}
        >
          Đăng nhập lại
        </button>
      </div>
    </div>
  );
};

export default SessionExpiredModal;

```

### ClientApp\src\components\Admin\analytics\AIPoweredInsights.jsx
```jsx
import { motion } from "framer-motion";
import { TrendingUp, Users, ShoppingBag, DollarSign } from "lucide-react";

const INSIGHTS = [
	{
		icon: TrendingUp,
		color: "text-green-500",
		insight: "Revenue is up 15% compared to last month, driven primarily by a successful email campaign.",
	},
	{
		icon: Users,
		color: "text-blue-500",
		insight: "Customer retention has improved by 8% following the launch of the new loyalty program.",
	},
	{
		icon: ShoppingBag,
		color: "text-purple-500",
		insight: 'Product category "Electronics" shows the highest growth potential based on recent market trends.',
	},
	{
		icon: DollarSign,
		color: "text-yellow-500",
		insight: "Optimizing pricing strategy could potentially increase overall profit margins by 5-7%.",
	},
];

const AIPoweredInsights = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 1.0 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>AI-Powered Insights</h2>
			<div className='space-y-4'>
				{INSIGHTS.map((item, index) => (
					<div key={index} className='flex items-center space-x-3'>
						<div className={`p-2 rounded-full ${item.color} bg-opacity-20`}>
							<item.icon className={`size-6 ${item.color}`} />
						</div>
						<p className='text-gray-300'>{item.insight}</p>
					</div>
				))}
			</div>
		</motion.div>
	);
};
export default AIPoweredInsights;

```

### ClientApp\src\components\Admin\analytics\ChannelPerformance.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from "recharts";

const channelData = [
	{ name: "Organic Search", value: 4000 },
	{ name: "Paid Search", value: 3000 },
	{ name: "Direct", value: 2000 },
	{ name: "Social Media", value: 2780 },
	{ name: "Referral", value: 1890 },
	{ name: "Email", value: 2390 },
];
const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE", "#00C49F"];

const ChannelPerformance = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Channel Performance</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={channelData}
							cx='50%'
							cy='50%'
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{channelData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default ChannelPerformance;

```

### ClientApp\src\components\Admin\analytics\CustomerSegmentation.jsx
```jsx
import { motion } from "framer-motion";
import {
	ResponsiveContainer,
	Radar,
	RadarChart,
	PolarGrid,
	PolarAngleAxis,
	PolarRadiusAxis,
	Legend,
	Tooltip,
} from "recharts";

const customerSegmentationData = [
	{ subject: "Engagement", A: 120, B: 110, fullMark: 150 },
	{ subject: "Loyalty", A: 98, B: 130, fullMark: 150 },
	{ subject: "Satisfaction", A: 86, B: 130, fullMark: 150 },
	{ subject: "Spend", A: 99, B: 100, fullMark: 150 },
	{ subject: "Frequency", A: 85, B: 90, fullMark: 150 },
	{ subject: "Recency", A: 65, B: 85, fullMark: 150 },
];

const CustomerSegmentation = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.6 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Customer Segmentation</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<RadarChart cx='50%' cy='50%' outerRadius='80%' data={customerSegmentationData}>
						<PolarGrid stroke='#374151' />
						<PolarAngleAxis dataKey='subject' stroke='#9CA3AF' />
						<PolarRadiusAxis angle={30} domain={[0, 150]} stroke='#9CA3AF' />
						<Radar name='Segment A' dataKey='A' stroke='#8B5CF6' fill='#8B5CF6' fillOpacity={0.6} />
						<Radar name='Segment B' dataKey='B' stroke='#10B981' fill='#10B981' fillOpacity={0.6} />
						<Legend />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
					</RadarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default CustomerSegmentation;

```

### ClientApp\src\components\Admin\analytics\OverviewCards.jsx
```jsx
import { motion } from "framer-motion";
import { DollarSign, Users, ShoppingBag, Eye, ArrowDownRight, ArrowUpRight } from "lucide-react";

const overviewData = [
	{ name: "Revenue", value: "$1,234,567", change: 12.5, icon: DollarSign },
	{ name: "Users", value: "45,678", change: 8.3, icon: Users },
	{ name: "Orders", value: "9,876", change: -3.2, icon: ShoppingBag },
	{ name: "Page Views", value: "1,234,567", change: 15.7, icon: Eye },
];

const OverviewCards = () => {
	return (
		<div className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'>
			{overviewData.map((item, index) => (
				<motion.div
					key={item.name}
					className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg
            rounded-xl p-6 border border-gray-700
          '
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ delay: index * 0.1 }}
				>
					<div className='flex items-center justify-between'>
						<div>
							<h3 className='text-sm font-medium text-gray-400'>{item.name}</h3>
							<p className='mt-1 text-xl font-semibold text-gray-100'>{item.value}</p>
						</div>

						<div
							className={`
              p-3 rounded-full bg-opacity-20 ${item.change >= 0 ? "bg-green-500" : "bg-red-500"}
              `}
						>
							<item.icon className={`size-6  ${item.change >= 0 ? "text-green-500" : "text-red-500"}`} />
						</div>
					</div>
					<div
						className={`
              mt-4 flex items-center ${item.change >= 0 ? "text-green-500" : "text-red-500"}
            `}
					>
						{item.change >= 0 ? <ArrowUpRight size='20' /> : <ArrowDownRight size='20' />}
						<span className='ml-1 text-sm font-medium'>{Math.abs(item.change)}%</span>
						<span className='ml-2 text-sm text-gray-400'>vs last period</span>
					</div>
				</motion.div>
			))}
		</div>
	);
};
export default OverviewCards;

```

### ClientApp\src\components\Admin\analytics\ProductPerformance.jsx
```jsx
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { motion } from "framer-motion";

const productPerformanceData = [
	{ name: "Product A", sales: 4000, revenue: 2400, profit: 2400 },
	{ name: "Product B", sales: 3000, revenue: 1398, profit: 2210 },
	{ name: "Product C", sales: 2000, revenue: 9800, profit: 2290 },
	{ name: "Product D", sales: 2780, revenue: 3908, profit: 2000 },
	{ name: "Product E", sales: 1890, revenue: 4800, profit: 2181 },
];

const ProductPerformance = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Product Performance</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<BarChart data={productPerformanceData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey='sales' fill='#8B5CF6' />
						<Bar dataKey='revenue' fill='#10B981' />
						<Bar dataKey='profit' fill='#F59E0B' />
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default ProductPerformance;

```

### ClientApp\src\components\Admin\analytics\RevenueChart.jsx
```jsx
import { useState } from "react";
import { motion } from "framer-motion";
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";

const revenueData = [
	{ month: "Jan", revenue: 4000, target: 3800 },
	{ month: "Feb", revenue: 3000, target: 3200 },
	{ month: "Mar", revenue: 5000, target: 4500 },
	{ month: "Apr", revenue: 4500, target: 4200 },
	{ month: "May", revenue: 6000, target: 5500 },
	{ month: "Jun", revenue: 5500, target: 5800 },
	{ month: "Jul", revenue: 7000, target: 6500 },
];

const RevenueChart = () => {
	const [selectedTimeRange, setSelectedTimeRange] = useState("This Month");

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.2 }}
		>
			<div className='flex justify-between items-center mb-6'>
				<h2 className='text-xl font-semibold text-gray-100'>Revenue vs Target</h2>
				<select
					className='bg-gray-700 text-white rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500'
					value={selectedTimeRange}
					onChange={(e) => setSelectedTimeRange(e.target.value)}
				>
					<option>This Week</option>
					<option>This Month</option>
					<option>This Quarter</option>
					<option>This Year</option>
				</select>
			</div>

			<div style={{ width: "100%", height: 400 }}>
				<ResponsiveContainer>
					<AreaChart data={revenueData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{ backgroundColor: "rgba(31, 41, 55, 0.8)", borderColor: "#4B5563" }}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Area type='monotone' dataKey='revenue' stroke='#8B5CF6' fill='#8B5CF6' fillOpacity={0.3} />
						<Area type='monotone' dataKey='target' stroke='#10B981' fill='#10B981' fillOpacity={0.3} />
					</AreaChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default RevenueChart;

```

### ClientApp\src\components\Admin\analytics\UserRetention.jsx
```jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";

const userRetentionData = [
	{ name: "Week 1", retention: 100 },
	{ name: "Week 2", retention: 75 },
	{ name: "Week 3", retention: 60 },
	{ name: "Week 4", retention: 50 },
	{ name: "Week 5", retention: 45 },
	{ name: "Week 6", retention: 40 },
	{ name: "Week 7", retention: 38 },
	{ name: "Week 8", retention: 35 },
];

const UserRetention = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.5 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Retention</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={userRetentionData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='retention' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserRetention;

```

### ClientApp\src\components\Admin\common\CardProduct.jsx
```jsx
import { useState } from "react";
import { Select, MenuItem } from "@mui/material";
import { motion } from "framer-motion";

const CardProduct = ({ name, icon: Icon, value, color, options, onOptionChange }) => {
	const [selectedOption, setSelectedOption] = useState(options?.[0] || "");

	const handleOptionChange = (event) => {
		const newValue = event.target.value;
		setSelectedOption(newValue);
		onOptionChange(newValue);
	};

	return (
		<motion.div
			className="bg-gray-800 bg-opacity-50 backdrop-blur-md overflow-hidden shadow-lg rounded-xl border border-gray-700"
			whileHover={{ y: -5, boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.5)" }}
		>
			<div className="px-4 py-5 sm:p-6">
				<div className="flex items-center justify-between">
					<span className="flex items-center text-sm font-medium text-gray-400">
						<Icon size={20} className="mr-2" style={{ color }} />
						{name}
					</span>
					{options && (
						<Select
							value={selectedOption}
							onChange={handleOptionChange}
							size="small"
							variant="outlined"
							sx={{
								color: "white",
								backgroundColor: "rgba(255, 255, 255, 0.1)",
								borderRadius: 1,
								"& .MuiOutlinedInput-notchedOutline": { borderColor: "rgba(255, 255, 255, 0.2)" },
								"&:hover .MuiOutlinedInput-notchedOutline": { borderColor: "white" },
								"&.Mui-focused .MuiOutlinedInput-notchedOutline": { borderColor: color },
							}}
						>
							{options.map((option) => (
								<MenuItem key={option} value={option}>
									{option}
								</MenuItem>
							))}
						</Select>
					)}
				</div>
				<p className="mt-1 text-3xl font-semibold text-gray-100">{value}</p>
			</div>
		</motion.div>
	);
};

export default CardProduct;

```

### ClientApp\src\components\Admin\common\Header.jsx
```jsx
const Header = ({ title }) => {
	return (
		<header className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg border-b border-gray-700'>
			<div className='max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8'>
				<h1 className='text-2xl font-semibold text-gray-100'>{title}</h1>
			</div>
		</header>
	);
};
export default Header;

```

### ClientApp\src\components\Admin\common\Sidebar.jsx
```jsx
import { BarChart2, DollarSign, Menu, ShoppingBag, ShoppingCart, Users, Home, MessageCircle, LayoutDashboard, FileText } from "lucide-react";
import { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { Link } from "react-router-dom";
import { RateReview } from "@mui/icons-material";

const SIDEBAR_ITEMS = [
	{
		name: "Tổng quan",
		icon: BarChart2,
		color: "#6366f1",
		href: "/admin/overview",
	},
	{
		name: "Quản lý Trang chủ",
		icon: LayoutDashboard,
		color: "#F97316",
		href: "/admin/homepage-dashboard",
	},
	{ name: "Sản Phẩm", icon: ShoppingBag, color: "#8B5CF6", href: "/admin/products" },
	{ name: "Người Dùng", icon: Users, color: "#EC4899", href: "/admin/users" },
	{ name: "Bán Hàng", icon: DollarSign, color: "#10B981", href: "/admin/sales" },
	{ name: "Đơn Hàng", icon: ShoppingCart, color: "#F59E0B", href: "/admin/orders" },
	{ name: "Quản lý Đánh giá", icon: RateReview, color: "#FFD700", href: "/admin/reviews" },
	{ name: "Quản lý Blog", icon: FileText, color: "#34D399", href: "/admin/blog" },
	{ name: "Chat AI", icon: MessageCircle, color: "#06B6D4", href: "/admin/chat" },
	// { name: "Phân tích", icon: TrendingUp, color: "#3B82F6", href: "/admin/analytics" },
	// { name: "Settings", icon: Settings, color: "#6EE7B7", href: "/admin/settings" },
];

const Sidebar = () => {
	const [isSidebarOpen, setIsSidebarOpen] = useState(true);

	return (
		<motion.div
			className={`relative z-10 transition-all duration-300 ease-in-out flex-shrink-0 ${
				isSidebarOpen ? "w-64" : "w-20"
			}`}
			animate={{ width: isSidebarOpen ? 256 : 80 }}
		>
			<div className='h-full bg-gray-800 bg-opacity-50 backdrop-blur-md p-4 flex flex-col border-r border-gray-700'>
				<motion.button
					whileHover={{ scale: 1.1 }}
					whileTap={{ scale: 0.9 }}
					onClick={() => setIsSidebarOpen(!isSidebarOpen)}
					className='p-2 rounded-full hover:bg-gray-700 transition-colors max-w-fit'
				>
					<Menu size={24} />
				</motion.button>
				
				<nav className='mt-8 flex-grow'>
					{/* Logo/Home Link */}
		<Link to="/" className="mb-6">
		  <motion.div 
			className="flex items-center p-2 rounded-lg hover:bg-gray-700 transition-colors"
			whileHover={{ scale: 1.05 }}
		  >
			<Home size={24} className="text-indigo-400" />
			<AnimatePresence>
			  {isSidebarOpen && (
				<motion.span
				  className="ml-3 text-xl font-bold text-white"
				  initial={{ opacity: 0, x: -10 }}
				  animate={{ opacity: 1, x: 0 }}
				  exit={{ opacity: 0, x: -10 }}
				  transition={{ duration: 0.2 }}
				>
				  SHN Gear
				</motion.span>
			  )}
			</AnimatePresence>
		  </motion.div>
		</Link>
					{SIDEBAR_ITEMS.map((item) => (
						<Link key={item.href} to={item.href}>
							<motion.div className='flex items-center p-4 text-sm font-medium rounded-lg hover:bg-gray-700 transition-colors mb-2'>
								<item.icon size={20} style={{ color: item.color, minWidth: "20px" }} />
								<AnimatePresence>
									{isSidebarOpen && (
										<motion.span
											className='ml-4 whitespace-nowrap'
											initial={{ opacity: 0, width: 0 }}
											animate={{ opacity: 1, width: "auto" }}
											exit={{ opacity: 0, width: 0 }}
											transition={{ duration: 0.2, delay: 0.3 }}
										>
											{item.name}
										</motion.span>
									)}
								</AnimatePresence>
							</motion.div>
						</Link>
					))}

					
				</nav>
			</div>
		</motion.div>
	);
};
export default Sidebar;

```

### ClientApp\src\components\Admin\common\StatCard.jsx
```jsx
import { motion } from "framer-motion";

const StatCard = ({ name, icon: Icon, value, color }) => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md overflow-hidden shadow-lg rounded-xl border border-gray-700'
			whileHover={{ y: -5, boxShadow: "0 25px 50px -12px rgba(0, 0, 0, 0.5)" }}
		>
			<div className='px-4 py-5 sm:p-6'>
				<span className='flex items-center text-sm font-medium text-gray-400'>
					<Icon size={20} className='mr-2' style={{ color }} />
					{name}
				</span>
				<p className='mt-1 text-3xl font-semibold text-gray-100'>{value}</p>
			</div>
		</motion.div>
	);
};
export default StatCard;

```

### ClientApp\src\components\Admin\orders\DailyOrders.jsx
```jsx
import { motion } from "framer-motion";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";

const dailyOrdersData = [
	{ date: "07/01", orders: 45 },
	{ date: "07/02", orders: 52 },
	{ date: "07/03", orders: 49 },
	{ date: "07/04", orders: 60 },
	{ date: "07/05", orders: 55 },
	{ date: "07/06", orders: 58 },
	{ date: "07/07", orders: 62 },
];

const DailyOrders = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.2 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Daily Orders</h2>

			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={dailyOrdersData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='date' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='orders' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default DailyOrders;

```

### ClientApp\src\components\Admin\orders\EditOrder.jsx
```jsx
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Drawer, Box, Typography, Button, Select, MenuItem, FormControl, InputLabel, CircularProgress, Alert } from '@mui/material';
import axios from 'axios';
import OrderItem from './OrderItem'; // Import component OrderItem

// Hàm khởi tạo state ban đầu an toàn hơn
const getInitialFormData = (order) => ({
    addressId: order?.addressId || '',
    voucherId: order?.voucherId || '',
    orderItems: order?.orderItems || [],
    paymentMethodId: order?.paymentMethodId || 1,
    orderStatus: order?.orderStatus || 'Pending'
});

const EditOrder = ({ open, onClose, order, onOrderUpdated }) => {
    const [formData, setFormData] = useState(() => getInitialFormData(order));
    const [addresses, setAddresses] = useState([]);
    const [vouchers, setVouchers] = useState([]);
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false); // State cho việc tải dữ liệu
    const [fetchError, setFetchError] = useState(null); // State cho lỗi fetch dữ liệu
    const [submitError, setSubmitError] = useState(null); // State cho lỗi submit

    // Cập nhật lại form data khi prop `order` thay đổi
    useEffect(() => {
        setFormData(getInitialFormData(order));
    }, [order]);

    // Fetch dữ liệu khi component được mở lần đầu hoặc khi `open` là true
    useEffect(() => {
        if (open) {
            const fetchData = async () => {
                setLoading(true);
                setFetchError(null); // Reset lỗi trước khi fetch
                try {
                    // Dùng Promise.all để fetch song song
                    const [addressesRes, vouchersRes, productsRes] = await Promise.all([
                        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/addresses`),
                        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`),
                        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products`)
                    ]);

                    setAddresses(addressesRes.data);
                    // Lọc voucher hiệu lực ngay khi nhận dữ liệu
                    setVouchers(vouchersRes.data.filter(v => v.isActive && new Date(v.expiryDate) > new Date()));
                    setProducts(productsRes.data);

                } catch (error) {
                    console.error('Error fetching data:', error);
                    setFetchError('Không thể tải dữ liệu cần thiết. Vui lòng thử lại.'); // Thông báo lỗi thân thiện
                } finally {
                    setLoading(false);
                }
            };
            fetchData();
        } else {
             // Reset state khi đóng Drawer để lần mở sau không bị ảnh hưởng
             setLoading(false);
             setFetchError(null);
             setSubmitError(null);
             // Không reset form data ở đây vì có thể người dùng muốn giữ lại thay đổi chưa lưu
        }
    }, [open]); // Chỉ fetch khi `open` thay đổi (và là true)

    // Memoize các options cho Select để tránh tính toán lại không cần thiết
    const addressOptions = useMemo(() => addresses.map(address => (
        <MenuItem key={address.id} value={address.id}>
            {address.fullName} - {address.addressLine1}
        </MenuItem>
    )), [addresses]);

    const voucherOptions = useMemo(() => vouchers.map(voucher => (
        <MenuItem key={voucher.id} value={voucher.id}>
            {voucher.code} (Giảm {voucher.discountAmount}đ)
        </MenuItem>
    )), [vouchers]);

    const productVariantOptions = useMemo(() => products.flatMap(product =>
        product.variants.map(variant => (
            <MenuItem key={variant.id} value={variant.id}>
                {product.name} - {variant.color} - {variant.storage}
            </MenuItem>
        ))
    ), [products]);

    // Sử dụng useCallback cho các handler để tối ưu (đặc biệt khi truyền xuống component con)
    const handleChange = useCallback((e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    }, []);

    const handleOrderItemChange = useCallback((index, field, value) => {
        setFormData(prev => {
            const updatedItems = [...prev.orderItems];
            updatedItems[index] = { ...updatedItems[index], [field]: value }; // Cập nhật item đúng cách
            return { ...prev, orderItems: updatedItems };
        });
    }, []);

    const addOrderItem = useCallback(() => {
        setFormData(prev => ({
            ...prev,
            orderItems: [...prev.orderItems, { productVariantId: '', quantity: 1, price: 0 }]
        }));
    }, []);

    const removeOrderItem = useCallback((index) => {
        setFormData(prev => ({
            ...prev,
            orderItems: prev.orderItems.filter((_, i) => i !== index)
        }));
    }, []);

    const handleSubmit = useCallback(async () => {
        setSubmitError(null); // Reset lỗi trước khi submit
        try {
            // Có thể thêm validation cho formData ở đây trước khi gửi
            const response = await axios.put(
                `${process.env.REACT_APP_API_BASE_URL}/api/orders/${order.id}`,
                formData
            );
            onOrderUpdated(response.data);
            onClose(); // Đóng Drawer sau khi thành công
        } catch (error) {
            console.error('Error updating order:', error);
            // Hiển thị lỗi thân thiện hơn alert
            setSubmitError(error.response?.data?.message || 'Có lỗi xảy ra khi cập nhật đơn hàng. Vui lòng thử lại.');
        }
    }, [formData, order?.id, onOrderUpdated, onClose]); // Thêm dependencies cho useCallback

    return (
        <Drawer
            anchor="right"
            open={open}
            onClose={onClose}
            PaperProps={{ sx: { width: '50%', maxWidth: '600px' } }} // Tăng chiều rộng một chút
        >
            <Box sx={{ p: 3, display: 'flex', flexDirection: 'column', height: '100%' }}>
                <Typography variant="h6" gutterBottom>
                    Chỉnh sửa đơn hàng #{order?.id}
                </Typography>

                {/* Hiển thị loading hoặc lỗi fetch */}
                {loading && <Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}><CircularProgress /></Box>}
                {fetchError && <Alert severity="error" sx={{ mb: 2 }}>{fetchError}</Alert>}
                {submitError && <Alert severity="error" sx={{ mb: 2 }}>{submitError}</Alert>}

                {/* Chỉ hiển thị form khi không loading và không có lỗi fetch */}
                {!loading && !fetchError && (
                    <Box sx={{ flexGrow: 1, overflowY: 'auto' }}> {/* Cho phép scroll nội dung form */}
                        <FormControl fullWidth margin="normal">
                            <InputLabel>Địa chỉ giao hàng</InputLabel>
                            <Select name="addressId" value={formData.addressId} onChange={handleChange} label="Địa chỉ giao hàng">
                                {addressOptions}
                            </Select>
                        </FormControl>

                        <FormControl fullWidth margin="normal">
                            <InputLabel>Voucher</InputLabel>
                            <Select name="voucherId" value={formData.voucherId} onChange={handleChange} label="Voucher">
                                <MenuItem value=""><em>Không sử dụng voucher</em></MenuItem>
                                {voucherOptions}
                            </Select>
                        </FormControl>

                         {/* Thêm các trường khác nếu cần, ví dụ: Trạng thái đơn hàng */}
                         <FormControl fullWidth margin="normal">
                             <InputLabel>Trạng thái đơn hàng</InputLabel>
                             <Select name="orderStatus" value={formData.orderStatus} onChange={handleChange} label="Trạng thái đơn hàng">
                                 <MenuItem value="Pending">Chờ xử lý</MenuItem>
                                 <MenuItem value="Processing">Đang xử lý</MenuItem>
                                 <MenuItem value="Shipped">Đã giao hàng</MenuItem>
                                 <MenuItem value="Delivered">Đã nhận</MenuItem>
                                 <MenuItem value="Cancelled">Đã hủy</MenuItem>
                                 {/* Thêm các trạng thái khác nếu có */}
                             </Select>
                         </FormControl>


                        <Typography variant="subtitle1" gutterBottom sx={{ mt: 2 }}>
                            Sản phẩm
                        </Typography>

                        {formData.orderItems.map((item, index) => (
                            // Sử dụng component OrderItem
                            <OrderItem
                                key={index} // Lưu ý: dùng index làm key không lý tưởng nếu list có thể sắp xếp lại/xóa giữa chừng. Nếu item có ID duy nhất, nên dùng item.id
                                item={item}
                                index={index}
                                productVariantOptions={productVariantOptions}
                                onChange={handleOrderItemChange}
                                onRemove={removeOrderItem}
                            />
                        ))}

                        <Button variant="outlined" onClick={addOrderItem} sx={{ mt: 1, mb: 2 }}>
                            Thêm sản phẩm
                        </Button>
                    </Box>
                )}

                {/* Phần footer cố định */}
                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3, pt: 2, borderTop: '1px solid #eee' }}>
                    <Button variant="outlined" onClick={onClose} sx={{ mr: 2 }}>
                        Hủy
                    </Button>
                    <Button variant="contained" onClick={handleSubmit} disabled={loading || !!fetchError}> {/* Disable nút Lưu khi đang load hoặc có lỗi fetch */}
                        Lưu thay đổi
                    </Button>
                </Box>
            </Box>
        </Drawer>
    );
};

export default EditOrder;
```

### ClientApp\src\components\Admin\orders\OrderDetailDrawer.jsx
```jsx
import React, { useState, useEffect, useCallback } from 'react';
import {
    Drawer, Box, Typography, Divider, List, IconButton, Chip, CircularProgress, Grid, Button, ButtonGroup, Alert, Snackbar
} from '@mui/material';
import { Close, PictureAsPdf, InsertDriveFile, Receipt } from '@mui/icons-material';
import axios from 'axios';
import { formatCurrency, formatDate, formatAddress, getStatusColor, getPaymentMethodName } from '../../../utils/FormatInfo'; // Đảm bảo đường dẫn đúng
import OrderDetailItem from './OrderDetailItem';

const OrderDetailDrawer = ({ orderId, open, onClose }) => {
    const [order, setOrder] = useState(null);
    const [variantDetails, setVariantDetails] = useState({}); // Sẽ chứa chi tiết variant cho order hiện tại
    const [loading, setLoading] = useState(false);
    const [fetchError, setFetchError] = useState(null);
    const [exporting, setExporting] = useState(false);
    const [exportStatus, setExportStatus] = useState({ open: false, message: '', severity: 'info' });

    useEffect(() => {
        // --- Định nghĩa các hàm fetch bên trong useEffect ---
        const performFetchVariantDetails = async (items) => {
            if (!items || items.length === 0) {
                return {}; // Trả về object rỗng nếu không có items
            }
            // Hàm này sẽ fetch các variant chưa có trong cache CỤC BỘ cho lần fetch này
            // Để đơn giản, chúng ta fetch tất cả variant cho order hiện tại mỗi lần
            // Nếu muốn cache toàn cục, logic sẽ phức tạp hơn.
            try {
                const variantIds = items.map((item) => item.variantId).filter(id => id); // Lọc bỏ ID null/undefined

                if (variantIds.length === 0) return {};

                const variantPromises = variantIds.map((id) =>
                    axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products/by-variant/${id}`)
                );
                const variantResponses = await Promise.all(variantPromises);

                const newDetails = {};
                variantResponses.forEach((res, index) => {
                    if (res.data) { // Kiểm tra có data trả về không
                       newDetails[variantIds[index]] = res.data;
                    }
                });
                return newDetails;
            } catch (error) {
                console.error('Failed to fetch variant details:', error);
                // Ném lỗi để performFetchOrderDetails bắt được và set fetchError chung
                throw new Error('Lỗi khi tải chi tiết sản phẩm.');
            }
        };

        const performFetchOrderDetails = async () => {
            if (!orderId) return; // Không có orderId thì không làm gì

            setLoading(true);
            setFetchError(null);
            setOrder(null); // Reset order cũ
            setVariantDetails({}); // Reset variant details cũ

            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/details`);
                const fetchedOrderData = response.data;
                setOrder(fetchedOrderData); // Cập nhật order

                if (fetchedOrderData?.items?.length > 0) {
                    const newVariantData = await performFetchVariantDetails(fetchedOrderData.items);
                    setVariantDetails(newVariantData); // Cập nhật variant details cho order này
                }
                // Nếu không có items, variantDetails vẫn là {} (đã reset ở trên)

            } catch (error) {
                console.error('Failed to fetch order details:', error);
                setFetchError(error.message || 'Không thể tải chi tiết đơn hàng. Vui lòng thử lại.');
                setOrder(null); // Đảm bảo reset khi có lỗi
                setVariantDetails({});
            } finally {
                setLoading(false);
            }
        };

        // --- Logic chính của useEffect ---
        if (open && orderId) {
            performFetchOrderDetails();
        } else if (!open) {
            // Reset state khi drawer đóng
            setOrder(null);
            setVariantDetails({});
            setFetchError(null);
            setExporting(false);
            // Không cần gọi setExportStatus ở đây vì nó chỉ liên quan đến thông báo export
        }

    // Mảng phụ thuộc của useEffect này CHỈ NÊN chứa `open` và `orderId`.
    // Các hàm fetch được định nghĩa bên trong nên không cần đưa vào đây.
    }, [open, orderId]);


    // --- Các handlers khác có thể giữ nguyên useCallback vì chúng không gây ra vòng lặp với useEffect chính ---
    const handleExport = useCallback(async (exportType, endpoint, fileExtension, mimeType) => {
        if (!orderId || exporting || !order) { // Thêm kiểm tra !order
            setExportStatus({ open: true, message: 'Không có dữ liệu đơn hàng để xuất.', severity: 'warning' });
            return;
        }

        setExporting(true);
        setExportStatus({ open: false, message: '', severity: 'info' });

        try {
            const response = await axios.get(
                `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/export/${endpoint}`,
                { responseType: 'blob' }
            );
            const blob = new Blob([response.data], { type: mimeType });
            if (blob.size === 0) {
                throw new Error(`Server trả về file ${fileExtension} rỗng.`);
            }
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', `HoaDon_${orderId}.${fileExtension}`);
            document.body.appendChild(link);
            link.click();
            link.remove();
            window.URL.revokeObjectURL(url);
            setExportStatus({ open: true, message: `Xuất file ${fileExtension.toUpperCase()} thành công!`, severity: 'success' });
        } catch (error) {
            console.error(`Failed to export ${fileExtension}:`, error);
            let errorMessage = `Xuất file ${fileExtension.toUpperCase()} thất bại.`;
            if (error.response) {
                try {
                    const errorJson = JSON.parse(await error.response.data.text());
                    errorMessage = errorJson.message || errorMessage;
                } catch (parseError) { /* Dùng message mặc định */ }
            } else if (error.message) {
                errorMessage = error.message;
            }
            setExportStatus({ open: true, message: errorMessage, severity: 'error' });
        } finally {
            setExporting(false);
        }
    }, [orderId, exporting, order]); // Thêm order vào dependency để kiểm tra trước khi export

    const handleCloseSnackbar = useCallback((event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setExportStatus(prev => ({ ...prev, open: false }));
    }, []);


    // --- Phần JSX giữ nguyên cấu trúc cũ ---
    return (
        <>
            <Drawer
                anchor="right"
                open={open}
                onClose={onClose} // onClose này là prop từ OrdersTable, đã được useCallback
                PaperProps={{
                    sx: { width: { xs: '95%', sm: '70%', md: '50%' }, maxWidth: '700px' },
                }}
            >
                <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
                    {/* Header */}
                    <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid #eee' }}>
                        <Typography variant="h6" fontWeight="bold">
                            Chi tiết đơn hàng #{order?.id || orderId}
                        </Typography>
                        <IconButton onClick={onClose} size="small">
                            <Close />
                        </IconButton>
                    </Box>

                    {/* Nút xuất hóa đơn */}
                    <Box sx={{ p: 2 }}>
                        <Typography variant="subtitle2" gutterBottom fontWeight="medium">
                            Xuất hóa đơn:
                        </Typography>
                        <ButtonGroup fullWidth variant="outlined" disabled={exporting || !order || loading}>
                            <Button
                                startIcon={exporting ? <CircularProgress size={20} color="inherit" /> : <InsertDriveFile />}
                                onClick={() => handleExport('excel', 'excel', 'xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
                                disabled={exporting || !order} // Kiểm tra order trước khi export
                                color="success"
                            >
                                Excel
                            </Button>
                            <Button
                                startIcon={exporting ? <CircularProgress size={20} color="inherit" /> : <Receipt />}
                                onClick={() => handleExport('image', 'image', 'png', 'image/png')}
                                disabled={exporting || !order}
                                color="error"
                            >
                                Ảnh
                            </Button>
                            <Button
                                startIcon={exporting ? <CircularProgress size={20} color="inherit" /> : <PictureAsPdf />}
                                onClick={() => handleExport('template', 'template', 'pdf', 'application/pdf')}
                                disabled={exporting || !order}
                                color="primary"
                            >
                                PDF
                            </Button>
                        </ButtonGroup>
                    </Box>
                    <Divider />

                    {/* Content Area */}
                    <Box sx={{ flexGrow: 1, overflowY: 'auto', p: 2 }}>
                        {loading && (
                            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>
                                <CircularProgress />
                            </Box>
                        )}
                        {fetchError && !loading && (
                            <Alert severity="error" sx={{ m: 2 }}>{fetchError}</Alert>
                        )}
                        {!loading && !fetchError && order && (
                            <>
                                {/* Thông tin chung */}
                                <Box sx={{ mb: 3 }}>
                                    <Typography variant="subtitle1" gutterBottom fontWeight="bold">
                                        Thông tin đơn hàng
                                    </Typography>
                                    <Grid container spacing={1.5}>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="body2" color="text.secondary">Mã đơn hàng:</Typography>
                                            <Typography variant="body1" fontWeight="medium">{order.id}</Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="body2" color="text.secondary">Ngày đặt:</Typography>
                                            <Typography variant="body1" fontWeight="medium">{formatDate(order.orderDate)}</Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="body2" color="text.secondary">Tổng tiền:</Typography>
                                            <Typography variant="body1" fontWeight="medium" color="error">
                                                {formatCurrency(order.totalAmount)}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="body2" color="text.secondary">Thanh toán:</Typography>
                                            <Typography variant="body1" fontWeight="medium">
                                                {getPaymentMethodName(order.paymentMethodId)}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="body2" color="text.secondary">Trạng thái:</Typography>
                                            <Chip
                                                label={order.orderStatus || 'Unknown'}
                                                color={getStatusColor(order.orderStatus)} // getStatusColor cần được định nghĩa hoặc import
                                                size="small"
                                            />
                                        </Grid>
                                        <Grid item xs={12}>
                                            <Typography variant="body2" color="text.secondary">Địa chỉ giao hàng:</Typography>
                                            <Box sx={{ pl: 1 }}>
                                                <Typography variant="body1" fontWeight="medium">
                                                    {order.address?.fullName || 'N/A'} - {order.address?.phoneNumber || 'N/A'}
                                                </Typography>
                                                <Typography variant="body2" color="text.secondary">
                                                    {formatAddress(order.address)}
                                                </Typography>
                                            </Box>
                                        </Grid>
                                    </Grid>
                                </Box>

                                {/* Danh sách sản phẩm */}
                                <Box>
                                    <Typography variant="subtitle1" gutterBottom fontWeight="bold">
                                        Sản phẩm ({order.items?.length || 0})
                                    </Typography>
                                    <Divider sx={{ mb: 1 }} />
                                    {order.items?.length > 0 ? (
                                        <List disablePadding>
                                            {order.items.map((item) => (
                                                <OrderDetailItem
                                                    key={item.id || item.variantId}
                                                    item={item}
                                                    variantDetail={variantDetails[item.variantId]}
                                                />
                                            ))}
                                        </List>
                                    ) : (
                                        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
                                            Không có sản phẩm trong đơn hàng.
                                        </Typography>
                                    )}
                                </Box>
                            </>
                        )}
                        {!loading && !fetchError && !order && (
                            <Alert severity="warning" sx={{ m: 2 }}>Không tìm thấy thông tin cho đơn hàng này hoặc đơn hàng đã được đóng.</Alert>
                        )}
                    </Box>
                </Box>
            </Drawer>

            <Snackbar
                open={exportStatus.open}
                autoHideDuration={6000}
                onClose={handleCloseSnackbar}
                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
            >
                <Alert onClose={handleCloseSnackbar} severity={exportStatus.severity} sx={{ width: '100%' }} variant="filled">
                    {exportStatus.message}
                </Alert>
            </Snackbar>
        </>
    );
};

export default OrderDetailDrawer;
```

### ClientApp\src\components\Admin\orders\OrderDetailItem.jsx
```jsx
import React from 'react';
import { Box, Typography, ListItem, ListItemText, ListItemAvatar, Avatar } from '@mui/material';
// Import các hàm tiện ích nếu cần (ví dụ formatCurrency)
import { formatCurrency } from '../../../utils/FormatInfo'; // Giả sử bạn tạo file utils.js

const OrderDetailItem = React.memo(({ item, variantDetail }) => {
  const product = variantDetail?.product || {};
  const variant = variantDetail?.variant || {};
  const images = variantDetail?.images || [];

  // Tìm ảnh chính hoặc ảnh đầu tiên
  const primaryImage = images.find(img => img.isPrimary) || images[0];
  const imageUrl = primaryImage
    ? `${process.env.REACT_APP_API_BASE_URL}${primaryImage.imageUrl}`
    : 'https://via.placeholder.com/80?text=No+Image'; // Placeholder rõ ràng hơn

  return (
    <ListItem
      sx={{ px: 0, py: 2, flexDirection: 'column', alignItems: 'flex-start', borderBottom: '1px dashed #eee' }}
    >
      <Box sx={{ display: 'flex', width: '100%', mb: 1 }}>
        <ListItemAvatar sx={{ mr: 1 }}>
          <Avatar
            src={imageUrl}
            alt={product.name || 'Sản phẩm'}
            variant="square"
            sx={{ width: 80, height: 80, borderRadius: '4px', backgroundColor: '#f5f5f5' }}
            imgProps={{ loading: 'lazy' }} // Thêm lazy loading cho ảnh
            onError={(e) => { // Xử lý lỗi tải ảnh tốt hơn
              e.target.onerror = null;
              e.target.src = 'https://via.placeholder.com/80?text=Error';
            }}
          />
        </ListItemAvatar>
        <ListItemText
          primary={
            <Typography variant="body1" fontWeight="medium" sx={{ mb: 0.5 }}>
              {product.name || 'Sản phẩm không xác định'}
            </Typography>
          }
          secondary={
            <>
              <Typography variant="body2" color="text.secondary">
                Phân loại: {variant.color || 'N/A'} - {variant.storage || 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                SKU: {variant.sku || 'N/A'}
              </Typography>
            </>
          }
        />
        <Box sx={{ textAlign: 'right', ml: 1, minWidth: '100px' }}>
          <Typography variant="body2" color="text.secondary">
            {item.quantity} × {formatCurrency(item.price)}
          </Typography>
          <Typography variant="body1" fontWeight="bold">
            {formatCurrency(item.quantity * item.price)}
          </Typography>
        </Box>
      </Box>

      {/* Có thể thêm thông tin chi tiết khác nếu cần */}
      {/* <Box sx={{ pl: { xs: 0, sm: '96px' }, width: '100%', mt: 1 }}> // Điều chỉnh padding left
          <Typography variant="caption" color="text.secondary">
              <strong>Giá gốc:</strong> {formatCurrency(variant.price)}
              {variant.discountPrice && ` | <strong>Giá giảm:</strong> ${formatCurrency(variant.discountPrice)}`}
          </Typography>
      </Box> */}
    </ListItem>
  );
});

export default OrderDetailItem;
```

### ClientApp\src\components\Admin\orders\OrderDistribution.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from "recharts";

const orderStatusData = [
	{ name: "Pending", value: 30 },
	{ name: "Processing", value: 45 },
	{ name: "Shipped", value: 60 },
	{ name: "Delivered", value: 120 },
];
const COLORS = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#FED766", "#2AB7CA"];

const OrderDistribution = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Order Status Distribution</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={orderStatusData}
							cx='50%'
							cy='50%'
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{orderStatusData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default OrderDistribution;

```

### ClientApp\src\components\Admin\orders\OrderItem.jsx
```jsx
import React from 'react';
import { Box, FormControl, InputLabel, Select, TextField, Button } from '@mui/material';

// Sử dụng React.memo để tránh render lại không cần thiết khi props không đổi
const OrderItem = React.memo(({ item, index, productVariantOptions, onChange, onRemove }) => {
    const handleFieldChange = (field, value) => {
        // Chuyển đổi kiểu dữ liệu phù hợp
        const processedValue = field === 'quantity' ? parseInt(value, 10) || 0 :
                              field === 'price' ? parseFloat(value) || 0 :
                              value;
        onChange(index, field, processedValue);
    };

    return (
        <Box sx={{ mb: 2, p: 2, border: '1px solid #ddd', borderRadius: 1 }}>
            <FormControl fullWidth margin="normal">
                <InputLabel>Sản phẩm</InputLabel>
                <Select
                    value={item.productVariantId}
                    onChange={(e) => handleFieldChange('productVariantId', e.target.value)}
                    label="Sản phẩm"
                >
                    {/* Sử dụng options đã được memoized */}
                    {productVariantOptions}
                </Select>
            </FormControl>

            <TextField
                fullWidth
                margin="normal"
                type="number"
                label="Số lượng"
                value={item.quantity}
                onChange={(e) => handleFieldChange('quantity', e.target.value)}
                inputProps={{ min: 0 }} // Thêm ràng buộc số lượng không âm
            />

            <TextField
                fullWidth
                margin="normal"
                type="number"
                label="Đơn giá"
                value={item.price}
                onChange={(e) => handleFieldChange('price', e.target.value)}
                 inputProps={{ min: 0 }} // Thêm ràng buộc giá không âm
            />

            <Button
                variant="outlined"
                color="error"
                onClick={() => onRemove(index)}
                sx={{ mt: 1 }}
            >
                Xóa sản phẩm
            </Button>
        </Box>
    );
});

export default OrderItem;
```

### ClientApp\src\components\Admin\orders\OrdersTable.jsx
```jsx
import { useState, useEffect, useMemo, useCallback } from "react";
import { motion } from "framer-motion";
import { Search, Eye, Edit, Trash2, Filter, X } from "lucide-react";
import axios from "axios";
import { Modal, Box, Typography, Button, Select, MenuItem } from "@mui/material";
import OrderDetailDrawer from './OrderDetailDrawer';
import EditOrder from './EditOrder'; 
import useDebounce from 'utils/useDebounce'; // Giả sử bạn đã tạo hook này
import { getDateNDaysAgo, getToday } from 'utils/FormatInfo'; // Giả sử bạn đã tạo các hàm này

const OrdersTable = () => {
    const [orders, setOrders] = useState([]);
    const [currentPage, setCurrentPage] = useState(1);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [newStatus, setNewStatus] = useState("");
    const [openModal, setOpenModal] = useState(false);
    const [selectedOrderId, setSelectedOrderId] = useState(null);
    const [drawerOpen, setDrawerOpen] = useState(false);
    const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
    const [isEditDrawerOpen, setIsEditDrawerOpen] = useState(false);
    const [orderToEdit, setOrderToEdit] = useState(null);

    // States cho việc tìm kiếm và lọc
    const [searchInput, setSearchInput] = useState(""); // Giá trị input tức thời
    const debouncedSearchTerm = useDebounce(searchInput, 500); // Giá trị đã debounce
    const [statusFilter, setStatusFilter] = useState("All");
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [minAmount, setMinAmount] = useState("");
    const [maxAmount, setMaxAmount] = useState("");

    const ordersPerPage = 5;

    // Hàm tiện ích (không đổi, có thể đặt ngoài component nếu không phụ thuộc state/props)
    const getAllowedStatuses = useCallback((currentStatus) => {
        switch (currentStatus) {
            case "Pending": return ["Processing", "Cancelled"];
            case "Processing": return ["Shipped", "Cancelled"];
            case "Shipped": return ["Delivered"];
            case "WaitingForPayment": return ["Paid", "Cancelled"];
            case "Paid": return ["ShippedPayment"];
            case "ShippedPayment": return ["Delivered"];
            default: return [];
        }
    }, []);

    const getStatusDisplayName = useCallback((status) => {
        switch (status) {
            case "Pending": return "Chờ xác nhận";
            case "Processing": return "Đã xác nhận";
            case "Shipped": return "Đang vận chuyển";
            case "Delivered": return "Đã xong";
            case "Cancelled": return "Đã hủy";
            case "WaitingForPayment": return "Chờ thanh toán";
            case "Paid": return "Đã thanh toán";
            case "ShippedPayment": return "Đang vận chuyển (đã thanh toán)";
            default: return status;
        }
    }, []);

    // Fetch dữ liệu ban đầu
    useEffect(() => {
        const fetchOrders = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders`);
                const ordersWithCustomerNames = await Promise.all(
                    response.data.map(async (order) => {
                        try {
                            const addressResponse = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/address/${order.addressId}`);
                            order.customer = addressResponse.data.fullName;
                        } catch (error) {
                            console.error(`Lỗi khi lấy dữ liệu địa chỉ với ID ${order.addressId}:`, error);
                            order.customer = "Unknown";
                        }
                        return order;
                    })
                );
                setOrders(ordersWithCustomerNames);
            } catch (error) {
                console.error("Lỗi khi lấy dữ liệu đơn hàng:", error);
            }
        };
        fetchOrders();
    }, []); // Chỉ chạy một lần khi mount

    const handleOpenEditDrawer = useCallback((order) => {
        // console.log("Opening edit drawer for order:", order);
        setOrderToEdit(order); // Lưu đơn hàng cần sửa
        setIsEditDrawerOpen(true); // Mở drawer
    }, []);

    const handleCloseEditDrawer = useCallback(() => {
        setIsEditDrawerOpen(false);
        setOrderToEdit(null); // Xóa đơn hàng đang sửa khi đóng drawer
    }, []);
    const handleOrderUpdated = useCallback((updatedOrder) => {
        // Cập nhật lại danh sách 'orders' với thông tin đơn hàng mới
        setOrders(prevOrders =>
            prevOrders.map(order =>
                order.id === updatedOrder.id ? { ...order, ...updatedOrder } : order
            )
        );
        // filteredOrders sẽ tự động cập nhật nhờ useMemo
        // EditOrder sẽ tự gọi onClose của nó (chính là handleCloseEditDrawer) sau khi cập nhật thành công
        // nên không cần gọi setIsEditDrawerOpen(false) ở đây nữa.
        alert("Đơn hàng đã được cập nhật thành công trong bảng!"); // Optional: thông báo ở OrdersTable
    }, [setOrders]); // setOrders là stable
    // Sử dụng useMemo để tính toán danh sách đơn hàng đã lọc
    const filteredOrders = useMemo(() => {
        let filtered = [...orders];
        const term = debouncedSearchTerm.toLowerCase();

        if (term) {
            filtered = filtered.filter(
                (order) =>
                    order.id.toString().toLowerCase().includes(term) ||
                    order.customer.toLowerCase().includes(term)
            );
        }
        if (statusFilter !== "All") {
            filtered = filtered.filter((order) => order.orderStatus === statusFilter);
        }
        if (startDate && endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);
            end.setHours(23, 59, 59, 999); // Để bao gồm cả ngày kết thúc
            filtered = filtered.filter(order => {
                const orderDate = new Date(order.orderDate);
                return orderDate >= start && orderDate <= end;
            });
        }
        if (minAmount || maxAmount) {
            const min = minAmount ? parseFloat(minAmount) : 0;
            const max = maxAmount ? parseFloat(maxAmount) : Infinity;
            filtered = filtered.filter(order => {
                const amount = order.totalAmount || 0;
                return amount >= min && amount <= max;
            });
        }
        return filtered;
    }, [orders, debouncedSearchTerm, statusFilter, startDate, endDate, minAmount, maxAmount]);

    // Reset về trang đầu tiên khi bộ lọc thay đổi
    useEffect(() => {
        setCurrentPage(1);
    }, [debouncedSearchTerm, statusFilter, startDate, endDate, minAmount, maxAmount]);


    const currentOrders = useMemo(() => {
        const indexOfLastOrder = currentPage * ordersPerPage;
        const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
        return filteredOrders.slice(indexOfFirstOrder, indexOfLastOrder);
    }, [filteredOrders, currentPage, ordersPerPage]);

    const totalPages = useMemo(() => {
        return Math.ceil(filteredOrders.length / ordersPerPage);
    }, [filteredOrders.length, ordersPerPage]);

    // Callbacks được memoize với useCallback
    const handleSearchChange = useCallback((e) => {
        setSearchInput(e.target.value);
    }, []);

    const handleStatusFilterChange = useCallback((e) => {
        setStatusFilter(e.target.value);
    }, []);
    
    const handleStartDateChange = useCallback((e) => {
        setStartDate(e.target.value);
    }, []);

    const handleEndDateChange = useCallback((e) => {
        setEndDate(e.target.value);
    }, []);

    const handleMinAmountChange = useCallback((e) => {
        setMinAmount(e.target.value);
    }, []);

    const handleMaxAmountChange = useCallback((e) => {
        setMaxAmount(e.target.value);
    }, []);
    
    // Nút "Áp dụng bộ lọc" không còn thực sự cần thiết nếu các filter áp dụng ngay,
    // nhưng nếu muốn giữ lại để áp dụng đồng thời các filter ngày/giá thì có thể dùng.
    // Hiện tại, logic filter đã được useMemo xử lý khi state thay đổi.
    // Tôi sẽ để lại hàm handleDateFilter trống hoặc bạn có thể bỏ nút này.
    // const handleApplyAdvancedFilters = useCallback(() => {
    //     // Các state đã được cập nhật, useMemo sẽ tự tính toán lại filteredOrders
    //     // Chỉ cần reset lại trang nếu cần
    //     setCurrentPage(1);
    //     console.log("Applying advanced filters (filters already applied by state changes)");
    // }, []);


    const handlePageChange = useCallback((pageNumber) => {
        setCurrentPage(pageNumber);
    }, []);

    const handleDeleteOrder = useCallback(async (orderId) => {
        if (window.confirm("Bạn có chắc chắn muốn xóa đơn hàng này không?")) {
            try {
                await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}`);
                setOrders(prevOrders => prevOrders.filter(order => order.id !== orderId));
                // filteredOrders sẽ tự cập nhật nhờ useMemo
                alert("Đơn hàng đã được xóa thành công!");
            } catch (error) {
                console.error("Lỗi khi xóa đơn hàng:", error);
                alert("Lỗi khi xóa đơn hàng, vui lòng thử lại.");
            }
        }
    }, []);

    const handleOpenModal = useCallback((order) => {
        setSelectedOrder(order);
        setNewStatus(order.orderStatus); // Khởi tạo newStatus bằng trạng thái hiện tại
        setOpenModal(true);
    }, []);

    const handleCloseModal = useCallback(() => {
        setOpenModal(false);
        setSelectedOrder(null);
    }, []);

    const handleUpdateStatus = useCallback(async () => {
        if (selectedOrder && newStatus && newStatus !== selectedOrder.orderStatus) {
            try {
                await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/orders/${selectedOrder.id}/status`, { newStatus });
                setOrders(prevOrders =>
                    prevOrders.map(order =>
                        order.id === selectedOrder.id ? { ...order, orderStatus: newStatus } : order
                    )
                );
                alert("Trạng thái đơn hàng đã được cập nhật thành công!");
                handleCloseModal();
            } catch (error) {
                console.error("Lỗi khi cập nhật trạng thái đơn hàng:", error);
                alert("Lỗi khi cập nhật trạng thái đơn hàng, vui lòng thử lại.");
            }
        }
    }, [selectedOrder, newStatus, handleCloseModal]);


    // === BỔ SUNG HÀM XỬ LÝ CHO CÁC BỘ LỌC NGÀY MỚI ===
    const handleSetDateRangeAndResetFilters = useCallback((startDateStr, endDateStr) => {
        setStartDate(startDateStr);
        setEndDate(endDateStr);
        setSearchInput(""); // Reset các filter khác để ưu tiên filter ngày
        setStatusFilter("All");
        setMinAmount("");
        setMaxAmount("");
        // setCurrentPage(1) sẽ được xử lý bởi useEffect đã có
    }, [setStartDate, setEndDate, setSearchInput, setStatusFilter, setMinAmount, setMaxAmount]);


    const handleTodayOrders = useCallback(() => {
        const todayStr = getToday();
        handleSetDateRangeAndResetFilters(todayStr, todayStr);
    }, [handleSetDateRangeAndResetFilters]);

    const handleLast3DaysOrders = useCallback(() => {
        const todayStr = getToday();
        const threeDaysAgoStr = getDateNDaysAgo(2); // Bao gồm hôm nay, nên là (hôm nay - 2 ngày) đến hôm nay
        handleSetDateRangeAndResetFilters(threeDaysAgoStr, todayStr);
    }, [handleSetDateRangeAndResetFilters]);

    const handleLast7DaysOrders = useCallback(() => {
        const todayStr = getToday();
        const sevenDaysAgoStr = getDateNDaysAgo(6); // Bao gồm hôm nay, nên là (hôm nay - 6 ngày) đến hôm nay
        handleSetDateRangeAndResetFilters(sevenDaysAgoStr, todayStr);
    }, [handleSetDateRangeAndResetFilters])


    const handleResetFilters = useCallback(() => {
        setSearchInput("");
        setStatusFilter("All");
        setStartDate("");
        setEndDate("");
        setMinAmount("");
        setMaxAmount("");
        // filteredOrders sẽ tự cập nhật
    }, []);

    const handleViewOrder = useCallback((orderId) => {
        setSelectedOrderId(orderId);
        setDrawerOpen(true);
    }, []);

    const handleCloseDrawer = useCallback(() => {
        setDrawerOpen(false);
        setSelectedOrderId(null); // Reset selectedOrderId khi đóng drawer
    }, []);


    return (
        <motion.div
            className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
        >
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-semibold text-gray-100">Danh sách đơn hàng</h2>
                <div className="flex items-center space-x-4">
                    <div className="relative">
                        <input
                            type="text"
                            placeholder="Tìm đơn hàng (ID, Khách hàng)..."
                            className="bg-gray-700 text-white placeholder-gray-400 rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            value={searchInput}
                            onChange={handleSearchChange}
                        />
                        <Search className="absolute left-3 top-2.5 text-gray-400" size={18} />
                    </div>
                    <button
                        className={`flex items-center space-x-1 px-3 py-2 rounded-lg ${showAdvancedFilters ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                        onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                    >
                        <Filter size={18} />
                        <span>Bộ lọc</span>
                    </button>
                </div>
            </div>

            {showAdvancedFilters && (
                <motion.div
                    className="bg-gray-700 p-4 rounded-lg mb-6"
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                >
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-medium text-gray-300">Bộ lọc nâng cao</h3>
                        <button
                            className="text-gray-400 hover:text-white"
                            onClick={() => setShowAdvancedFilters(false)}
                        >
                            <X size={20} />
                        </button>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Trạng thái</label>
                            <select
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={statusFilter}
                                onChange={handleStatusFilterChange}
                            >
                                <option value="All">Tất cả trạng thái</option>
                                <option value="Pending">{getStatusDisplayName("Pending")}</option>
                                <option value="Processing">{getStatusDisplayName("Processing")}</option>
                                <option value="Shipped">{getStatusDisplayName("Shipped")}</option>
                                <option value="Delivered">{getStatusDisplayName("Delivered")}</option>
                                <option value="Cancelled">{getStatusDisplayName("Cancelled")}</option>
                                <option value="WaitingForPayment">{getStatusDisplayName("WaitingForPayment")}</option>
                                <option value="Paid">{getStatusDisplayName("Paid")}</option>
                                <option value="ShippedPayment">{getStatusDisplayName("ShippedPayment")}</option>
                            </select>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Từ ngày</label>
                            <input
                                type="date"
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={startDate}
                                onChange={handleStartDateChange}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Đến ngày</label>
                            <input
                                type="date"
                                className="w-full bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                value={endDate}
                                onChange={handleEndDateChange}
                                min={startDate} // Ngăn chọn ngày kết thúc trước ngày bắt đầu
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-400 mb-1">Khoảng giá</label>
                            <div className="flex space-x-2">
                                <input
                                    type="number"
                                    placeholder="Từ"
                                    className="w-1/2 bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    value={minAmount}
                                    onChange={handleMinAmountChange}
                                />
                                <input
                                    type="number"
                                    placeholder="Đến"
                                    className="w-1/2 bg-gray-600 text-white rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    value={maxAmount}
                                    onChange={handleMaxAmountChange}
                                />
                            </div>
                        </div>
                    </div>

                    <div className="flex justify-end space-x-3 mt-6">
                        {/* Nút này có thể không cần thiết nếu filter đã tự áp dụng */}
                        {/* <button
                            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
                            onClick={handleApplyAdvancedFilters} 
                        >
                            Áp dụng bộ lọc
                        </button> */}
                    
                        <button
                            className="bg-sky-500 hover:bg-sky-600 text-white px-4 py-2 rounded-lg text-sm"
                            onClick={handleTodayOrders}
                        >
                            Đơn hôm nay
                        </button>
                        <button
                            className="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded-lg text-sm"
                            onClick={handleLast3DaysOrders}
                        >
                            3 ngày qua
                        </button>
                        <button
                            className="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm"
                            onClick={handleLast7DaysOrders}
                        >
                            7 ngày qua
                        </button>

                        <button
                            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg"
                            onClick={handleResetFilters}
                        >
                            Xóa bộ lọc
                        </button>
                    </div>
                </motion.div>
            )}

            <div className="overflow-x-auto mt-6">
                <table className="min-w-full divide-y divide-gray-700">
                    <thead>
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">STT</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Khách Hàng</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tổng tiền</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Trạng thái</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Ngày đặt</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Tùy Chỉnh</th>
                        </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-700">
                        {currentOrders.length > 0 ? (
                            currentOrders.map((order, index) => (
                                <motion.tr
                                    key={order.id}
                                    initial={{ opacity: 0 }}
                                    animate={{ opacity: 1 }}
                                    transition={{ duration: 0.2 }}
                                    className="hover:bg-gray-700"
                                >
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        { (currentPage - 1) * ordersPerPage + index + 1}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        {order.customer}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                        {order.totalAmount ? order.totalAmount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) : "N/A"}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        <span
                                            className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full cursor-pointer ${
                                                order.orderStatus === "Delivered" || order.orderStatus === "Paid"
                                                ? "bg-green-200 text-green-800 hover:bg-green-300"
                                                : order.orderStatus === "Processing"
                                                ? "bg-yellow-200 text-yellow-800 hover:bg-yellow-300"
                                                : order.orderStatus === "Shipped" || order.orderStatus === "ShippedPayment"
                                                ? "bg-blue-200 text-blue-800 hover:bg-blue-300"
                                                : order.orderStatus === "Pending" || order.orderStatus === "WaitingForPayment"
                                                ? "bg-orange-200 text-orange-800 hover:bg-orange-300"
                                                : "bg-red-200 text-red-800 hover:bg-red-300" // Cancelled
                                            }`}
                                            onClick={() => handleOpenModal(order)}
                                        >
                                            {getStatusDisplayName(order.orderStatus)}
                                        </span>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        {new Date(order.orderDate).toLocaleDateString('vi-VN')}
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                        <button 
                                            className="text-indigo-400 hover:text-indigo-300 mr-3 p-1 rounded hover:bg-gray-600"
                                            title="Xem chi tiết"
                                            onClick={() => handleViewOrder(order.id)}
                                        >
                                            <Eye size={18} />
                                        </button>
                                        <button 
                                            className="text-yellow-400 hover:text-yellow-300 mr-3 p-1 rounded hover:bg-gray-600"
                                            title="Sửa đơn hàng"
                                            onClick={() => handleOpenEditDrawer(order)} // Gọi hàm mở drawer sửa
                                        >
                                            <Edit size={18} />
                                        </button>
                                        <button 
                                            className="text-red-400 hover:text-red-300 p-1 rounded hover:bg-gray-600"
                                            title="Xóa đơn hàng"
                                            onClick={() => handleDeleteOrder(order.id)}
                                        >
                                            <Trash2 size={18} />
                                        </button>
                                    </td>
                                </motion.tr>
                            ))
                        ) : (
                            <tr>
                                <td colSpan="6" className="px-6 py-10 text-center text-sm text-gray-400">
                                    Không tìm thấy đơn hàng nào phù hợp.
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>

            {filteredOrders.length > ordersPerPage && (
                 <div className="flex justify-between items-center mt-6">
                    <div className="text-sm text-gray-400">
                        Hiển thị { (currentPage - 1) * ordersPerPage + 1} đến {Math.min(currentPage * ordersPerPage, filteredOrders.length)} trong tổng số {filteredOrders.length} đơn hàng
                    </div>
                    <div className="flex space-x-2">
                        <button
                            className={`px-3 py-1 rounded-lg text-sm ${currentPage === 1 ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-600 text-white hover:bg-gray-500'}`}
                            disabled={currentPage === 1}
                            onClick={() => handlePageChange(currentPage - 1)}
                        >
                            Trước
                        </button>
                        {/* Logic render các nút số trang có thể phức tạp hơn nếu có nhiều trang */}
                        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                            <button
                                key={page}
                                className={`px-3 py-1 rounded-lg text-sm ${currentPage === page ? 'bg-blue-500 text-white' : 'bg-gray-600 text-white hover:bg-gray-500'}`}
                                onClick={() => handlePageChange(page)}
                            >
                                {page}
                            </button>
                        ))}
                        <button
                            className={`px-3 py-1 rounded-lg text-sm ${currentPage === totalPages ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : 'bg-gray-600 text-white hover:bg-gray-500'}`}
                            disabled={currentPage === totalPages || totalPages === 0}
                            onClick={() => handlePageChange(currentPage + 1)}
                        >
                            Sau
                        </button>
                    </div>
                </div>
            )}
           

            <Modal open={openModal} onClose={handleCloseModal}>
                <Box
                    sx={{
                        position: 'absolute', top: '50%', left: '50%',
                        transform: 'translate(-50%, -50%)', width: 400,
                        bgcolor: 'rgba(31, 41, 55, 0.95)', // bg-gray-800 with opacity
                        backdropFilter: 'blur(5px)',
                        border: '1px solid #4B5563', // border-gray-600
                        boxShadow: 24, p: 4, borderRadius: '8px', color: '#F3F4F6' // text-gray-100
                    }}
                >
                    <Typography variant="h6" component="h2" sx={{ color: '#D1D5DB' /* text-gray-300 */ }}>
                        Cập nhật trạng thái đơn hàng #{selectedOrder?.id}
                    </Typography>
                    <Typography variant="body2" sx={{ mt: 1, mb: 2, color: '#9CA3AF' /* text-gray-400 */ }}>
                        Trạng thái hiện tại: <strong style={{ color: '#F3F4F6' }}>{getStatusDisplayName(selectedOrder?.orderStatus)}</strong>
                    </Typography>
                    <Select
                        value={newStatus}
                        onChange={(e) => setNewStatus(e.target.value)}
                        fullWidth
                        sx={{ 
                            mt: 2, 
                            bgcolor: '#4B5563', // bg-gray-600
                            color: 'white',
                            '& .MuiSvgIcon-root': { color: 'white' },
                            '&:hover': { bgcolor: '#374151' /* bg-gray-700 */ },
                            '.MuiOutlinedInput-notchedOutline': { borderColor: '#6B7280' /* border-gray-500 */ },
                            '&.Mui-focused .MuiOutlinedInput-notchedOutline': { borderColor: '#3B82F6' /* ring-blue-500 */ },
                         }}
                        MenuProps={{
                            PaperProps: {
                                sx: {
                                    bgcolor: '#374151', // bg-gray-700 for dropdown
                                    color: 'white',
                                },
                            },
                        }}
                    >
                        {selectedOrder && getAllowedStatuses(selectedOrder.orderStatus).length > 0 ? (
                             getAllowedStatuses(selectedOrder.orderStatus).map(status => (
                                <MenuItem key={status} value={status} sx={{ '&:hover': { bgcolor: '#4B5563'} }}>
                                    {getStatusDisplayName(status)}
                                </MenuItem>
                            ))
                        ) : (
                            <MenuItem disabled sx={{ '&:hover': { bgcolor: '#4B5563'} }}>Không có trạng thái để chuyển</MenuItem>
                        )}
                    </Select>
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={handleUpdateStatus}
                        sx={{ 
                            mt: 3, 
                            bgcolor: '#3B82F6', /* bg-blue-500 */
                            '&:hover': { bgcolor: '#2563EB' /* hover:bg-blue-600 */},
                            '&.Mui-disabled': { bgcolor: '#4B5563', color: '#9CA3AF' }
                        }}
                        disabled={!newStatus || newStatus === selectedOrder?.orderStatus || getAllowedStatuses(selectedOrder?.orderStatus || "").length === 0}
                    >
                        Cập nhật
                    </Button>
                </Box>
            </Modal>
            
            <OrderDetailDrawer 
                orderId={selectedOrderId}
                open={drawerOpen}
                onClose={handleCloseDrawer}
            />

<EditOrder
                    open={isEditDrawerOpen}
                    onClose={handleCloseEditDrawer}
                    order={orderToEdit} // Truyền đơn hàng cần sửa
                    onOrderUpdated={handleOrderUpdated} // Truyền callback để cập nhật lại bảng
                />
        </motion.div>
    );
};

export default OrdersTable;
```

### ClientApp\src\components\Admin\overview\CategoryDistributionChart.jsx
```jsx
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend } from "recharts";
import axios from "axios";

const COLORS = ["#6366F1", "#8B5CF6", "#EC4899", "#10B981", "#F59E0B"];

const CategoryDistributionChart = () => {
	const [categoryData, setCategoryData] = useState([]);

	useEffect(() => {
		const fetchCategoryData = async () => {
			try {
				const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories/product-count`);
				setCategoryData(response.data);
			} catch (error) {
				console.error("Lỗi khi lấy dữ liệu danh mục:", error);
			}
		};

		fetchCategoryData();
	}, []);

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-lg font-medium mb-4 text-gray-100'>Thống Kê Danh Mục</h2>
			<div className='h-80'>
				<ResponsiveContainer width={"100%"} height={"100%"}>
					<PieChart>
						<Pie
							data={categoryData}
							cx={"50%"}
							cy={"50%"}
							labelLine={false}
							outerRadius={80}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{categoryData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};

export default CategoryDistributionChart;

```

### ClientApp\src\components\Admin\overview\SalesChannelChart.jsx
```jsx
import { motion } from "framer-motion";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, Cell } from "recharts";

const COLORS = ["#6366F1", "#8B5CF6", "#EC4899", "#10B981", "#F59E0B"];

const SALES_CHANNEL_DATA = [
	{ name: "Website", value: 45600 },
	{ name: "Mobile App", value: 38200 },
	{ name: "Marketplace", value: 29800 },
	{ name: "Social Media", value: 18700 },
];

const SalesChannelChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 lg:col-span-2 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-lg font-medium mb-4 text-gray-100'>Sales by Channel</h2>

			<div className='h-80'>
				<ResponsiveContainer>
					<BarChart data={SALES_CHANNEL_DATA}>
						<CartesianGrid strokeDasharray='3 3' stroke='#4B5563' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey={"value"} fill='#8884d8'>
							{SALES_CHANNEL_DATA.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Bar>
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default SalesChannelChart;

```

### ClientApp\src\components\Admin\overview\SalesOverviewChart.jsx
```jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import { formatCurrency } from "../../../utils/formatCurrency";

const SalesOverviewChart = () => {
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    const fetchSalesData = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/orders/revenue-year`);
        const data = await response.json();
        
        // Chuyển đổi dữ liệu từ API sang định dạng phù hợp
        const processedData = data.map(item => ({
          name: new Date(item.date).toLocaleString('default', { month: 'short' }),
          sales: item.revenue,
          fullDate: item.date,
          year: item.year
        })).sort((a, b) => new Date(a.fullDate) - new Date(b.fullDate));
        
        setChartData(processedData);
      } catch (error) {
        console.error("Error fetching sales data:", error);
      }
    };

    fetchSalesData();
  }, []);

  const formatCurrency = (value) => {
  if (value >= 1_000_000) {
    const millions = Math.floor(value / 1_000_000); // Lấy phần triệu
    const remainder = Math.floor((value % 1_000_000) / 100_000); // Lấy phần trăm ngàn (sau dấu phẩy)

    return remainder > 0 ? `${millions}tr${remainder}` : `${millions}tr`;
  } 
  if (value >= 1_000) {
    return `${(value / 1_000).toFixed(0)}k`; // Hiển thị nghìn
  }
  return value.toLocaleString('vi-VN'); // Hiển thị số bình thường
};


  return (
    <motion.div
      className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
    >
      <h2 className='text-lg font-medium mb-4 text-gray-100'>Sales Overview</h2>

      <div className='h-80'>
        {chartData.length > 0 ? (
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray='3 3' stroke='#4B5563' opacity={0.5} />
              <XAxis 
                dataKey="name"
                stroke='#9ca3af'
                tick={{ fill: '#E5E7EB' }}
              />
              <YAxis 
  stroke='#9ca3af'
  tick={{ fill: '#E5E7EB' }}
  tickFormatter={(value) => formatCurrency(value)}
  width={80}
/>
<Tooltip
  contentStyle={{
    backgroundColor: "rgba(17, 24, 39, 0.9)",
    borderColor: "#4B5563",
    borderRadius: "0.5rem",
  }}
  itemStyle={{ color: "#E5E7EB" }}
  formatter={(value) => [formatCurrency(value), 'Revenue']}
  labelFormatter={(label) => {
    const monthData = chartData.find(item => item.name === label);
    return monthData ? `${label} ${monthData.year}` : label;
  }}
/>

              <Line
                type="monotone"
                dataKey="sales"
                stroke='#6366F1'
                strokeWidth={2}
                dot={{ fill: "#6366F1", strokeWidth: 2, r: 4 }}
                activeDot={{ r: 6, strokeWidth: 2, stroke: '#fff' }}
              />
            </LineChart>
          </ResponsiveContainer>
        ) : (
          <div className="h-full flex items-center justify-center text-gray-400">
            No sales data available
          </div>
        )}
      </div>
    </motion.div>
  );
};

export default SalesOverviewChart;
```

### ClientApp\src\components\Admin\products\AddProductDrawer.jsx
```jsx
// src/components/ProductDrawer.js
import { useEffect } from "react";
import {
  Drawer,
  IconButton,
  Select,
  MenuItem,
  Button,
  Box,
  CircularProgress,
  InputBase,
  Typography,
  Tabs,
  Tab,
  TextField,
} from "@mui/material";
import { Close } from "@mui/icons-material";
// import { useFieldArray } from "react-hook-form"; // Sẽ được quản lý trong useProductForm nếu cần field array cho variants

// Import các custom hooks
import { useProductForm } from "@/hooks/api/useProductForm";
import { useProductImageManager } from "@/hooks/api/useProductImageManager";
import { useProductData } from "@/hooks/api/useProductData";

const ProductDrawer = ({ isOpen, onClose, onAddProduct }) => {
  const { categories, brands, loading: dataLoading, error: dataError } = useProductData();
  const imageManager = useProductImageManager();
  const productForm = useProductForm({
    onAddProduct,
    onClose: () => { // Khi form đóng (sau submit thành công hoặc hủy)
      onClose(); // Gọi prop onClose từ component cha
      imageManager.resetImageManager(); // Reset trạng thái của image manager
      // productForm.resetForm() đã được gọi bên trong handleFormSubmit
    },
  });
  const { errors } = productForm.formState; 

  // Đồng bộ lại imageError từ imageManager lên form nếu cần thiết để hiển thị tập trung
  // Hoặc bạn có thể hiển thị imageError.message trực tiếp từ imageManager.imageError

  const handleMainSubmit = async (formData) => {
    imageManager.setImageError(""); // Xóa lỗi ảnh cũ trước khi submit
    const { images: processedImages, error: imageProcessingError } = await imageManager.processImagesForSubmission();

    if (imageProcessingError) {
      // Hiển thị lỗi xử lý ảnh, productForm.setError có thể dùng ở đây nếu bạn muốn tích hợp với react-hook-form errors
      imageManager.setImageError(imageProcessingError);
      console.error("Image processing error:", imageProcessingError);
      return; // Dừng submit nếu có lỗi ảnh
    }

    if (processedImages.length === 0) {
        imageManager.setImageError("Vui lòng cung cấp ít nhất một ảnh cho sản phẩm.");
        return;
    }

    try {
      await productForm.handleFormSubmit(formData, processedImages);
      // Sau khi submit thành công, reset image manager
      imageManager.resetImageManager();
    } catch (error) {
      // Lỗi từ handleFormSubmit (ví dụ API error) đã được log trong hook
      // Bạn có thể thêm logic hiển thị lỗi chung ở đây nếu muốn
      console.error("Product submission failed:", error);
    }
  };
  
  // Khi drawer đóng (không phải do submit thành công, ví dụ bấm nút X hoặc click ra ngoài)
  const handleCloseDrawer = () => {
    productForm.resetForm(); // Reset các trường của form
    imageManager.resetImageManager(); // Reset trạng thái của image manager
    onClose(); // Gọi prop onClose từ component cha
  };


  if (dataLoading) {
    return (
      <Drawer anchor="right" open={isOpen} onClose={handleCloseDrawer}>
        <Box sx={{ width: 400, p: 3, display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
          <CircularProgress />
        </Box>
      </Drawer>
    );
  }

  return (
    <Drawer anchor="right" open={isOpen} onClose={handleCloseDrawer} BackdropProps={{ invisible: false }}>
      <Box sx={{ width: 400, p: 3, bgcolor: "background.default", height: "100%", overflowY: "auto" }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" fontWeight="bold">Thêm sản phẩm</Typography>
          <IconButton onClick={handleCloseDrawer}>
            <Close />
          </IconButton>
        </Box>

        {dataError && <Typography color="error" mb={2}>{dataError}</Typography>}

        <form onSubmit={productForm.handleSubmit(handleMainSubmit)}>
          <Box mt={2} p={2} border="1px solid #e0e0e0" borderRadius={2}>
            <Typography mb={1} fontWeight="medium">Tên sản phẩm</Typography>
            <InputBase {...productForm.register("name", { required: "Tên sản phẩm là bắt buộc" })} fullWidth required placeholder="Nhập tên sản phẩm" sx={{ border: '1px solid #ccc', borderRadius: 1, p: '2px 8px' }}/>
            {/* {productForm.formState.errors.name && <Typography color="error" variant="caption">{productForm.formState.errors.name.message}</Typography>} */}
          </Box>

          <Box mt={2} p={2} border="1px solid #e0e0e0" borderRadius={2}>
            <Typography mb={1} fontWeight="medium">Mô tả</Typography>
            <InputBase {...productForm.register("description", { required: "Mô tả là bắt buộc" })} fullWidth required multiline rows={3} placeholder="Nhập mô tả sản phẩm" sx={{ border: '1px solid #ccc', borderRadius: 1, p: '8px' }}/>
            {/* {productForm.formState.errors.description && <Typography color="error" variant="caption">{productForm.formState.errors.description.message}</Typography>} */}
          </Box>
          <Box mt={2} p={2} border="1px solid #e0e0e0" borderRadius={2}>
            <Typography mb={1} fontWeight="medium">Danh mục</Typography>
            <Select 
              {...productForm.register("categoryId", { required: "Vui lòng chọn danh mục" })} 
              fullWidth 
              displayEmpty 
              defaultValue=""
              error={!!errors?.categoryId} // Sử dụng optional chaining (?.), an toàn hơn nếu errors có thể undefined ban đầu
              sx={{borderColor: errors?.categoryId ? 'red' : undefined }}
            >
              <MenuItem value="" disabled>Chọn danh mục</MenuItem>
              {categories.map((cat) => (
                <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>
              ))}
            </Select>
            {errors?.categoryId && <Typography color="error" variant="caption" sx={{mt: 0.5}}>{errors.categoryId.message}</Typography>}
          </Box>

          {/* Ví dụ với trường Thương hiệu */}
          <Box mt={2} p={2} border="1px solid #e0e0e0" borderRadius={2}>
            <Typography mb={1} fontWeight="medium">Thương hiệu</Typography>
            <Select 
              {...productForm.register("brandId", { required: "Vui lòng chọn thương hiệu" })} 
              fullWidth 
              displayEmpty 
              defaultValue=""
              error={!!errors?.brandId}
              sx={{borderColor: errors?.brandId ? 'red' : undefined }}
            >
              <MenuItem value="" disabled>Chọn thương hiệu</MenuItem>
              {brands.map((brand) => (
                <MenuItem key={brand.id} value={brand.id}>{brand.name}</MenuItem>
              ))}
            </Select>
            {errors?.brandId && <Typography color="error" variant="caption" sx={{mt: 0.5}}>{errors.brandId.message}</Typography>}
          </Box>
          {/* Phần chọn ảnh với Tab */}
          <Box mt={2} p={2} border="1px solid #e0e0e0" borderRadius={2}>
            <Typography mb={1} fontWeight="medium">Ảnh sản phẩm</Typography>
            <Tabs value={imageManager.tabValue} onChange={(e, newValue) => imageManager.setTabValue(newValue)} indicatorColor="primary" textColor="primary">
              <Tab label="Tải ảnh lên" />
              <Tab label="Nhập URL" />
            </Tabs>

            {imageManager.tabValue === 0 ? (
              // Tab Upload ảnh
              <Box mt={2}>
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={imageManager.handleImageUploadFromDevice}
                  style={{ display: 'block', marginBottom: '16px' }}
                />
                {imageManager.uploadingImage && <CircularProgress size={24} sx={{my: 1}}/>}
                <Box mt={1} display="flex" flexWrap="wrap" gap={1}>
                  {imageManager.localImages.map((img, index) => (
                    <Box key={index} position="relative" border={img.isPrimary ? "2px solid blue" : "1px solid #ccc"} p={0.5} borderRadius={1}>
                      <img src={img.preview} alt={`Preview ${index}`} width={80} height={80} style={{ objectFit: 'cover', display: 'block' }} />
                      <Button
                        size="small"
                        color="error"
                        variant="contained"
                        onClick={() => imageManager.handleRemoveLocalImage(index)}
                        sx={{ position: 'absolute', top: -5, right: -5, minWidth: '20px', height: '20px', p:0, borderRadius: '50%' }}
                      >
                        X
                      </Button>
                      {!img.isPrimary && (
                        <Button
                            size="small"
                            onClick={() => imageManager.setPrimaryLocalImage(index)}
                            sx={{ fontSize: '0.6rem', p: '2px 4px', position: 'absolute', bottom: 0, left:0, right:0, backgroundColor: 'rgba(0,0,0,0.5)', color: 'white', '&:hover': {backgroundColor: 'rgba(0,0,0,0.7)'}}}
                        >
                            Đặt làm chính
                        </Button>
                      )}
                    </Box>
                  ))}
                </Box>
              </Box>
            ) : (
              // Tab URL ảnh
              <Box mt={2}>
                {imageManager.imageUrls.map((url, index) => (
                  <Box key={index} display="flex" alignItems="center" mb={1}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      size="small"
                      value={url}
                      onChange={(e) => imageManager.handleUrlInputChange(index, e.target.value)}
                      placeholder="Nhập URL ảnh"
                    />
                    {imageManager.imageUrls.length > 1 && (
                      <IconButton onClick={() => imageManager.handleRemoveUrlInput(index)} size="small" sx={{ml: 0.5}}>
                        <Close fontSize="small" />
                      </IconButton>
                    )}
                  </Box>
                ))}
                 {imageManager.uploadingImage && <CircularProgress size={24} sx={{my: 1}}/>}
                <Button onClick={imageManager.handleAddUrlField} variant="outlined" size="small" sx={{ mt: 1 }}>
                  Thêm URL khác
                </Button>
              </Box>
            )}
            {imageManager.imageError && (
              <Typography color="error" mt={1} variant="caption">{imageManager.imageError}</Typography>
            )}
          </Box>

          {/* TODO: Thêm FieldArray cho variants nếu cần */}
          {/* Ví dụ: <ProductVariantsControl control={productForm.control} register={productForm.register} /> */}

          <Box mt={3} display="flex" justifyContent="flex-end">
            <Button 
                type="button" 
                variant="outlined" 
                onClick={handleCloseDrawer} 
                sx={{ mr: 1, borderRadius: 2 }}
                disabled={imageManager.uploadingImage || productForm.formState?.isSubmitting}
            >
              Hủy
            </Button>
            <Button
                type="submit"
                variant="contained"
                disabled={imageManager.uploadingImage || productForm.formState?.isSubmitting} // Vô hiệu hóa khi đang tải ảnh hoặc submit form
                sx={{ bgcolor: "black", color: "white", borderRadius: 2, "&:hover": { bgcolor: "grey.800" }, "&:disabled": { bgcolor: "grey.400"} }}
            >
              { (imageManager.uploadingImage || productForm.formState?.isSubmitting) ? <CircularProgress size={24} color="inherit" /> : "Thêm Sản phẩm" }
            </Button>
          </Box>
        </form>
      </Box>
    </Drawer>
  );
};

export default ProductDrawer;
```

### ClientApp\src\components\Admin\products\AddSpecificationDrawer.jsx
```jsx
import React, { useState, useCallback, useEffect } from "react";
import {
  Drawer, Button, Box, Typography, IconButton,
  TextField, CircularProgress, Alert, Dialog,
  DialogActions, DialogContent, DialogContentText, DialogTitle,
  Snackbar, LinearProgress, Paper, InputAdornment
} from "@mui/material";
import {
  X, Trash, Check, Plus, Package as PackageIcon,
  LayoutGrid, Info, AlertTriangle, Edit, Save
} from "lucide-react";
import { useSpecificationForm } from "@/hooks/api/useProductSpecificationManager";

const ICON_SIZE_FIELD = 20;
const ICON_SIZE_BUTTON = 18;
const ICON_SIZE_CLOSE = 22;

const AddSpecificationDrawer = ({ open, onClose, product }) => {
  const { specifications, loadingState, snackbarState, deleteDialogOpen, specToDelete, anyLoading, showInitialLoadSpinner, showRefetchProgressBar, actions } = useSpecificationForm(product, open, onClose);

  const [newSpec, setNewSpec] = useState({
    name: '',
    value: '',
    unit: '',
    displayOrder: specifications.length > 0 ? Math.max(...specifications.map(s => s.displayOrder)) + 1 : 1,
  });
  const [editingSpecId, setEditingSpecId] = useState(null);
  const [editingSpecData, setEditingSpecData] = useState({});

  useEffect(() => {
    if (!open) {
      setNewSpec({
        name: '',
        value: '',
        unit: '',
        displayOrder: 1,
      });
      setEditingSpecId(null);
      setEditingSpecData({});
    } else if (specifications.length > 0) {
      setNewSpec(prev => ({ ...prev, displayOrder: Math.max(...specifications.map(s => s.displayOrder)) + 1 }));
    }
  }, [open, specifications]);

  const handleNewSpecChange = useCallback((e) => {
    const { name, value } = e.target;
    setNewSpec(prev => ({
      ...prev,
      [name]: name === 'displayOrder' ? (value === '' ? '' : Number(value)) : value
    }));
  }, []);

  const handleEditSpecChange = useCallback((e) => {
    const { name, value } = e.target;
    setEditingSpecData(prev => ({
      ...prev,
      [name]: name === 'displayOrder' ? (value === '' ? '' : Number(value)) : value
    }));
  }, []);

  const handleAddNewSpec = useCallback(async (e) => {
    e.preventDefault();
    if (!newSpec.name || !newSpec.value) {
      actions.showSnackbar("Tên và Giá trị thông số không được để trống.", "warning");
      return;
    }
    await actions.handleAddOrUpdateSpecification(newSpec);
    setNewSpec({
      name: '',
      value: '',
      unit: '',
      displayOrder: specifications.length > 0 ? Math.max(...specifications.map(s => s.displayOrder)) + 1 : 1,
    });
  }, [newSpec, actions, specifications]);

  const handleEditClick = useCallback((spec) => {
    setEditingSpecId(spec.id);
    setEditingSpecData({ ...spec });
  }, []);

  const handleSaveEdit = useCallback(async () => {
    if (!editingSpecData.name || !editingSpecData.value) {
      actions.showSnackbar("Tên và Giá trị thông số không được để trống.", "warning");
      return;
    }
    await actions.handleAddOrUpdateSpecification(editingSpecData);
    setEditingSpecId(null);
    setEditingSpecData({});
  }, [editingSpecData, actions]);

  const handleCancelEdit = useCallback(() => {
    setEditingSpecId(null);
    setEditingSpecData({});
  }, []);

  const renderProductInfo = useCallback(() => (
    product && (
      <Paper variant="outlined" sx={{ mb: 2.5, p: 1.5, bgcolor: 'action.hover' }}>
        <Typography variant="body2" component="div" gutterBottom sx={{ fontWeight: 'medium', display: 'flex', alignItems: 'center' }}>
          <PackageIcon size={ICON_SIZE_FIELD - 2} style={{ marginRight: '8px', opacity: 0.8 }} />
          Sản phẩm: <Typography component="span" variant="body2" color="text.secondary" sx={{ ml: 0.5 }}>{product.name || "Không có tên"}</Typography>
        </Typography>
        <Typography variant="body2" component="div" sx={{ display: 'flex', alignItems: 'center' }}>
          <LayoutGrid size={ICON_SIZE_FIELD - 2} style={{ marginRight: '8px', opacity: 0.8 }} />
          Danh mục: <Typography component="span" variant="body2" color="text.secondary" sx={{ ml: 0.5 }}>{product.category?.name || 'Chưa có hoặc không hợp lệ'}</Typography>
        </Typography>
      </Paper>
    )
  ), [product]);

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      PaperProps={{
        sx: {
          width: { xs: '100%', sm: 480, md: 520 },
          boxSizing: 'border-box',
        }
      }}
    >
      <Box
        sx={{
          p: { xs: 2, md: 2.5 },
          bgcolor: "background.paper",
          height: "100%",
          display: "flex",
          flexDirection: "column",
          position: 'relative',
        }}
      >
        {showRefetchProgressBar && <LinearProgress sx={{ position: 'absolute', top: 0, left: 0, right: 0, zIndex: 10, height: '3px' }} />}

        <Box
          display="flex"
          justifyContent="space-between"
          alignItems="center"
          mb={2}
          pb={1.5}
          borderBottom={1}
          borderColor="divider"
        >
          <Typography variant="h6" fontWeight={500}>
            Quản lý Thông số Kỹ thuật
          </Typography>
          <IconButton onClick={onClose} aria-label="Đóng Drawer" size="small">
            <X size={ICON_SIZE_CLOSE} />
          </IconButton>
        </Box>

        {renderProductInfo()}

        {showInitialLoadSpinner ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexGrow: 1, minHeight: '200px' }}>
            <CircularProgress />
          </Box>
        ) : (
          <Box sx={{ flexGrow: 1, overflowY: 'auto', pr: { xs: 0, sm: 0.5 }, pt: 0.5 }}>
            <Typography variant="h6" sx={{ mb: 2 }}>Thêm Thông số Mới</Typography>
            <form onSubmit={handleAddNewSpec} className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 p-4 border rounded-lg bg-gray-100">
              <TextField
                label="Tên thông số"
                name="name"
                value={newSpec.name}
                onChange={handleNewSpecChange}
                fullWidth
                size="small"
                required
                disabled={anyLoading}
              />
              <TextField
                label="Giá trị"
                name="value"
                value={newSpec.value}
                onChange={handleNewSpecChange}
                fullWidth
                size="small"
                required
                disabled={anyLoading}
              />
              <TextField
                label="Đơn vị (tùy chọn)"
                name="unit"
                value={newSpec.unit}
                onChange={handleNewSpecChange}
                fullWidth
                size="small"
                disabled={anyLoading}
              />
              <TextField
                label="Thứ tự hiển thị"
                name="displayOrder"
                type="number"
                value={newSpec.displayOrder}
                onChange={handleNewSpecChange}
                fullWidth
                size="small"
                disabled={anyLoading}
                inputProps={{ min: 1 }}
              />
              <Button
                type="submit"
                variant="contained"
                color="primary"
                startIcon={loadingState.submit ? <CircularProgress size={20} color="inherit" /> : <Plus size={ICON_SIZE_BUTTON} />}
                disabled={anyLoading || !newSpec.name || !newSpec.value}
                sx={{ mt: 1, gridColumn: 'span 2' }}
              >
                {loadingState.submit ? 'Đang thêm...' : 'Thêm Thông số'}
              </Button>
            </form>

            <Typography variant="h6" sx={{ mb: 2, mt: 4 }}>Thông số Hiện có ({specifications.length})</Typography>
            {specifications.length === 0 && !loadingState.fetch && (
              <Alert severity="info" variant="outlined" icon={<Info size={ICON_SIZE_FIELD} />} sx={{ mt: 1, mb: 2, fontSize: '0.875rem' }}>
                Sản phẩm này chưa có thông số kỹ thuật nào.
              </Alert>
            )}
            <Box>
              {specifications.map((spec) => (
                <Paper key={spec.id} variant="outlined" sx={{ p: 2, mb: 2, display: 'flex', flexDirection: 'column', gap: 1, bgcolor: 'background.paper' }}>
                  {editingSpecId === spec.id ? (
                    <form onSubmit={(e) => { e.preventDefault(); handleSaveEdit(); }} className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <TextField
                        label="Tên thông số"
                        name="name"
                        value={editingSpecData.name || ''}
                        onChange={handleEditSpecChange}
                        fullWidth
                        size="small"
                        required
                        disabled={anyLoading}
                      />
                      <TextField
                        label="Giá trị"
                        name="value"
                        value={editingSpecData.value || ''}
                        onChange={handleEditSpecChange}
                        fullWidth
                        size="small"
                        required
                        disabled={anyLoading}
                      />
                      <TextField
                        label="Đơn vị (tùy chọn)"
                        name="unit"
                        value={editingSpecData.unit || ''}
                        onChange={handleEditSpecChange}
                        fullWidth
                        size="small"
                        disabled={anyLoading}
                      />
                      <TextField
                        label="Thứ tự hiển thị"
                        name="displayOrder"
                        type="number"
                        value={editingSpecData.displayOrder || ''}
                        onChange={handleEditSpecChange}
                        fullWidth
                        size="small"
                        disabled={anyLoading}
                        inputProps={{ min: 1 }}
                      />
                      <Box sx={{ gridColumn: 'span 2', display: 'flex', gap: 1, justifyContent: 'flex-end' }}>
                        <Button onClick={handleCancelEdit} variant="outlined" disabled={anyLoading}>Hủy</Button>
                        <Button
                          type="submit"
                          variant="contained"
                          color="primary"
                          startIcon={loadingState.submit ? <CircularProgress size={20} color="inherit" /> : <Save size={ICON_SIZE_BUTTON} />}
                          disabled={anyLoading || !editingSpecData.name || !editingSpecData.value}
                        >
                          {loadingState.submit ? 'Đang lưu...' : 'Lưu thay đổi'}
                        </Button>
                      </Box>
                    </form>
                  ) : (
                    <>
                      <Typography variant="body1" fontWeight="medium">{spec.name}: {spec.value} {spec.unit}</Typography>
                      <Typography variant="body2" color="text.secondary">Thứ tự hiển thị: {spec.displayOrder}</Typography>
                      <Box sx={{ display: 'flex', gap: 1, mt: 1, justifyContent: 'flex-end' }}>
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<Edit size={ICON_SIZE_BUTTON} />}
                          onClick={() => handleEditClick(spec)}
                          disabled={anyLoading}
                        >
                          Sửa
                        </Button>
                        <Button
                          variant="outlined"
                          size="small"
                          color="error"
                          startIcon={<Trash size={ICON_SIZE_BUTTON} />}
                          onClick={() => actions.handleDeleteClick(spec)}
                          disabled={anyLoading}
                        >
                          Xóa
                        </Button>
                      </Box>
                    </>
                  )}
                </Paper>
              ))}
            </Box>
          </Box>
        )}
      </Box>

      <Dialog
        open={deleteDialogOpen}
        onClose={actions.handleCloseDeleteDialog}
        maxWidth="xs"
        fullWidth
      >
        <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <AlertTriangle color="orange" size={ICON_SIZE_CLOSE} /> Xác nhận xóa
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            Bạn có chắc chắn muốn xóa thông số kỹ thuật "{specToDelete?.name}: {specToDelete?.value}" này không? Hành động này không thể hoàn tác.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ p: 2 }}>
          <Button onClick={actions.handleCloseDeleteDialog} color="inherit" variant="outlined" disabled={loadingState.delete}>
            Hủy
          </Button>
          <Button
            onClick={actions.handleDeleteSpecification}
            color="error"
            variant="contained"
            disabled={loadingState.delete}
            startIcon={loadingState.delete ? <CircularProgress size={20} color="inherit" /> : <Trash size={ICON_SIZE_BUTTON} />}
            sx={{ minWidth: '100px' }}
          >
            {loadingState.delete ? 'Đang xóa...' : 'Xác nhận xóa'}
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbarState.open}
        autoHideDuration={4000}
        onClose={actions.handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert
          onClose={actions.handleCloseSnackbar}
          severity={snackbarState.severity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {snackbarState.message}
        </Alert>
      </Snackbar>
    </Drawer>
  );
};

export default React.memo(AddSpecificationDrawer);

```

### ClientApp\src\components\Admin\products\BrandDrawer.jsx
```jsx
import React from "react";
import {
  Drawer, Button, Box, Typography, IconButton, Table,
  TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,
  CircularProgress, Alert
} from "@mui/material";
import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from "@mui/material";
import { X, Edit, Trash, AlertTriangle } from "lucide-react"; // Thêm AlertTriangle
import BrandModal from "./BrandModal"; // Đảm bảo BrandModal nhận và sử dụng `onClose(shouldRefresh)`
import { useBrands } from "@/hooks/api/useBrands"; // Đường dẫn tới hook

const BrandDrawer = ({ open, onClose }) => {
  const {
    brands,
    selectedBrand,
    modalOpen,
    deleteDialogOpen,
    brandToDelete,
    loading,
    error,
    actions
  } = useBrands(open); // Truyền `open` vào hook để nó có thể quyết định khi nào fetch dữ liệu

  const getLogoUrl = (logoPath) => {
    if (!logoPath) return "https://via.placeholder.com/50"; // Ảnh mặc định nếu không có logo
    if (logoPath.startsWith("http")) {
      return logoPath; // Full external URL
    }
    return `${process.env.REACT_APP_API_BASE_URL}${logoPath}`;
  };

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <Box
        sx={{
          width: { xs: '100%', sm: 500, md: 600 }, // Responsive width
          p: { xs: 2, sm: 3 },
          bgcolor: "background.paper", // Sử dụng theme background
          height: "100%",
          display: "flex",
          flexDirection: "column",
          boxSizing: 'border-box',
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2} pb={1.5} borderBottom={1} borderColor="divider">
          <Typography variant="h6" fontWeight={500}> {/* Giảm fontWeight một chút */}
            Quản lý Thương hiệu
          </Typography>
          <IconButton onClick={onClose} aria-label="Đóng Drawer">
            <X size={22} />
          </IconButton>
        </Box>

        {error && (
            <Alert severity="error" onClose={actions.clearError} sx={{ mb: 2 }}>
                {error}
            </Alert>
        )}

        <Button
          variant="contained"
          color="primary" // Sử dụng màu primary của theme
          sx={{ mb: 2, alignSelf: 'flex-start' }} // Canh nút Thêm sang trái
          onClick={() => actions.handleOpenModal()}
          disabled={loading} // Disable nút khi đang có thao tác
        >
          Thêm thương hiệu
        </Button>

        {loading && brands.length === 0 && ( // Chỉ hiển thị spinner toàn cục khi đang load lần đầu
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexGrow: 1 }}>
                <CircularProgress />
            </Box>
        )}

        {!loading && !error && brands.length === 0 && (
             <Typography variant="body1" color="text.secondary" textAlign="center" sx={{mt: 3}}>
                Không có thương hiệu nào.
            </Typography>
        )}

        {brands.length > 0 && (
          <TableContainer component={Paper} sx={{ flexGrow: 1, overflowY: 'auto' }}>
            <Table stickyHeader aria-label="sticky table">
              <TableHead>
                <TableRow>
                  <TableCell sx={{ fontWeight: 'bold' }}>Thương hiệu</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Logo</TableCell>
                  <TableCell sx={{ fontWeight: 'bold' }}>Mô tả</TableCell>
                  <TableCell sx={{ fontWeight: 'bold', textAlign: 'right' }}>Hành động</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {brands.map((brand) => (
                  <TableRow hover key={brand.id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                    <TableCell>{brand.name}</TableCell>
                    <TableCell>
                      <img
                        src={getLogoUrl(brand.logo)}
                        alt={`${brand.name} logo`}
                        style={{ width: 50, height: 50, borderRadius: '50%', objectFit: 'contain' }} // CSS trực tiếp hoặc dùng class
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = "https://via.placeholder.com/50"; // Ảnh fallback
                        }}
                      />
                    </TableCell>
                    <TableCell sx={{maxWidth: 200, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}>
                        {brand.description || "N/A"}
                    </TableCell>
                    <TableCell sx={{ textAlign: 'right' }}>
                      <IconButton onClick={() => actions.handleOpenModal(brand)} aria-label={`Sửa ${brand.name}`} disabled={loading}>
                        <Edit size={20} />
                      </IconButton>
                      <IconButton onClick={() => actions.handleOpenDeleteDialog(brand)} aria-label={`Xóa ${brand.name}`} disabled={loading}>
                        <Trash size={20} color="error" /> {/* Dùng màu error của theme */}
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Box>

      {/* Modal Thêm/Sửa */}
      <BrandModal
        open={modalOpen}
        // Truyền hàm handleCloseModal từ actions, nó sẽ gọi fetchBrands nếu cần
        onClose={(shouldRefresh) => actions.handleCloseModal(shouldRefresh)}
        brand={selectedBrand}
        // Không cần truyền refreshBrands nữa vì onClose của BrandModal sẽ xử lý
      />

      {/* Dialog Xác nhận Xóa */}
      <Dialog open={deleteDialogOpen} onClose={actions.handleCloseDeleteDialog} maxWidth="xs" fullWidth>
        <DialogTitle sx={{display: 'flex', alignItems: 'center', gap: 1}}>
            <AlertTriangle color="orange" size={22}/> Xác nhận xóa
        </DialogTitle>
        <DialogContent>
          <DialogContentText>
            Bạn có chắc chắn muốn xóa thương hiệu <b>{brandToDelete?.name}</b> không? Hành động này không thể hoàn tác.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{p: 2}}>
          <Button onClick={actions.handleCloseDeleteDialog} color="inherit" variant="outlined" disabled={loading}>
            Hủy
          </Button>
          <Button onClick={actions.handleConfirmDelete} color="error" variant="contained" disabled={loading}
            startIcon={loading ? <CircularProgress size={20} color="inherit"/> : <Trash size={18}/>}
          >
            {loading ? "Đang xóa..." : "Xóa"}
          </Button>
        </DialogActions>
      </Dialog>
    </Drawer>
  );
};

export default React.memo(BrandDrawer);
```

### ClientApp\src\components\Admin\products\BrandModal.jsx
```jsx
import React, { useState, useEffect } from "react";
import { 
  Modal, 
  Box, 
  Typography, 
  Button, 
  TextField, 
  IconButton,
  Tabs,
  Tab,
  CircularProgress
} from "@mui/material";
import { X, Upload } from "lucide-react";
import axios from "axios";

const BrandModal = ({ open, onClose, brand, refreshBrands }) => {
  const [brandData, setBrandData] = useState({ 
    name: "", 
    description: "", 
    logo: "" 
  });
  const [tabValue, setTabValue] = useState(0); // 0: URL, 1: Upload
  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState("");
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    if (brand) {
      setBrandData(brand);
      // Nếu brand có logo, mặc định chọn tab URL
      if (brand.logo) setTabValue(0);
    } else {
      setBrandData({ name: "", description: "", logo: "" });
      setLogoFile(null);
      setLogoPreview("");
    }
  }, [brand]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setBrandData({ ...brandData, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    setLogoFile(file);
    setLogoPreview(URL.createObjectURL(file));
    // Clear URL nếu đang ở tab upload
    if (tabValue === 1) {
      setBrandData({...brandData, logo: ""});
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    
    try {
      let finalLogoUrl = brandData.logo;

      // Nếu đang ở tab upload và có file
      if (tabValue === 1 && logoFile) {
        const formData = new FormData();
        formData.append("file", logoFile);
        
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/upload`, 
          formData, 
          { headers: { "Content-Type": "multipart/form-data" } }
        );
        
        finalLogoUrl = response.data.imageUrl;
      }

      const dataToSend = {
        ...brandData,
        logo: finalLogoUrl
      };

      if (brand) {
        await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/brands/${brand.id}`, dataToSend);
      } else {
        await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/brands`, dataToSend);
      }

      refreshBrands();
      onClose();
    } catch (error) {
      console.error("Failed to save brand:", error);
    } finally {
      setUploading(false);
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 400,
          bgcolor: "white",
          p: 3,
          borderRadius: 2,
          boxShadow: 24,
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" fontWeight="bold">
            {brand ? "Chỉnh sửa thương hiệu" : "Thêm thương hiệu"}
          </Typography>
          <IconButton onClick={onClose}>
            <X size={24} />
          </IconButton>
        </Box>
        
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Tên thương hiệu"
            name="name"
            value={brandData.name}
            onChange={handleChange}
            margin="normal"
            required
          />
          
          <TextField
            fullWidth
            label="Mô tả"
            name="description"
            value={brandData.description}
            onChange={handleChange}
            margin="normal"
            multiline
            rows={3}
          />

          <Box mt={2} mb={2}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Logo thương hiệu
            </Typography>
            
            <Tabs 
              value={tabValue} 
              onChange={(e, newValue) => setTabValue(newValue)}
              sx={{ mb: 2 }}
            >
              <Tab label="Nhập URL" />
              <Tab label="Tải lên" />
            </Tabs>
            
            {tabValue === 0 ? (
              // Tab URL
              <TextField
                fullWidth
                label="Logo URL"
                name="logo"
                value={brandData.logo}
                onChange={handleChange}
                placeholder="https://example.com/logo.png"
              />
            ) : (
              // Tab Upload
              <Box>
                <Button
                  component="label"
                  variant="outlined"
                  startIcon={<Upload size={18} />}
                  sx={{ mb: 2 }}
                >
                  Chọn ảnh
                  <input 
                    type="file" 
                    hidden 
                    accept="image/*" 
                    onChange={handleFileChange} 
                  />
                </Button>
                
                {logoPreview && (
                  <Box mt={1} position="relative" width={100}>
                    <img 
                      src={logoPreview} 
                      alt="Logo preview" 
                      style={{ 
                        width: '100%', 
                        height: 'auto',
                        borderRadius: 4
                      }} 
                    />
                    <IconButton
                      size="small"
                      onClick={() => {
                        setLogoFile(null);
                        setLogoPreview("");
                      }}
                      sx={{
                        position: 'absolute',
                        top: -8,
                        right: -8,
                        backgroundColor: 'rgba(0,0,0,0.6)',
                        color: 'white',
                        '&:hover': {
                          backgroundColor: 'rgba(0,0,0,0.8)'
                        }
                      }}
                    >
                      <X size={16} />
                    </IconButton>
                  </Box>
                )}
              </Box>
            )}
          </Box>

          <Button 
            type="submit" 
            variant="contained" 
            fullWidth
            disabled={uploading}
            sx={{ 
              mt: 2, 
              bgcolor: "black", 
              color: "white", 
              borderRadius: 2,
              height: 42
            }}
          >
            {uploading ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              brand ? "Cập nhật" : "Thêm"
            )}
          </Button>
        </form>
      </Box>
    </Modal>
  );
};

export default BrandModal;
```

### ClientApp\src\components\Admin\products\CategoryBrandDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer, Button, Box, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from "@mui/material";
import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from "@mui/material";
import { X, Edit, Trash } from "lucide-react";
import axios from "axios";
import CategoryModal from "./CategoryModal";

const CategoryBrandDrawer = ({ open, onClose }) => {
    const [categories, setCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [modalOpen, setModalOpen] = useState(false);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [categoryToDelete, setCategoryToDelete] = useState(null);

    useEffect(() => {
        fetchCategories();
    }, []);

    const fetchCategories = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
            setCategories(response.data);
        } catch (error) {
            console.error("Failed to fetch categories:", error);
        }
    };

    const handleConfirmDelete = async () => {
    if (!categoryToDelete) return;

    try {
        await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/categories/${categoryToDelete.id}`);
        await fetchCategories();
        setDeleteDialogOpen(false);
        setCategoryToDelete(null);
    } catch (error) {
        console.error("Failed to delete category:", error);
    }
};


    const handleOpenModal = (category = null) => {
        setSelectedCategory(category);
        setModalOpen(true);
    };

    const handleOpenDeleteDialog = (category) => {
    setCategoryToDelete(category);
    setDeleteDialogOpen(true);
};

    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
            <Box
                sx={{
                    width: 600,
                    p: 3,
                    bgcolor: "white",
                    border: "2px solid black",
                    borderRadius: 3,
                    boxShadow: 3,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                }}
            >
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6" fontWeight="bold">
                        Danh mục
                    </Typography>
                    <IconButton onClick={onClose}>
                        <X size={24} />
                    </IconButton>
                </Box>
                <Button variant="contained" sx={{ mb: 2, bgcolor: "black", color: "white", borderRadius: 2 }} onClick={() => handleOpenModal()}>
                    Thêm danh mục
                </Button>
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell><b>Tên danh mục</b></TableCell>
                                <TableCell><b>Mô tả</b></TableCell>
                                <TableCell><b>Hình ảnh</b></TableCell>
                                <TableCell><b>Hành động</b></TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {categories.map((category) => (
                                <TableRow key={category.id}>
                                    <TableCell>{category.name}</TableCell>
                                    <TableCell>{category.description}</TableCell>
                                    <TableCell><img
    src={
        category.image?.startsWith("http")
            ? category.image // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${category.image}`
    }
    alt={`${category.name} logo`}
    className="size-10 rounded-full"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/></TableCell>
                                    <TableCell>
                                        <IconButton onClick={() => handleOpenModal(category)}>
                                            <Edit size={20} />
                                        </IconButton>
                                       <IconButton onClick={() => handleOpenDeleteDialog(category)}>
                                            <Trash size={20} color="red" />
                                        </IconButton>

                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
            <CategoryModal open={modalOpen} onClose={() => setModalOpen(false)} category={selectedCategory} refreshCategories={fetchCategories} />

                <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
    <DialogTitle>Xác nhận xóa</DialogTitle>
    <DialogContent>
        <DialogContentText>
            Bạn có chắc chắn muốn xóa danh mục <b>{categoryToDelete?.name}</b> không? Hành động này không thể hoàn tác.
        </DialogContentText>
    </DialogContent>
    <DialogActions>
        <Button onClick={() => setDeleteDialogOpen(false)} color="primary">
            Hủy
        </Button>
        <Button onClick={handleConfirmDelete} color="error" variant="contained">
            Xóa
        </Button>
    </DialogActions>
</Dialog>
        </Drawer>
    );
};

export default CategoryBrandDrawer;

```

### ClientApp\src\components\Admin\products\CategoryModal.jsx
```jsx
import React, { useState, useEffect } from "react";
import { 
  Modal, 
  Box, 
  Typography, 
  TextField, 
  Button, 
  IconButton,
  Tabs,
  Tab,
  CircularProgress,
  Avatar
} from "@mui/material";
import { X, Upload, Image as ImageIcon } from "lucide-react";
import axios from "axios";

const CategoryModal = ({ open, onClose, category, refreshCategories }) => {
  const [formData, setFormData] = useState({ 
    name: "", 
    description: "", 
    image: "" 
  });
  const [tabValue, setTabValue] = useState(0); // 0: URL, 1: Upload
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState("");
  const [uploading, setUploading] = useState(false);
  const [imageError, setImageError] = useState("");

  useEffect(() => {
    if (category) {
      setFormData({
        name: category.name || "",
        description: category.description || "",
        image: category.image || ""
      });
      // Nếu có ảnh, mặc định chọn tab URL
      if (category.image) setTabValue(0);
    } else {
      setFormData({ name: "", description: "", image: "" });
      setImageFile(null);
      setImagePreview("");
    }
  }, [category]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // Validate file type
    if (!file.type.match('image.*')) {
      setImageError("Chỉ chấp nhận file ảnh");
      return;
    }

    // Validate file size (max 2MB)
    if (file.size > 2 * 1024 * 1024) {
      setImageError("Kích thước ảnh tối đa 2MB");
      return;
    }

    setImageError("");
    setImageFile(file);
    setImagePreview(URL.createObjectURL(file));
    // Clear URL nếu đang ở tab upload
    if (tabValue === 1) {
      setFormData({...formData, image: ""});
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUploading(true);
    
    try {
      let finalImageUrl = formData.image;

      // Nếu đang ở tab upload và có file
      if (tabValue === 1 && imageFile) {
        const formData = new FormData();
        formData.append("file", imageFile);
        
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/upload`, 
          formData, 
          { headers: { "Content-Type": "multipart/form-data" } }
        );
        
        finalImageUrl = response.data.imageUrl;
      } else if (tabValue === 0 && !formData.image) {
        setImageError("Vui lòng nhập URL ảnh hoặc tải ảnh lên");
        setUploading(false);
        return;
      }

      const dataToSend = {
        ...formData,
        image: finalImageUrl
      };

      if (category) {
        await axios.put(
          `${process.env.REACT_APP_API_BASE_URL}/api/categories/${category.id}`, 
          { ...dataToSend, id: category.id }
        );
      } else {
        await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/categories`, 
          dataToSend
        );
      }

      await refreshCategories();
      onClose();
    } catch (error) {
      console.error("Failed to save category:", error);
      setImageError("Có lỗi xảy ra khi lưu danh mục");
    } finally {
      setUploading(false);
    }
  };

  return (
    <Modal open={open} onClose={onClose}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 400,
          bgcolor: "white",
          p: 3,
          borderRadius: 2,
          boxShadow: 24,
        }}
      >
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h6" fontWeight="bold">
            {category ? "Chỉnh sửa danh mục" : "Thêm danh mục"}
          </Typography>
          <IconButton onClick={onClose}>
            <X size={24} />
          </IconButton>
        </Box>
        
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            label="Tên danh mục"
            name="name"
            value={formData.name}
            onChange={handleChange}
            margin="normal"
            required
          />
          
          <TextField
            fullWidth
            label="Mô tả"
            name="description"
            value={formData.description}
            onChange={handleChange}
            margin="normal"
            multiline
            rows={3}
          />

          <Box mt={2} mb={2}>
            <Typography variant="subtitle1" fontWeight="bold" gutterBottom>
              Hình ảnh danh mục
            </Typography>
            
            <Tabs 
              value={tabValue} 
              onChange={(e, newValue) => setTabValue(newValue)}
              sx={{ mb: 2 }}
            >
              <Tab label="Nhập URL" icon={<ImageIcon size={16} />} />
              <Tab label="Tải lên" icon={<Upload size={16} />} />
            </Tabs>
            
            {tabValue === 0 ? (
              // Tab URL
              <Box>
                <TextField
                  fullWidth
                  label="Hình ảnh URL"
                  name="image"
                  value={formData.image}
                  onChange={handleChange}
                  placeholder="https://example.com/image.jpg"
                />
                {formData.image && (
                  <Box mt={2} display="flex" justifyContent="center">
                    <Avatar
                      src={formData.image}
                      alt="Preview"
                      sx={{ 
                        width: 100, 
                        height: 100,
                        border: '1px solid #ddd'
                      }}
                      variant="rounded"
                    />
                  </Box>
                )}
              </Box>
            ) : (
              // Tab Upload
              <Box>
                <Button
                  component="label"
                  variant="outlined"
                  startIcon={<Upload size={18} />}
                  fullWidth
                  sx={{ mb: 2 }}
                >
                  Chọn ảnh
                  <input 
                    type="file" 
                    hidden 
                    accept="image/*" 
                    onChange={handleFileChange} 
                  />
                </Button>
                
                {imagePreview && (
                  <Box mt={1} display="flex" flexDirection="column" alignItems="center">
                    <Avatar
                      src={imagePreview}
                      alt="Preview"
                      sx={{ 
                        width: 100, 
                        height: 100,
                        border: '1px solid #ddd',
                        mb: 1
                      }}
                      variant="rounded"
                    />
                    <Button
                      size="small"
                      color="error"
                      variant="outlined"
                      onClick={() => {
                        setImageFile(null);
                        setImagePreview("");
                      }}
                    >
                      Xóa ảnh
                    </Button>
                  </Box>
                )}
              </Box>
            )}
            
            {imageError && (
              <Typography color="error" variant="body2" mt={1}>
                {imageError}
              </Typography>
            )}
          </Box>

          <Button 
            type="submit" 
            variant="contained" 
            fullWidth
            disabled={uploading}
            sx={{ 
              mt: 2,
              height: 42,
              bgcolor: "black", 
              color: "white",
              '&:hover': {
                bgcolor: '#333'
              }
            }}
          >
            {uploading ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              category ? "Cập nhật" : "Thêm"
            )}
          </Button>
        </form>
      </Box>
    </Modal>
  );
};

export default CategoryModal;
```

### ClientApp\src\components\Admin\products\EditProductDrawer.jsx
```jsx
import React, { useState, useEffect, useCallback, useMemo } from "react";
import Drawer from "@mui/material/Drawer";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import MenuItem from "@mui/material/MenuItem";
import IconButton from "@mui/material/IconButton";
import DeleteIcon from "@mui/icons-material/Delete";
import AddIcon from "@mui/icons-material/Add";
import CloseIcon from "@mui/icons-material/Close"; // Thêm icon Close
import axios from "axios";
import {
  Box,
  Typography,
  CircularProgress,
  Alert,
  Stack,
  Grid,
  Checkbox,
  FormControlLabel,
  Snackbar,
} from "@mui/material";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

// Giá trị khởi tạo cho một biến thể mới
const initialVariantState = {
  color: "",
  storage: "",
  price: "",
  discountPrice: "",
  stockQuantity: "",
  flashSaleStart: "",
  flashSaleEnd: "",
};

// Giá trị khởi tạo cho một ảnh mới
const initialImageState = { imageUrl: "", isPrimary: false };

// Hàm định dạng ngày giờ cho datetime-local input
const formatDateTimeForInput = (dateTimeString) => {
  if (!dateTimeString) return "";
  try {
    // Cố gắng tạo đối tượng Date, nếu không hợp lệ, trả về chuỗi rỗng
    const date = new Date(dateTimeString);
    if (isNaN(date.getTime())) return ""; // Kiểm tra nếu date không hợp lệ
    return date.toISOString().slice(0, 16);
  } catch (e) {
    return ""; // Trả về rỗng nếu có lỗi khi parse date
  }
};

const EditProductDrawer = ({ isOpen, onClose, product, onUpdateProduct }) => {
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    categoryId: "",
    brandId: "",
    images: [initialImageState],
    variants: [initialVariantState],
  });
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  // Khởi tạo formData từ product prop khi product thay đổi hoặc drawer mở lần đầu với product
  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || "",
        description: product.description || "",
        categoryId: product.categoryId || "",
        brandId: product.brandId || "",
        images:
          product.images?.length > 0
            ? product.images.map((img) => ({
                imageUrl: img.imageUrl || "",
                isPrimary: img.isPrimary || false,
              }))
            : [initialImageState],
        variants:
          product.variants?.length > 0
            ? product.variants.map((variant) => ({
                color: variant.color || "",
                storage: variant.storage || "",
                price: variant.price || "",
                discountPrice: variant.discountPrice || "",
                stockQuantity: variant.stockQuantity || "",
                flashSaleStart: formatDateTimeForInput(variant.flashSaleStart),
                flashSaleEnd: formatDateTimeForInput(variant.flashSaleEnd),
              }))
            : [initialVariantState],
      });
    } else {
      // Reset form nếu không có product (trường hợp này ít xảy ra với "Edit" drawer)
      setFormData({
        name: "",
        description: "",
        categoryId: "",
        brandId: "",
        images: [initialImageState],
        variants: [initialVariantState],
      });
    }
  }, [product]);

  // Lấy danh sách categories và brands khi drawer mở
  useEffect(() => {
    const fetchDropdownData = async () => {
      // Chỉ fetch nếu chưa có dữ liệu hoặc muốn refresh khi mở
      if (isOpen && (categories.length === 0 || brands.length === 0)) {
        setLoading(true); // Có thể thêm loading state riêng cho việc fetch này
        try {
          const [categoriesResponse, brandsResponse] = await Promise.all([
            axios.get(`${API_BASE_URL}/api/categories`),
            axios.get(`${API_BASE_URL}/api/brands`),
          ]);
          setCategories(categoriesResponse.data.$values || categoriesResponse.data || []);
          setBrands(brandsResponse.data.$values || brandsResponse.data || []);
        } catch (err) {
          console.error("Lỗi khi lấy dữ liệu categories/brands:", err);
          setError("Không thể tải dữ liệu danh mục hoặc thương hiệu.");
          // Giữ lại dữ liệu cũ nếu có, hoặc set rỗng nếu chưa có
          if (categories.length === 0) setCategories([]);
          if (brands.length === 0) setBrands([]);
        } finally {
          setLoading(false); // Kết thúc loading state riêng (nếu có)
        }
      }
    };
    fetchDropdownData();
  }, [isOpen]); // Phụ thuộc vào isOpen để fetch khi mở

  // Xử lý thay đổi giá trị trong form
  const handleChange = useCallback((e, index, type) => {
    const { name, value, checked, type: inputType } = e.target;

    setFormData((prev) => {
      const newState = { ...prev };
      if (type === "variant" && index !== undefined) {
        const newVariants = [...newState.variants];
        newVariants[index] = {
          ...newVariants[index],
          [name]: inputType === "checkbox" ? checked : value,
        };
        newState.variants = newVariants;
      } else if (type === "image" && index !== undefined) {
        let newImages = newState.images.map((img, i) => {
          if (i === index) {
            return {
              ...img,
              [name]: inputType === "checkbox" ? checked : value,
            };
          }
          return img;
        });

        // Nếu chọn ảnh này làm primary, bỏ primary của các ảnh khác
        if (name === "isPrimary" && checked) {
          newImages = newImages.map((img, i) => ({
            ...img,
            isPrimary: i === index,
          }));
        }
        newState.images = newImages;
      } else {
        newState[name] = value;
      }
      return newState;
    });
  }, []);

  const addVariant = useCallback(() => {
    setFormData((prev) => ({
      ...prev,
      variants: [...prev.variants, { ...initialVariantState }],
    }));
  }, []);

  const removeVariant = useCallback((index) => {
    setFormData((prev) => ({
      ...prev,
      variants: prev.variants.filter((_, i) => i !== index),
    }));
  }, []);

  const addImage = useCallback(() => {
    setFormData((prev) => ({
      ...prev,
      images: [...prev.images, { ...initialImageState }],
    }));
  }, []);

  const removeImage = useCallback((index) => {
    setFormData((prev) => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index),
    }));
  }, []);

  // Gửi dữ liệu cập nhật lên API
  const handleSubmit = useCallback(async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccessMessage(null);

    // Validate: Nếu có ảnh, ít nhất một ảnh phải là primary
    const hasImages = formData.images.some(img => img.imageUrl && img.imageUrl.trim() !== "");
    if (hasImages && !formData.images.some(img => img.isPrimary)) {
      setError("Vui lòng chọn một ảnh làm ảnh chính (primary).");
      setLoading(false);
      return;
    }

    try {
      const updatedData = {
        name: formData.name,
        description: formData.description,
        categoryId: parseInt(formData.categoryId),
        brandId: parseInt(formData.brandId),
        images: formData.images
          .filter(img => img.imageUrl && img.imageUrl.trim() !== "") // Chỉ gửi những ảnh có URL
          .map(img => ({
            imageUrl: img.imageUrl,
            isPrimary: img.isPrimary || false,
          })),
        variants: formData.variants.map(variant => ({
          ...variant, // Giữ lại các trường không thay đổi như color, storage
          price: parseFloat(variant.price) || 0,
          discountPrice: variant.discountPrice ? parseFloat(variant.discountPrice) : null,
          stockQuantity: parseInt(variant.stockQuantity) || 0,
          // API có thể mong muốn null nếu không có ngày
          flashSaleStart: variant.flashSaleStart || null,
          flashSaleEnd: variant.flashSaleEnd || null,
        })),
      };

      console.log("Submitting data:", updatedData);

      const response = await axios.put(
        `${API_BASE_URL}/api/products/${product.id}`,
        updatedData,
        { headers: { "Content-Type": "application/json" } }
      );

      if (response.status === 204 || response.status === 200) {
        // Dữ liệu trả về từ API có thể là sản phẩm đã cập nhật đầy đủ
        const updatedProductData = response.data && Object.keys(response.data).length > 0 ? response.data : { ...product, ...updatedData };
        onUpdateProduct(updatedProductData);
        setSuccessMessage("Sản phẩm đã được cập nhật thành công!");
        // Tự động đóng Drawer sau một khoảng thời gian hoặc để người dùng tự đóng
        // setTimeout(() => {
        //   handleCloseDrawer();
        // }, 2000);
      } else {
        setError(`Cập nhật thất bại với status: ${response.status}`);
      }
    } catch (err) {
      const errorMessage =
        err.response?.data?.message ||
        err.response?.data?.title || // For ASP.NET Core ModelState errors
        (err.response?.data?.errors ? Object.values(err.response.data.errors).flat().join('; ') : null) || // For detailed validation errors
        err.message ||
        "Đã xảy ra lỗi không xác định.";
      setError(`Lỗi khi cập nhật sản phẩm: ${errorMessage}`);
      console.error("Lỗi khi cập nhật sản phẩm:", err.response || err);
    } finally {
      setLoading(false);
    }
  }, [formData, product, onUpdateProduct]); // Không cần onClose ở đây nữa, sẽ xử lý riêng

  const handleCloseDrawer = useCallback(() => {
    setError(null); // Reset lỗi khi đóng
    setSuccessMessage(null); // Reset thông báo thành công
    onClose(); // Gọi hàm onClose từ props
  }, [onClose]);

  const handleCloseSnackbar = useCallback((event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    if (successMessage) setSuccessMessage(null);
    if (error) setError(null); // Có thể muốn giữ lỗi hiển thị trên form
  }, [successMessage, error]);

  // Memoized MenuItems
  const categoryMenuItems = useMemo(() => (
    categories.length > 0 ? (
      categories.map(cat => (
        <MenuItem key={cat.id} value={cat.id}>
          {cat.name}
        </MenuItem>
      ))
    ) : (
      <MenuItem disabled>
        {isOpen && categories.length === 0 && !error ? "Đang tải danh mục..." : "Không có danh mục"}
      </MenuItem>
    )
  ), [categories, isOpen, error]);

  const brandMenuItems = useMemo(() => (
    brands.length > 0 ? (
      brands.map(brand => (
        <MenuItem key={brand.id} value={brand.id}>
          {brand.name}
        </MenuItem>
      ))
    ) : (
      <MenuItem disabled>
        {isOpen && brands.length === 0 && !error ? "Đang tải thương hiệu..." : "Không có thương hiệu"}
      </MenuItem>
    )
  ), [brands, isOpen, error]);


  return (
    <Drawer anchor="right" open={isOpen} onClose={handleCloseDrawer}>
      <Box sx={{ width: { xs: "100vw", sm: 500, md: 600 }, p: {xs: 2, md: 3} }}>
        <Stack direction="row" justifyContent="space-between" alignItems="center" mb={2}>
          <Typography variant="h5" component="h1">
            Chỉnh sửa thông tin sản phẩm
          </Typography>
          <IconButton onClick={handleCloseDrawer} aria-label="Đóng">
            <CloseIcon />
          </IconButton>
        </Stack>

        {/* Thông báo lỗi ưu tiên hiển thị trên form */}
        {error && !successMessage && ( // Chỉ hiển thị Alert lỗi nếu không có thông báo thành công
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
            {error}
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <Stack spacing={2.5}> {/* Tăng khoảng cách một chút */}
            <TextField
              label="Tên sản phẩm"
              name="name"
              value={formData.name}
              onChange={handleChange}
              fullWidth
              required
              disabled={loading}
              variant="outlined"
            />
            <TextField
              label="Mô tả"
              name="description"
              value={formData.description}
              onChange={handleChange}
              fullWidth
              multiline
              rows={3}
              required
              disabled={loading}
              variant="outlined"
            />
            <TextField
              label="Danh mục"
              name="categoryId"
              select
              value={formData.categoryId}
              onChange={handleChange}
              fullWidth
              required
              disabled={loading || categories.length === 0}
              variant="outlined"
            >
              {categoryMenuItems}
            </TextField>
            <TextField
              label="Thương hiệu"
              name="brandId"
              select
              value={formData.brandId}
              onChange={handleChange}
              fullWidth
              required
              disabled={loading || brands.length === 0}
              variant="outlined"
            >
              {brandMenuItems}
            </TextField>

            <Typography variant="h6" component="h2" mt={1} mb={0}> {/* Giảm margin top */}
              Hình ảnh
            </Typography>
            {formData.images.map((image, index) => (
              <Stack key={`image-${index}`} direction="row" spacing={1} alignItems="center" sx={{ mb: 1 }}>
                <TextField
                  label={`URL Hình ảnh ${index + 1}`}
                  name="imageUrl"
                  value={image.imageUrl}
                  onChange={(e) => handleChange(e, index, "image")}
                  fullWidth
                  // required={formData.images.length === 1 || !!image.imageUrl} // Ảnh đầu tiên hoặc có URL thì bắt buộc
                  disabled={loading}
                  variant="outlined"
                  size="small"
                />
                <FormControlLabel
                  control={
                    <Checkbox
                      name="isPrimary"
                      checked={!!image.isPrimary}
                      onChange={(e) => handleChange(e, index, "image")}
                      disabled={loading}
                      size="small"
                    />
                  }
                  label="Ảnh chính"
                  sx={{ whiteSpace: 'nowrap', mr: 'auto' }} // Đẩy nút xóa sang phải
                />
                {formData.images.length > 0 && ( // Luôn cho phép xóa nếu có ảnh, có thể để lại 1 ảnh trống
                  <IconButton
                    onClick={() => removeImage(index)}
                    color="error"
                    disabled={loading}
                    aria-label={`Xóa hình ảnh ${index + 1}`}
                    size="small"
                  >
                    <DeleteIcon />
                  </IconButton>
                )}
              </Stack>
            ))}
            <Button
              variant="outlined"
              startIcon={<AddIcon />}
              onClick={addImage}
              disabled={loading}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            >
              Thêm ảnh
            </Button>

            <Typography variant="h6" component="h2" mt={1} mb={0}>
              Biến thể sản phẩm
            </Typography>
            {formData.variants.map((variant, index) => (
              <Box key={`variant-${index}`} sx={{ border: "1px solid #e0e0e0", p: 2, mb: 1.5, borderRadius: 1 }}>
                <Stack direction="row" justifyContent="space-between" alignItems="center" mb={1.5}>
                    <Typography variant="subtitle1" component="h3">
                        Biến thể {index + 1}
                    </Typography>
                    {formData.variants.length > 1 && (
                        <IconButton
                            onClick={() => removeVariant(index)}
                            color="error"
                            disabled={loading}
                            aria-label={`Xóa biến thể ${index + 1}`}
                            size="small"
                        >
                        <DeleteIcon />
                        </IconButton>
                    )}
                </Stack>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Màu sắc"
                      name="color"
                      value={variant.color}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      required
                      disabled={loading}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Dung lượng lưu trữ"
                      name="storage"
                      value={variant.storage}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      required
                      disabled={loading}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Giá"
                      name="price"
                      type="number"
                      value={variant.price}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      required
                      disabled={loading}
                      inputProps={{ min: 0, step: "any" }}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Giá giảm"
                      name="discountPrice"
                      type="number"
                      value={variant.discountPrice}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      disabled={loading}
                      inputProps={{ min: 0, step: "any" }}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Số lượng tồn kho"
                      name="stockQuantity"
                      type="number"
                      value={variant.stockQuantity}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      required
                      disabled={loading}
                      inputProps={{ min: 0 }}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Bắt đầu Flash Sale"
                      name="flashSaleStart"
                      type="datetime-local"
                      value={variant.flashSaleStart}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      disabled={loading}
                      InputLabelProps={{ shrink: true }}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Kết thúc Flash Sale"
                      name="flashSaleEnd"
                      type="datetime-local"
                      value={variant.flashSaleEnd}
                      onChange={(e) => handleChange(e, index, "variant")}
                      fullWidth
                      disabled={loading}
                      InputLabelProps={{ shrink: true }}
                      inputProps={{ min: variant.flashSaleStart || undefined }}
                      variant="outlined"
                      size="small"
                    />
                  </Grid>
                </Grid>
              </Box>
            ))}
            <Button
              variant="outlined"
              startIcon={<AddIcon />}
              onClick={addVariant}
              disabled={loading}
              size="small"
              sx={{ alignSelf: 'flex-start' }}
            >
              Thêm biến thể
            </Button>

            <Stack direction={{xs: "column", sm: "row"}} spacing={2} mt={3}>
              <Button
                variant="outlined"
                onClick={handleCloseDrawer}
                disabled={loading}
                fullWidth
              >
                Hủy
              </Button>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                disabled={loading}
                fullWidth
                startIcon={loading ? <CircularProgress size={20} color="inherit" /> : null}
              >
                {loading ? "Đang lưu..." : "Lưu thay đổi"}
              </Button>
            </Stack>
          </Stack>
        </form>
      </Box>
      <Snackbar
        open={!!successMessage}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity="success" sx={{ width: '100%' }} variant="filled">
          {successMessage}
        </Alert>
      </Snackbar>
      {/* Snackbar cho lỗi có thể không cần thiết nếu lỗi đã hiển thị rõ trên form */}
      {/* <Snackbar
        open={!!error && !successMessage}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity="error" sx={{ width: '100%' }} variant="filled">
          {error}
        </Alert>
      </Snackbar> */}
    </Drawer>
  );
};

export default React.memo(EditProductDrawer);
```

### ClientApp\src\components\Admin\products\ProductsTable.jsx
```jsx
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css'; // Import CSS cho react-toastify
import { Edit, Search, Trash2, Settings, Filter, X, CirclePlus, ChartColumnStacked, Loader,Notebook    } from "lucide-react";
import { useState, useEffect, useMemo, useCallback } from "react";
import ProductDrawer from "./AddProductDrawer";
import EditProductDrawer from "./EditProductDrawer";
import AddSpecificationDrawer from "./AddSpecificationDrawer";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import Button from "@mui/material/Button"; // MUI Button
import MuiPagination from "@mui/material/Pagination"; // Đổi tên để tránh trùng lặp nếu có
import { Select, MenuItem, TextField as MuiTextField, InputLabel, FormControl,Grid, Box, Typography } from "@mui/material"; // Thêm các component MUI cần thiết

import CategoryBrandDrawer from "./CategoryBrandDrawer";
import BrandDrawer from "./BrandDrawer";
import VoucherDrawer from "./VoucherDrawer";
import useDebounce from "utils/useDebounce"; // Import hook debounce

const ProductsTable = () => {
    const [masterProducts, setMasterProducts] = useState([]); // Đổi tên từ products để rõ ràng hơn
    const [brands, setBrands] = useState([]);
    const [categories, setCategories] = useState([]);
    const [isLoading, setIsLoading] = useState(false); // Dùng cho các thao tác loading cụ thể (vd: delete)
    const [isFetchingInitialData, setIsFetchingInitialData] = useState(true); // Dùng cho loading ban đầu

    const [searchInput, setSearchInput] = useState(""); // Input tìm kiếm tức thời
    const debouncedSearchTerm = useDebounce(searchInput, 500); // Debounce giá trị tìm kiếm

    const [filteredProducts, setFilteredProducts] = useState([]); // Danh sách sản phẩm sau khi tìm kiếm hoặc lọc
    
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);
    const [isEditDrawerOpen, setIsEditDrawerOpen] = useState(false);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
    const [productToDelete, setProductToDelete] = useState(null);
    const [isCategoryBrandDrawerOpen, setIsCategoryBrandDrawerOpen] = useState(false);
    const [isBrandDrawerOpen, setIsBrandDrawerOpen] = useState(false);
    const [isVoucherDrawerOpen, setIsVoucherDrawerOpen] = useState(false);
    const [isSpecDrawerOpen, setIsSpecDrawerOpen] = useState(false);
    const [selectedProductForSpec, setSelectedProductForSpec] = useState(null);

    const [page, setPage] = useState(1);
    const productsPerPage = 11;

    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const [filters, setFilters] = useState({
        brandId: '',
        categoryId: '',
        minPrice: '',
        maxPrice: ''
    });

    // Fetch dữ liệu ban đầu
    useEffect(() => {
        const fetchData = async () => {
            setIsFetchingInitialData(true);
            try {
                const [productsRes, brandsRes, categoriesRes] = await Promise.all([
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
                    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`)
                ]);

                if (!productsRes.ok || !brandsRes.ok || !categoriesRes.ok) {
                    throw new Error('Network response was not ok for one or more resources.');
                }

                const productsData = await productsRes.json();
                const brandsData = await brandsRes.json();
                const categoriesData = await categoriesRes.json();

                setMasterProducts(productsData);
                setFilteredProducts(productsData); // Ban đầu hiển thị tất cả sản phẩm
                setBrands(brandsData.$values || brandsData || []);
                setCategories(categoriesData.$values || categoriesData || []);
            } catch (error) {
                console.error("Fetch error:", error);
                toast.error("Lỗi khi tải dữ liệu ban đầu: " + error.message);
            } finally {
                setIsFetchingInitialData(false);
            }
        };
        fetchData();
    }, []);

    // Memoize maps để tra cứu nhanh
    const brandMap = useMemo(() => {
        const map = new Map();
        brands.forEach(brand => map.set(brand.id, brand.name));
        return map;
    }, [brands]);

    const categoryMap = useMemo(() => {
        const map = new Map();
        categories.forEach(category => map.set(category.id, category.name));
        return map;
    }, [categories]);

    const getBrandName = useCallback((brandId) => brandMap.get(brandId) || "Không rõ", [brandMap]);
    const getCategoryName = useCallback((categoryId) => categoryMap.get(categoryId) || "Không rõ", [categoryMap]);

    // Tìm kiếm sản phẩm (API call) - sử dụng debouncedSearchTerm
    useEffect(() => {
        const searchProducts = async () => {
            if (debouncedSearchTerm.trim() === "") {
                // Nếu không có search term, và không có filter nào đang active (hoặc logic reset filter đã chạy)
                // thì nên hiển thị lại danh sách dựa trên filter hiện tại hoặc danh sách gốc
                // Tạm thời, nếu search trống, apply lại filter trên master list.
                // Hoặc, nếu muốn search ghi đè filter, thì phải có logic kết hợp.
                // Giữ logic hiện tại: search trống -> về danh sách đã filter client-side (nếu có) hoặc master list.
                // Để đơn giản, nếu search trống, và filter cũng trống, thì về master list.
                // Nếu search trống, nhưng filter có, thì applyFilter sẽ chạy (nếu có nút Apply)
                // Trong logic này, search trống thì quay về danh sách gốc (masterProducts) và filter sẽ được apply sau nếu người dùng nhấn nút.
                // Hoặc, filteredProducts sẽ tự cập nhật nếu nó là useMemo.
                // Vì filteredProducts là state, khi search trống, ta nên đặt lại filteredProducts dựa trên masterProducts và filters hiện tại.
                // Cách đơn giản nhất là khi search trống, reset filteredProducts về masterProducts, và user phải tự apply filter lại.
                 if (filters.brandId || filters.categoryId || filters.minPrice || filters.maxPrice) {
                    // Nếu có filter đang active, giữ nguyên filteredProducts (user có thể đang muốn search trong list đã filter)
                    // HOẶC: chạy lại applyFilters trên masterProducts nếu muốn search trống là reset về filter trên toàn bộ.
                    // Hiện tại, handleSearch là API call, nên khi search trống, nó sẽ setFilteredProducts = masterProducts.
                    // Điều này có nghĩa là search sẽ xóa hiệu lực của client filter.
                    // => Cần điều chỉnh:
                    // 1. Search API -> results. Set filteredProducts = results.
                    // 2. Client filters -> operate on masterProducts. Set filteredProducts = filter_results.
                    // Đây là 2 luồng riêng biệt cập nhật filteredProducts.
                    // => Nếu search trống, set filteredProducts về masterProducts (để filter có thể áp dụng lại trên masterProducts).
                    setFilteredProducts(masterProducts);
                } else {
                    setFilteredProducts(masterProducts);
                }
                setPage(1);
                return;
            }

            setIsLoading(true); // Loading cho tìm kiếm
            try {
                const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/search?keyword=${encodeURIComponent(debouncedSearchTerm)}`);
                if (!response.ok) {
                    const errorData = await response.text(); // Hoặc .json() nếu API trả về JSON error
                    throw new Error(errorData || "Không tìm thấy sản phẩm nào khớp.");
                }
                const data = await response.json();
                setFilteredProducts(data);
                setPage(1);
            } catch (error) {
                console.error("Lỗi khi tìm kiếm sản phẩm:", error);
                toast.error(error.message || "Lỗi tìm kiếm.");
                setFilteredProducts([]); // Hiển thị danh sách trống nếu lỗi
            } finally {
                setIsLoading(false);
            }
        };

        // Chỉ chạy search nếu debouncedSearchTerm không phải là giá trị ban đầu (tránh chạy khi mount)
        // hoặc khi nó thực sự thay đổi.
        if (debouncedSearchTerm !== undefined) { // Kiểm tra kỹ hơn, có thể không cần nếu initial là ""
             searchProducts();
        }

    }, [debouncedSearchTerm, masterProducts]); // Thêm masterProducts để khi search trống, nó biết lấy từ đâu

    const handleSearchInputChange = useCallback((e) => {
        setSearchInput(e.target.value);
    }, []);


    // Hàm áp dụng bộ lọc (client-side, hoạt động trên masterProducts)
    const applyClientFilters = useCallback(() => {
        setIsLoading(true); // Báo hiệu loading khi áp dụng filter
        let filtered = [...masterProducts]; // Luôn lọc từ danh sách gốc
        
        if (filters.brandId) {
            filtered = filtered.filter(product => product.brandId == filters.brandId);
        }
        if (filters.categoryId) {
            filtered = filtered.filter(product => product.categoryId == filters.categoryId);
        }
        if (filters.minPrice) {
            filtered = filtered.filter(product => product.variants?.[0]?.price >= Number(filters.minPrice));
        }
        if (filters.maxPrice) {
            filtered = filtered.filter(product => product.variants?.[0]?.price <= Number(filters.maxPrice));
        }
        
        // Nếu có search term đang active, có thể muốn kết hợp kết quả search và filter.
        // Tuy nhiên, theo logic hiện tại, search và filter đang ghi đè `filteredProducts`.
        // Để đơn giản và giữ logic cũ: Apply filter luôn dựa trên `masterProducts`.
        // Nếu muốn filter trên kết quả search, `sourceForFilter` phải là kết quả search.
        // => Giả định: Khi apply filter client, nó sẽ ghi đè kết quả search. Nếu muốn search lại, user phải search.
        setSearchInput(""); // Xóa search term khi apply filter client-side để tránh nhầm lẫn
        setFilteredProducts(filtered);
        setPage(1);
        setIsFilterOpen(false); // Đóng panel filter
        setIsLoading(false);
        toast.success("Đã áp dụng bộ lọc!");
    }, [masterProducts, filters]);

    // Hàm reset bộ lọc
    const resetClientFilters = useCallback(() => {
        setFilters({ brandId: '', categoryId: '', minPrice: '', maxPrice: '' });
        // Nếu có search term đang active, reset filter sẽ quay về kết quả search đó
        // Hoặc, reset filter sẽ xóa cả search term. Chọn cách thứ 2 cho đơn giản.
        if (searchInput) {
            // Nếu đang có search, việc reset filter nên trả về masterProducts và xóa search
            setSearchInput(""); // Điều này sẽ trigger useEffect của debouncedSearchTerm và set lại filteredProducts
        } else {
            setFilteredProducts(masterProducts); // Nếu không search, về master list
        }
        setPage(1);
        toast.info("Đã xóa bộ lọc.");
    }, [masterProducts, searchInput]);

    const handleFilterChange = useCallback((e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    }, []);


    // CRUD operations
    const handleAddProduct = useCallback((newProduct) => {
        const newMasterProducts = [newProduct, ...masterProducts];
        setMasterProducts(newMasterProducts);
        // Sau khi thêm, nên reset các filter và search để user thấy sản phẩm mới
        // Hoặc chỉ cập nhật filteredProducts nếu sản phẩm mới khớp filter hiện tại
        // Đơn giản nhất: reset về master list đã cập nhật, user tự filter/search lại
        setSearchInput("");
        setFilters({ brandId: '', categoryId: '', minPrice: '', maxPrice: '' });
        setFilteredProducts(newMasterProducts); 
        setPage(1);
    }, [masterProducts]);

    const handleUpdateProduct = useCallback((updatedProduct) => {
        const updatedMasterProducts = masterProducts.map((product) =>
            product.id === updatedProduct.id ? { ...product, ...updatedProduct } : product
        );
        setMasterProducts(updatedMasterProducts);

        // Cập nhật filteredProducts nếu item đó đang hiển thị
        setFilteredProducts(prevFiltered => 
            prevFiltered.map(p => p.id === updatedProduct.id ? {...p, ...updatedProduct} : p)
        );
        // Không reset page ở đây để user thấy item vừa sửa
    }, [masterProducts]);

    const confirmDeleteProduct = useCallback(async () => {
        // ... (giữ nguyên logic confirmDeleteProduct, nhưng cập nhật masterProducts)
        if (!productToDelete) return;
        setIsLoading(true);
        try {
            const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/${productToDelete.id}`, {
                method: "DELETE",
            });
            if (response.ok) {
                const updatedMaster = masterProducts.filter((p) => p.id !== productToDelete.id);
                setMasterProducts(updatedMaster);
                // Nếu sản phẩm bị xóa nằm trong filteredProducts, cũng xóa nó đi
                setFilteredProducts(prevFiltered => prevFiltered.filter(p => p.id !== productToDelete.id));
                toast.success("Sản phẩm đã được xóa thành công!");
            } else {
                // ... xử lý lỗi
            }
        } catch (error) { /* ... */ } finally {
            setIsLoading(false);
            setIsDeleteDialogOpen(false);
            setProductToDelete(null);
        }
    }, [productToDelete, masterProducts]);

    const handlePageChange = useCallback((event, value) => setPage(value), []);
    const handleEditProduct = useCallback((product) => { setSelectedProduct(product); setIsEditDrawerOpen(true); }, []);
    const handleDeleteProduct = useCallback((product) => { setProductToDelete(product); setIsDeleteDialogOpen(true); }, []);
    const handleAddSpecification = useCallback((product) => { setSelectedProductForSpec(product); setIsSpecDrawerOpen(true); }, []);


    // Pagination logic
    const currentProducts = useMemo(() => {
        const indexOfLastProduct = page * productsPerPage;
        const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
        return filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);
    }, [filteredProducts, page, productsPerPage]);

    const totalPages = useMemo(() => Math.ceil(filteredProducts.length / productsPerPage), [filteredProducts.length, productsPerPage]);

    // Handlers cho các Drawer
    const toggleDrawer = useCallback((setter, value) => setter(value), []);


    if (isFetchingInitialData) {
        return (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'calc(100vh - 200px)', color: 'white', flexDirection: 'column' }}>
                <Loader  color="inherit" size={50} />
                <Typography sx={{ mt: 2, fontSize: '1.1rem' }}>Đang tải dữ liệu sản phẩm...</Typography>
            </Box>
        );
    }


    return (
        <motion.div
            className="bg-gray-800 bg-opacity-70 backdrop-blur-xl shadow-2xl rounded-xl p-4 md:p-6 border border-gray-700 min-h-[calc(100vh-120px)] flex flex-col"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1, duration: 0.4 }}
        >
            {/* Header và các nút actions */}
            <div className="flex flex-wrap justify-between items-center mb-6 gap-3">
                <h2 className="text-2xl font-bold text-gray-100 tracking-tight">
                    Danh sách sản phẩm
                </h2>
                <div className="flex flex-wrap gap-2">
                    <Button variant="contained" startIcon={<CirclePlus size={18}/>} onClick={() => toggleDrawer(setIsDrawerOpen, true)} sx={{bgcolor: '#2563EB', '&:hover': { bgcolor: '#1D4ED8' }}}>Thêm Sản Phẩm</Button>
                    <Button variant="outlined" startIcon={<ChartColumnStacked  size={18}/>} onClick={() => toggleDrawer(setIsCategoryBrandDrawerOpen, true)} sx={{color: '#A5B4FC', borderColor: '#4F46E5'}}>Danh Mục</Button>
                    <Button variant="outlined" startIcon={<Notebook  size={18}/>} onClick={() => toggleDrawer(setIsBrandDrawerOpen, true)} sx={{color: '#A5B4FC', borderColor: '#4F46E5'}}>Thương hiệu</Button>
                    <Button variant="outlined" startIcon={<Settings size={18}/>} onClick={() => toggleDrawer(setIsVoucherDrawerOpen, true)} sx={{color: '#A5B4FC', borderColor: '#4F46E5'}}>Voucher</Button>
                </div>
            </div>

            {/* Search và nút Filter */}
            <div className="flex flex-wrap justify-between items-center mb-4 gap-3">
                <div className="relative flex-grow max-w-xs">
                    <MuiTextField
                        label="Tìm kiếm sản phẩm"
                        variant="outlined"
                        size="small"
                        fullWidth
                        value={searchInput}
                        onChange={handleSearchInputChange}
                        InputProps={{
                            startAdornment: <Search className="text-gray-400 mr-2" size={18} />,
                            sx: { borderRadius: '8px', bgcolor: 'rgba(30,41,59,0.7)', input: { color: 'white' }, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4B5563' } }
                        }}
                        InputLabelProps={{sx: {color: '#9CA3AF'}}}
                    />
                </div>
                <Button 
                    variant="outlined"
                    startIcon={isFilterOpen ? <X size={18} /> : <Filter size={18} />}
                    onClick={() => setIsFilterOpen(!isFilterOpen)}
                    sx={{color: '#A5B4FC', borderColor: '#4F46E5'}}
                >
                    {isFilterOpen ? 'Đóng lọc' : 'Lọc sản phẩm'}
                </Button>
            </div>
            
            {/* Panel bộ lọc (nếu isFilterOpen là true) */}
            {isFilterOpen && (
                <motion.div 
                    initial={{ opacity: 0, height: 0, marginBottom:0 }}
                    animate={{ opacity: 1, height: 'auto', marginBottom: '1rem' }}
                    exit={{ opacity: 0, height: 0, marginBottom:0 }}
                    className="bg-gray-700/50 p-4 rounded-lg border border-gray-600"
                >
                    <Grid container spacing={2} alignItems="center">
                        <Grid item xs={12} sm={6} md={3}>
                            <FormControl fullWidth size="small">
                                <InputLabel sx={{color: '#9CA3AF'}}>Thương hiệu</InputLabel>
                                <Select name="brandId" value={filters.brandId} label="Thương hiệu" onChange={handleFilterChange} sx={{color: filters.brandId ? 'white' : '#9CA3AF', bgcolor: 'rgba(30,41,59,0.7)', '.MuiOutlinedInput-notchedOutline': {borderColor: '#4B5563'}}}>
                                    <MenuItem value=""><em>Tất cả thương hiệu</em></MenuItem>
                                    {brands.map(brand => (<MenuItem key={brand.id} value={brand.id}>{brand.name}</MenuItem>))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={3}>
                             <FormControl fullWidth size="small">
                                <InputLabel sx={{color: '#9CA3AF'}}>Danh mục</InputLabel>
                                <Select name="categoryId" value={filters.categoryId} label="Danh mục" onChange={handleFilterChange} sx={{color: filters.categoryId ? 'white' : '#9CA3AF', bgcolor: 'rgba(30,41,59,0.7)', '.MuiOutlinedInput-notchedOutline': {borderColor: '#4B5563'}}}>
                                    <MenuItem value=""><em>Tất cả danh mục</em></MenuItem>
                                    {categories.map(cat => (<MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>))}
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={2.5}>
                            <MuiTextField type="number" name="minPrice" label="Giá từ (VND)" value={filters.minPrice} onChange={handleFilterChange} fullWidth size="small" InputLabelProps={{sx:{color:"#9CA3AF"}}} InputProps={{sx:{color:"white", bgcolor: 'rgba(30,41,59,0.7)', '.MuiOutlinedInput-notchedOutline': {borderColor: '#4B5563'}}}} />
                        </Grid>
                        <Grid item xs={12} sm={6} md={2.5}>
                            <MuiTextField type="number" name="maxPrice" label="Đến (VND)" value={filters.maxPrice} onChange={handleFilterChange} fullWidth size="small" InputLabelProps={{sx:{color:"#9CA3AF"}}} InputProps={{sx:{color:"white", bgcolor: 'rgba(30,41,59,0.7)', '.MuiOutlinedInput-notchedOutline': {borderColor: '#4B5563'}}}} />
                        </Grid>
                        <Grid item xs={12} md={1} container spacing={1} justifyContent="flex-end">
                           <Button onClick={resetClientFilters} size="small" sx={{color: '#CBD5E1', minWidth: 'auto', padding: '6px'}}>Xóa</Button>
                           <Button onClick={applyClientFilters} variant="contained" size="small" sx={{bgcolor: '#4F46E5', minWidth: 'auto', padding: '6px'}}>Lọc</Button>
                        </Grid>
                    </Grid>
                </motion.div>
            )}
            
            {/* Bảng hiển thị sản phẩm */}
            <div className="overflow-x-auto custom-scrollbar flex-grow rounded-lg border border-gray-700/50">
                <table className="min-w-full divide-y divide-gray-600">
                    <thead className="bg-gray-700 bg-opacity-40 sticky top-0 z-10 backdrop-blur-sm">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">Sản phẩm</th>
                            <th className="px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">Thương hiệu</th>
                            <th className="px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">Danh mục</th>
                            <th className="px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">Giá gốc</th>
                            <th className="px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">Giá bán</th>
                            <th className="px-6 py-3 text-center text-xs font-semibold text-gray-300 uppercase tracking-wider">Hành động</th>
                        </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-600">
                        {isLoading && currentProducts.length === 0 && ( // Hiển thị loading khi đang tìm kiếm và chưa có kết quả nào
                             <tr><td colSpan={6} className="text-center py-10"><Loader  size={30} sx={{color: 'white'}} /></td></tr>
                        )}
                        {!isLoading && currentProducts.length === 0 && !isFetchingInitialData && (
                             <tr><td colSpan={6} className="text-center py-10 text-gray-400 italic">Không tìm thấy sản phẩm nào.</td></tr>
                        )}
                        {currentProducts.map((product) => (
                            <motion.tr
                                key={product.id}
                                layout
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                transition={{ duration: 0.3 }}
                                className="hover:bg-gray-700/60"
                            >
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-100">
                                    <div className="flex items-center gap-3">
                                        <img
                                            src={product.images?.[0]?.imageUrl?.startsWith("http") ? product.images[0].imageUrl : `${process.env.REACT_APP_API_BASE_URL}/${product.images?.[0]?.imageUrl}`}
                                            alt={product.name || "product image"}
                                            className="w-12 h-12 rounded-md object-cover border border-gray-600"
                                            onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/100?text=Error"; }}
                                        />
                                        <span className="truncate max-w-xs" title={product.name}>{product.name || "Chưa có tên"}</span>
                                    </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{getBrandName(product.brandId)}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">{getCategoryName(product.categoryId)}</td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                                    {product.variants?.[0]?.price ? `${product.variants[0].price.toLocaleString()} VND` : "N/A"}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-indigo-400 font-semibold">
                                    {product.variants?.[0]?.discountPrice ? `${product.variants[0].discountPrice.toLocaleString()} VND` : (product.variants?.[0]?.price ? `${product.variants[0].price.toLocaleString()} VND` : "N/A")}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-300 text-center">
                                    <button onClick={() => handleEditProduct(product)} className="text-sky-400 hover:text-sky-300 p-1.5 rounded-full hover:bg-gray-600/50" title="Sửa sản phẩm"><Edit size={18} /></button>
                                    <button onClick={() => handleAddSpecification(product)} className="text-teal-400 hover:text-teal-300 p-1.5 ml-1.5 rounded-full hover:bg-gray-600/50" title="Quản lý thông số"><Settings size={18} /></button>
                                    <button onClick={() => handleDeleteProduct(product)} className="text-rose-400 hover:text-rose-300 p-1.5 ml-1.5 rounded-full hover:bg-gray-600/50" title="Xóa sản phẩm"><Trash2 size={18} /></button>
                                </td>
                            </motion.tr>
                        ))}
                    </tbody>
                </table>
            </div>

            {/* Phân trang */}
            {totalPages > 0 && (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 2, mt: 'auto', borderTop:'1px solid rgba(75, 85, 99, 0.5)', paddingTop: '1rem' }}>
                    <MuiPagination
                        count={totalPages}
                        page={page}
                        onChange={handlePageChange}
                        color="primary"
                        size="small"
                        sx={{ '& .MuiPaginationItem-root': { color: '#9CA3AF', fontWeight:'medium' }, '& .MuiPaginationItem-root.Mui-selected': { backgroundColor: 'rgba(79, 70, 229, 0.9)', color: 'white', '&:hover': { backgroundColor: 'rgba(79, 70, 229, 1)'}}, '& .MuiPaginationItem-ellipsis': { color: '#9CA3AF' }, '& .MuiPaginationItem-icon': {color: '#A5B4FC'} }}
                    />
                </Box>
            )}

            {/* Các Drawers và Dialogs */}
            <ProductDrawer isOpen={isDrawerOpen} onClose={() => toggleDrawer(setIsDrawerOpen, false)} onAddProduct={handleAddProduct} />
            <EditProductDrawer isOpen={isEditDrawerOpen} onClose={() => toggleDrawer(setIsEditDrawerOpen, false)} product={selectedProduct} onUpdateProduct={handleUpdateProduct} />
            <AddSpecificationDrawer open={isSpecDrawerOpen} onClose={() => toggleDrawer(setIsSpecDrawerOpen, false)} product={selectedProductForSpec} />
            <CategoryBrandDrawer open={isCategoryBrandDrawerOpen} onClose={() => toggleDrawer(setIsCategoryBrandDrawerOpen, false)} />
            <BrandDrawer open={isBrandDrawerOpen} onClose={() => toggleDrawer(setIsBrandDrawerOpen, false)} />
            <VoucherDrawer open={isVoucherDrawerOpen} onClose={() => toggleDrawer(setIsVoucherDrawerOpen, false)} />

            <Dialog open={isDeleteDialogOpen} onClose={() => toggleDrawer(setIsDeleteDialogOpen, false)}>
                <DialogTitle sx={{bgcolor: 'rgb(31,41,55)', color: 'white'}}>{"Xác nhận xóa sản phẩm"}</DialogTitle>
                <DialogContent sx={{bgcolor: 'rgb(31,41,55)', color: 'rgb(209,213,219)'}}>
                    <DialogContentText sx={{color: 'rgb(209,213,219)'}}>
                        Bạn có chắc chắn muốn xóa sản phẩm "{productToDelete?.name}" không? Hành động này không thể hoàn tác.
                    </DialogContentText>
                </DialogContent>
                <DialogActions sx={{bgcolor: 'rgb(31,41,55)'}}>
                    <Button onClick={() => toggleDrawer(setIsDeleteDialogOpen, false)} sx={{color: '#A5B4FC'}}>Hủy</Button>
                    <Button onClick={confirmDeleteProduct} sx={{color: '#F87171'}} autoFocus disabled={isLoading}>
                        {isLoading ? <Loader  size={20} color="inherit"/> : "Xóa"}
                    </Button>
                </DialogActions>
            </Dialog>
        </motion.div>
    );
};

export default ProductsTable;
```

### ClientApp\src\components\Admin\products\SalesTrendChart.jsx
```jsx
import { motion } from "framer-motion";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";

const salesData = [
	{ month: "Jan", sales: 4000 },
	{ month: "Feb", sales: 3000 },
	{ month: "Mar", sales: 5000 },
	{ month: "Apr", sales: 4500 },
	{ month: "May", sales: 6000 },
	{ month: "Jun", sales: 5500 },
];

const SalesTrendChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>Sales Trend</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<LineChart data={salesData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Line type='monotone' dataKey='sales' stroke='#8B5CF6' strokeWidth={2} />
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default SalesTrendChart;

```

### ClientApp\src\components\Admin\products\VoucherDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer,Chip, Button, Box, Typography, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Modal, TextField, Switch } from "@mui/material";
import { X, Edit, Trash2, Plus } from "lucide-react";
import axios from "axios";

const VoucherDrawer = ({ open, onClose }) => {
    const [vouchers, setVouchers] = useState([]);
    const [modalOpen, setModalOpen] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [selectedVoucherId, setSelectedVoucherId] = useState(null);
    const [voucher, setVoucher] = useState({ code: "", discountAmount: "", expiryDate: "", isActive: true });

    useEffect(() => {
        fetchVouchers();
    }, []);

    const fetchVouchers = async () => {
        try {
            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`);
            setVouchers(response.data);
        } catch (error) {
            console.error("Failed to fetch vouchers:", error);
        }
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setVoucher({ ...voucher, [name]: value });
    };

    const handleToggleActive = (e) => {
        setVoucher({ ...voucher, isActive: e.target.checked });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            if (isEditing) {
                await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/${selectedVoucherId}`, voucher);
                setIsEditing(false);
                setSelectedVoucherId(null);
            } else {
                await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers`, voucher);
            }
            fetchVouchers();
            handleCloseModal();
        } catch (error) {
            console.error("Failed to save voucher:", error);
        }
    };

    const handleEdit = (voucher) => {
        setVoucher(voucher);
        setIsEditing(true);
        setSelectedVoucherId(voucher.id);
        setModalOpen(true);
    };

    const handleDelete = async (id) => {
        try {
            await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/${id}`);
            fetchVouchers();
        } catch (error) {
            console.error("Failed to delete voucher:", error);
        }
    };

    const handleOpenModal = () => {
        setIsEditing(false);
        setVoucher({ code: "", discountAmount: "", expiryDate: "", isActive: true });
        setModalOpen(true);
    };

    const handleCloseModal = () => {
        setModalOpen(false);
    };

    return (
        <Drawer anchor="right" open={open} onClose={onClose}>
            <Box sx={{ width: 600, p: 3, bgcolor: "white", height: "100%" }}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                    <Typography variant="h6" fontWeight="bold">Xem Voucher</Typography>
                    <IconButton onClick={onClose}><X size={24} /></IconButton>
                </Box>
                <Button onClick={handleOpenModal} variant="contained" sx={{ bgcolor: "black", color: "white", mb: 2 }}>
                    <Plus size={18} /> Thêm Voucher
                </Button>
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead sx={{ bgcolor: "black" }}>
                            <TableRow>
                                <TableCell sx={{ color: "white" }}>Mã Voucher</TableCell>
                                <TableCell sx={{ color: "white" }}>Giảm Giá</TableCell>
                                <TableCell sx={{ color: "white" }}>Hạn Sử Dụng</TableCell>
                                <TableCell sx={{ color: "white" }}>Trạng Thái</TableCell>
                                <TableCell sx={{ color: "white" }}>Hành Động</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {vouchers.map((voucher) => (
                                <TableRow key={voucher.id}>
                                    <TableCell>{voucher.code}</TableCell>
                                    <TableCell>{voucher.discountAmount}</TableCell>
                                    <TableCell>{voucher.expiryDate}</TableCell>
                        <TableCell>
                            <Chip
                                label={voucher.isActive ? "Đang hoạt động" : "Tắt"}
                                color={voucher.isActive ? "success" : "error"}
                                sx={{ fontWeight: "bold", color: "white" }}
                            />
                        </TableCell>
                                    <TableCell>
                                        <IconButton onClick={() => handleEdit(voucher)}><Edit size={18} color="blue" /></IconButton>
                                        <IconButton onClick={() => handleDelete(voucher.id)}><Trash2 size={18} color="red" /></IconButton>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>

            {/* Modal thêm & sửa Voucher */}
            <Modal open={modalOpen} onClose={handleCloseModal}>
                <Box sx={{
                    position: "absolute",
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%, -50%)",
                    bgcolor: "white",
                    border: "2px solid black",
                    borderRadius: 2,
                    boxShadow: 24,
                    p: 4,
                    width: 400
                }}>
                    <Typography variant="h6" fontWeight="bold" mb={2}>{isEditing ? "Chỉnh sửa Voucher" : "Thêm Voucher"}</Typography>
                    <TextField fullWidth label="Mã Voucher" name="code" value={voucher.code} onChange={handleChange} sx={{ mb: 2 }} />
                    <TextField fullWidth label="Số tiền giảm giá" name="discountAmount" type="number" value={voucher.discountAmount} onChange={handleChange} sx={{ mb: 2 }} />
                    <TextField
                        fullWidth
                        label="Ngày hết hạn"
                        name="expiryDate"
                        type="date"
                        value={voucher.expiryDate}
                        onChange={handleChange}
                        sx={{ mb: 2 }}
                        InputLabelProps={{ shrink: true }} // Fix lỗi chữ bị đè
                    />
                    <Box display="flex" alignItems="center" mb={2}>
                        <Typography variant="body2">Kích hoạt</Typography>
                        <Switch checked={voucher.isActive} onChange={handleToggleActive} />
                    </Box>
                    <Button fullWidth onClick={handleSubmit} variant="contained" sx={{ bgcolor: "black", color: "white" }}>
                        {isEditing ? "Cập nhật Voucher" : "Thêm Voucher"}
                    </Button>
                </Box>
            </Modal>
        </Drawer>
    );
};

export default VoucherDrawer;

```

### ClientApp\src\components\Admin\sales\DailySalesTrend.jsx
```jsx
import { motion } from "framer-motion";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { useEffect, useState } from "react";
import axios from "axios";

const DailySalesTrend = () => {
  const [dailySalesData, setDailySalesData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [days, setDays] = useState(7); // Mặc định 7 ngày

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/orders/dashboard/sales-overview?range=${days}`
        );
        setDailySalesData(response.data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
        console.error("Error fetching daily sales data:", err);
      }
    };

    fetchData();
  }, [days]);

  if (loading) return <div className="text-center py-8">Loading...</div>;
  if (error)
    return <div className="text-center py-8 text-red-500">Error: {error}</div>;

  return (
    <motion.div
      className="bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.4 }}
    >
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold text-gray-100">
          Doanh số hàng ngày
        </h2>
        <select
          value={days}
          onChange={(e) => setDays(Number(e.target.value))}
          className="bg-gray-700 text-white rounded px-3 py-1"
        >
          <option value={7}>7 ngày gần đây</option>
          <option value={14}>14 ngày gần đây</option>
          <option value={30}>30 ngày gần đây</option>
        </select>
      </div>

      <div style={{ width: "100%", height: 300 }}>
        <ResponsiveContainer>
          <BarChart data={dailySalesData}>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
            <XAxis
              dataKey="name"
              stroke="#9CA3AF"
              tickFormatter={(value, index) => {
                // Hiển thị cả ngày và tháng cho khoảng thời gian dài
                if (days > 7) return dailySalesData[index]?.fullDate || value;
                return value;
              }}
            />
            <YAxis stroke="#9CA3AF" />
            <Tooltip
              formatter={(value) => [
                `${Number(value).toLocaleString()} VNĐ`,
                "Sales",
              ]}
              labelFormatter={(label) => {
                const fullDate = dailySalesData.find(
                  (d) => d.name === label
                )?.fullDate;
                return fullDate ? `${label}, ${fullDate}` : label;
              }}
              contentStyle={{
                backgroundColor: "rgba(31, 41, 55, 0.8)",
                borderColor: "#4B5563",
                borderRadius: "0.5rem",
              }}
              itemStyle={{ color: "#E5E7EB" }}
            />
            <Bar
              dataKey="sales"
              fill="#10B981"
              radius={[4, 4, 0, 0]}
              animationDuration={2000}
            />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </motion.div>
  );
};

export default DailySalesTrend;

```

### ClientApp\src\components\Admin\sales\SalesByCategoryChart.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from "recharts";
import { useEffect, useState } from "react";
import axios from "axios";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];

const SalesByCategoryChart = () => {
    const [salesByCategory, setSalesByCategory] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders/sales-by-category`);
                setSalesByCategory(response.data);
                setLoading(false);
            } catch (err) {
                setError(err.message);
                setLoading(false);
                console.error("Error fetching sales data:", err);
            }
        };

        fetchData();
    }, []);

    if (loading) return <div className="text-center py-8">Loading...</div>;
    if (error) return <div className="text-center py-8 text-red-500">Error: {error}</div>;

    return (
        <motion.div
            className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
        >
            <h2 className='text-xl font-semibold text-gray-100 mb-4'>Tỉ lệ đơn hàng theo danh mục</h2>

            <div style={{ width: "100%", height: 300 }}>
                <ResponsiveContainer>
                    <PieChart>
                        <Pie
                            data={salesByCategory}
                            cx='50%'
                            cy='50%'
                            outerRadius={80}
                            fill='#8884d8'
                            dataKey='value'
                            label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                        >
                            {salesByCategory.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                        </Pie>
                        <Tooltip
                            formatter={(value) => [`${Number(value).toLocaleString()} VNĐ`, "Total Sales"]}
                            contentStyle={{
                                backgroundColor: "rgba(31, 41, 55, 0.8)",
                                borderColor: "#4B5563",
                                borderRadius: "0.5rem",
                            }}
                            itemStyle={{ color: "#E5E7EB" }}
                        />
                        <Legend />
                    </PieChart>
                </ResponsiveContainer>
            </div>
        </motion.div>
    );
};

export default SalesByCategoryChart;
```

### ClientApp\src\components\Admin\sales\SalesOverviewChart.jsx
```jsx
import { motion } from "framer-motion";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { useState, useEffect } from "react";
import axios from "axios";

const SalesOverviewChart = () => {
    const [selectedTimeRange, setSelectedTimeRange] = useState("month");
    const [chartData, setChartData] = useState([]);
    const [summary, setSummary] = useState(null);
    const [xAxisKey, setXAxisKey] = useState("day");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchSalesData = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const response = await axios.get(
                    `${process.env.REACT_APP_API_BASE_URL}/api/orders/dashboard/sales-overview`,
                    { params: { range: selectedTimeRange } }
                );
                console.log("Response Data:", response.data);
                if (!response.data || !response.data.data) { // Sửa thành response.data.data
                    throw new Error("Dữ liệu API không đúng định dạng");
                }
                const { data, xAxisKey, summary } = response.data; // Sửa destructuring
                setChartData(data || []);
                setXAxisKey(xAxisKey || "day");
                setSummary(summary || null);
            } catch (error) {
                setError("Không thể tải dữ liệu doanh thu: " + error.message);
                console.error("Error fetching sales data:", error);
                setChartData([]);
            } finally {
                setIsLoading(false);
            }
        };

        fetchSalesData();
    }, [selectedTimeRange]);

    const formatCurrency = (value) => {
  if (value >= 1000000) {
    // Chia số tiền cho triệu
    const millions = Math.floor(value / 1000000);  // Lấy phần nguyên (triệu)
    const remainder = Math.floor((value % 1000000) / 100000);  // Lấy phần thập phân, làm tròn đến 100 ngàn

    // Nếu có phần thập phân
    if (remainder > 0) {
      return `${millions}tr${remainder}`;
    } else {
      return `${millions}tr`;  // Nếu không có phần thập phân, chỉ hiển thị triệu
    }
  } else if (value >= 1000) {
    // Chuyển thành nghìn (k) nếu cần
    return `${(value / 1000).toFixed(0)}k`;
  } else {
    return value.toLocaleString('vi-VN');  // Nếu không phải triệu hoặc nghìn, giữ nguyên
  }
};

    const getTitle = () => {
        switch (selectedTimeRange) {
            case "week": return "Tổng Quan Doanh Thu Tuần";
            case "month": return "Tổng Quan Doanh Thu Tháng";
            case "year": return "Tổng Quan Doanh Thu Năm";
            default: return "Tổng Quan Doanh Thu";
        }
    };

    const getXAxisLabel = () => {
        return xAxisKey === "month" ? "Tháng" : "Ngày";
    };

    return (
        <motion.div
            className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
        >
            <div className='flex items-center justify-between mb-6'>
                <h2 className='text-xl font-semibold text-gray-100'>{getTitle()}</h2>
                <select
                    className='bg-gray-700 text-white rounded-md px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500'
                    value={selectedTimeRange}
                    onChange={(e) => setSelectedTimeRange(e.target.value)}
                    disabled={isLoading}
                >
                    <option value="week">Tuần </option>
                    <option value="month">Tháng trước </option>
                    <option value="year">Năm </option>
                </select>
            </div>

            {isLoading ? (
                <div className="flex justify-center items-center h-80">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>
            ) : error ? (
                <div className="text-red-500 text-center h-80 flex items-center justify-center">
                    {error}
                </div>
            ) : (
                <>
                    {console.log("Chart Data:", chartData)}
                    <div className='w-full h-80'>
                        <ResponsiveContainer>
                            <BarChart data={chartData}>
    <CartesianGrid strokeDasharray='3 3' stroke='#374151' />
    <XAxis 
        dataKey="shortPeriod"
        stroke='#9CA3AF'
        label={{ value: getXAxisLabel(), position: 'insideBottom', offset: -5 }}
    />
    <YAxis 
        stroke='#9CA3AF'
        tickFormatter={(value) => formatCurrency(value)}  // Sử dụng hàm định dạng tiền
        label={{ value: 'Doanh thu (VND)', angle: -90, position: 'insideLeft' }}
    />
    <Tooltip
        contentStyle={{ backgroundColor: "rgba(31, 41, 55, 0.8)", borderColor: "#4B5563" }}
        itemStyle={{ color: "#E5E7EB" }}
        formatter={(value, name) => [formatCurrency(value), "Doanh thu"]}
        labelFormatter={(label) => chartData.find(d => d.shortPeriod === label)?.formattedPeriod || label}
    />
    <Bar 
        dataKey='sales'
        fill='#8B5CF6'
        name="Doanh thu"
    />
</BarChart>
                        </ResponsiveContainer>
                    </div>

                    {summary && (
                        <div className='mt-4 text-gray-100 grid grid-cols-1 md:grid-cols-2 gap-2'>
                            <p>Tổng doanh thu: {formatCurrency(summary.totalSales)}</p>
                            {summary.averageDailySales && (
                                <p>Doanh thu trung bình ngày: {formatCurrency(summary.averageDailySales)}</p>
                            )}
                            {summary.averageMonthlySales && (
                                <p>Doanh thu trung bình tháng: {formatCurrency(summary.averageMonthlySales)}</p>
                            )}
                            {summary.bestMonth && <p>Tháng tốt nhất: {summary.bestMonth}</p>}
                            {summary.worstMonth && <p>Tháng thấp nhất: {summary.worstMonth}</p>}
                        </div>
                    )}
                </>
            )}
        </motion.div>
    );
};

export default SalesOverviewChart;
```

### ClientApp\src\components\Admin\settings\ConnectedAccounts.jsx
```jsx
import { useState } from "react";
import SettingSection from "./SettingSection";
import { HelpCircle, Plus } from "lucide-react";

const ConnectedAccounts = () => {
	const [connectedAccounts, setConnectedAccounts] = useState([
		{
			id: 1,
			name: "Google",
			connected: true,
			icon: "/google.png",
		},
		{
			id: 2,
			name: "Facebook",
			connected: false,
			icon: "/facebook.svg",
		},
		{
			id: 3,
			name: "Twitter",
			connected: true,
			icon: "/x.png",
		},
	]);
	return (
		<SettingSection icon={HelpCircle} title={"Connected Accounts"}>
			{connectedAccounts.map((account) => (
				<div key={account.id} className='flex items-center justify-between py-3'>
					<div className='flex gap-1'>
						<img src={account.icon} alt='Social img' className='size-6 object-cover rounded-full mr-2' />
						<span className='text-gray-300'>{account.name}</span>
					</div>
					<button
						className={`px-3 py-1 rounded ${
							account.connected ? "bg-green-600 hover:bg-green-700" : "bg-gray-600 hover:bg-gray-700"
						} transition duration-200`}
						onClick={() => {
							setConnectedAccounts(
								connectedAccounts.map((acc) => {
									if (acc.id === account.id) {
										return {
											...acc,
											connected: !acc.connected,
										};
									}
									return acc;
								})
							);
						}}
					>
						{account.connected ? "Connected" : "Connect"}
					</button>
				</div>
			))}
			<button className='mt-4 flex items-center text-indigo-400 hover:text-indigo-300 transition duration-200'>
				<Plus size={18} className='mr-2' /> Add Account
			</button>
		</SettingSection>
	);
};
export default ConnectedAccounts;

```

### ClientApp\src\components\Admin\settings\DangerZone.jsx
```jsx
import { motion } from "framer-motion";
import { Trash2 } from "lucide-react";

const DangerZone = () => {
	return (
		<motion.div
			className='bg-red-900 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-red-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ duration: 0.5, delay: 0.2 }}
		>
			<div className='flex items-center mb-4'>
				<Trash2 className='text-red-400 mr-3' size={24} />
				<h2 className='text-xl font-semibold text-gray-100'>Danger Zone</h2>
			</div>
			<p className='text-gray-300 mb-4'>Permanently delete your account and all of your content.</p>
			<button
				className='bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded 
      transition duration-200'
			>
				Delete Account
			</button>
		</motion.div>
	);
};
export default DangerZone;

```

### ClientApp\src\components\Admin\settings\Notifications.jsx
```jsx
import { useState } from "react";
import SettingSection from "./SettingSection";
import { Bell } from "lucide-react";
import ToggleSwitch from "./ToggleSwitch";

const Notifications = () => {
	const [notifications, setNotifications] = useState({
		push: true,
		email: false,
		sms: true,
	});

	return (
		<SettingSection icon={Bell} title={"Notifications"}>
			<ToggleSwitch
				label={"Push Notifications"}
				isOn={notifications.push}
				onToggle={() => setNotifications({ ...notifications, push: !notifications.push })}
			/>
			<ToggleSwitch
				label={"Email Notifications"}
				isOn={notifications.email}
				onToggle={() => setNotifications({ ...notifications, email: !notifications.email })}
			/>
			<ToggleSwitch
				label={"SMS Notifications"}
				isOn={notifications.sms}
				onToggle={() => setNotifications({ ...notifications, sms: !notifications.sms })}
			/>
		</SettingSection>
	);
};
export default Notifications;

```

### ClientApp\src\components\Admin\settings\Profile.jsx
```jsx
import { User } from "lucide-react";
import SettingSection from "./SettingSection";

const Profile = () => {
	return (
		<SettingSection icon={User} title={"Profile"}>
			<div className='flex flex-col sm:flex-row items-center mb-6'>
				<img
					src='https://randomuser.me/api/portraits/men/3.jpg'
					alt='Profile'
					className='rounded-full w-20 h-20 object-cover mr-4'
				/>

				<div>
					<h3 className='text-lg font-semibold text-gray-100'>John Doe</h3>
					<p className='text-gray-400'>john.doe@example.com</p>
				</div>
			</div>

			<button className='bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded transition duration-200 w-full sm:w-auto'>
				Edit Profile
			</button>
		</SettingSection>
	);
};
export default Profile;

```

### ClientApp\src\components\Admin\settings\Security.jsx
```jsx
import { Lock } from "lucide-react";
import SettingSection from "./SettingSection";
import ToggleSwitch from "./ToggleSwitch";
import { useState } from "react";

const Security = () => {
	const [twoFactor, setTwoFactor] = useState(false);

	return (
		<SettingSection icon={Lock} title={"Security"}>
			<ToggleSwitch
				label={"Two-Factor Authentication"}
				isOn={twoFactor}
				onToggle={() => setTwoFactor(!twoFactor)}
			/>
			<div className='mt-4'>
				<button
					className='bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded 
        transition duration-200
        '
				>
					Change Password
				</button>
			</div>
		</SettingSection>
	);
};
export default Security;

```

### ClientApp\src\components\Admin\settings\SettingSection.jsx
```jsx
import { motion } from "framer-motion";

const SettingSection = ({ icon: Icon, title, children }) => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-filter backdrop-blur-lg shadow-lg rounded-xl p-6 border border-gray-700 mb-8'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ duration: 0.5 }}
		>
			<div className='flex items-center mb-4'>
				<Icon className='text-indigo-400 mr-4' size='24' />
				<h2 className='text-xl font-semibold text-gray-100'>{title}</h2>
			</div>
			{children}
		</motion.div>
	);
};
export default SettingSection;

```

### ClientApp\src\components\Admin\settings\ToggleSwitch.jsx
```jsx
const ToggleSwitch = ({ label, isOn, onToggle }) => {
	return (
		<div className='flex items-center justify-between py-3'>
			<span className='text-gray-300'>{label}</span>
			<button
				className={`
        relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none
        ${isOn ? "bg-indigo-600" : "bg-gray-600"}
        `}
				onClick={onToggle}
			>
				<span
					className={`inline-block size-4 transform transition-transform bg-white rounded-full 
            ${isOn ? "translate-x-6" : "translate-x-1"}
            `}
				/>
			</button>
		</div>
	);
};
export default ToggleSwitch;

```

### ClientApp\src\components\Admin\users\RoleDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Drawer, Button, Table, Space, Modal, Form, Input, message } from "antd";
import { Pencil, Trash, Plus } from "lucide-react";

const RoleDrawer = ({ visible, onClose }) => {
  const [roles, setRoles] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingRole, setEditingRole] = useState(null);
  const [form] = Form.useForm();

  useEffect(() => {
    if (visible) fetchRoles();
  }, [visible]);

  const fetchRoles = async () => {
    try {
      const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles`);
      const data = await res.json();
      setRoles(data);
    } catch (error) {
      message.error("Lỗi khi tải dữ liệu");
    }
  };

  const handleAddOrEdit = async (values) => {
    try {
      if (editingRole) {
        // API cập nhật
        await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles/${editingRole.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(values),
        });
        message.success("Cập nhật role thành công");
        setRoles((prev) => prev.map((r) => (r.id === editingRole.id ? { ...r, ...values } : r)));
      } else {
        // API thêm mới
        const res = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(values),
        });
        const newRole = await res.json();
        message.success("Thêm role thành công");
        setRoles((prev) => [...prev, newRole]);
      }
      setIsModalOpen(false);
      form.resetFields();
      setEditingRole(null);
    } catch (error) {
      message.error("Có lỗi xảy ra");
    }
  };

  const handleDelete = async (id) => {
    Modal.confirm({
      title: "Xóa Role",
      content: "Bạn có chắc muốn xóa role này?",
      okText: "Xóa",
      okType: "danger",
      cancelText: "Hủy",
      onOk: async () => {
        try {
          await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/roles/${id}`, { method: "DELETE" });
          message.success("Xóa role thành công");
          setRoles((prev) => prev.filter((r) => r.id !== id));
        } catch (error) {
          message.error("Không thể xóa role vì đang được sử dụng.");
        }
      },
    });
  };

  const columns = [
    { title: "Tên Role", dataIndex: "name", key: "name" },
    {
      title: "Hành động",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button
            icon={<Pencil size={18} />}
            onClick={() => {
              setEditingRole(record);
              form.setFieldsValue(record);
              setIsModalOpen(true);
            }}
          />
          <Button icon={<Trash size={18} />} danger onClick={() => handleDelete(record.id)} />
        </Space>
      ),
    },
  ];

  return (
    <Drawer title="Quản lý Role" open={visible} onClose={onClose} width={500}>
      <Button type="primary" icon={<Plus size={18} />} onClick={() => setIsModalOpen(true)}>
        Quản lý Role
      </Button>
      <Table columns={columns} dataSource={roles} rowKey="id" style={{ marginTop: 20 }} />
      
      <Modal
        title={editingRole ? "Chỉnh sửa Role" : "Thêm Role"}
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false);
          form.resetFields();
          setEditingRole(null);
        }}
        onOk={() => form.submit()}
      >
        <Form form={form} layout="vertical" onFinish={handleAddOrEdit}>
          <Form.Item name="name" label="Tên Role" rules={[{ required: true, message: "Nhập tên role" }]}>
            <Input />
          </Form.Item>
        </Form>
      </Modal>
    </Drawer>
  );
};

export default RoleDrawer;

```

### ClientApp\src\components\Admin\users\UpdateUserDrawer.jsx
```jsx
import React, { useState, useEffect } from "react";
import { message } from "antd";
import { Drawer, TextField, Button, Select, MenuItem, FormControlLabel, Switch } from "@mui/material";
import axios from "axios";

const UpdateUserDrawer = ({ open, onClose, user, roles, onUpdate }) => {
  const [userData, setUserData] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    roleId: "",
    isActive: false,
  });

  useEffect(() => {
    if (user) {
      setUserData({
        fullName: user.fullName || "",
        email: user.email || "",
        phoneNumber: user.phoneNumber || "",
        roleId: user.roleId || "",
        isActive: user.isActive || false,
      });
    }
  }, [user]);

  const handleChange = (e) => {
    setUserData({ ...userData, [e.target.name]: e.target.value });
  };

  const handleSwitchChange = (e) => {
    setUserData({ ...userData, isActive: e.target.checked });
  };

  const handleSave = async () => {
    if (!userData.fullName || !userData.email || !userData.phoneNumber || !userData.roleId) {
      message.warning("Vui lòng điền đầy đủ thông tin!");
      return;
    }

    try {
      await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/users/${user.id}`, userData);
      message.success("Cập nhật thông tin thành công!");
      onUpdate(user.id, userData);
      onClose();
    } catch (error) {
      console.error("Lỗi khi cập nhật thông tin người dùng:", error);
      message.error("Lỗi khi cập nhật, vui lòng thử lại.");
    }
  };

  return (
    <Drawer anchor="right" open={open} onClose={onClose}>
      <div className="w-96 p-5">
        <h2 className="text-xl font-semibold mb-4">Cập nhật người dùng</h2>

        <TextField
          label="Họ và tên"
          name="fullName"
          value={userData.fullName}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <TextField
          label="Email"
          name="email"
          value={userData.email}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <TextField
          label="Số điện thoại"
          name="phoneNumber"
          value={userData.phoneNumber}
          onChange={handleChange}
          fullWidth
          margin="normal"
        />
        <Select
          name="roleId"
          value={userData.roleId}
          onChange={handleChange}
          fullWidth
          displayEmpty
          sx={{ mt: 2 }}
        >
          <MenuItem value="" disabled>Chọn vai trò</MenuItem>
          {roles.map((role) => (
            <MenuItem key={role.id} value={role.id}>{role.name}</MenuItem>
          ))}
        </Select>

        <FormControlLabel
          control={<Switch checked={userData.isActive} onChange={handleSwitchChange} />}
          label="Kích hoạt tài khoản"
          className="mt-4"
        />

        <div className="flex justify-end space-x-2 mt-4">
          <Button onClick={onClose} color="secondary">Hủy</Button>
          <Button onClick={handleSave} variant="contained" color="primary">Lưu</Button>
        </div>
      </div>
    </Drawer>
  );
};

export default UpdateUserDrawer;

```

### ClientApp\src\components\Admin\users\UserActivityHeatmap.jsx
```jsx
import { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import { motion } from "framer-motion";

const userActivityData = [
	{ name: "Mon", "0-4": 20, "4-8": 40, "8-12": 60, "12-16": 80, "16-20": 100, "20-24": 30 },
	{ name: "Tue", "0-4": 30, "4-8": 50, "8-12": 70, "12-16": 90, "16-20": 110, "20-24": 40 },
	{ name: "Wed", "0-4": 40, "4-8": 60, "8-12": 80, "12-16": 100, "16-20": 120, "20-24": 50 },
	{ name: "Thu", "0-4": 50, "4-8": 70, "8-12": 90, "12-16": 110, "16-20": 130, "20-24": 60 },
	{ name: "Fri", "0-4": 60, "4-8": 80, "8-12": 100, "12-16": 120, "16-20": 140, "20-24": 70 },
	{ name: "Sat", "0-4": 70, "4-8": 90, "8-12": 110, "12-16": 130, "16-20": 150, "20-24": 80 },
	{ name: "Sun", "0-4": 80, "4-8": 100, "8-12": 120, "12-16": 140, "16-20": 160, "20-24": 90 },
];

const UserActivityHeatmap = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.4 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Activity Heatmap</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<BarChart data={userActivityData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='name' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
						<Bar dataKey='0-4' stackId='a' fill='#6366F1' />
						<Bar dataKey='4-8' stackId='a' fill='#8B5CF6' />
						<Bar dataKey='8-12' stackId='a' fill='#EC4899' />
						<Bar dataKey='12-16' stackId='a' fill='#10B981' />
						<Bar dataKey='16-20' stackId='a' fill='#F59E0B' />
						<Bar dataKey='20-24' stackId='a' fill='#3B82F6' />
					</BarChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserActivityHeatmap;

```

### ClientApp\src\components\Admin\users\UserDemographicsChart.jsx
```jsx
import { motion } from "framer-motion";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from "recharts";

const COLORS = ["#8884d8", "#82ca9d", "#ffc658", "#ff8042", "#0088FE"];

const userDemographicsData = [
	{ name: "18-24", value: 20 },
	{ name: "25-34", value: 30 },
	{ name: "35-44", value: 25 },
	{ name: "45-54", value: 15 },
	{ name: "55+", value: 10 },
];

const UserDemographicsChart = () => {
	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700 lg:col-span-2'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.5 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Demographics</h2>
			<div style={{ width: "100%", height: 300 }}>
				<ResponsiveContainer>
					<PieChart>
						<Pie
							data={userDemographicsData}
							cx='50%'
							cy='50%'
							outerRadius={100}
							fill='#8884d8'
							dataKey='value'
							label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
						>
							{userDemographicsData.map((entry, index) => (
								<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
							))}
						</Pie>
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Legend />
					</PieChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};
export default UserDemographicsChart;

```

### ClientApp\src\components\Admin\users\UserGrowthChart.jsx
```jsx
import { useEffect, useState } from "react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { motion } from "framer-motion";
import axios from "axios";

const UserGrowthChart = () => {
	const [chartData, setChartData] = useState([]);

	useEffect(() => {
		const fetchUserGrowthData = async () => {
			try {
				const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users/growth`);
				setChartData(response.data); // API trả về dữ liệu dạng [{ month: "Jan", users: 1000 }, ...]
			} catch (error) {
				console.error("Lỗi khi lấy dữ liệu người dùng:", error);
			}
		};

		fetchUserGrowthData();
	}, []);

	return (
		<motion.div
			className='bg-gray-800 bg-opacity-50 backdrop-blur-md shadow-lg rounded-xl p-6 border border-gray-700'
			initial={{ opacity: 0, y: 20 }}
			animate={{ opacity: 1, y: 0 }}
			transition={{ delay: 0.3 }}
		>
			<h2 className='text-xl font-semibold text-gray-100 mb-4'>User Growth</h2>
			<div className='h-[320px]'>
				<ResponsiveContainer width='100%' height='100%'>
					<LineChart data={chartData}>
						<CartesianGrid strokeDasharray='3 3' stroke='#374151' />
						<XAxis dataKey='month' stroke='#9CA3AF' />
						<YAxis stroke='#9CA3AF' />
						<Tooltip
							contentStyle={{
								backgroundColor: "rgba(31, 41, 55, 0.8)",
								borderColor: "#4B5563",
							}}
							itemStyle={{ color: "#E5E7EB" }}
						/>
						<Line
							type='monotone'
							dataKey='users'
							stroke='#8B5CF6'
							strokeWidth={2}
							dot={{ fill: "#8B5CF6", strokeWidth: 2, r: 4 }}
							activeDot={{ r: 8 }}
						/>
					</LineChart>
				</ResponsiveContainer>
			</div>
		</motion.div>
	);
};

export default UserGrowthChart;

```

### ClientApp\src\components\Admin\users\UsersTable.jsx
```jsx
import { useState, useEffect, useMemo, useCallback } from "react";
import axios from "axios";
import { motion } from "framer-motion";
import {
  Search,
  PlusCircle,
  Pencil,
  Trash2,
  Users,
  // User, // Có thể không cần nếu CircleUserRound là default
  ShieldCheck,
  Sparkles,
  Star,
  Award,
  Crown,
  CircleUserRound,
  FilterX,
} from "lucide-react";
import {
  Modal,
  Box,
  Typography,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  CircularProgress,
  Alert,
  Pagination,
  Grid,
} from "@mui/material";
import { message } from "antd"; // Đảm bảo đã cài đặt antd và import CSS của nó

import RoleDrawer from "./RoleDrawer"; // Điều chỉnh đường dẫn nếu cần
import UpdateUserDrawer from "./UpdateUserDrawer"; // Điều chỉnh đường dẫn nếu cần
import useDebounce from "utils/useDebounce"; // Điều chỉnh đường dẫn nếu cần

// Hàm lấy icon cho avatar dựa trên vai trò
const getRoleBasedAvatar = (roleName, isActive) => {
  const iconProps = {
    size: 22,
    className: "text-white",
    strokeWidth: isActive ? 2 : 1.5,
  };
  const normalizedRoleName = roleName?.toLowerCase();

  switch (normalizedRoleName) {
    case "admin":
      return <ShieldCheck {...iconProps} />;
    case "vip0":
      return <Sparkles {...iconProps} />;
    case "vip1":
      return <Star {...iconProps} />;
    case "vip2":
      return <Award {...iconProps} />;
    case "vip3":
      return <Crown {...iconProps} />;
    default:
      return <CircleUserRound {...iconProps} />;
  }
};

const UsersTable = () => {
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [searchInput, setSearchInput] = useState("");
  const debouncedSearchTerm = useDebounce(searchInput, 300);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isRoleUpdateModalOpen, setIsRoleUpdateModalOpen] = useState(false);
  const [roleForSelectedUser, setRoleForSelectedUser] = useState("");
  const [updateDrawerVisible, setUpdateDrawerVisible] = useState(false);
  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);
  const [newUser, setNewUser] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    password: "",
    roleId: "",
  });
  const [roleDrawerVisible, setRoleDrawerVisible] = useState(false);

  // State cho Phân trang và Bộ lọc mới
  const [currentPage, setCurrentPage] = useState(1);
  const [usersPerPage, setUsersPerPage] = useState(10);
  const [roleFilter, setRoleFilter] = useState("All");
  const [statusFilter, setStatusFilter] = useState("All");

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [usersRes, rolesRes] = await Promise.all([
          axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/users`),
          axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/roles`),
        ]);
        setUsers(usersRes.data);
        setRoles(rolesRes.data);
      } catch (err) {
        console.error("Error fetching data:", err);
        const errorMessage = err.response?.data?.message || err.message || "Không thể tải dữ liệu.";
        setError(errorMessage);
        message.error(`Lỗi tải dữ liệu: ${errorMessage}`);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const filteredUsers = useMemo(() => {
    let tempUsers = [...users];
    const term = debouncedSearchTerm.toLowerCase();
    if (term) {
      tempUsers = tempUsers.filter(
        (user) =>
          user.fullName.toLowerCase().includes(term) ||
          user.email.toLowerCase().includes(term)
      );
    }
    if (roleFilter !== "All") {
      tempUsers = tempUsers.filter(user => user.roleId === roleFilter);
    }
    if (statusFilter !== "All") {
      const isActiveFilter = statusFilter === "Active";
      tempUsers = tempUsers.filter(user => user.isActive === isActiveFilter);
    }
    return tempUsers;
  }, [users, debouncedSearchTerm, roleFilter, statusFilter]);

  const currentUsers = useMemo(() => {
    const indexOfLastUser = currentPage * usersPerPage;
    const indexOfFirstUser = indexOfLastUser - usersPerPage;
    return filteredUsers.slice(indexOfFirstUser, indexOfLastUser);
  }, [filteredUsers, currentPage, usersPerPage]);

  const totalPages = useMemo(() => {
    return Math.ceil(filteredUsers.length / usersPerPage);
  }, [filteredUsers.length, usersPerPage]);

  useEffect(() => {
    setCurrentPage(1);
  }, [debouncedSearchTerm, roleFilter, statusFilter, usersPerPage]);

  const handleSearchChange = useCallback((e) => setSearchInput(e.target.value), []);
  const handleRoleFilterChange = useCallback((event) => setRoleFilter(event.target.value), []);
  const handleStatusFilterChange = useCallback((event) => setStatusFilter(event.target.value), []);
  const handlePageChange = useCallback((event, newPage) => setCurrentPage(newPage), []);
  const handleUsersPerPageChange = useCallback((event) => {
    setUsersPerPage(parseInt(event.target.value, 10));
  }, []);
  const handleResetFilters = useCallback(() => {
    setSearchInput("");
    setRoleFilter("All");
    setStatusFilter("All");
    // usersPerPage có thể giữ nguyên hoặc reset về giá trị mặc định nếu muốn
    // setCurrentPage(1); // Đã được xử lý bởi useEffect theo dõi các state filter
    message.info("Đã xóa tất cả bộ lọc.");

}, [setSearchInput, setRoleFilter, setStatusFilter]); // Các setter là stable, có thể dùng mảng rỗng []
  const handleOpenRoleUpdateModal = useCallback((user) => {
    if (!user.isActive && user.roleId !== roles.find(r => r.name.toLowerCase() === 'admin')?.id) { // Admin có thể được sửa role ngay cả khi inactive
        message.warning("Không thể cập nhật vai trò cho người dùng không hoạt động (trừ Admin).");
        // return; // Bỏ comment nếu muốn chặn hoàn toàn
    }
    setSelectedUser(user);
    setRoleForSelectedUser(user.roleId);
    setIsRoleUpdateModalOpen(true);
  }, [roles]);

  const handleCloseRoleUpdateModal = useCallback(() => {
    setIsRoleUpdateModalOpen(false);
    setSelectedUser(null);
    setRoleForSelectedUser("");
  }, []);

  const handleUpdateUserRole = useCallback(async () => {
    if (selectedUser && roleForSelectedUser) {
      try {
        await axios.put(
          `${process.env.REACT_APP_API_BASE_URL}/api/users/${selectedUser.id}/role`,
          { roleId: roleForSelectedUser }
        );
        setUsers((prevUsers) =>
          prevUsers.map((user) =>
            user.id === selectedUser.id
              ? { ...user, roleId: roleForSelectedUser }
              : user
          )
        );
        message.success(`Vai trò của ${selectedUser.fullName} đã được cập nhật!`);
        handleCloseRoleUpdateModal();
      } catch (err) {
        console.error("Error updating user role:", err);
        message.error(`Lỗi cập nhật vai trò: ${err.response?.data?.message || err.message}`);
      }
    }
  }, [selectedUser, roleForSelectedUser, handleCloseRoleUpdateModal]);

  const handleOpenUpdateDrawer = useCallback((user) => {
    setSelectedUser(user);
    setUpdateDrawerVisible(true);
  }, []);

  const handleCloseUpdateDrawer = useCallback(() => {
    setUpdateDrawerVisible(false);
    setSelectedUser(null);
  }, []);

  const handleUserUpdated = useCallback((updatedUserData) => {
    setUsers(prevUsers => prevUsers.map(user => user.id === updatedUserData.id ? { ...user, ...updatedUserData } : user));
    message.success(`Thông tin người dùng ${updatedUserData.fullName} đã được cập nhật!`);
  }, []);

  const handleOpenAddUserModal = useCallback(() => {
    setNewUser({ fullName: "", email: "", phoneNumber: "", password: "", roleId: "" });
    setIsAddUserModalOpen(true);
  }, []);

  const handleCloseAddUserModal = useCallback(() => {
    setIsAddUserModalOpen(false);
  }, []);

  const handleNewUserInputChange = useCallback((e) => {
    const { name, value } = e.target;
    setNewUser(prev => ({ ...prev, [name]: value }));
  }, []);

  const handleAddNewUser = useCallback(async () => {
    if (!newUser.fullName || !newUser.email || !newUser.phoneNumber || !newUser.password || !newUser.roleId) {
      message.warning("Vui lòng điền đầy đủ thông tin người dùng.");
      return;
    }
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/users`,
        newUser
      );
      setUsers((prevUsers) => [response.data, ...prevUsers]);
      message.success("Người dùng mới đã được thêm thành công!");
      handleCloseAddUserModal();
    } catch (err) {
      console.error("Lỗi khi thêm người dùng mới:", err);
      message.error(`Lỗi thêm người dùng: ${err.response?.data?.message || err.message}`);
    }
  }, [newUser, handleCloseAddUserModal]);

  const handleOpenRoleDrawer = useCallback(() => setRoleDrawerVisible(true), []);
  const handleCloseRoleDrawer = useCallback(() => setRoleDrawerVisible(false), []);

  const handleDeleteUser = useCallback(async (userId, userName) => {
    message.info(`Chức năng xóa người dùng ID: ${userId} (${userName}) đang được phát triển.`);
  }, []);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'calc(100vh - 200px)', color: 'white', flexDirection: 'column' }}>
        <CircularProgress color="inherit" size={50} />
        <Typography sx={{ mt: 2, fontSize: '1.1rem' }}>Đang tải danh sách người dùng...</Typography>
      </Box>
    );
  }

  if (error && users.length === 0) {
    return (
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 'calc(100vh - 200px)', color: 'white', flexDirection: 'column', p:3 }}>
            <Alert severity="error" sx={{width: '100%', maxWidth: '600px', '.MuiAlert-message': {fontSize: '1rem'}}}>
                Lỗi tải dữ liệu: {error}. Vui lòng thử lại sau.
            </Alert>
        </Box>
    );
  }

  return (
    <motion.div
      className='bg-gray-800 bg-opacity-70 backdrop-blur-xl shadow-2xl rounded-xl p-4 md:p-6 border border-gray-700 min-h-[calc(100vh-120px)] flex flex-col'
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1, duration: 0.4 }}
    >
      <div className='flex flex-wrap justify-between items-center mb-6 gap-4'>
        <h2 className='text-2xl font-bold text-gray-100 tracking-tight'>Quản lý Người Dùng</h2>
        <div className='flex flex-wrap gap-3'>
          <Button
            variant="contained"
            color="primary"
            startIcon={<PlusCircle size={18} />}
            onClick={handleOpenAddUserModal}
            sx={{ bgcolor: '#2563EB', '&:hover': { bgcolor: '#1D4ED8' }, textTransform: 'none', fontWeight: 'medium', boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06)' }}
          >
            Thêm người dùng
          </Button>
          <Button
            variant="outlined"
            startIcon={<Users size={18} />}
            onClick={handleOpenRoleDrawer}
            sx={{ color: '#A5B4FC', borderColor: '#4F46E5', '&:hover': { borderColor: '#A5B4FC', bgcolor: 'rgba(79, 70, 229, 0.1)'}, textTransform: 'none', fontWeight: 'medium'  }}
          >
            Quản lý Role
          </Button>
        </div>
      </div>

      <Grid container spacing={{xs: 1.5, md: 2}} alignItems="flex-end" sx={{ mb: 3 }}>
        <Grid item xs={12} md={4} lg={4}>
          <TextField
            label="Tìm kiếm"
            placeholder='Tên hoặc email...'
            value={searchInput}
            onChange={handleSearchChange}
            variant="outlined"
            fullWidth
            InputLabelProps={{ sx: { color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'} } }}
            InputProps={{
              startAdornment: <Search className='text-gray-400 mr-2' size={20} />,
              sx: { borderRadius: '8px', bgcolor: 'rgba(30,41,59,0.7)', input: { color: 'white' }, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4B5563' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4F46E5' }, '&.Mui-focused .MuiOutlinedInput-notchedOutline': { borderColor: '#A5B4FC', borderWidth: '2px'} }
            }}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3} lg={3}>
          <FormControl fullWidth variant="outlined">
            <InputLabel sx={{color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'}}}>Vai trò</InputLabel>
            <Select
              value={roleFilter}
              onChange={handleRoleFilterChange}
              label="Vai trò"
              sx={{color: roleFilter === "All" ? '#9CA3AF' : 'white', borderRadius:'8px', bgcolor: 'rgba(30,41,59,0.7)', '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4B5563' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4F46E5' }, '&.Mui-focused .MuiOutlinedInput-notchedOutline': { borderColor: '#A5B4FC', borderWidth: '2px'}, '& .MuiSvgIcon-root': { color: '#9CA3AF' }}}
              MenuProps={{ PaperProps: { sx: { bgcolor: '#1F2937', color: 'white', borderRadius: '8px', border:'1px solid #374151' }}}}
            >
              <MenuItem value="All" sx={{color: '#9CA3AF', fontStyle:'italic'}}><em>Tất cả vai trò</em></MenuItem>
              {roles.map((role) => (
                <MenuItem key={role.id} value={role.id} sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: '#4F46E5!important', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: '#4338CA!important'} }}>{role.name}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} sm={6} md={3} lg={3}>
           <FormControl fullWidth variant="outlined">
            <InputLabel sx={{color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'}}}>Trạng thái</InputLabel>
            <Select
              value={statusFilter}
              onChange={handleStatusFilterChange}
              label="Trạng thái"
              sx={{color: statusFilter === "All" ? '#9CA3AF' : 'white', borderRadius:'8px', bgcolor: 'rgba(30,41,59,0.7)', '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4B5563' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4F46E5' }, '&.Mui-focused .MuiOutlinedInput-notchedOutline': { borderColor: '#A5B4FC', borderWidth: '2px'}, '& .MuiSvgIcon-root': { color: '#9CA3AF' }}}
              MenuProps={{ PaperProps: { sx: { bgcolor: '#1F2937', color: 'white', borderRadius: '8px', border:'1px solid #374151' }}}}
            >
              <MenuItem value="All" sx={{color: '#9CA3AF', fontStyle:'italic'}}><em>Tất cả trạng thái</em></MenuItem>
              <MenuItem value="Active" sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: 'rgba(16, 185, 129, 0.3)!important', color: '#10B981', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: 'rgba(5, 150, 105, 0.4)!important'} }}>Hoạt động</MenuItem>
              <MenuItem value="Inactive" sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: 'rgba(239, 68, 68, 0.3)!important', color: '#EF4444', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: 'rgba(220, 38, 38, 0.4)!important'} }}>Vô hiệu</MenuItem>
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={12} md="auto"> {/* Nút Xóa bộ lọc - tự động co chiều rộng */}
        <Button
            variant="text"
            startIcon={<FilterX size={18} />}
            onClick={handleResetFilters}
            sx={{ 
                color: '#CBD5E1', // text-slate-300
                textTransform: 'none', 
                fontWeight: 'medium',
                padding: {xs: '6px 12px', md:'8px 16px'}, // Điều chỉnh padding cho hợp lý
                height: {md: '56px'}, // Căn chiều cao với TextField và Select
                '&:hover': { bgcolor: 'rgba(79, 70, 229, 0.15)'} 
            }}
        >
            Xóa lọc
        </Button>
    </Grid>
      </Grid>

      <div className='overflow-x-auto custom-scrollbar flex-grow rounded-lg border border-gray-700/50'>
        <table className='min-w-full divide-y divide-gray-600'>
          <thead className="bg-gray-700 bg-opacity-40 sticky top-0 z-10 backdrop-blur-sm">
            <tr>
              <th className='px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider'>Người dùng</th>
              <th className='px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider'>Email & SĐT</th>
              <th className='px-6 py-3 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider'>Vai trò</th>
              <th className='px-6 py-3 text-center text-xs font-semibold text-gray-300 uppercase tracking-wider'>Trạng thái</th>
              <th className='px-6 py-3 text-center text-xs font-semibold text-gray-300 uppercase tracking-wider'>Hành động</th>
            </tr>
          </thead>
          <tbody className='divide-y divide-gray-600'>
            {currentUsers.map((user) => {
              const userRoleName = roles.find(r => r.id === user.roleId)?.name;
              return (
                <motion.tr
                  key={user.id}
                  layout // Thêm layout prop cho AnimatePresence (nếu dùng) hoặc hiệu ứng mượt hơn
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10}}
                  transition={{ duration: 0.3, delay: Math.random() * 0.05 }}
                  className="hover:bg-gray-700/60 transition-colors duration-150"
                >
                  <td className='px-6 py-4 whitespace-nowrap'>
                    <div className='flex items-center'>
                      <div className='flex-shrink-0 h-11 w-11'>
                        <div
                          className={`h-full w-full rounded-full bg-gradient-to-br ${
                            user.isActive
                              ? 'from-sky-500 to-indigo-600'
                              : 'from-gray-600 to-gray-700'
                          } flex items-center justify-center shadow-lg border-2 ${user.isActive ? 'border-sky-400/40' : 'border-gray-500/40'}`}
                          title={userRoleName || "Chưa có vai trò"}
                        >
                          {getRoleBasedAvatar(userRoleName, user.isActive)}
                        </div>
                      </div>
                      <div className='ml-4'>
                        <div className={`text-sm font-semibold ${user.isActive ? 'text-gray-100' : 'text-gray-500'}`}>
                          {user.fullName}
                        </div>
                         <div className={`text-xs ${user.isActive ? 'text-gray-400' : 'text-gray-600'}`}>ID: {user.id}</div>
                      </div>
                    </div>
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap'>
                    <div className={`text-sm ${user.isActive ? 'text-gray-300' : 'text-gray-500'}`}>{user.email}</div>
                    <div className={`text-xs mt-1 ${user.isActive ? 'text-gray-400' : 'text-gray-600'}`}>{user.phoneNumber}</div>
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap'>
                    <span
                      className={`px-3 py-1.5 inline-flex text-xs leading-5 font-semibold rounded-md cursor-pointer transition-all duration-150 ease-in-out transform hover:brightness-125
                        ${user.isActive ? (userRoleName?.toLowerCase() === 'admin' ? 'bg-red-600 text-red-100 shadow-md shadow-red-500/30' : 'bg-cyan-600 text-cyan-100 shadow-md shadow-cyan-500/30') 
                                       : 'bg-gray-600 text-gray-400 cursor-not-allowed'}`}
                      onClick={() => handleOpenRoleUpdateModal(user)}
                      title={user.isActive ? `Đổi vai trò: ${userRoleName || "N/A"}` : "Người dùng không hoạt động"}
                    >
                      {userRoleName || "Chưa có"}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <span
                      className={`px-3 py-1.5 inline-flex text-xs leading-5 font-semibold rounded-md shadow-sm ${
                        user.isActive
                          ? "bg-green-600 text-green-100 shadow-green-500/30"
                          : "bg-rose-600 text-rose-100 shadow-rose-500/30"
                      }`}
                      title={user.isActive ? "Đang hoạt động" : "Đã vô hiệu hóa"}
                    >
                      {user.isActive ? "Hoạt động" : "Vô hiệu"}
                    </span>
                  </td>
                  <td className='px-6 py-4 whitespace-nowrap text-sm text-gray-300 text-center'>
                    <button
                      className='text-indigo-400 hover:text-indigo-300 p-2 rounded-full hover:bg-gray-600/40 transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-indigo-500'
                      title="Chỉnh sửa chi tiết người dùng"
                      onClick={() => handleOpenUpdateDrawer(user)}
                    >
                      <Pencil size={18} />
                    </button>
                    <button
                      className='text-red-400 hover:text-red-300 p-2 ml-1.5 rounded-full hover:bg-gray-600/40 transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-red-500'
                      title="Xóa người dùng"
                      onClick={() => handleDeleteUser(user.id, user.fullName)}
                    >
                      <Trash2 size={18} />
                    </button>
                  </td>
                </motion.tr>
              );
            })}
          </tbody>
        </table>
        {filteredUsers.length === 0 && !loading && (
          <Typography sx={{ textAlign: 'center', p: 5, color: 'rgb(156 163 175)', fontStyle: 'italic', mt:2 }}>
            Không tìm thấy người dùng nào phù hợp với bộ lọc hoặc tìm kiếm của bạn.
          </Typography>
        )}
      </div>

      {totalPages > 0 && ( // Chỉ hiển thị pagination nếu có dữ liệu sau khi lọc
        <Box sx={{ 
        display: 'flex', 
        flexDirection: { xs: 'column', sm: 'row' }, // Stack trên mobile
        justifyContent: 'space-between', 
        alignItems: 'center', 
        p: 2, 
        mt: 'auto', 
        borderTop:'1px solid rgba(75, 85, 99, 0.5)', 
        paddingTop: {xs: '1rem', sm: '0.5rem'}, // Điều chỉnh padding
        gap: { xs: 2, sm: 0 } // Khoảng cách giữa các item trên mobile
    }}>
        <Box display="flex" alignItems="center" gap={2} sx={{ flexDirection: { xs: 'column', sm: 'row' }, alignItems: 'center' }}>
            <Typography sx={{fontSize: '0.875rem', color: '#9CA3AF', whiteSpace: 'nowrap'}}>
                Hiển thị {Math.min((currentPage - 1) * usersPerPage + 1, filteredUsers.length)} - {Math.min(currentPage * usersPerPage, filteredUsers.length)} của {filteredUsers.length}
            </Typography>
            <FormControl size="small" variant="outlined" sx={{ 
                minWidth: 130, 
                '& .MuiOutlinedInput-root': { borderRadius:'8px', bgcolor: 'rgba(30,41,59,0.7)', '& fieldset': { borderColor: '#4B5563' }, '&:hover fieldset': { borderColor: '#4F46E5' }}, 
                '& .MuiSvgIcon-root': { color: '#9CA3AF' },
                '.MuiInputLabel-root': {color: '#9CA3AF'} // Đảm bảo label có màu đúng
            }}>
                <InputLabel id="users-per-page-label">Số mục</InputLabel>
                <Select
                    labelId="users-per-page-label"
                    value={usersPerPage}
                    onChange={handleUsersPerPageChange}
                    label="Số mục"
                    sx={{color: 'white', borderRadius:'8px'}}
                    MenuProps={{ PaperProps: { sx: { bgcolor: '#1F2937', color: 'white', borderRadius: '8px', border:'1px solid #374151' }}}}
                >
                    {[5, 10, 20, 50, 100].map(size => (
                        <MenuItem key={size} value={size} sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: '#4F46E5!important', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: '#4338CA!important'} }}>{size} / trang</MenuItem>
                    ))}
                </Select>
            </FormControl>
        </Box>
        <Pagination
            count={totalPages}
            page={currentPage}
            onChange={handlePageChange}
            color="primary"
            size="small" // Giữ size small cho gọn
            sx={{ /* ... style pagination giữ nguyên ... */ }}
        />
    </Box>
      )}

      {/* Modal cập nhật vai trò (đơn giản) */}
      {selectedUser && (
        <Modal open={isRoleUpdateModalOpen} onClose={handleCloseRoleUpdateModal} aria-labelledby="update-role-modal-title">
          <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: {xs: '90%', sm: 400}, bgcolor: 'rgba(30, 41, 59, 0.98)', backdropFilter: 'blur(8px)', border: '1px solid #374151', boxShadow: '0 20px 25px -5px rgba(0,0,0,0.3), 0 10px 10px -5px rgba(0,0,0,0.2)', p: {xs:2.5, sm:3.5}, borderRadius: '12px', color: '#E5E7EB' }}>
            <Typography id="update-role-modal-title" variant="h6" component="h2" sx={{ color: '#D1D5DB', mb: 2.5, fontWeight:'bold' }}>
              Cập nhật vai trò cho: <span className="text-indigo-400">{selectedUser.fullName}</span>
            </Typography>
            <FormControl fullWidth>
              <InputLabel id="role-select-label" sx={{ color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'} }}>Vai trò mới</InputLabel>
              <Select
                labelId="role-select-label"
                label="Vai trò mới"
                value={roleForSelectedUser}
                onChange={(e) => setRoleForSelectedUser(e.target.value)}
                sx={{ bgcolor: 'rgba(55, 65, 81, 0.7)', color: 'white', '& .MuiSvgIcon-root': { color: '#9CA3AF' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#4F46E5' }, '.MuiOutlinedInput-notchedOutline': { borderColor: '#4B5563' }, '&.Mui-focused .MuiOutlinedInput-notchedOutline': { borderColor: '#A5B4FC', borderWidth: '2px' }, borderRadius:'8px' }}
                MenuProps={{ PaperProps: { sx: { bgcolor: '#1F2937', color: 'white', borderRadius: '8px', border:'1px solid #374151' }}}}
              >
                {roles.map((role) => (
                  <MenuItem key={role.id} value={role.id} sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: '#4F46E5!important', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: '#4338CA!important'} }}>
                    {role.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <Button variant="contained" onClick={handleUpdateUserRole} sx={{ mt: 3, bgcolor: '#4F46E5', '&:hover': { bgcolor: '#4338CA' }, textTransform:'none', fontWeight:'bold', py:1.2, borderRadius:'8px' }} fullWidth>
              Lưu thay đổi vai trò
            </Button>
          </Box>
        </Modal>
      )}

      {/* Modal thêm người dùng mới */}
      <Modal open={isAddUserModalOpen} onClose={handleCloseAddUserModal} aria-labelledby="add-user-modal-title">
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: {xs: '90%', sm: 450}, bgcolor: 'rgba(30, 41, 59, 0.98)', backdropFilter: 'blur(8px)', border: '1px solid #374151', boxShadow: '0 20px 25px -5px rgba(0,0,0,0.3), 0 10px 10px -5px rgba(0,0,0,0.2)', p: {xs:2.5, sm:3.5}, borderRadius: '12px', color: '#E5E7EB', display: 'flex', flexDirection: 'column', gap: 2.5 }}>
          <Typography id="add-user-modal-title" variant="h6" component="h2" textAlign="center" sx={{ color: '#D1D5DB', mb: 1, fontWeight:'bold' }}>
            Thêm Người Dùng Mới
          </Typography>
          {[
            { label: "Họ và tên", name: "fullName", type: "text" },
            { label: "Email", name: "email", type: "email" },
            { label: "Số điện thoại", name: "phoneNumber", type: "tel" },
            { label: "Mật khẩu", name: "password", type: "password" },
          ].map(field => (
            <TextField key={field.name} label={field.label} name={field.name} type={field.type} value={newUser[field.name]} onChange={handleNewUserInputChange} variant="outlined" fullWidth 
                       InputLabelProps={{ sx: { color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'} } }} 
                       sx={{ '.MuiInputBase-input': { color: 'white' }, '& .MuiOutlinedInput-root': { borderRadius:'8px', bgcolor: 'rgba(55, 65, 81, 0.7)', '& fieldset': { borderColor: '#4B5563' }, '&:hover fieldset': { borderColor: '#4F46E5' }, '&.Mui-focused fieldset': { borderColor: '#A5B4FC', borderWidth: '2px' }}}} />
          ))}
          <FormControl fullWidth variant="outlined" sx={{ '& .MuiOutlinedInput-root': { borderRadius:'8px', bgcolor: 'rgba(55, 65, 81, 0.7)', '& fieldset': { borderColor: '#4B5563' }, '&:hover fieldset': { borderColor: '#4F46E5' }, '&.Mui-focused fieldset': { borderColor: '#A5B4FC', borderWidth: '2px'}}, '& .MuiSvgIcon-root': { color: '#9CA3AF' }}}>
            <InputLabel id="add-user-role-label" sx={{ color: '#9CA3AF', '&.Mui-focused': {color: '#A5B4FC'} }}>Vai trò</InputLabel>
            <Select labelId="add-user-role-label" label="Vai trò" name="roleId" value={newUser.roleId} onChange={handleNewUserInputChange} displayEmpty sx={{ color: newUser.roleId ? 'white' : '#9CA3AF', borderRadius:'8px' }} MenuProps={{ PaperProps: { sx: { bgcolor: '#1F2937', color: 'white', borderRadius: '8px', border:'1px solid #374151' }}}}>
              <MenuItem value="" disabled sx={{ color: '#9CA3AF', fontStyle:'italic' }}><em>--- Chọn vai trò ---</em></MenuItem>
              {roles.map((role) => (
                <MenuItem key={role.id} value={role.id} sx={{ '&:hover': { bgcolor: '#374151'}, '&.Mui-selected': {bgcolor: '#4F46E5!important', fontWeight:'bold'}, '&.Mui-selected:hover':{bgcolor: '#4338CA!important'} }}>{role.name}</MenuItem>
              ))}
            </Select>
          </FormControl>
          <Button variant="contained" onClick={handleAddNewUser} fullWidth sx={{ textTransform: 'none', fontWeight: 'bold', py: 1.5, borderRadius: '8px', bgcolor: '#4F46E5', '&:hover': { bgcolor: '#4338CA' }}}>
            Thêm Người Dùng
          </Button>
        </Box>
      </Modal>

      <RoleDrawer visible={roleDrawerVisible} onClose={handleCloseRoleDrawer} roles={roles} setRoles={setRoles} />

      <UpdateUserDrawer
        open={updateDrawerVisible}
        onClose={handleCloseUpdateDrawer}
        user={selectedUser}
        roles={roles}
        onUserUpdated={handleUserUpdated}
      />
    </motion.div>
  );
};

export default UsersTable;
```

### ClientApp\src\components\Auth\AuthModal.jsx
```jsx
import React, { useState } from "react";
import { Modal, Button } from "flowbite-react";
import axios from "axios";
import "./AuthModal.css";

const AuthModal = ({ isOpen, onClose }) => {
  const [email, setEmail] = useState("");
  const [fullName, setFullName] = useState("");
  const [phoneNumber, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [step, setStep] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");

  const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const isValidPassword = (password) => /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(password);

  const handleCheckEmail = async () => {
    if (!email) return setError("Email không được để trống!");
    if (!isValidEmail(email)) return setError("Email không hợp lệ!");

    setError("");
    setIsLoading(true);
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/check-email`, { email });
      setStep(response.data.exists ? 1 : 2);
    } catch (error) {
      setError("Lỗi khi kiểm tra email! Vui lòng thử lại.");
    }
    setIsLoading(false);
  };

  const handleLogin = async () => {
    if (!password) return setError("Mật khẩu không được để trống!");

    setError("");
    setIsLoading(true);
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/login`, { email, password });
      localStorage.setItem("token", response.data.token);
      onClose();
      setTimeout(() => window.location.reload(), 300);
    } catch (error) {
      setError("Sai tài khoản hoặc mật khẩu!");
    }
    setIsLoading(false);
  };

  const handleRegister = async () => {
    if (!isValidPassword(password)) return setError("Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và ký tự đặc biệt!");
    if (password !== confirmPassword) return setError("Mật khẩu xác nhận không khớp!");

    setError("");
    setIsLoading(true);
    try {
      await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/Auth/register`, { email, fullName, phoneNumber, password });
      setStep(1);
    } catch (error) {
      setError("Đăng ký thất bại! Hãy thử lại.");
    }
    setIsLoading(false);
  };

  return (
    <Modal show={isOpen} onClose={onClose}>
      <div className="modal-overlay">
        <div className="relative bg-white rounded-xl shadow-lg text-black w-full max-w-md max-h-full">
          <div className="flex items-center justify-between p-4 md:p-5 border-b border-gray-200">
            {step !== 0 && (
              <button className="text-gray-400 hover:bg-gray-200 rounded-lg text-sm w-8 h-8" onClick={() => setStep(0)}>◀</button>
            )}
            <button className="text-gray-400 hover:bg-gray-200 rounded-lg text-sm w-8 h-8" onClick={onClose}>✖</button>
          </div>
          <h3 className="text-2xl font-bold text-black text-center">
            {step === 0 ? "Đăng nhập/Đăng ký" : step === 1 ? "Đăng nhập" : step === 2 ? "Thông tin cá nhân" : "Đăng ký"}
          </h3>
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          <div className="p-4 space-y-4 flex flex-col items-center">
            {step === 0 && (
              <>
                <input type="email" placeholder="Nhập email của bạn" value={email} onChange={(e) => setEmail(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleCheckEmail} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang kiểm tra..." : "Tiếp tục"}</Button>
              </>
            )}
            {step === 1 && (
              <>
                <input type="password" placeholder="Nhập mật khẩu" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleLogin} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang đăng nhập..." : "Đăng nhập"}</Button>
              </>
            )}
            {step === 2 && (
              <>
                <input type="text" placeholder="Họ và tên" value={fullName} onChange={(e) => setFullName(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <input type="text" placeholder="Số điện thoại" value={phoneNumber} onChange={(e) => setPhone(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={() => setStep(3)} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5">Tiếp tục</Button>
              </>
            )}
            {step === 3 && (
              <>
                <input type="password" placeholder="Nhập mật khẩu" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <input type="password" placeholder="Xác nhận mật khẩu" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} className="w-full border-gray-300 focus:ring-black focus:border-black h-12 px-3" />
                <Button onClick={handleRegister} className="mt-4 bg-red-700 hover:bg-red-800 text-white font-medium rounded-lg px-5 py-2.5" disabled={isLoading}>{isLoading ? "Đang đăng ký..." : "Đăng ký"}</Button>
              </>
            )}
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default AuthModal;

```

### ClientApp\src\components\BestSellerManager\BestSellerManager.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { AutoComplete, Button, Table, InputNumber, message, Popconfirm, Space } from 'antd';
import { SearchOutlined, DeleteOutlined } from '@ant-design/icons';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

const BestSellerManager = ({ sectionData, onContentChange }) => {
    const [searchText, setSearchText] = useState('');
    const [searchedProducts, setSearchedProducts] = useState([]);
    const [bestSellerItems, setBestSellerItems] = useState(sectionData.items || []);

    useEffect(() => {
        setBestSellerItems(sectionData.items || []);
    }, [sectionData.items]);

    const fetchProductDetails = async (productIds) => {
        if (productIds.length === 0) return [];
        try {
            const { data } = await axios.get(`${API_BASE_URL}/api/Products/by-ids?ids=${productIds.join(',')}`);
            return data || [];
        } catch (error) {
            message.error('Failed to fetch product details.');
            return [];
        }
    };

    const handleSearch = async (value) => {
        if (!value) {
            setSearchedProducts([]);
            return;
        }
        try {
            const { data } = await axios.get(`${API_BASE_URL}/api/Products/search?keyword=${value}`);
            const options = (data.$values || data).map(p => ({ value: p.name, key: p.id, product: p }));
            setSearchedProducts(options);
        } catch (error) {
            setSearchedProducts([]);
        }
    };

    const onSelect = (value, option) => {
        const product = option.product;
        if (bestSellerItems.some(item => item.productId === product.id)) {
            message.warning('Product is already in the best seller list.');
            return;
        }
        const newItem = { productId: product.id, overridePrice: null };
        const updatedItems = [...bestSellerItems, newItem];
        setBestSellerItems(updatedItems);
        onContentChange('best_seller', null, { ...sectionData, items: updatedItems });
        setSearchText(''); // Clear search input
    };

    const handleUpdate = (productId, field, value) => {
        const updatedItems = bestSellerItems.map(item =>
            item.productId === productId ? { ...item, [field]: value } : item
        );
        setBestSellerItems(updatedItems);
        onContentChange('best_seller', null, { ...sectionData, items: updatedItems });
    };

    const handleRemove = (productId) => {
        const updatedItems = bestSellerItems.filter(item => item.productId !== productId);
        setBestSellerItems(updatedItems);
        onContentChange('best_seller', null, { ...sectionData, items: updatedItems });
    };

    const columns = [
        { title: 'Product ID', dataIndex: 'productId', key: 'productId' },
        {
            title: 'Product Name',
            key: 'productName',
            render: (text, record) => {
                // This will require fetching product details, which is done in BestSellers.jsx
                // For admin, we might need a separate lookup or pass product details from parent
                return `Product ${record.productId}`;
            }
        },
        {
            title: 'Override Price',
            dataIndex: 'overridePrice',
            key: 'overridePrice',
            render: (price, record) => (
                <InputNumber
                    defaultValue={price}
                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                    parser={value => value.replace(/\s?|(,*)/g, '')}
                    onBlur={(e) => handleUpdate(record.productId, 'overridePrice', parseFloat(e.target.value.replace(/,/g, '')))}
                    style={{ width: 150 }}
                />
            )
        },
        {
            title: 'Action',
            key: 'action',
            render: (_, record) => (
                <Popconfirm title="Are you sure?" onConfirm={() => handleRemove(record.productId)}>
                    <Button danger icon={<DeleteOutlined />} />
                </Popconfirm>
            )
        }
    ];

    return (
        <div>
            <AutoComplete
                style={{ width: '100%', marginBottom: 16 }}
                onSearch={handleSearch}
                onSelect={onSelect}
                placeholder="Search and add a product..."
                options={searchedProducts}
                value={searchText}
                onChange={setSearchText}
            >
                <InputNumber addonAfter={<SearchOutlined />} />
            </AutoComplete>

            <Table
                columns={columns}
                dataSource={bestSellerItems}
                rowKey="productId"
                pagination={false}
            />
        </div>
    );
};

export default BestSellerManager;

```

### ClientApp\src\components\BestSellers\BestSellers.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductCard from '@/components/shared/ProductCard';
// File removed. Migrated to BestSellers.jsx
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation } from 'swiper/modules';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';

const BestSellerSection = ({ data }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProducts = async () => {
      if (!data.productIds || data.productIds.length === 0) {
        setLoading(false);
        return;
      }
      try {
        setLoading(true);
        // Assuming an API endpoint to fetch products by a list of IDs
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products/by-ids?ids=${data.productIds.join(',')}`);
        setProducts(response.data);
      } catch (error) {
        console.error('Failed to fetch best seller products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [data.productIds]);

  if (!data.enabled) {
    return null; // Don't render if section is not enabled
  }

  if (loading) {
    return <div>Loading best sellers...</div>; // Or a proper skeleton loader
  }

  if (products.length === 0) {
    return null; // Don't render if no products are found
  }

  return (
    <section className="py-16 md:py-24 bg-primary-dark">
      <div className="container mx-auto px-4">
        <h2 className="font-display text-3xl md:text-4xl font-bold text-center text-white mb-12">
          {data.title}
        </h2>
        <Swiper
          modules={[Navigation]}
          spaceBetween={30}
          slidesPerView={1}
          navigation
          breakpoints={{
            640: {
              slidesPerView: 2,
            },
            768: {
              slidesPerView: 3,
            },
            1024: {
              slidesPerView: 4,
            },
          }}
          className="!pb-10"
        >
          {products.map((product) => (
            <SwiperSlide key={product.id}>
              <ProductCard product={product} />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </section>
  );
};

export default BestSellerSection;
```

### ClientApp\src\components\BestSellers\BestSellers.jsx
```jsx
import React, { useState, useEffect } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Autoplay } from "swiper/modules";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/autoplay";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

const BestSellers = ({ data }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchBestSellerProducts = async () => {
      if (!data || !data.items || data.items.length === 0) {
        setLoading(false);
        return;
      }

      const productIds = data.items.map(item => item.productId);
      try {
        setLoading(true);
        const response = await axios.get(`${API_BASE_URL}/api/Products/by-ids?ids=${productIds.join(',')}`);
        const fetchedProducts = response.data.$values || response.data || [];

        // Map fetched products with override prices from config
        const combinedProducts = fetchedProducts.map(product => {
          const configItem = data.items.find(item => item.productId === product.id);
          const primaryImage = product.images?.find(img => img.isPrimary) || product.images?.[0];
          const imageUrl = primaryImage ? (primaryImage.imageUrl.startsWith("http") ? primaryImage.imageUrl : `${API_BASE_URL}/${primaryImage.imageUrl}`) : "https://via.placeholder.com/300";

          // Determine prices
          const originalVariantPrice = product.variants?.[0]?.price || 0;
          const displayPrice = configItem?.overridePrice ?? originalVariantPrice;
          const oldPrice = (configItem?.overridePrice && configItem.overridePrice < originalVariantPrice) ? originalVariantPrice : null;
          const discountAmount = oldPrice ? oldPrice - displayPrice : 0;

          return {
            ...product,
            image: imageUrl,
            oldPrice: oldPrice,
            newPrice: displayPrice,
            discountAmount: discountAmount,
            // You might want to calculate discount percentage here if needed
          };
        });
        setProducts(combinedProducts);
      } catch (err) {
        setError("Không thể tải sản phẩm bán chạy: " + err.message);
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchBestSellerProducts();
  }, [data]);

  if (!data || !data.enabled || products.length === 0) {
    return null; // Don't render if section is not enabled or no products
  }

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12 space-x-2">
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full"></div>
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full" style={{ animationDelay: '0.1s' }}></div>
        <div className="animate-bounce w-4 h-4 bg-red-500 rounded-full" style={{ animationDelay: '0.2s' }}></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mx-auto max-w-md my-6 rounded-lg shadow-md">
        <p className="font-bold">Lỗi!</p>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="w-full flex justify-center py-6">
      <div className="max-w-[1200px] w-full px-4 bg-white bg-opacity-90 rounded-xl shadow-xl p-6 backdrop-blur-sm">
        <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center relative">
          <span className="relative z-10 px-4 bg-white bg-opacity-90 rounded-full">
            {data.title || "Sản phẩm bán chạy"}
          </span>
          <span className="absolute left-0 right-0 top-1/2 h-0.5 bg-gradient-to-r from-transparent via-red-400 to-transparent z-0"></span>
        </h2>
        
        <Swiper
          modules={[Navigation, Autoplay]}
          navigation
          autoplay={{
            delay: 3000,
            disableOnInteraction: false,
          }}
          spaceBetween={20}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 2 },
            768: { slidesPerView: 3 },
            1024: { slidesPerView: 4 },
          }}
          className="pb-6"
        >
          {products.map((product) => (
            <SwiperSlide key={product.id} className="flex justify-center">
              <div
                className="bg-white bg-opacity-95 p-4 rounded-xl shadow-lg border border-gray-100 hover:shadow-xl hover:border-red-300 transition-all duration-300 relative overflow-hidden group"
                onClick={() => navigate(`/product/${product.id}`)}
              >
                {/* Discount ribbon - only show if there's a discount amount */}
                {product.discountAmount > 0 && (
                  <div className="absolute top-0 right-0 bg-red-600 text-white text-xs font-bold px-2 py-1 transform rotate-12 translate-x-2 -translate-y-1 z-10">
                    -{((product.discountAmount / product.oldPrice) * 100).toFixed(0)}%
                  </div>
                )}
                
                <div className="relative h-40 mb-3 overflow-hidden rounded-lg">
                  <img
                    src={product.image}
                    alt={product.name}
                    className="w-full h-full object-contain transition-transform duration-500 group-hover:scale-110"
                    onError={(e) => { 
                      e.target.onerror = null; 
                      e.target.src = "https://via.placeholder.com/150"; 
                    }}
                  />
                </div>

                <div className="text-gray-700 text-sm space-y-2">
                  <div className="flex justify-between items-center">
                    {product.oldPrice && (
                      <span className="text-gray-500 line-through">
                        {product.oldPrice.toLocaleString('vi-VN')}đ
                      </span>
                    )}
                    <span className="text-red-500 font-semibold ml-auto">
                      {product.newPrice.toLocaleString('vi-VN')}đ
                    </span>
                  </div>
                  
                  {product.discountAmount > 0 && (
                    <p className="text-green-600 text-sm font-medium bg-green-50 px-2 py-1 rounded-full inline-block">
                      Tiết kiệm {product.discountAmount.toLocaleString('vi-VN')}đ
                    </p>
                  )}
                  
                  <h3 className="text-gray-800 font-medium text-base truncate group-hover:text-red-600 transition-colors">
                    {product.name}
                  </h3>
                  
                  {/* Features are not directly available from product DTO, remove or adapt */}
                  {/* <ul className="text-xs text-gray-600 space-y-1">
                    {product.features.map((feature, index) => (
                      <li key={index} className="flex items-center">
                        <span className="w-1.5 h-1.5 bg-red-400 rounded-full mr-2"></span>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul> */}
                </div>
              </div>
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
};

export default BestSellers;

```

### ClientApp\src\components\Chat\AdminChatDashboard.jsx
```jsx
import React, { useState, useEffect, useRef } from "react";
import {
  MessageSquare,
  Send,
  User,
  Bot,
  AlertCircle,
  Clock,
  CheckCircle,
  Search,
  Filter,
  RefreshCw,
} from "lucide-react";
import { HubConnectionBuilder, LogLevel } from "@microsoft/signalr";

// Import timezone test utilities for debugging
import {
  testTimezoneFormatting,
  compareTimezones,
} from "../../utils/timezoneTest";

// Utility functions for formatting time to Vietnam timezone (UTC+7)
const formatVietnamTime = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    // Format with Vietnam timezone
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      timeZone: "Asia/Ho_Chi_Minh",
      hour12: false,
    });
  } catch (error) {
    console.error("Error formatting time:", error);
    return "";
  }
};

const formatVietnamDate = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    const now = new Date();

    // Convert to Vietnam timezone for comparison
    const vietnamDate = new Date(
      date.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })
    );
    const vietnamNow = new Date(
      now.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })
    );

    // Check if it's today
    if (vietnamDate.toDateString() === vietnamNow.toDateString()) {
      return formatVietnamTime(dateString);
    }

    // Check if it's yesterday
    const yesterday = new Date(vietnamNow);
    yesterday.setDate(yesterday.getDate() - 1);
    if (vietnamDate.toDateString() === yesterday.toDateString()) {
      return `Hôm qua ${formatVietnamTime(dateString)}`;
    }

    // Format as date with time
    return date.toLocaleDateString("vi-VN", {
      month: "2-digit",
      day: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      timeZone: "Asia/Ho_Chi_Minh",
      hour12: false,
    });
  } catch (error) {
    console.error("Error formatting date:", error);
    return "";
  }
};

// Format for session list (shorter format)
const formatSessionTime = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    const now = new Date();

    // Convert to Vietnam timezone
    const vietnamDate = new Date(
      date.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })
    );
    const vietnamNow = new Date(
      now.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" })
    );

    // If today, show only time
    if (vietnamDate.toDateString() === vietnamNow.toDateString()) {
      return date.toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "Asia/Ho_Chi_Minh",
        hour12: false,
      });
    }

    // If this week, show day and time
    const diffTime = vietnamNow - vietnamDate;
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 7) {
      return date.toLocaleDateString("vi-VN", {
        weekday: "short",
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "Asia/Ho_Chi_Minh",
        hour12: false,
      });
    }

    // Older than a week, show date
    return date.toLocaleDateString("vi-VN", {
      month: "2-digit",
      day: "2-digit",
      timeZone: "Asia/Ho_Chi_Minh",
    });
  } catch (error) {
    console.error("Error formatting session time:", error);
    return "";
  }
};

const AdminChatDashboard = () => {
  const [sessions, setSessions] = useState([]);
  const [selectedSession, setSelectedSession] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [connection, setConnection] = useState(null);
  const [connectionReady, setConnectionReady] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [notification, setNotification] = useState(null);
  const messagesEndRef = useRef(null);
  const selectedSessionRef = useRef(null);

  const API_BASE_URL =
    process.env.REACT_APP_API_BASE_URL || "https://localhost:7107";

  useEffect(() => {
    initializeConnection();
    fetchSessions();

    // Auto refresh every 30 seconds
    const interval = setInterval(fetchSessions, 30000);
    return () => {
      clearInterval(interval);
      // Cleanup SignalR connection
      if (connection) {
        connection.stop().catch(console.error);
      }
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // Cleanup connection when component unmounts
  useEffect(() => {
    return () => {
      if (connection && connection.state !== "Disconnected") {
        connection.stop().catch(console.error);
      }
    };
  }, [connection]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Ensure connection is ready before using it
  useEffect(() => {
    if (connection && connection.state === "Connected") {
      console.log("🔥 ADMIN: Connection is ready for use");
    }
  }, [connection]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const initializeConnection = async () => {
    try {
      // Cleanup existing connection first
      if (connection) {
        console.log("🔥 ADMIN: Cleaning up existing connection");
        await connection.stop();
        setConnection(null);
        setConnectionReady(false);
      }

      const token = localStorage.getItem("token");

      const newConnection = new HubConnectionBuilder()
        .withUrl(`${API_BASE_URL}/chatHub?access_token=${token}`, {
          skipNegotiation: false,
          accessTokenFactory: () => token,
          headers: {}
        })
        .withAutomaticReconnect([0, 2000, 10000, 30000])
        .configureLogging(LogLevel.Information)
        .build();

      // Handle connection errors
      newConnection.onclose((error) => {
        console.log("🔥 ADMIN: SignalR connection closed:", error);
        if (error) {
          console.error("🔥 ADMIN: Connection closed with error:", error);
        }
      });

      newConnection.onreconnecting((error) => {
        console.log("🔥 ADMIN: SignalR reconnecting:", error);
      });

      newConnection.onreconnected((connectionId) => {
        console.log("🔥 ADMIN: SignalR reconnected:", connectionId);
        // Rejoin admin group after reconnection
        newConnection.invoke("JoinAdminGroup").catch(console.error);
        // Rejoin session group if session is selected
        if (selectedSessionRef.current) {
          const sessionIdentifier =
            selectedSessionRef.current.sessionId ||
            selectedSessionRef.current.id;
          newConnection
            .invoke("JoinSession", sessionIdentifier)
            .catch(console.error);
        }
      });

      // Set up event handlers
      newConnection.on("NewMessage", (message) => {
        console.log("🔥 ADMIN: Received new message:", message); // Enhanced debug log
        const currentSession = selectedSessionRef.current;
        console.log("🔥 ADMIN: Current selected session:", currentSession?.id);
        console.log("🔥 ADMIN: Message session ID:", message.chatSessionId);

        // If this message is for the currently selected session, add it to messages
        if (currentSession && message.chatSessionId === currentSession.id) {
          console.log("🔥 ADMIN: Adding message to current session");
          setMessages((prev) => {
            // Check for duplicates
            const messageExists = prev.some((m) => m.id === message.id);
            if (messageExists) {
              console.log("🔥 ADMIN: Message already exists, skipping");
              return prev;
            }
            console.log("🔥 ADMIN: Adding new message to state");
            const newMessages = [...prev, message];
            // Auto-scroll to bottom when new message arrives
            setTimeout(() => {
              const messagesContainer = document.querySelector(
                ".messages-container"
              );
              if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
              }
            }, 100);
            return newMessages;
          });
        } else {
          console.log(
            "🔥 ADMIN: Message not for current session or no session selected"
          );
        }

        // Always show notification for new user messages to admin
        if (message.sender === "User") {
          const senderName = message.senderUser?.fullName || "Guest User";
          const notificationMsg = `New message from ${senderName}: ${message.content.substring(
            0,
            50
          )}${message.content.length > 50 ? "..." : ""}`;
          console.log("🔥 ADMIN: Showing notification:", notificationMsg);
          showNotification(notificationMsg);
        }

        // Update session list to reflect new activity (but don't fetch if message added to current session)
        if (!currentSession || message.chatSessionId !== currentSession.id) {
          console.log("🔥 ADMIN: Refreshing sessions list");
          fetchSessions();
        }
      });

      newConnection.on("NewChatSession", (session) => {
        // Show notification for new chat session
        showNotification(
          `New chat session from ${
            session.user?.fullName || session.guestName || "Guest"
          }`
        );
        fetchSessions();
      });

      newConnection.on("ChatEscalated", (session) => {
        // Show notification for new escalated chat
        showNotification(
          `New chat escalated from ${
            session.user?.fullName || session.guestName || "Guest"
          }`
        );
        fetchSessions();
      });

      await newConnection.start();
      console.log("🔥 ADMIN: SignalR connection started successfully");

      // Join admin group
      try {
        await newConnection.invoke("JoinAdminGroup");
        console.log("🔥 ADMIN: Successfully joined admin group");
      } catch (joinError) {
        console.error("🔥 ADMIN: Failed to join admin group:", joinError);
        // Continue anyway, might be an auth issue
      }

      setConnection(newConnection);
      setConnectionReady(true);
      console.log("🔥 ADMIN: SignalR setup complete");
    } catch (error) {
      console.error("🔥 ADMIN: SignalR connection failed:", error);
      setConnectionReady(false);
      // Retry connection after 5 seconds
      setTimeout(() => {
        console.log("🔥 ADMIN: Retrying SignalR connection...");
        initializeConnection();
      }, 5000);
    }
  };

  const fetchSessions = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        console.error("No token found for admin authentication");
        return;
      }

      console.log(
        "Fetching sessions with token:",
        token.substring(0, 20) + "..."
      );

      const response = await fetch(`${API_BASE_URL}/api/chat/admin/sessions`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      console.log("Sessions response status:", response.status);

      if (response.ok) {
        const data = await response.json();
        console.log("Sessions fetched successfully:", data);
        setSessions(data);
      } else {
        const errorText = await response.text();
        console.error(
          "Failed to fetch sessions:",
          response.status,
          response.statusText,
          errorText
        );
        if (response.status === 401) {
          console.error("Unauthorized - check admin token and role");
        }
      }
    } catch (error) {
      console.error("Error fetching sessions:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const selectSession = async (session) => {
    console.log("Selecting session:", session);
    setSelectedSession(session);
    selectedSessionRef.current = session; // Update ref for real-time message handling

    try {
      const token = localStorage.getItem("token");
      // Use sessionId or fallback to id
      const sessionIdentifier = session.sessionId || session.id;
      console.log("Fetching messages for session:", sessionIdentifier);

      const response = await fetch(
        `${API_BASE_URL}/api/chat/session/${sessionIdentifier}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      console.log("Session messages response status:", response.status);

      if (response.ok) {
        const sessionData = await response.json();
        console.log("Session data received:", sessionData);
        console.log("Messages count:", sessionData.messages?.length || 0);
        setMessages(sessionData.messages || []);

        // Join session group for real-time updates
        if (connection && connection.state === "Connected") {
          try {
            await connection.invoke("JoinSession", sessionIdentifier);
            console.log("Joined session group:", sessionIdentifier);
          } catch (joinError) {
            console.error("Failed to join session group:", joinError);
          }
        } else {
          console.warn("Cannot join session group - connection not ready");
        }
      } else {
        const errorText = await response.text();
        console.error(
          "Failed to fetch session messages:",
          response.status,
          response.statusText,
          errorText
        );
      }
    } catch (error) {
      console.error("Error fetching session messages:", error);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !selectedSession) return;

    const messageText = newMessage.trim();
    setNewMessage("");

    try {
      const token = localStorage.getItem("token");
      const sessionIdentifier = selectedSession.sessionId || selectedSession.id;
      const response = await fetch(
        `${API_BASE_URL}/api/chat/${sessionIdentifier}/admin-message`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({
            content: messageText,
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to send message");
      }

      // Don't add message here - let SignalR handle it to avoid duplicates
    } catch (error) {
      console.error("Error sending admin message:", error);
      // Add error handling
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now(),
          content: "Lỗi khi gửi tin nhắn. Vui lòng thử lại.",
          type: "Text",
          sender: "System",
          sentAt: new Date().toISOString(),
        },
      ]);
    }
  };

  const showNotification = (message) => {
    // Fallback notification if browser notifications fail
    try {
      if (
        typeof window !== "undefined" &&
        window.Notification &&
        Notification.permission === "granted"
      ) {
        new Notification("SHN-Gear Chat", {
          body: message,
          icon: "/favicon.ico",
        });
      } else {
        // Fallback to console notification
        console.log("📢 NOTIFICATION:", message);
      }
    } catch (error) {
      console.warn("Browser notification failed:", error);
      console.log("📢 NOTIFICATION (fallback):", message);
    }

    // Always show in-app notification
    setNotification(message);
    setTimeout(() => setNotification(null), 5000);
  };

  // Debug function to test connection
  const debugConnection = () => {
    console.log("🔍 DEBUG CONNECTION STATUS:");
    console.log("Connection:", connection);
    console.log("Connection state:", connection?.state);
    console.log("Connection ready:", connectionReady);
    console.log("Selected session:", selectedSessionRef.current);

    // Test timezone formatting
    console.log("🕐 TESTING TIMEZONE FORMATTING:");
    testTimezoneFormatting();

    // Test with sample message timestamp
    if (messages.length > 0) {
      const sampleMessage = messages[0];
      console.log("Sample message timestamp:", sampleMessage.sentAt);
      compareTimezones(sampleMessage.sentAt);
    }

    if (connection && connection.state === "Connected") {
      console.log("✅ Connection is active");
      // Test sending a ping to admin group
      connection
        .invoke("JoinAdminGroup")
        .then(() => console.log("✅ Successfully rejoined admin group"))
        .catch((err) => console.error("❌ Failed to rejoin admin group:", err));
    } else {
      console.log("❌ Connection not ready");
    }
  };

  const getSessionStatus = (session) => {
    if (session.status === "Escalated") return "escalated";
    if (session.requiresHumanSupport) return "needs-attention";
    return "active";
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "escalated":
        return "text-red-500";
      case "needs-attention":
        return "text-orange-500";
      default:
        return "text-green-500";
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "escalated":
        return <AlertCircle size={16} />;
      case "needs-attention":
        return <Clock size={16} />;
      default:
        return <CheckCircle size={16} />;
    }
  };

  const filteredSessions = sessions.filter((session) => {
    const matchesSearch =
      searchTerm === "" ||
      (session.user?.fullName || session.guestName || "Guest")
        .toLowerCase()
        .includes(searchTerm.toLowerCase());

    const matchesFilter =
      filterStatus === "all" || getSessionStatus(session) === filterStatus;

    return matchesSearch && matchesFilter;
  });

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full min-h-[400px] bg-transparent">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <span className="ml-3 text-gray-100 font-medium">Đang tải...</span>
      </div>
    );
  }

  return (
    <div className="flex h-full bg-gray-900 text-gray-100 flex-col md:flex-row">
      {/* Sessions List */}
      <div className="w-full md:w-1/3 bg-gray-800 border-r border-gray-700 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-700 bg-gray-800 flex-shrink-0">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-100">
              Chat Dashboard
            </h2>
            <div className="flex space-x-2">
              <button
                onClick={debugConnection}
                className="p-2 text-gray-400 hover:text-gray-200 rounded-md hover:bg-gray-700 transition-colors"
                title="Debug Connection"
              >
                🔍
              </button>
              <button
                onClick={fetchSessions}
                className="p-2 text-gray-400 hover:text-gray-200 rounded-md hover:bg-gray-700 transition-colors"
              >
                <RefreshCw size={18} />
              </button>
            </div>
          </div>

          {/* Search */}
          <div className="relative mb-3">
            <Search
              size={18}
              className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
            />
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Tìm kiếm khách hàng..."
              className="w-full pl-10 pr-4 py-2 bg-gray-700 border border-gray-600 text-gray-100 placeholder-gray-400 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Filter */}
          <div className="flex items-center space-x-2">
            <Filter size={16} className="text-gray-400" />
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="text-sm bg-gray-700 border border-gray-600 text-gray-100 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Tất cả</option>
              <option value="escalated">Đã chuyển</option>
              <option value="needs-attention">Cần chú ý</option>
              <option value="active">Hoạt động</option>
            </select>
          </div>
        </div>

        {/* Sessions */}
        <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800">
          {isLoading ? (
            <div className="text-center text-gray-400 mt-8">
              <RefreshCw
                size={24}
                className="mx-auto mb-4 text-gray-600 animate-spin"
              />
              <p>Đang tải...</p>
            </div>
          ) : filteredSessions.length === 0 ? (
            <div className="text-center text-gray-400 mt-8">
              <MessageSquare size={48} className="mx-auto mb-4 text-gray-600" />
              <p>Không có cuộc trò chuyện nào</p>
              <button
                onClick={fetchSessions}
                className="mt-2 text-blue-400 hover:text-blue-300 text-sm"
              >
                Tải lại
              </button>
            </div>
          ) : (
            filteredSessions.map((session) => {
              const status = getSessionStatus(session);
              const lastMessage =
                session.messages && session.messages.length > 0
                  ? session.messages[session.messages.length - 1]
                  : null;

              return (
                <div
                  key={session.id}
                  onClick={() => selectSession(session)}
                  className={`p-4 border-b border-gray-700 cursor-pointer hover:bg-gray-700 transition-colors ${
                    selectedSession?.id === session.id
                      ? "bg-blue-800 border-blue-600"
                      : ""
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2">
                        <User
                          size={16}
                          className="text-gray-400 flex-shrink-0"
                        />
                        <span className="font-medium text-gray-100 truncate">
                          {session.user?.fullName ||
                            session.guestName ||
                            "Guest"}
                        </span>
                        <div
                          className={`flex items-center space-x-1 ${getStatusColor(
                            status
                          )}`}
                        >
                          {getStatusIcon(status)}
                        </div>
                      </div>

                      {lastMessage && (
                        <p className="text-sm text-gray-400 truncate mt-1">
                          {lastMessage.sender === "AI" && (
                            <Bot size={12} className="inline mr-1" />
                          )}
                          {lastMessage.content}
                        </p>
                      )}

                      <div className="flex items-center justify-between mt-2">
                        <span className="text-xs text-gray-400">
                          {formatSessionTime(session.lastActivityAt)}
                        </span>
                        <span
                          className={`text-xs px-2 py-1 rounded-full font-medium ${
                            session.type === "AI"
                              ? "bg-green-800 text-green-200 border border-green-600"
                              : "bg-blue-800 text-blue-200 border border-blue-600"
                          }`}
                        >
                          {session.type}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })
          )}
        </div>
      </div>

      {/* Chat Area */}
      <div className="flex-1 flex flex-col bg-gray-900">
        {selectedSession ? (
          <>
            {/* Chat Header */}
            <div className="bg-gray-800 border-b border-gray-700 p-4 flex-shrink-0">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-gray-100">
                    {selectedSession.user?.fullName ||
                      selectedSession.guestName ||
                      "Guest"}
                  </h3>
                  <p className="text-sm text-gray-400">
                    {(selectedSession.user?.email ||
                      selectedSession.guestEmail) && (
                      <>
                        Email:{" "}
                        {selectedSession.user?.email ||
                          selectedSession.guestEmail}{" "}
                        •{" "}
                      </>
                    )}
                    Session: {selectedSession.sessionId} • Type:{" "}
                    {selectedSession.type} • Started:{" "}
                    {formatVietnamDate(selectedSession.createdAt)} (UTC+7)
                  </p>
                </div>
                <div
                  className={`flex items-center space-x-2 ${getStatusColor(
                    getSessionStatus(selectedSession)
                  )}`}
                >
                  {getStatusIcon(getSessionStatus(selectedSession))}
                  <span className="text-sm font-medium text-gray-100">
                    {getSessionStatus(selectedSession)
                      .replace("-", " ")
                      .toUpperCase()}
                  </span>
                </div>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 bg-gray-900 scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800">
              {messages.length === 0 ? (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center text-gray-400">
                    <MessageSquare
                      size={48}
                      className="mx-auto mb-4 text-gray-600"
                    />
                    <p>Chưa có tin nhắn nào</p>
                  </div>
                </div>
              ) : (
                messages.map((message) => {
                  const isAdmin = message.sender === "Admin";
                  const isUser = message.sender === "User";
                  const isAI = message.sender === "AI";
                  const isSystem = message.sender === "System";

                  return (
                    <div
                      key={message.id}
                      className={`mb-4 flex ${
                        isAdmin ? "justify-end" : "justify-start"
                      }`}
                    >
                      <div
                        className={`flex items-start space-x-2 max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl ${
                          isAdmin ? "flex-row-reverse space-x-reverse" : ""
                        }`}
                      >
                        {/* Avatar */}
                        <div
                          className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                            isAdmin
                              ? "bg-purple-500"
                              : isUser
                              ? "bg-blue-500"
                              : isAI
                              ? "bg-green-500"
                              : "bg-gray-500"
                          }`}
                        >
                          {isAdmin ? (
                            "👨‍💼"
                          ) : isUser ? (
                            <User size={16} color="white" />
                          ) : isAI ? (
                            <Bot size={16} color="white" />
                          ) : (
                            "🔔"
                          )}
                        </div>

                        {/* Message bubble */}
                        <div
                          className={`rounded-lg px-4 py-3 shadow-lg border ${
                            isAdmin
                              ? "bg-purple-600 text-white border-purple-500"
                              : isUser
                              ? "bg-blue-600 text-white border-blue-500"
                              : isSystem
                              ? "bg-gray-700 text-white border-gray-600"
                              : "bg-green-600 text-white border-green-500"
                          }`}
                        >
                          <div className="whitespace-pre-wrap text-sm font-semibold leading-relaxed">
                            {message.content}
                          </div>

                          {/* AI info */}
                          {message.aiConfidenceScore && (
                            <div
                              className={`text-xs mt-2 font-medium ${
                                isAdmin
                                  ? "text-purple-200"
                                  : isUser
                                  ? "text-blue-200"
                                  : isSystem
                                  ? "text-gray-300"
                                  : "text-green-200"
                              }`}
                            >
                              Confidence:{" "}
                              {(message.aiConfidenceScore * 100).toFixed(0)}%
                              {message.aiIntent &&
                                ` • Intent: ${message.aiIntent}`}
                            </div>
                          )}

                          <div
                            className={`text-xs mt-2 font-medium ${
                              isAdmin
                                ? "text-purple-200"
                                : isUser
                                ? "text-blue-200"
                                : isSystem
                                ? "text-gray-300"
                                : "text-green-200"
                            }`}
                          >
                            {formatVietnamTime(message.sentAt)} (UTC+7)
                            {message.senderUser &&
                              ` • ${message.senderUser.fullName}`}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Message Input */}
            <div className="bg-gray-800 border-t border-gray-700 p-4 flex-shrink-0">
              <div className="flex items-center space-x-2">
                <input
                  type="text"
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === "Enter" && !e.shiftKey) {
                      e.preventDefault();
                      sendMessage();
                    }
                  }}
                  placeholder="Nhập tin nhắn..."
                  className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 text-gray-100 placeholder-gray-400 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <button
                  onClick={sendMessage}
                  disabled={!newMessage.trim()}
                  className="bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 disabled:bg-gray-600 disabled:text-gray-400 transition-colors"
                >
                  <Send size={16} />
                </button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center bg-gray-900">
            <div className="text-center text-gray-300">
              <MessageSquare size={64} className="mx-auto mb-4 text-gray-500" />
              <h3 className="text-lg font-medium mb-2 text-gray-200">
                Chọn cuộc trò chuyện
              </h3>
              <p className="text-gray-400">
                Chọn một cuộc trò chuyện từ danh sách để bắt đầu hỗ trợ khách
                hàng
              </p>
            </div>
          </div>
        )}
      </div>

      {/* Notification Toast */}
      {notification && (
        <div className="fixed top-4 right-4 bg-blue-500 text-white p-4 rounded-md shadow-lg z-50 max-w-sm">
          <p className="text-sm">{notification}</p>
        </div>
      )}
    </div>
  );
};

export default AdminChatDashboard;

```

### ClientApp\src\components\Chat\ChatWidget.jsx
```jsx
import React, { useState, useEffect, useRef } from 'react';
import { 
  MessageCircle, 
  Send, 
  X, 
  Minimize2, 
  Maximize2, 
  Bot, 
  User, 
  ShoppingCart,
  ExternalLink,
  Phone
} from 'lucide-react';
import { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';

// Utility function for formatting time to Vietnam timezone
const formatVietnamTime = (dateString) => {
  if (!dateString) return '';
  try {
    return new Date(dateString).toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit',
      timeZone: 'Asia/Ho_Chi_Minh'
    });
  } catch (error) {
    console.error('Error formatting date:', error);
    return '';
  }
};

const ChatWidget = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [connection, setConnection] = useState(null);
  const [isConnecting, setIsConnecting] = useState(false);
  const [guestName, setGuestName] = useState('');
  const [guestEmail, setGuestEmail] = useState('');
  const [showNamePrompt, setShowNamePrompt] = useState(true);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://localhost:7107';

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && !connection && !isConnecting) {
      initializeConnection();
    }
  }, [isOpen]);

  // Cleanup connection on unmount
  useEffect(() => {
    return () => {
      if (connection) {
        connection.stop().catch(console.error);
      }
    };
  }, [connection]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const initializeConnection = async () => {
    try {
      setIsConnecting(true);
      
      const token = localStorage.getItem('token');
      const connectionUrl = token 
        ? `${API_BASE_URL}/chatHub?access_token=${token}`
        : `${API_BASE_URL}/chatHub`;
      
      const newConnection = new HubConnectionBuilder()
        .withUrl(connectionUrl, {
          skipNegotiation: false,
          accessTokenFactory: () => token
        })
        .withAutomaticReconnect([0, 2000, 10000, 30000])
        .configureLogging(LogLevel.Information)
        .build();

      // Set up event handlers
      newConnection.on('NewMessage', (message) => {
        setMessages(prev => {
          // Remove any temporary messages with same content
          const filteredMessages = prev.filter(m => 
            !(m.isTemporary && m.content === message.content && m.sender === message.sender)
          );
          
          // Check if message already exists to prevent duplicates
          const messageExists = filteredMessages.some(m => m.id === message.id || 
            (m.content === message.content && 
             m.sender === message.sender && 
             m.sentAt && message.sentAt &&
             Math.abs(new Date(m.sentAt) - new Date(message.sentAt)) < 1000)
          );
          
          if (messageExists) {
            return filteredMessages;
          }
          
          return [...filteredMessages, message];
        });
        setIsLoading(false);
      });

      newConnection.on('TypingIndicator', (data) => {
        if (data.isTyping && data.userId !== getCurrentUserId()) {
          setIsTyping(true);
          setTimeout(() => setIsTyping(false), 3000);
        }
      });

      newConnection.on('ChatEscalated', (session) => {
        setMessages(prev => [...prev, {
          id: Date.now(),
          content: 'Bạn đã được kết nối với nhân viên tư vấn. Vui lòng chờ trong giây lát...',
          type: 'Text',
          sender: 'System',
          sentAt: new Date().toISOString()
        }]);
      });

      await newConnection.start();
      setConnection(newConnection);
      console.log('SignalR connected successfully');
    } catch (error) {
      console.error('SignalR connection failed:', error);
    } finally {
      setIsConnecting(false);
    }
  };

  const createSession = async () => {
    try {
      const token = localStorage.getItem('token');
      const headers = {
        'Content-Type': 'application/json'
      };

      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }

      const response = await fetch(`${API_BASE_URL}/api/chat/session`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          sessionId: sessionId,
          guestName: !token ? guestName : undefined,
          guestEmail: !token ? guestEmail : undefined
        })
      });

      if (!response.ok) {
        throw new Error('Failed to create chat session');
      }

      const session = await response.json();
      setSessionId(session.sessionId);
      setMessages(session.messages || []);

      // Join SignalR group
      if (connection) {
        await connection.invoke('JoinSession', session.sessionId);
      }

      return session;
    } catch (error) {
      console.error('Error creating session:', error);
      throw error;
    }
  };

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const messageText = inputMessage.trim();
    setInputMessage('');
    setIsLoading(true);

    try {
      let currentSessionId = sessionId;
      
      // Create session if not exists
      if (!currentSessionId) {
        const session = await createSession();
        currentSessionId = session.sessionId;
      }

      const token = localStorage.getItem('token');
      const headers = {
        'Content-Type': 'application/json'
      };

      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }

      // Add user message to UI immediately with temporary ID
      const tempId = `temp_${Date.now()}`;
      const userMessage = {
        id: tempId,
        content: messageText,
        type: 'Text',
        sender: 'User',
        sentAt: new Date().toISOString(),
        isTemporary: true
      };
      setMessages(prev => [...prev, userMessage]);

      // Send typing indicator
      if (connection) {
        await connection.invoke('SendTypingIndicator', currentSessionId, true);
      }

      const response = await fetch(`${API_BASE_URL}/api/chat/message`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          content: messageText,
          sessionId: currentSessionId,
          guestName: !token ? guestName : undefined,
          guestEmail: !token ? guestEmail : undefined
        })
      });

      if (!response.ok) {
        throw new Error('Failed to send message');
      }

      // Stop typing indicator
      if (connection) {
        await connection.invoke('SendTypingIndicator', currentSessionId, false);
      }

    } catch (error) {
      console.error('Error sending message:', error);
      setIsLoading(false);
      
      // Remove temporary message and add error message
      setMessages(prev => {
        const filteredMessages = prev.filter(m => !m.isTemporary);
        return [...filteredMessages, {
          id: Date.now(),
          content: 'Xin lỗi, có lỗi xảy ra khi gửi tin nhắn. Vui lòng thử lại.',
          type: 'Text',
          sender: 'System',
          sentAt: new Date().toISOString()
        }];
      });
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleSuggestedAction = async (action, data) => {
    switch (action) {
      case 'search_phones':
        setInputMessage('Tôi muốn tìm điện thoại');
        break;
      case 'search_laptops':
        setInputMessage('Tôi muốn tìm laptop');
        break;
      case 'search_headphones':
        setInputMessage('Tôi muốn tìm tai nghe');
        break;
      case 'view_promotions':
        setInputMessage('Có khuyến mãi gì không?');
        break;
      case 'contact_admin':
        await escalateToAdmin();
        return;
      case 'add_to_cart':
        if (data?.productId) {
          // Add to cart logic
          console.log('Add to cart:', data.productId);
        }
        return;
      case 'view_product':
        if (data?.productId) {
          window.open(`/products/${data.productId}`, '_blank');
        }
        return;
      default:
        return;
    }
    
    // Auto send the message
    setTimeout(() => sendMessage(), 100);
  };

  const escalateToAdmin = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/chat/${sessionId}/escalate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          reason: 'User requested human support'
        })
      });

      if (response.ok) {
        setMessages(prev => [...prev, {
          id: Date.now(),
          content: 'Đang kết nối bạn với nhân viên tư vấn...',
          type: 'Text',
          sender: 'System',
          sentAt: new Date().toISOString()
        }]);
      }
    } catch (error) {
      console.error('Error escalating to admin:', error);
    }
  };

  const getCurrentUserId = () => {
    const token = localStorage.getItem('token');
    if (!token) return null;
    
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return parseInt(payload.sub);
    } catch {
      return null;
    }
  };

  const renderMessage = (message) => {
    const isUser = message.sender === 'User';
    const isAI = message.sender === 'AI';
    const isSystem = message.sender === 'System';

    return (
      <div key={message.id} className={`mb-4 flex ${isUser ? 'justify-end' : 'justify-start'}`}>
        <div className={`flex items-start space-x-2 max-w-xs lg:max-w-md ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>
          {/* Avatar */}
          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
            isUser ? 'bg-blue-500' : isAI ? 'bg-green-500' : 'bg-gray-400'
          }`}>
            {isUser ? <User size={16} color="white" /> : 
             isAI ? <Bot size={16} color="white" /> : 
             <MessageCircle size={16} color="white" />}
          </div>

          {/* Message bubble */}
          <div className={`rounded-lg px-3 py-2 ${
            isUser 
              ? 'bg-blue-500 text-white' 
              : isSystem 
                ? 'bg-gray-100 text-gray-800 border border-gray-200'
                : 'bg-white text-gray-800 border border-gray-200'
          }`}>
            <div className="whitespace-pre-wrap text-sm">{message.content}</div>
            
            {/* Product recommendations */}
            {message.metadata?.ProductRecommendations && (
              <div className="mt-2 space-y-2">
                {message.metadata.ProductRecommendations.map((product, index) => (
                  <div key={index} className="bg-gray-50 rounded p-2 text-xs">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="font-medium text-gray-900">{product.name}</div>
                        <div className="text-gray-600">{product.brand} - {product.category}</div>
                        <div className="text-blue-600 font-medium">
                          {product.discountPrice ? (
                            <>
                              {(product.discountPrice || 0).toLocaleString()}đ 
                              <span className="line-through text-gray-400 ml-1">
                                {(product.price || 0).toLocaleString()}đ
                              </span>
                            </>
                          ) : (
                            `${(product.price || 0).toLocaleString()}đ`
                          )}
                        </div>
                      </div>
                      <button
                        onClick={() => handleSuggestedAction('view_product', { productId: product.productId })}
                        className="text-blue-500 hover:text-blue-700"
                      >
                        <ExternalLink size={14} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Suggested actions */}
            {message.suggestedActions && message.suggestedActions.length > 0 && (
              <div className="mt-2 flex flex-wrap gap-1">
                {message.suggestedActions.map((action, index) => (
                  <button
                    key={index}
                    onClick={() => handleSuggestedAction(action.action, action.data)}
                    className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200 transition-colors"
                  >
                    {action.text}
                  </button>
                ))}
              </div>
            )}

            <div className={`text-xs mt-1 ${isUser ? 'text-blue-100' : 'text-gray-500'}`}>
              {formatVietnamTime(message.sentAt)}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Guest name prompt
  if (isOpen && !sessionId && showNamePrompt && !localStorage.getItem('token')) {
    return (
      <div className="fixed bottom-6 right-6 w-80 bg-white rounded-xl shadow-2xl border z-[9999]">
        <div className="p-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-gray-800">Chào mừng đến SHN-Gear!</h3>
            <button
              onClick={() => setIsOpen(false)}
              className="text-gray-500 hover:text-gray-700 p-1 rounded hover:bg-gray-100 transition-colors"
            >
              <X size={20} />
            </button>
          </div>
          <p className="text-sm text-gray-600 mb-3">
            Để chúng tôi hỗ trợ bạn tốt hơn, vui lòng cho biết thông tin của bạn:
          </p>
          <input
            type="text"
            value={guestName}
            onChange={(e) => setGuestName(e.target.value)}
            placeholder="Nhập tên của bạn..."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-2"
          />
          <input
            type="email"
            value={guestEmail}
            onChange={(e) => setGuestEmail(e.target.value)}
            placeholder="Email của bạn (tùy chọn)..."
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-3"
            onKeyPress={(e) => {
              if (e.key === 'Enter' && guestName.trim()) {
                setShowNamePrompt(false);
                createSession();
              }
            }}
          />
          <div className="flex space-x-2">
            <button
              onClick={() => {
                if (guestName.trim()) {
                  setShowNamePrompt(false);
                  createSession();
                }
              }}
              disabled={!guestName.trim()}
              className="flex-1 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-sm font-medium transition-colors"
            >
              Bắt đầu chat
            </button>
            <button
              onClick={() => {
                setGuestName('Khách');
                setShowNamePrompt(false);
                createSession();
              }}
              className="flex-1 bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 text-sm font-medium transition-colors"
            >
              Bỏ qua
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Main chat widget
  return (
    <>
      {/* Chat button */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 w-14 h-14 bg-blue-500 hover:bg-blue-600 text-white rounded-full shadow-xl flex items-center justify-center transition-all duration-300 z-[9999] hover:scale-110"
        >
          <MessageCircle size={24} />
        </button>
      )}

      {/* Chat window */}
      {isOpen && (
        <div className={`fixed bottom-6 right-6 bg-white rounded-xl shadow-2xl border z-[9999] transition-all duration-300 flex flex-col ${
          isMinimized ? 'w-80 h-14' : 'w-80 h-[500px]'
        } max-h-[80vh]`}>
          {/* Header */}
          <div className="bg-blue-500 text-white p-4 rounded-t-xl flex items-center justify-between flex-shrink-0">
            <div className="flex items-center space-x-2">
              <Bot size={20} />
              <div>
                <div className="font-semibold text-sm">SHN-Gear Assistant</div>
                <div className="text-xs text-blue-100">
                  {isConnecting ? 'Đang kết nối...' : 'Online • Phản hồi ngay'}
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-1">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className="text-blue-100 hover:text-white p-1 rounded hover:bg-blue-600 transition-colors"
              >
                {isMinimized ? <Maximize2 size={16} /> : <Minimize2 size={16} />}
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="text-blue-100 hover:text-white p-1 rounded hover:bg-blue-600 transition-colors"
              >
                <X size={16} />
              </button>
            </div>
          </div>

          {!isMinimized && (
            <>
              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 bg-gray-50 min-h-0">
                {messages.length === 0 && (
                  <div className="text-center text-gray-500 text-sm mt-8">
                    <Bot size={32} className="mx-auto mb-2 text-gray-400" />
                    <p>Xin chào! Tôi có thể giúp gì cho bạn?</p>
                  </div>
                )}
                
                {messages.map(renderMessage)}
                
                {isTyping && (
                  <div className="flex items-center space-x-2 text-gray-500 text-sm mb-2">
                    <Bot size={16} />
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>

              {/* Input */}
              <div className="p-4 border-t bg-white rounded-b-xl flex-shrink-0">
                <div className="flex items-center space-x-2">
                  <input
                    ref={inputRef}
                    type="text"
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Nhập tin nhắn..."
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                    disabled={isLoading}
                  />
                  <button
                    onClick={sendMessage}
                    disabled={!inputMessage.trim() || isLoading}
                    className="bg-blue-500 text-white p-2 rounded-lg hover:bg-blue-600 disabled:bg-gray-300 transition-colors flex-shrink-0"
                  >
                    <Send size={16} />
                  </button>
                </div>
                
                {/* Quick actions */}
                {messages.length === 0 && (
                  <div className="mt-3 flex flex-wrap gap-2">
                    <button
                      onClick={() => handleSuggestedAction('search_phones')}
                      className="text-xs bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors"
                    >
                      📱 Điện thoại
                    </button>
                    <button
                      onClick={() => handleSuggestedAction('search_laptops')}
                      className="text-xs bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors"
                    >
                      💻 Laptop
                    </button>
                    <button
                      onClick={() => handleSuggestedAction('view_promotions')}
                      className="text-xs bg-gray-100 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-200 transition-colors"
                    >
                      🎉 Khuyến mãi
                    </button>
                  </div>
                )}
                
                <div className="text-xs text-gray-400 mt-2 text-center">
                  Powered by SHN-Gear AI
                </div>
              </div>
            </>
          )}
        </div>
      )}
    </>
  );
};

export default ChatWidget;

```

### ClientApp\src\components\Checkout\Checkout.jsx
```jsx
import React, { useEffect, useState } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Radio,
  RadioGroup,
  FormControlLabel,
  CircularProgress,
  Divider,
  Alert,
} from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const Checkout = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const {
    selectedItems = [],
    totalAmount = 0,
    voucherCode = "",
    discountAmount = 0,
  } = location.state || {};

  const [userId, setUserId] = useState(null);
  const [addresses, setAddresses] = useState([]);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [guestAddress, setGuestAddress] = useState({
    fullName: "",
    phoneNumber: "",
    addressLine1: "",
    addressLine2: "",
    city: "",
    state: "",
    zipCode: "",
    country: "",
  });
  const [voucherId, setVoucherId] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState("1"); // 1 = Tiền mặt, 2 = MoMo, 3 = PayPal
  const [momoPaymentType, setMomoPaymentType] = useState("qr");
  const [isLoading, setIsLoading] = useState(false);
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [error, setError] = useState(null);
  const [finalAmount, setFinalAmount] = useState(totalAmount);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (!Number.isInteger(id)) return;
        setUserId(id);
        fetchAddresses(id);
      } catch (error) {
        console.error("Lỗi khi giải mã token:", error);
      }
    }

    if (voucherCode) {
      fetchVoucherId(voucherCode);
    }

    fetchPaymentMethods();
  }, [voucherCode]);

  const fetchAddresses = async (userId) => {
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/address/user/${userId}`
      );
      setAddresses(response.data);
      if (response.data.length > 0) {
        setSelectedAddress(response.data[0]);
      }
    } catch (error) {
      console.error("Lỗi khi lấy địa chỉ:", error);
      setError("Lỗi khi tải địa chỉ giao hàng");
    }
  };

  const fetchVoucherId = async (code) => {
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/vouchers/code/${code}`
      );
      setVoucherId(response.data.id);
    } catch (error) {
      console.error("Lỗi khi lấy voucher:", error);
      setError("Mã giảm giá không hợp lệ hoặc đã hết hạn");
    }
  };

  const fetchPaymentMethods = async () => {
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/PaymentMethod`
      );
      setPaymentMethods(response.data);
    } catch (error) {
      console.error("Lỗi khi lấy phương thức thanh toán:", error);
      setError("Lỗi khi tải phương thức thanh toán");
    }
  };

  const removePaidItemsFromCart = async () => {
    if (!userId) return;

    try {
      await axios.delete(
        `${process.env.REACT_APP_API_BASE_URL}/api/cart/remove-paid-items?userId=${userId}`
      );
    } catch (error) {
      console.error("Lỗi khi xóa sản phẩm đã thanh toán:", error);
    }
  };

  const removeGuestCartItems = () => {
    const sessionCart = sessionStorage.getItem("Cart");
    if (!sessionCart) return;

    const cartItems = JSON.parse(sessionCart) || [];
    const paidProductVariantIds = selectedItems.map(
      (item) => item.productVariantId
    );
    const remainingItems = cartItems.filter(
      (item) => !paidProductVariantIds.includes(item.productVariantId)
    );

    sessionStorage.setItem("Cart", JSON.stringify(remainingItems));
  };
  const handlePlaceOrder = async () => {
    setError(null);

    // Xử lý giỏ hàng cho cả khách và người dùng đã đăng nhập
    if (!userId) {
      removeGuestCartItems();
    } else {
      await removePaidItemsFromCart();
    }

    if (userId && !selectedAddress) {
      setError("Vui lòng chọn địa chỉ giao hàng.");
      return;
    }

    let addressId = selectedAddress ? selectedAddress.id : null;

    if (!userId && !addressId) {
      if (
        !guestAddress.fullName ||
        !guestAddress.phoneNumber ||
        !guestAddress.addressLine1 ||
        !guestAddress.city ||
        !guestAddress.state ||
        !guestAddress.country
      ) {
        setError("Vui lòng điền đầy đủ thông tin địa chỉ giao hàng.");
        return;
      }

      try {
        setIsLoading(true);
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/address/add`,
          {
            userId: null,
            ...guestAddress,
          }
        );
        addressId = response.data.addressId;
      } catch (error) {
        console.error("Lỗi khi thêm địa chỉ:", error);
        setError("Lỗi khi thêm địa chỉ, vui lòng thử lại.");
        setIsLoading(false);
        return;
      }
    }

    const orderDto = {
      userId: userId || null,
      orderDate: new Date().toISOString(),
      totalAmount: finalAmount,
      orderStatus: "Pending",
      addressId: addressId,
      paymentMethodId: parseInt(paymentMethod),
      orderItems: selectedItems.map((item) => ({
        productVariantId: item.productVariantId,
        quantity: item.quantity,
        price: item.productDiscountPrice || item.productPrice,
      })),
      voucherId: voucherId || null,
    };

    try {
      setIsLoading(true);

      const headers = { "Content-Type": "application/json" };

      if (paymentMethod === "2" && momoPaymentType === "card") {
        headers["Payment-Method"] = "card";
      }

      // Handle PayPal payment
      if (paymentMethod === "3") {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/paypal/create-order`,
          orderDto,
          { headers }
        );

        if (response.data.approvalUrl) {
          // Lưu thông tin đơn hàng để sử dụng sau khi thanh toán thành công
          localStorage.setItem(
            "currentOrder",
            JSON.stringify({
              orderId: response.data.orderId,
              paymentMethod: paymentMethod,
              orderItems: selectedItems,
              totalAmount: totalAmount,
              discountAmount: discountAmount,
              voucherCode: voucherCode,
              finalAmount: finalAmount,
              paymentMethodName: "PayPal",
            })
          );
          window.location.href = response.data.approvalUrl;
          return;
        }
      }

      // Handle MoMo payment
      else if (paymentMethod === "2") {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders`,
          orderDto,
          { headers }
        );

        if (response.data.paymentUrl) {
          localStorage.setItem(
            "currentOrder",
            JSON.stringify({
              orderId: response.data.orderId,
              paymentMethod: paymentMethod,
              orderItems: selectedItems,
              totalAmount: totalAmount,
              discountAmount: discountAmount,
              voucherCode: voucherCode,
              finalAmount: finalAmount,
              paymentMethodName:
                momoPaymentType === "card"
                  ? "MoMo - Thẻ Visa/MasterCard"
                  : "MoMo - QR Code",
            })
          );

          window.location.href = response.data.paymentUrl;
          return;
        }
      }
      // Handle cash payment
      else {
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders`,
          orderDto,
          { headers }
        );
        navigate("/payment-success", {
          state: {
            orderId: response.data.orderId,
            orderItems: selectedItems,
            totalAmount: totalAmount,
            discountAmount: discountAmount,
            voucherCode: voucherCode,
            finalAmount: finalAmount,
            paymentMethodName:
              paymentMethods.find((pm) => pm.id.toString() === paymentMethod)
                ?.name || "Tiền mặt",
          },
        });
      }
    } catch (error) {
      console.error("Lỗi khi tạo đơn hàng:", error);
      setError(
        error.response?.data?.message ||
          "Lỗi khi tạo đơn hàng, vui lòng thử lại."
      );
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box sx={{ p: 4, maxWidth: 1200, margin: "0 auto" }}>
      <Typography variant="h4" mb={4} sx={{ fontWeight: "bold" }}>
        Thanh toán
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Box sx={{ display: "flex", gap: 4 }}>
        <Box sx={{ flex: 2 }}>
          <Box
            sx={{ mb: 4, p: 3, border: "1px solid #e0e0e0", borderRadius: 2 }}
          >
            <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold" }}>
              Thông tin giao hàng
            </Typography>

            {userId ? (
              <>
                <Typography variant="subtitle1" sx={{ mb: 2 }}>
                  Chọn địa chỉ giao hàng
                </Typography>
                <RadioGroup
                  value={selectedAddress?.id || ""}
                  onChange={(e) => {
                    const address = addresses.find(
                      (a) => a.id === parseInt(e.target.value)
                    );
                    setSelectedAddress(address);
                  }}
                >
                  {addresses.map((address) => (
                    <Box
                      key={address.id}
                      sx={{
                        mb: 2,
                        p: 2,
                        border: "1px solid #e0e0e0",
                        borderRadius: 1,
                      }}
                    >
                      <FormControlLabel
                        value={address.id.toString()}
                        control={<Radio />}
                        label={
                          <Box>
                            <Typography>
                              <strong>{address.fullName}</strong> -{" "}
                              {address.phoneNumber}
                            </Typography>
                            <Typography variant="body2">
                              {address.addressLine1},{" "}
                              {address.addressLine2 &&
                                `${address.addressLine2}, `}
                              {address.city}, {address.state}, {address.country}
                            </Typography>
                          </Box>
                        }
                      />
                    </Box>
                  ))}
                </RadioGroup>
              </>
            ) : (
              <>
                <TextField
                  label="Họ và tên"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.fullName}
                  onChange={(e) =>
                    setGuestAddress({
                      ...guestAddress,
                      fullName: e.target.value,
                    })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Số điện thoại"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.phoneNumber}
                  onChange={(e) =>
                    setGuestAddress({
                      ...guestAddress,
                      phoneNumber: e.target.value,
                    })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Địa chỉ"
                  variant="outlined"
                  fullWidth
                  required
                  value={guestAddress.addressLine1}
                  onChange={(e) =>
                    setGuestAddress({
                      ...guestAddress,
                      addressLine1: e.target.value,
                    })
                  }
                  sx={{ mb: 2 }}
                />
                <TextField
                  label="Địa chỉ bổ sung (tùy chọn)"
                  variant="outlined"
                  fullWidth
                  value={guestAddress.addressLine2}
                  onChange={(e) =>
                    setGuestAddress({
                      ...guestAddress,
                      addressLine2: e.target.value,
                    })
                  }
                  sx={{ mb: 2 }}
                />
                <Box sx={{ display: "flex", gap: 2 }}>
                  <TextField
                    label="Thành phố"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.city}
                    onChange={(e) =>
                      setGuestAddress({ ...guestAddress, city: e.target.value })
                    }
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    label="Tỉnh/Thành"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.state}
                    onChange={(e) =>
                      setGuestAddress({
                        ...guestAddress,
                        state: e.target.value,
                      })
                    }
                    sx={{ mb: 2 }}
                  />
                </Box>
                <Box sx={{ display: "flex", gap: 2 }}>
                  <TextField
                    label="Mã bưu điện"
                    variant="outlined"
                    fullWidth
                    value={guestAddress.zipCode}
                    onChange={(e) =>
                      setGuestAddress({
                        ...guestAddress,
                        zipCode: e.target.value,
                      })
                    }
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    label="Quốc gia"
                    variant="outlined"
                    fullWidth
                    required
                    value={guestAddress.country}
                    onChange={(e) =>
                      setGuestAddress({
                        ...guestAddress,
                        country: e.target.value,
                      })
                    }
                    sx={{ mb: 2 }}
                  />
                </Box>
              </>
            )}
          </Box>

          <Box
            sx={{ mb: 4, p: 3, border: "1px solid #e0e0e0", borderRadius: 2 }}
          >
            <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold" }}>
              Phương thức thanh toán
            </Typography>
            <RadioGroup
              value={paymentMethod}
              onChange={(e) => setPaymentMethod(e.target.value)}
            >
              {paymentMethods.map((method) => (
                <Box
                  key={method.id}
                  sx={{
                    mb: 1,
                    p: 2,
                    border: "1px solid #e0e0e0",
                    borderRadius: 1,
                  }}
                >
                  <FormControlLabel
                    value={method.id.toString()}
                    control={<Radio />}
                    label={<Typography>{method.name}</Typography>}
                    sx={{ marginLeft: 0 }}
                  />

                  {method.id === 2 && paymentMethod === "2" && (
                    <Box sx={{ mt: 1, pl: 4 }}>
                      <RadioGroup
                        value={momoPaymentType}
                        onChange={(e) => setMomoPaymentType(e.target.value)}
                        row
                      >
                        <FormControlLabel
                          value="qr"
                          control={<Radio size="small" />}
                          label="Quét QR Code"
                        />
                        <FormControlLabel
                          value="card"
                          control={<Radio size="small" />}
                          label="Thẻ Visa/MasterCard"
                        />
                      </RadioGroup>
                    </Box>
                  )}
                </Box>
              ))}
            </RadioGroup>

            {paymentMethod === "2" && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                {momoPaymentType === "card"
                  ? "Bạn sẽ được chuyển hướng đến trang thanh toán bằng thẻ Visa/MasterCard"
                  : "Bạn sẽ được chuyển hướng đến trang thanh toán QR MoMo"}
              </Typography>
            )}

            {paymentMethod === "3" && (
              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                Bạn sẽ được chuyển hướng đến trang thanh toán PayPal
              </Typography>
            )}
          </Box>
        </Box>

        <Box sx={{ flex: 1 }}>
          <Box sx={{ p: 3, border: "1px solid #e0e0e0", borderRadius: 2 }}>
            <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold" }}>
              Đơn hàng của bạn
            </Typography>

            <List sx={{ mb: 2 }}>
              {selectedItems.map((item) => (
                <ListItem key={item.productVariantId} sx={{ px: 0 }}>
                  <ListItemAvatar>
                    <img
                      src={
                        item.productImage.startsWith("http")
                          ? item.productImage
                          : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}`
                      }
                      alt="Product img"
                      className="size-10"
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src = "https://via.placeholder.com/50";
                      }}
                    />
                  </ListItemAvatar>
                  <ListItemText
                    primary={`${item.productName}`}
                    secondary={`${item.variantColor} - ${item.variantStorage}`}
                  />
                  <Typography variant="body2">
                    {item.quantity} ×{" "}
                    {(
                      item.productDiscountPrice || item.productPrice
                    ).toLocaleString()}
                    ₫
                  </Typography>
                </ListItem>
              ))}
            </List>

            <Divider sx={{ my: 2 }} />

            {voucherCode && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="body1">
                  Mã giảm giá: {voucherCode}
                </Typography>
                <Typography variant="body1" color="success.main">
                  -{discountAmount.toLocaleString()}₫
                </Typography>
              </Box>
            )}

            <Box sx={{ mb: 2 }}>
              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
              >
                <Typography>Tạm tính:</Typography>
                <Typography>
                  {(totalAmount + discountAmount).toLocaleString()}₫
                </Typography>
              </Box>
              {discountAmount > 0 && (
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    mb: 1,
                  }}
                >
                  <Typography>Giảm giá:</Typography>
                  <Typography color="success.main">
                    -{discountAmount.toLocaleString()}₫
                  </Typography>
                </Box>
              )}
              <Divider sx={{ my: 1 }} />
              <Box
                sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
              >
                <Typography variant="h6">Tổng cộng:</Typography>
                <Typography variant="h6" color="error">
                  {totalAmount.toLocaleString()}₫
                </Typography>
              </Box>
            </Box>

            <Button
              variant="contained"
              color="error"
              fullWidth
              size="large"
              onClick={handlePlaceOrder}
              disabled={isLoading || selectedItems.length === 0}
              sx={{ mt: 2 }}
            >
              {isLoading ? (
                <CircularProgress size={24} color="inherit" />
              ) : paymentMethod === "2" ? (
                momoPaymentType === "card" ? (
                  "Thanh toán bằng thẻ Visa/MasterCard"
                ) : (
                  "Thanh toán bằng QR MoMo"
                )
              ) : paymentMethod === "3" ? (
                "Thanh toán bằng PayPal"
              ) : (
                "Thanh toán với Tiền Mặt"
              )}
            </Button>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Checkout;

```

### ClientApp\src\components\Commitment\Commitment.js
```js
import React from 'react';
import { useBrands } from '@/hooks/api/useBrands';

const BrandTrustSection = ({ data }) => {
  // Fetch brands from API
  const { brands, loading, error } = useBrands(true);

  return (
    <section className="py-16 md:py-24 bg-gray-900/50">
      <div className="container mx-auto px-4">
        {/* Brand Logos */}
        <div className="flex justify-center items-center flex-wrap gap-x-12 gap-y-8 mb-16">
          {loading ? (
            <div className="text-white">Đang tải thương hiệu...</div>
          ) : error ? (
            <div className="text-red-500">{error}</div>
          ) : (
            brands.map((brand) => (
              <div key={brand.id} className="flex-shrink-0">
                <img 
                  src={brand.logo || '/placeholder-logo.png'} 
                  alt={brand.name} 
                  className="h-12 md:h-16 object-contain filter grayscale hover:filter-none transition-all duration-300"
                  onError={(e) => {
                    e.target.style.display = 'none';
                  }}
                />
              </div>
            ))
          )}
        </div>

        {/* Commitments */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
          {(data?.commitments || []).map((commitment) => (
            <div key={commitment.id} className="p-4">
              {/* You can use a proper icon library here */}
              <div className="flex items-center justify-center h-16 w-16 mx-auto mb-4 bg-white/5 rounded-full border border-white-20">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-electric-blue h-6 w-6"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/></svg>
              </div>
              <h3 className="font-display text-xl font-bold text-white">{commitment.title}</h3>
              <p className="text-light-gray mt-1">{commitment.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default BrandTrustSection;

```

### ClientApp\src\components\Commitment\Commitment.jsx
```jsx
import React from "react";

const policies = [
  {
    icon: "https://fptshop.com.vn/img/icons/policy3.svg?w=128&q=100",
    title: "Thương hiệu đảm bảo",
    description: "Nhập khẩu, bảo hành chính hãng",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy1.svg?w=128&q=100",
    title: "Đổi trả dễ dàng",
    description: "Theo chính sách đổi trả tại SHN Gear",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy4.svg?w=128&q=100",
    title: "Sản phẩm chất lượng",
    description: "Đảm bảo tương thích và độ bền cao",
  },
  {
    icon: "https://fptshop.com.vn/img/icons/policy2.svg?w=128&q=100",
    title: "Giao hàng tận nơi",
    description: "Tại 63 tỉnh thành",
  },
];

const Commitment = () => {
  return (
    <div className="bg-gray-50 py-10 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {policies.map((policy, index) => (
            <div 
              key={index}
              className="bg-white rounded-lg shadow-sm p-4 flex items-start sm:items-center space-x-3 sm:space-x-4"
            >
              <img 
                src={policy.icon} 
                alt={policy.title} 
                className="w-10 h-10 sm:w-12 sm:h-12 flex-shrink-0"
              />
              <div className="flex-1">
                <h3 className="font-bold text-sm sm:text-base mb-1 text-gray-800">
                  {policy.title}
                </h3>
                <p className="text-xs sm:text-sm text-gray-600">
                  {policy.description}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Commitment;
```

### ClientApp\src\components\CompareProduct\CompareModal.jsx
```jsx
import React, { useState, useEffect, useCallback, useMemo } from "react";
import { X, ShoppingCart, Eye, Star, Zap, CheckCircle2, AlertCircle } from "lucide-react";
import SpecificationComparison from "./SpecificationComparison";
import "./CompareModal.css";

const CompareModal = ({ isOpen, onClose }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Memoized API base URL
  const apiBaseUrl = useMemo(() => process.env.REACT_APP_API_BASE_URL, []);

  // Optimized fetchCompareProducts with useCallback
  const fetchCompareProducts = useCallback(async () => {
    const ids = JSON.parse(localStorage.getItem("compareList") || "[]");
    
    if (ids.length === 0) {
      setProducts([]);
      return;
    }

    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch(`${apiBaseUrl}/api/Products/compare`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(ids),
      });

      if (!response.ok) {
        throw new Error(`Không thể lấy dữ liệu so sánh: ${response.status}`);
      }
      
      const data = await response.json();
      setProducts(data);
    } catch (error) {
      console.error("Lỗi khi tải dữ liệu so sánh:", error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  }, [apiBaseUrl]);

  // Optimized removeFromCompare
  const removeFromCompare = useCallback((productId) => {
    const currentList = JSON.parse(localStorage.getItem("compareList") || "[]");
    const updatedList = currentList.filter((id) => id !== productId);
    localStorage.setItem("compareList", JSON.stringify(updatedList));
    
    // Trigger custom event
    window.dispatchEvent(new Event('compareListChanged'));
    
    // Update products immediately for better UX
    setProducts(prev => prev.filter(p => p.id !== productId));
  }, []);

  // Optimized clearAll
  const clearAll = useCallback(() => {
    localStorage.removeItem("compareList");
    window.dispatchEvent(new Event('compareListChanged'));
    setProducts([]);
    onClose();
  }, [onClose]);

  // Optimized close handler
  const handleBackgroundClick = useCallback((e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  }, [onClose]);

  // Effect to fetch data when modal opens
  useEffect(() => {
    if (isOpen) {
      fetchCompareProducts();
    }
  }, [isOpen, fetchCompareProducts]);

  // Loading spinner component
  const LoadingSpinner = () => (
    <div className="flex flex-col items-center justify-center py-16">
      <div className="relative">
        <div className="w-16 h-16 border-4 border-indigo-200 rounded-full animate-spin"></div>
        <div className="absolute top-0 left-0 w-16 h-16 border-4 border-transparent border-t-indigo-600 rounded-full animate-spin"></div>
      </div>
      <p className="mt-4 text-gray-600 font-medium">Đang tải dữ liệu so sánh...</p>
    </div>
  );

  // Error component
  const ErrorDisplay = () => (
    <div className="text-center py-16">
      <div className="w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
        <AlertCircle className="w-8 h-8 text-red-600" />
      </div>
      <h3 className="text-xl font-bold text-gray-900 mb-2">Có lỗi xảy ra</h3>
      <p className="text-gray-600 mb-6">{error}</p>
      <button
        onClick={fetchCompareProducts}
        className="inline-flex items-center px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-xl transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl"
      >
        <Zap className="w-4 h-4 mr-2" />
        Thử lại
      </button>
    </div>
  );

  // Empty state component
  const EmptyState = () => (
    <div className="text-center py-16">
      <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-indigo-100 to-purple-100 rounded-2xl flex items-center justify-center">
        <ShoppingCart className="w-12 h-12 text-indigo-600" />
      </div>
      <h3 className="text-2xl font-bold text-gray-900 mb-3">
        Chưa có sản phẩm nào để so sánh
      </h3>
      <p className="text-gray-600 text-lg">
        Thêm ít nhất 2 sản phẩm vào danh sách để bắt đầu so sánh
      </p>
    </div>
  );

  if (!isOpen) return null;
  return (    <div 
      className={`fixed inset-0 bg-black/60 backdrop-blur-sm z-[9999] flex items-center justify-center p-4 transition-all duration-300 compare-modal-container ${
        isOpen ? 'animate-fadeIn' : 'opacity-0 pointer-events-none'
      }`}
      onClick={handleBackgroundClick}
    ><div className={`bg-white rounded-2xl shadow-2xl w-full max-h-[95vh] overflow-hidden transform transition-all duration-300 ${
        products.length <= 2 ? 'max-w-5xl' : 
        products.length === 3 ? 'max-w-6xl' : 
        'max-w-7xl'
      } ${
        isOpen ? 'animate-scaleIn' : 'scale-95 opacity-0'
      }`}>
        {/* Enhanced Modern Header */}
        <div className="relative bg-gradient-to-br from-indigo-600 via-purple-600 to-pink-600 text-white overflow-hidden">
          {/* Animated background pattern */}
          <div className="absolute inset-0 bg-black/10">
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent transform -skew-x-12 animate-float"></div>
          </div>
          
          <div className="relative p-6 flex justify-between items-center backdrop-blur-custom">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-white/20 rounded-xl backdrop-blur-sm shadow-glow animate-bounceIn">
                <ShoppingCart className="w-8 h-8" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-gradient">So sánh sản phẩm</h2>
                <p className="text-white/80 text-sm mt-1 flex items-center animate-slideUp">
                  <span className="inline-block w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse shadow-glow"></span>
                  {products.length} sản phẩm đang được so sánh
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {products.length > 0 && (
                <button
                  onClick={clearAll}
                  className="group flex items-center gap-2 bg-red-500/90 hover:bg-red-600 backdrop-blur-sm px-4 py-2.5 rounded-xl text-sm font-semibold transition-all duration-200 hover:scale-105 hover:shadow-lg"
                >
                  <svg className="w-4 h-4 group-hover:rotate-12 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Xóa tất cả
                </button>
              )}
              <button
                onClick={onClose}
                className="group p-2.5 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-xl transition-all duration-200 hover:scale-110 hover:rotate-90"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(95vh-120px)] bg-gradient-to-br from-gray-50 to-white">
          {loading ? (
            <LoadingSpinner />
          ) : error ? (
            <ErrorDisplay />
          ) : products.length === 0 ? (
            <EmptyState />          ) : (            <div className="overflow-x-auto">
              <div className={`grid gap-6 pb-4 compare-product-grid ${
                products.length === 1 ? 'grid-cols-1 max-w-md mx-auto' :
                products.length === 2 ? 'grid-cols-1 lg:grid-cols-2' :
                products.length === 3 ? 'grid-cols-1 md:grid-cols-2 xl:grid-cols-3' :
                'grid-cols-1 md:grid-cols-2 xl:grid-cols-2 2xl:grid-cols-4'
              }`}>
                {products.map((product, index) => (                  <div 
                    key={product.id}
                    className="bg-white border border-gray-200 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 relative overflow-hidden group hover:-translate-y-1 compare-product-card"
                  >
                    {/* Product Badge */}
                    <div className="absolute top-4 left-4 z-20">
                      <div className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-xs font-bold px-3 py-1.5 rounded-full shadow-lg flex items-center">
                        <Star className="w-3 h-3 mr-1 fill-current" />
                        #{index + 1}
                      </div>
                    </div>

                    {/* Remove button */}
                    <button
                      onClick={() => removeFromCompare(product.id)}
                      className="absolute top-4 right-4 z-20 bg-red-500/90 hover:bg-red-600 backdrop-blur-sm text-white p-2 rounded-full shadow-lg transition-all duration-200 hover:scale-110 group/btn"
                      aria-label="Xóa khỏi so sánh"
                    >
                      <X className="w-4 h-4 group-hover/btn:rotate-90 transition-transform" />
                    </button>                    {/* Product Image */}
                    <div className="relative h-48 bg-gradient-to-br from-gray-50 to-gray-100 overflow-hidden">
                      <img
                        src={
                          product.images && product.images.length > 0
                            ? product.images[0].imageUrl?.startsWith("http")
                              ? product.images[0].imageUrl
                              : `${apiBaseUrl}/${product.images[0].imageUrl}`
                            : "https://via.placeholder.com/300"
                        }
                        alt={product.name}
                        className="w-full h-full object-contain p-4 group-hover:scale-110 transition-transform duration-500"
                        loading="lazy"
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = "https://via.placeholder.com/300";
                        }}
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    </div>                    {/* Product Info */}
                    <div className="p-4">
                      <h3 className="text-lg font-bold text-gray-900 mb-2 line-clamp-2 group-hover:text-indigo-600 transition-colors">
                        {product.name}
                      </h3>
                      
                      {/* Brand and Category */}
                      <div className="flex gap-2 mb-3">
                        <div className="flex-1 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg p-2 border border-indigo-100">
                          <p className="text-xs text-gray-600 mb-1">Thương hiệu</p>
                          <p className="font-semibold text-indigo-700 text-sm">{product.brand}</p>
                        </div>
                        <div className="flex-1 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg p-2 border border-purple-100">
                          <p className="text-xs text-gray-600 mb-1">Danh mục</p>
                          <p className="font-semibold text-purple-700 text-sm">{product.category}</p>
                        </div>
                      </div>

                      {/* Description */}
                      {product.description && (
                        <div className="mb-3 p-2 bg-gray-50 rounded-lg border border-gray-100">
                          <p className="text-xs text-gray-700 line-clamp-2">{product.description}</p>
                        </div>
                      )}{/* Variants */}
                      <div className="border-t border-gray-200 pt-4">
                        <h4 className="font-bold text-gray-900 mb-3 flex items-center">
                          <div className="w-2 h-2 bg-indigo-500 rounded-full mr-2"></div>
                          Biến thể ({product.variants.length})
                        </h4>
                        <div className="space-y-2 max-h-32 overflow-y-auto">
                          {product.variants.slice(0, 2).map((variant, i) => (
                            <div key={i} className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg p-3 border border-gray-200 hover:shadow-sm transition-shadow">
                              <div className="flex justify-between items-start mb-2">
                                <div className="flex-1">
                                  <p className="font-semibold text-gray-900 text-sm">
                                    {variant.color} - {variant.storage}
                                  </p>
                                </div>
                                <div className="flex items-center ml-2">
                                  {variant.stockQuantity > 0 ? (
                                    <CheckCircle2 className="w-3 h-3 text-green-500 mr-1" />
                                  ) : (
                                    <AlertCircle className="w-3 h-3 text-red-500 mr-1" />
                                  )}
                                  <span className={`text-xs font-medium px-2 py-0.5 rounded-full ${
                                    variant.stockQuantity > 10 
                                      ? 'bg-green-100 text-green-800' 
                                      : variant.stockQuantity > 0 
                                      ? 'bg-yellow-100 text-yellow-800'
                                      : 'bg-red-100 text-red-800'
                                  }`}>
                                    {variant.stockQuantity > 0 ? `${variant.stockQuantity}` : 'Hết'}
                                  </span>
                                </div>
                              </div>
                              <div className="flex items-center justify-between">
                                {variant.discountPrice ? (
                                  <div className="flex items-center gap-1 flex-1">
                                    <span className="text-sm font-bold text-red-600">
                                      {variant.discountPrice.toLocaleString()}đ
                                    </span>
                                    <span className="text-xs text-gray-500 line-through">
                                      {variant.price.toLocaleString()}đ
                                    </span>
                                  </div>
                                ) : (
                                  <span className="text-sm font-bold text-gray-900 flex-1">
                                    {variant.price.toLocaleString()}đ
                                  </span>
                                )}
                                
                                {/* Add to Cart Button for Variant */}
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    alert(`Đã thêm "${product.name} - ${variant.color} ${variant.storage}" vào giỏ hàng!`);
                                  }}
                                  className="ml-2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white px-2 py-1 rounded-md text-xs font-semibold transition-all duration-200 transform hover:scale-105 active:scale-95 shadow-sm disabled:opacity-50 disabled:cursor-not-allowed"
                                  disabled={variant.stockQuantity === 0}
                                  title={variant.stockQuantity === 0 ? "Hết hàng" : "Thêm vào giỏ hàng"}
                                >
                                  <ShoppingCart className="w-3 h-3" />
                                </button>
                              </div>
                            </div>
                          ))}
                          {product.variants.length > 2 && (
                            <div className="text-center py-1">
                              <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                                +{product.variants.length - 2} biến thể khác
                              </span>
                            </div>
                          )}
                        </div>
                      </div>                      {/* Action buttons */}
                      <div className="mt-4 pt-3 border-t border-gray-200">
                        <button
                          onClick={() => window.location.href = `/product/${product.id}`}
                          className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white py-2.5 px-4 rounded-xl font-semibold transition-all duration-200 transform hover:scale-105 hover:shadow-lg flex items-center justify-center group"
                        >
                          <Eye className="w-4 h-4 mr-2 group-hover:scale-110 transition-transform" />
                          Xem chi tiết
                        </button>
                      </div>
                    </div>

                    {/* Hover overlay */}
                    <div className="absolute inset-0 bg-gradient-to-br from-indigo-500/5 via-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none rounded-2xl"></div>
                  </div>
                ))}
              </div>

              {/* Specification Comparison Table */}
              <SpecificationComparison products={products} />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CompareModal;

```

### ClientApp\src\components\CompareProduct\ComparePage.jsx
```jsx
import React, { useState, useEffect } from "react";
import Navbar from "../Navbar/Navbar";
import Footer from "../Footer/Footer";

const ComparePage = () => {
  const [products, setProducts] = useState([]);

  // Load danh sách sản phẩm cần so sánh
  const fetchCompareProducts = () => {
    const ids = JSON.parse(localStorage.getItem("compareList") || "[]");
    if (ids.length < 2) {
      setProducts([]);
      return;
    }

    fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products/compare`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(ids),
    })
      .then((res) => {
        if (!res.ok) throw new Error("Không thể lấy dữ liệu so sánh");
        return res.json();
      })
      .then((data) => {
        setProducts(data);
      })
      .catch((error) => {
        console.error("Lỗi khi tải dữ liệu so sánh:", error);
      });
  };

  useEffect(() => {
    fetchCompareProducts();
  }, []);

  // Hàm xoá sản phẩm khỏi localStorage và cập nhật giao diện
  const removeFromCompare = (productId) => {
    const currentList = JSON.parse(localStorage.getItem("compareList") || "[]");
    const updatedList = currentList.filter((id) => id !== productId);
    localStorage.setItem("compareList", JSON.stringify(updatedList));
    fetchCompareProducts();
  };

    return (
    <>
      <Navbar />
      <div className="min-h-[600px] max-w-7xl mx-auto px-4 py-6">
        <h2 className="text-2xl font-bold text-center mb-6">So sánh sản phẩm</h2>

        {products.length < 2 ? (
          <div className="text-center text-gray-500 text-lg mt-12">
            Vui lòng chọn ít nhất 2 sản phẩm để so sánh.
          </div>
        ) : (
          <div className="flex gap-6 overflow-x-auto pb-6">
            {products.map((product) => (
              <div
                key={product.id}
                className="min-w-[250px] border rounded-lg shadow p-4 bg-white relative"
              >
                <button
                  onClick={() => removeFromCompare(product.id)}
                  className="absolute top-2 right-2 text-sm bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600"
                >
                  X
                </button>

                <h3 className="text-lg font-semibold mb-2">{product.name}</h3>
                {/* <img
                  src={
                      product.image?.startsWith("http")
                      ? product.image // Ảnh từ API (URL đầy đủ)
                      : `${process.env.REACT_APP_API_BASE_URL}/${product.image}` // Ảnh local từ wwwroot
                  }
                  alt={product.name}
                  className="w-full h-40 object-contain mb-3 hover:scale-110"
                  onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/150"; }}
                /> */}
                <img
                  src={product.images?.[0]?.imageUrl?.startsWith("http") ? product.images[0].imageUrl : `${process.env.REACT_APP_API_BASE_URL}/${product.images?.[0]?.imageUrl}`}
                  alt={product.name || "product image"}
                  className="w-12 h-12 rounded-md object-cover border border-gray-600"
                  onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/100?text=Error"; }}
                  />
                
                <p><strong>Thương hiệu:</strong> {product.brand}</p>
                <p><strong>Danh mục:</strong> {product.category}</p>
                <p className="text-sm mt-2">{product.description}</p>

                <h4 className="font-semibold mt-4">Biến thể:</h4>
                {product.variants.map((variant, i) => (
                  <div key={i} className="mt-2 text-sm border-t pt-2">
                    <p>Màu: {variant.color} - Dung lượng: {variant.storage}</p>
                    <p>Giá: {variant.price.toLocaleString()}đ</p>
                    {variant.discountPrice && (
                      <p>Giá KM: {variant.discountPrice.toLocaleString()}đ</p>
                    )}
                    <p>Còn lại: {variant.stockQuantity} sản phẩm</p>
                  </div>
                ))}
              </div>
            ))}
          </div>
        )}
      </div>
      <Footer />
    </>
  );
};

export default ComparePage;
```

### ClientApp\src\components\CompareProduct\SpecificationComparison.jsx
```jsx
import React, { useState } from 'react';
import { Monitor, Cpu, MemoryStick, HardDrive, Battery, Camera, Weight } from 'lucide-react';
import SpecificationFilter from './SpecificationFilter';

const SpecificationComparison = ({ products }) => {
  // Chuẩn hóa specifications thành mảng (hỗ trợ unified object từ API)
  const normalizedProducts = products.map(product => {
    let specs = [];
    if (product.specifications) {
      // Nếu là unified object (có type/specifications)
      if (
        typeof product.specifications === 'object' &&
        product.specifications.type === 'unified' &&
        typeof product.specifications.specifications === 'object'
      ) {
        specs = Object.entries(product.specifications.specifications).map(([name, detail]) => ({
          name,
          value: detail.value,
          unit: detail.unit
        }));
      } else if (Array.isArray(product.specifications)) {
        specs = product.specifications;
      } else if (product.specifications.name && product.specifications.value !== undefined) {
        specs = [product.specifications];
      }
    }
    return { ...product, specifications: specs };
  });

  const [filters, setFilters] = useState({
    showBasicOnly: false,
    showDifferencesOnly: false,
    categoryFilter: 'all'
  });

  // Lấy tất cả key thông số, hỗ trợ lọc chỉ số cơ bản và khác biệt
  const getAllSpecKeys = () => {
    let allKeys = new Set();
    // Nếu lọc chỉ số cơ bản: lấy 3 displayOrder đầu tiên của từng sản phẩm
    if (filters.showBasicOnly) {
      normalizedProducts.forEach(product => {
        if (Array.isArray(product.specifications)) {
          product.specifications
            .sort((a, b) => (a.displayOrder ?? 0) - (b.displayOrder ?? 0))
            .slice(0, 3)
            .forEach(spec => {
              if (spec.name) allKeys.add(spec.name.trim());
            });
        }
      });
    } else {
      normalizedProducts.forEach(product => {
        if (Array.isArray(product.specifications)) {
          product.specifications.forEach(spec => {
            if (spec.name) allKeys.add(spec.name.trim());
          });
        }
      });
    }
    // Nếu lọc chỉ số khác biệt: chỉ lấy các key có giá trị khác nhau giữa các sản phẩm
    if (filters.showDifferencesOnly) {
      allKeys = new Set(Array.from(allKeys).filter(key => hasSpecDifferences(key)));
    }
    return Array.from(allKeys);
  };

  // Kiểm tra thông số có khác biệt không
  const hasSpecDifferences = (key) => {
    const values = normalizedProducts.map(p => {
      if (Array.isArray(p.specifications)) {
        const spec = p.specifications.find(s => s.name.trim().toLowerCase() === key.trim().toLowerCase());
        return spec ? spec.value : undefined;
      }
      return undefined;
    });
    return new Set(values).size > 1;
  };

  // Định dạng giá trị thông số
  const formatSpecValue = (key, value, unit) => {
    if (value === null || value === undefined) return 'N/A';
    if (typeof value === 'boolean') return value ? 'Có' : 'Không';
    if (unit) return `${value} ${unit}`;
    return value.toString();
  };

  // Lấy icon cho từng thông số
  const getSpecIcon = (key) => {
    const map = {
      ram: MemoryStick,
      cpu: Cpu,
      weight: Weight,
      battery: Battery,
      camera: Camera,
      storage: HardDrive,
      screen: Monitor,
    };
    // Tìm icon phù hợp
    for (const k in map) {
      if (key.toLowerCase().includes(k)) return map[k];
    }
    return Monitor;
  };

  // Lấy tên hiển thị
  const getSpecDisplayName = (key) => {
    const nameMap = {
      ram: 'RAM',
      cpu: 'CPU',
      weight: 'Trọng lượng',
      battery: 'Pin',
      camera: 'Camera',
      storage: 'Bộ nhớ',
      screen: 'Màn hình',
    };
    for (const k in nameMap) {
      if (key.toLowerCase().includes(k)) return nameMap[k];
    }
    return key;
  };

  const specKeys = getAllSpecKeys();

  return (
    <div className="mt-8">
      <SpecificationFilter products={products} onFilterChange={setFilters} />
      <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-t-xl p-4 border border-gray-200">
        <h3 className="text-xl font-bold text-gray-900 flex items-center">
          <div className="w-2 h-2 bg-indigo-500 rounded-full mr-3"></div>
          So sánh thông số kỹ thuật
        </h3>
      </div>
      <div className="bg-white border border-t-0 border-gray-200 rounded-b-xl overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="bg-gray-50 border-b border-gray-200">
              <th className="text-left p-4 font-semibold text-gray-700 min-w-[180px] sticky left-0 bg-gray-50 z-10">Thông số</th>
              {normalizedProducts.map((product, idx) => (
                <th key={product.id} className="text-center p-4 font-semibold text-gray-700 min-w-[220px]">
                  <div className="flex flex-col items-center">
                    {product.image && <img src={product.image} alt={product.name} className="w-12 h-12 object-contain mb-2" />}
                    <span className="text-base font-medium">{product.name}</span>
                  </div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {specKeys.map((key, rowIdx) => {
              const Icon = getSpecIcon(key);
              const isDiff = hasSpecDifferences(key);
              return (
                <tr key={key} className={isDiff ? "bg-yellow-50" : rowIdx % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                  <td className="p-4 font-medium text-gray-700 sticky left-0 bg-inherit z-10">
                    <div className="flex items-center">
                      <Icon className="w-4 h-4 text-indigo-500 mr-2" />
                      <span>{getSpecDisplayName(key)}</span>
                      {isDiff && <span className="ml-2 px-2 py-0.5 rounded bg-yellow-200 text-yellow-800 text-xs">Khác biệt</span>}
                    </div>
                  </td>
                  {normalizedProducts.map(product => {
                    let value = 'N/A', unit = '';
                    if (Array.isArray(product.specifications)) {
                      const spec = product.specifications.find(s => s.name.trim().toLowerCase() === key.trim().toLowerCase());
                      if (spec) { value = spec.value; unit = spec.unit; }
                    }
                    return (
                      <td key={product.id + key} className="p-4 text-center">
                        <span className={`inline-block px-3 py-1 rounded-full text-sm ${value === 'N/A' ? 'bg-gray-100 text-gray-400' : 'bg-indigo-50 text-indigo-700 font-semibold'}`}>
                          {formatSpecValue(key, value, unit)}
                        </span>
                      </td>
                    );
                  })}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
      <div className="p-4 bg-gray-50 border-t border-gray-200 flex justify-center gap-8 text-xs text-gray-500">
        {normalizedProducts.map((product, idx) => (
          <div key={product.id} className="flex items-center">
            <div className={`w-2 h-2 rounded-full mr-1 ${idx === 0 ? 'bg-blue-500' : idx === 1 ? 'bg-green-500' : 'bg-orange-500'}`}></div>
            <span>{product.name}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SpecificationComparison;

```

### ClientApp\src\components\CompareProduct\SpecificationFilter.jsx
```jsx
import React, { useState } from 'react';
import { Filter, Smartphone, Laptop, Headphones, ChevronDown } from 'lucide-react';

const SpecificationFilter = ({ products, onFilterChange }) => {
  const [activeFilters, setActiveFilters] = useState({
    showBasicOnly: false,
    showDifferencesOnly: false,
    categoryFilter: 'all'
  });
  const [isExpanded, setIsExpanded] = useState(false);

  // Get available product categories
  const getCategories = () => {
    const categories = new Set();
    products.forEach(product => {
      if (product.specifications?.type) {
        categories.add(product.specifications.type);
      }
    });
    return Array.from(categories);
  };

  const handleFilterChange = (filterType, value) => {
    const newFilters = {
      ...activeFilters,
      [filterType]: value
    };
    setActiveFilters(newFilters);
    onFilterChange(newFilters);
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'phone': return Smartphone;
      case 'laptop': return Laptop;
      case 'headphone': return Headphones;
      default: return Filter;
    }
  };

  const getCategoryName = (category) => {
    switch (category) {
      case 'phone': return 'Điện thoại';
      case 'laptop': return 'Laptop';
      case 'headphone': return 'Tai nghe';
      default: return category;
    }
  };

  const categories = getCategories();
  const hasMultipleCategories = categories.length > 1;

  return (
    <div className="mb-6 bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="w-full p-4 flex items-center justify-between text-left hover:bg-gray-50 transition-colors"
      >
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-indigo-100 rounded-lg">
            <Filter className="w-4 h-4 text-indigo-600" />
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">Bộ lọc thông số</h3>
            <p className="text-sm text-gray-500">
              Tùy chỉnh hiển thị so sánh thông số kỹ thuật
            </p>
          </div>
        </div>
        <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${
          isExpanded ? 'rotate-180' : ''
        }`} />
      </button>

      {isExpanded && (
        <div className="px-4 pb-4 space-y-4 border-t border-gray-100">
          {/* Basic filters */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={activeFilters.showBasicOnly}
                  onChange={(e) => handleFilterChange('showBasicOnly', e.target.checked)}
                  className="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                />
                <span className="text-sm font-medium text-gray-700">
                  Chỉ hiện thông số cơ bản
                </span>
              </label>
            </div>

            <div className="flex items-center justify-between">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={activeFilters.showDifferencesOnly}
                  onChange={(e) => handleFilterChange('showDifferencesOnly', e.target.checked)}
                  className="w-4 h-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                />
                <span className="text-sm font-medium text-gray-700">
                  Chỉ hiện thông số khác biệt
                </span>
              </label>
            </div>
          </div>

          {/* Category filter - only show if there are multiple categories */}
          {hasMultipleCategories && (
            <div className="pt-3 border-t border-gray-100">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lọc theo loại sản phẩm
              </label>
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => handleFilterChange('categoryFilter', 'all')}
                  className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-colors ${
                    activeFilters.categoryFilter === 'all'
                      ? 'bg-indigo-100 text-indigo-700 border border-indigo-200'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Tất cả
                </button>
                {categories.map(category => {
                  const Icon = getCategoryIcon(category);
                  return (
                    <button
                      key={category}
                      onClick={() => handleFilterChange('categoryFilter', category)}
                      className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-colors flex items-center space-x-1 ${
                        activeFilters.categoryFilter === category
                          ? 'bg-indigo-100 text-indigo-700 border border-indigo-200'
                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                      }`}
                    >
                      <Icon className="w-3 h-3" />
                      <span>{getCategoryName(category)}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Active filters summary */}
          {(activeFilters.showBasicOnly || activeFilters.showDifferencesOnly || activeFilters.categoryFilter !== 'all') && (
            <div className="pt-3 border-t border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex flex-wrap gap-1">
                  {activeFilters.showBasicOnly && (
                    <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                      Cơ bản
                    </span>
                  )}
                  {activeFilters.showDifferencesOnly && (
                    <span className="px-2 py-1 bg-orange-100 text-orange-700 text-xs rounded-full">
                      Khác biệt
                    </span>
                  )}
                  {activeFilters.categoryFilter !== 'all' && (
                    <span className="px-2 py-1 bg-purple-100 text-purple-700 text-xs rounded-full">
                      {getCategoryName(activeFilters.categoryFilter)}
                    </span>
                  )}
                </div>
                <button
                  onClick={() => {
                    const resetFilters = {
                      showBasicOnly: false,
                      showDifferencesOnly: false,
                      categoryFilter: 'all'
                    };
                    setActiveFilters(resetFilters);
                    onFilterChange(resetFilters);
                  }}
                  className="text-xs text-gray-500 hover:text-gray-700 underline"
                >
                  Xóa bộ lọc
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default SpecificationFilter;

```

### ClientApp\src\components\FeaturedBrands\FeaturedBrands.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Spin, Alert, Typography } from 'antd';
import Slider from 'react-slick';
import './FeaturedBrands.css';

const { Title } = Typography;

const FeaturedBrands = () => {
    const [brands, setBrands] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchBrands = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Brand`);
                // Assuming the API returns an array of brand objects with `id`, `name`, and `logoUrl`
                setBrands(response.data);
            } catch (err) {
                setError('Failed to load brands.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchBrands();
    }, []);

    const sliderSettings = {
        dots: false,
        infinite: true,
        speed: 500,
        slidesToShow: 5,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        responsive: [
            {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 4,
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 3,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 2,
                }
            }
        ]
    };

    if (loading) {
        return <div className="text-center p-4"><Spin /></div>;
    }

    if (error) {
        return <div className="p-4"><Alert message={error} type="error" /></div>;
    }

    return (
        <div className="featured-brands-section">
            <Title level={3} className="text-center section-title">Trusted by the Best</Title>
            <Slider {...sliderSettings}>
                {brands.map(brand => (
                    <div key={brand.id} className="brand-logo-container">
                        <img src={brand.logoUrl} alt={brand.name} className="brand-logo" />
                    </div>
                ))}
            </Slider>
        </div>
    );
};

export default FeaturedBrands;

```

### ClientApp\src\components\FeaturedCategories\CategoryLarge.jsx
```jsx
import React from "react";
import { useNavigate } from "react-router-dom";

const CategoryLarge = ({ id, name, image }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    navigate(`/ProductList?categoryId=${id}`);
  };

  return (
    <div
      className="relative w-[420px] h-[180px] sm:w-[350px] sm:h-[160px] xs:w-[300px] bg-gradient-to-br from-gray-50 to-gray-200 rounded-xl shadow-lg overflow-hidden p-4 transition-all duration-300 hover:shadow-xl hover:-translate-y-1 mt-4 cursor-pointer"
      onClick={handleClick}
    >
      <span className="absolute top-3 left-4 text-lg font-semibold text-gray-800 px-2 py-1 z-10">
        {name}
      </span>
      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 h-full flex items-center">
        <img
    src={
        image?.startsWith("http")
            ? image // Full external URL
            : `${process.env.REACT_APP_API_BASE_URL}${image}`
    }
    alt={`logo`}
          className="max-h-[130px] sm:max-h-[110px] xs:max-h-[100px] object-contain transition-transform duration-300 hover:scale-115 hover:rotate-2"
    onError={(e) => {
        e.target.onerror = null;
        e.target.src = "https://via.placeholder.com/50";
    }}
/>
      </div>
      <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-red-400 to-purple-500 opacity-75"></div>
    </div>
  );
};

export default CategoryLarge;

```

### ClientApp\src\components\FeaturedCategories\FeaturedCategories.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const FeaturedCategories = ({ data }) => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        // Fetch categories from the new API endpoint
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
        // Filter for active categories if the API doesn't do it by default
        // (Our new API does, but keeping this for robustness)
        setCategories(response.data);
      } catch (err) {
        setError('Failed to load categories.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  if (loading) {
    return <div className="text-white">Loading categories...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  return (
    <section className="py-16 md:py-24 bg-primary-dark">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {categories.map((category) => (
            <a
              key={category.id}
              href={`/ProductList?categoryId=${category.id}`}
              className="group block bg-white/5 p-6 rounded-lg border border-white-20 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:border-electric-blue"
            >
              <div className="flex flex-col items-center text-center">
                <img src={category.image} alt={category.name} className="h-24 w-24 object-contain mb-4 filter grayscale group-hover:filter-none transition-all duration-300" />
                <h3 className="font-display text-xl font-bold text-white transition-colors duration-300 group-hover:text-electric-blue">
                  {category.name}
                </h3>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  );
};

export default FeaturedCategories;
```

### ClientApp\src\components\FeaturedCategories\FeaturedCategories.jsx
```jsx
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination } from "swiper/modules";
import { useNavigate } from "react-router-dom";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import "aos/dist/aos.css";
import AOS from "aos";
import CategoryLarge from "./CategoryLarge";
import { useCategories } from "@/hooks/api/useCategories";

const FeaturedCategories = () => {
  const { categories, loading, error } = useCategories();
  const navigate = useNavigate();

  React.useEffect(() => {
    AOS.init({ duration: 1000 });
  }, []);

  if (loading) {
    return <div className="text-center py-6">Đang tải danh mục...</div>;
  }

  if (error) {
    return <div className="text-center py-6 text-red-500">{error}</div>;
  }

  return (
    <div className="w-full flex justify-center py-6">
      <div className="max-w-[1200px] w-full px-4">
        <Swiper
          modules={[Navigation, Pagination]}
          navigation
          pagination={{ clickable: true }}
          spaceBetween={20}
          slidesPerView={1}
          breakpoints={{
            640: { slidesPerView: 2 },
            768: { slidesPerView: 3 },
            1024: { slidesPerView: 4 },
          }}
          className="pb-6 transition-transform duration-500 ease-in-out"
        >
          {categories.map((category) => (
            <SwiperSlide
              key={category.id}
              className="flex justify-center transform hover:scale-105 transition-all duration-300"
            >
              <CategoryLarge
                id={category.id}
                name={category.name}
                image={category.image}
              />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </div>
  );
};

export default FeaturedCategories;

```

### ClientApp\src\components\FlashSale\FlashSale.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductCard from '@/components/shared/ProductCard';
// File removed. Migrated to FlashSale.jsx
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation } from 'swiper/modules';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';

const CountdownTimer = ({ endDate }) => {
    const calculateTimeLeft = () => {
        const difference = +new Date(endDate) - +new Date();
        let timeLeft = {};

        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60),
            };
        }

        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);

        return () => clearTimeout(timer);
    });

    const timerComponents = [];

    Object.keys(timeLeft).forEach((interval) => {
        if (!timeLeft[interval] && timeLeft[interval] !== 0) {
            return;
        }

        timerComponents.push(
            <div key={interval} className="text-center">
                <div className="font-display text-xl md:text-2xl font-bold text-neon-magenta">
                    {String(timeLeft[interval]).padStart(2, '0')}
                </div>
                <div className="text-xs uppercase text-light-gray">{interval.charAt(0).toUpperCase() + interval.slice(1)}</div>
            </div>
        );
    });

    return (
        <div className="flex space-x-2 md:space-x-4 justify-center">
            {timerComponents.length ? timerComponents : <span className="text-light-gray">Sale Ended!</span>}
        </div>
    );
};

const FlashSale = ({ data }) => {
  const [flashSaleProducts, setFlashSaleProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchFlashSaleProducts = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/products/flash-sale');
        setFlashSaleProducts(response.data);
      } catch (error) {
        console.error('Failed to fetch flash sale products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchFlashSaleProducts();
  }, []);

  if (loading) {
    return <div className="text-white">Loading flash sales...</div>;
  }

  if (flashSaleProducts.length === 0) {
    return null; // Don't render section if no flash sale products
  }

  return (
    <section className="py-16 md:py-24 bg-primary-dark">
      <div className="container mx-auto px-4">
        <h2 className="font-display text-3xl md:text-4xl font-bold text-center text-white mb-12">
          {data.headline || "Flash Sale!"} {/* Use data.headline for section title */}
        </h2>
        
        <Swiper
          modules={[Navigation]}
          spaceBetween={30}
          slidesPerView={1}
          navigation
          breakpoints={{
            640: {
              slidesPerView: 2,
            },
            768: {
              slidesPerView: 3,
            },
            1024: {
              slidesPerView: 4,
            },
          }}
          className="!pb-10"
        >
          {flashSaleProducts.map((product) => (
            <SwiperSlide key={product.id}>
              <ProductCard product={product} isFlashSale={true} />
              {product.flashSaleEndDate && (
                <div className="mt-4">
                  <CountdownTimer endDate={product.flashSaleEndDate} />
                </div>
              )}
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </section>
  );
};

export default FlashSale;
```

### ClientApp\src\components\FlashSale\FlashSale.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Flaslsalebanner from "../../assets/img/anhcuanghia/hot-sale-cuoi-tuan.gif";
import { useFlashSaleProducts } from "@/hooks/api/useFlashSaleProducts";

const INITIAL_PRODUCTS_TO_SHOW = 10;

const FlashSale = () => {
  const { products, loading, error } = useFlashSaleProducts();
  const [visibleCount, setVisibleCount] = useState(INITIAL_PRODUCTS_TO_SHOW);
  const [timeLeft, setTimeLeft] = useState({ hours: 0, minutes: 0, seconds: 0 });
  const navigate = useNavigate();

  useEffect(() => {
    if (products.length > 0 && products[0].flashSaleEndDate) {
      const timer = setInterval(() => {
        const now = new Date().getTime();
        const endDate = new Date(products[0].flashSaleEndDate).getTime();
        const diff = endDate - now;

        if (diff <= 0) {
          setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });
          clearInterval(timer);
          return;
        }

        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((diff % (1000 * 60)) / 1000);

        setTimeLeft({ hours, minutes, seconds });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [products]);

  const handleLoadMore = () => {
    setVisibleCount(prevCount => prevCount + INITIAL_PRODUCTS_TO_SHOW);
  };

  const getPrimaryImage = (images) => {
    if (!images || images.length === 0) return "https://via.placeholder.com/300";
    const primaryImage = images.find(img => img.isPrimary);
    const imageUrl = primaryImage?.imageUrl || images[0]?.imageUrl;
    return imageUrl?.startsWith("http") ? imageUrl : `${process.env.REACT_APP_API_BASE_URL}/${imageUrl}`;
  };

  const getDisplayPrice = (variants, flashSalePrice) => {
    const originalPrice = variants?.[0]?.price || 0;
    const displayPrice = flashSalePrice ?? originalPrice;
    const oldPrice = flashSalePrice ? originalPrice : null;
    const discountAmount = oldPrice ? oldPrice - displayPrice : 0;

    return { displayPrice, oldPrice, discountAmount };
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-red-500"></div>
        <span className="ml-3 text-gray-600">Đang tải sản phẩm...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mx-auto max-w-3xl my-6">
        <p className="font-bold">Lỗi</p>
        <p>{error}</p>
      </div>
    );
  }

  if (products.length === 0) {
    return null; // Don't render the component if there are no flash sale products
  }

  return (
    <div className="w-full bg-gradient-to-b from-red-50 to-white py-10 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-10">
          <img
            src={Flaslsalebanner}
            alt="Flash Sale Banner"
            className="max-w-full h-auto mx-auto"
            style={{ maxHeight: '150px' }}
          />
          <div className="mt-6 flex justify-center">
            <div className="bg-white shadow-lg rounded-lg p-4 inline-flex items-center space-x-4 border-2 border-red-200">
              <span className="text-sm font-medium text-gray-600">Kết thúc sau:</span>
              <div className="flex items-center space-x-2">
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.hours.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Giờ</span>
                </div>
                <span className="text-red-600 font-bold">:</span>
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.minutes.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Phút</span>
                </div>
                <span className="text-red-600 font-bold">:</span>
                <div className="bg-red-600 text-white rounded p-2 min-w-[50px] text-center">
                  <span className="block text-xl font-bold">{timeLeft.seconds.toString().padStart(2, '0')}</span>
                  <span className="text-xs">Giây</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6 pb-12">
          {products.slice(0, visibleCount).map((product) => {
            const { displayPrice, oldPrice, discountAmount } = getDisplayPrice(product.variants, product.flashSalePrice);
            return (
              <div key={product.id} className="h-full flex flex-col">
                <div
                  className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 cursor-pointer group relative border-2 border-transparent hover:border-red-500 flex flex-col h-full"
                  onClick={() => navigate(`/product/${product.id}`)}
                >
                  <div className="absolute top-0 left-0 bg-red-600 text-white text-xs font-bold px-3 py-1 z-10 clip-path-ribbon">
                    HOT SALE
                  </div>
                  <div className="relative aspect-square bg-gray-50 flex-shrink-0">
                    <img
                      src={getPrimaryImage(product.images)}
                      alt={product.name}
                      className="absolute top-0 left-0 w-full h-full object-contain p-4 group-hover:scale-105 transition-transform duration-300"
                      onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/300"; }}
                    />
                  </div>
                  <div className="p-5 flex flex-col flex-grow" style={{ minHeight: '280px' }}>
                    <div className="flex justify-between items-start mb-2">
                      {oldPrice && (
                        <span className="text-gray-500 text-sm line-through">
                          {oldPrice.toLocaleString('vi-VN')}đ
                        </span>
                      )}
                      <span className="text-red-600 font-bold text-lg ml-auto">
                        {displayPrice.toLocaleString('vi-VN')}đ
                      </span>
                    </div>
                    <h3 className="text-lg font-bold text-gray-900 mb-2 line-clamp-2" style={{ height: '3.5rem' }}>
                      {product.name}
                    </h3>
                    <div className="mb-3 min-h-[28px]">
                      {discountAmount > 0 && (
                        <span className="inline-block bg-red-100 text-red-800 text-xs font-bold px-2 py-1 rounded">
                          Tiết kiệm {discountAmount.toLocaleString('vi-VN')}đ
                        </span>
                      )}
                    </div>
                    <button className="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-bold transition-all duration-300 transform hover:scale-105 shadow-md mt-auto">
                      MUA NGAY
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {products.length > visibleCount && (
          <div className="text-center mt-8">
            <button
              onClick={handleLoadMore}
              className="bg-white text-red-600 border-2 border-red-600 hover:bg-red-600 hover:text-white font-bold py-3 px-8 rounded-full transition-all duration-300 shadow-md hover:shadow-lg"
            >
              Xem thêm sản phẩm
            </button>
          </div>
        )}
      </div>

      <style jsx>{`
        .clip-path-ribbon {
          clip-path: polygon(0 0, 100% 0, 95% 50%, 100% 100%, 0 100%);
          width: 80px;
        }
      `}</style>
    </div>
  );
};

export default FlashSale;


```

### ClientApp\src\components\FlashSaleManager\FlashSaleManager.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { AutoComplete, Button, Table, InputNumber, DatePicker, message, Popconfirm, Space, Input, Card, Typography } from 'antd';
import { SearchOutlined, DeleteOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';

const { Text } = Typography;
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

const FlashSaleManager = () => {
    const [searchText, setSearchText] = useState('');
    const [searchedProducts, setSearchedProducts] = useState([]);
    const [flashSaleProducts, setFlashSaleProducts] = useState([]);
    const [loading, setLoading] = useState(false);

    const fetchFlashSaleProducts = async () => {
        setLoading(true);
        try {
            const { data } = await axios.get(`${API_BASE_URL}/api/Products/flash-sale`);
            // Fetch full product details for each flash sale item
            const productIds = (data.$values || data).map(p => p.id);
            if (productIds.length > 0) {
                const productsDetailResponse = await axios.get(`${API_BASE_URL}/api/Products/by-ids?ids=${productIds.join(',')}`);
                const detailedProducts = productsDetailResponse.data.$values || productsDetailResponse.data || [];

                const combinedProducts = (data.$values || data).map(flashSaleProduct => {
                    const detail = detailedProducts.find(dp => dp.id === flashSaleProduct.id);
                    const primaryImage = detail?.images?.find(img => img.isPrimary) || detail?.images?.[0];
                    const imageUrl = primaryImage ? (primaryImage.imageUrl.startsWith("http") ? primaryImage.imageUrl : `${API_BASE_URL}/${primaryImage.imageUrl}`) : "https://via.placeholder.com/50";

                    return {
                        ...flashSaleProduct,
                        name: detail?.name || `Product ${flashSaleProduct.id}`,
                        imageUrl: imageUrl,
                        originalPrice: detail?.variants?.[0]?.price || 0, // Assuming first variant price as original
                    };
                });
                setFlashSaleProducts(combinedProducts);
            } else {
                setFlashSaleProducts([]);
            }
        } catch (error) {
            message.error('Failed to load flash sale products.');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchFlashSaleProducts();
    }, []);

    const handleSearch = async (value) => {
        if (!value) {
            setSearchedProducts([]);
            return;
        }
        try {
            const { data } = await axios.get(`${API_BASE_URL}/api/Products/search?keyword=${value}`);
            const options = (data.$values || data).map(p => ({
                value: p.name,
                key: p.id,
                product: p,
                label: (
                    <Space>
                        <img src={p.images?.[0]?.imageUrl?.startsWith("http") ? p.images[0].imageUrl : `${API_BASE_URL}/${p.images?.[0]?.imageUrl}`} alt={p.name} style={{ width: 30, height: 30, objectFit: 'contain' }} onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/30"; }} />
                        {p.name}
                    </Space>
                )
            }));
            setSearchedProducts(options);
        } catch (error) {
            setSearchedProducts([]);
        }
    };

    const onSelect = (value, option) => {
        const product = option.product;
        if (flashSaleProducts.some(p => p.id === product.id)) {
            message.warning('Product is already in the flash sale list.');
            return;
        }
        // Add to list with default values and fetched details
        const primaryImage = product.images?.find(img => img.isPrimary) || product.images?.[0];
        const imageUrl = primaryImage ? (primaryImage.imageUrl.startsWith("http") ? primaryImage.imageUrl : `${API_BASE_URL}/${primaryImage.imageUrl}`) : "https://via.placeholder.com/50";

        setFlashSaleProducts(prev => [...prev, {
            id: product.id,
            name: product.name,
            imageUrl: imageUrl,
            originalPrice: product.variants?.[0]?.price || 0,
            flashSalePrice: 0,
            flashSaleStartDate: null,
            flashSaleEndDate: null
        }]);
        setSearchText(''); // Clear search input
    };

    const handleUpdate = async (productId, field, value) => {
        const product = flashSaleProducts.find(p => p.id === productId);
        if (!product) return;

        const updatedProduct = { ...product, [field]: value };

        // Optimistic update
        setFlashSaleProducts(prev => prev.map(p => p.id === productId ? updatedProduct : p));

        const dto = {
            FlashSalePrice: updatedProduct.flashSalePrice,
            FlashSaleStartDate: updatedProduct.flashSaleStartDate,
            FlashSaleEndDate: updatedProduct.flashSaleEndDate,
        };

        try {
            await axios.put(`${API_BASE_URL}/api/Products/${productId}/set-flash-sale`, dto);
            message.success('Flash sale updated!');
        } catch (error) {
            message.error('Failed to update flash sale.');
            // Revert on failure
            setFlashSaleProducts(prev => prev.map(p => p.id === productId ? product : p));
        }
    };

    const handleRemove = async (productId) => {
        const originalList = [...flashSaleProducts];
        setFlashSaleProducts(prev => prev.filter(p => p.id !== productId));
        try {
            await axios.put(`${API_BASE_URL}/api/Products/${productId}/clear-flash-sale`);
            message.success('Product removed from flash sale.');
        } catch (error) {
            message.error('Failed to remove product from flash sale.');
            setFlashSaleProducts(originalList);
        }
    };

    const columns = [
        {
            title: 'Product',
            key: 'productInfo',
            render: (_, record) => (
                <Space>
                    <img src={record.imageUrl} alt={record.name} style={{ width: 50, height: 50, objectFit: 'contain' }} />
                    <Text>{record.name}</Text>
                </Space>
            )
        },
        {
            title: 'Original Price',
            key: 'originalPrice',
            render: (_, record) => (
                <Text delete={record.flashSalePrice !== null && record.flashSalePrice < record.originalPrice}>
                    {record.originalPrice.toLocaleString('vi-VN')}đ
                </Text>
            )
        },
        {
            title: 'Flash Sale Price',
            dataIndex: 'flashSalePrice',
            key: 'flashSalePrice',
            render: (price, record) => (
                <InputNumber
                    defaultValue={price}
                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + 'đ'}
                    parser={value => value.replace(/\s?đ|(,*)/g, '')}
                    onBlur={(e) => handleUpdate(record.id, 'flashSalePrice', parseFloat(e.target.value.replace(/đ|,/g, '')))}
                    style={{ width: 150 }}
                    min={0}
                />
            )
        },
        {
            title: 'Start Date',
            dataIndex: 'flashSaleStartDate',
            key: 'flashSaleStartDate',
            render: (date, record) => (
                <DatePicker
                    showTime
                    format="YYYY-MM-DD HH:mm:ss"
                    value={date ? dayjs(date) : null}
                    onChange={(value) => handleUpdate(record.id, 'flashSaleStartDate', value ? value.toISOString() : null)}
                    style={{ width: 180 }}
                />
            )
        },
        {
            title: 'End Date',
            dataIndex: 'flashSaleEndDate',
            key: 'flashSaleEndDate',
            render: (date, record) => (
                <DatePicker
                    showTime
                    format="YYYY-MM-DD HH:mm:ss"
                    value={date ? dayjs(date) : null}
                    onChange={(value) => handleUpdate(record.id, 'flashSaleEndDate', value ? value.toISOString() : null)}
                    style={{ width: 180 }}
                />
            )
        },
        {
            title: 'Action',
            key: 'action',
            render: (_, record) => (
                <Popconfirm title="Are you sure you want to remove this product from flash sale?" onConfirm={() => handleRemove(record.id)} okText="Yes" cancelText="No">
                    <Button danger icon={<DeleteOutlined />} />
                </Popconfirm>
            )
        }
    ];

    return (
        <Card title="Flash Sale Management" bordered={false} style={{ marginBottom: 24 }}>
            <Space direction="vertical" style={{ width: '100%' }}>
                <AutoComplete
                    style={{ width: '100%' }}
                    onSearch={handleSearch}
                    onSelect={onSelect}
                    placeholder="Search and add a product to flash sale..."
                    options={searchedProducts}
                    value={searchText}
                    onChange={setSearchText}
                >
                    <Input prefix={<SearchOutlined />} />
                </AutoComplete>

                <Table
                    columns={columns}
                    dataSource={flashSaleProducts}
                    rowKey="id"
                    loading={loading}
                    pagination={false}
                    bordered
                />
            </Space>
        </Card>
    );
};

export default FlashSaleManager;

```

### ClientApp\src\components\Footer\Footer.jsx
```jsx
import React from "react";
import "./Footer.css";
import { useNavigate } from "react-router-dom";
const Footer = () => {
  const navigate = useNavigate();
  const handleOrderLookup = () => {
    navigate("/order-lookup");
  };
  return (
    <footer className="footer-container">
      <div className="footer-top-container">
        <div className="footer-title">
          <h3>Hệ thống SHN Gear trên toàn quốc</h3>
          <p>
            Bao gồm Cửa hàng SHN Gear, Trung tâm Laptop, F.Studio, S.Studio,
            Garmin Brand Store
          </p>
        </div>
        <button className="store-button" onClick={handleOrderLookup}>Tra cứu đơn </button>
      </div>

      <div className="footer-content">
        {/* Kết nối mạng xã hội */}
        <div className="footer-section">
          <h4>KẾT NỐI VỚI SHN Gear</h4>
          <div className="social-icons">
            <img
              src="https://img.icons8.com/?size=96&id=118497&format=png"
              alt="Facebook"
            />
            <img
              src="https://img.icons8.com/?size=96&id=0m71tmRjlxEe&format=png"
              alt="Zalo"
            />
            <img
              src="https://img.icons8.com/?size=96&id=9a46bTk3awwI&format=png"
              alt="YouTube"
            />
            <img
              src="https://img.icons8.com/?size=100&id=118638&format=png"
              alt="TikTok"
            />
          </div>

          <h4>TỔNG ĐÀI MIỄN PHÍ</h4>
          <p>
            <strong>Tư vấn mua hàng (Miễn phí)</strong>
          </p>
          <p>
            <strong>0338397638 (Nhánh 1)</strong>
          </p>
          <p>
            <strong>Góp ý, khiếu nại</strong>
          </p>
          <p>
            <strong>0797841166 (8h00 - 22h00)</strong>
          </p>
          <p>
            <strong>Hỗ trợ kỹ thuật</strong>
          </p>
          <p>
            <strong>Gặp chuyên gia ngay!</strong>
          </p>
        </div>

        {/* Về chúng tôi */}
        <div className="footer-section">
          <h4>VỀ CHÚNG TÔI</h4>
          <ul>
            <li>Giới thiệu về công ty</li>
            <li>Quy chế hoạt động</li>
            <li>Dự án Doanh nghiệp</li>
            <li>Tin tức khuyến mại</li>
            <li>Giới thiệu máy đổi trả</li>
            <li>Hướng dẫn mua hàng & thanh toán online</li>
            <li>Tra cứu hóa đơn điện tử</li>
            <li>Câu hỏi thường gặp</li>
          </ul>
        </div>

        {/* Chính sách */}
        <div className="footer-section">
          <h4>CHÍNH SÁCH</h4>
          <ul>
            <li>Chính sách bảo hành</li>
            <li>Chính sách đổi trả</li>
            <li>Chính sách bảo mật</li>
            <li>Chính sách trả góp</li>
            <li>Chính sách giao hàng & lắp đặt</li>
            <li>Chính sách thu thập & xử lý dữ liệu cá nhân</li>
          </ul>
        </div>

        {/* Hỗ trợ thanh toán */}
        <div className="footer-section">
          <h4>HỖ TRỢ THANH TOÁN</h4>
          <div className="payment-icons">
            <img
              src="https://img.icons8.com/?size=96&id=13608&format=png"
              alt="Visa"
            />
            <img
              src="https://img.icons8.com/?size=96&id=Sq0VNi1Afgmj&format=png"
              alt="Mastercard"
            />
            <img
              src="https://img.icons8.com/?size=160&id=ikCy0r3I68vX&format=png"
              alt="Momo"
            />
            <img
              src="https://img.icons8.com/?size=96&id=0m71tmRjlxEe&format=png"
              alt="ZaloPay"
            />
            <img
              src="https://img.icons8.com/?size=160&id=cFdvD3H13wdO&format=png"
              alt="Apple Pay"
            />
            <img
              src="https://img.icons8.com/?size=160&id=PjkFdGXiQbvY&format=png"
              alt="Samsung Pay"
            />
          </div>

          <h4>CHỨNG NHẬN</h4>
          <div className="certification-icons">
            <img
              src="https://th.bing.com/th?id=OIP.vZ2cjkL0u4w45jFKiHnkyQHaHa&w=104&h=104&c=7&bgcl=552c98&r=0&o=6&dpr=1.3&pid=13.1"
              alt="DMCA"
            />
            <img
              src="https://th.bing.com/th?id=OIP.JWsl39NXvjcGkxk3H3aB8wHaCz&w=349&h=132&c=8&rs=1&qlt=90&o=6&dpr=1.3&pid=3.1&rm=2"
              alt="Bộ Công Thương"
            />
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

### ClientApp\src\components\HeroBanner\HeroBanner.js
```js
import React from 'react';

const HeroBanner = ({ data }) => {
  return (
    <section className="relative h-screen flex items-center justify-center text-center text-white overflow-hidden">
      {data.background_type === 'video' ? (
        <video
          autoPlay
          loop
          muted
          playsInline
          className="absolute top-0 left-0 w-full h-full object-cover z-0"
          src={data.background_url}
        >
          Your browser does not support the video tag.
        </video>
      ) : (
        <div
          className="absolute top-0 left-0 w-full h-full bg-cover bg-center z-0"
          style={{ backgroundImage: `url(${data.background_url})` }}
        ></div>
      )}

      <div className="absolute top-0 left-0 w-full h-full bg-black opacity-50 z-10"></div>

      <div className="relative z-20 flex flex-col items-center px-4">
        <h1 className="font-display text-4xl md:text-6xl lg:text-7xl uppercase font-bold tracking-wider mb-4">
          {data.headline}
        </h1>
        <p className="font-sans text-lg md:text-xl text-light-gray mb-8 max-w-2xl">
          {data.slogan}
        </p>
        <a
          href={data.cta_link}
          className="font-sans uppercase font-semibold tracking-widest px-8 py-3 border-2 border-electric-blue text-white transition-all duration-300 hover:bg-electric-blue hover:text-primary-dark focus:outline-none focus:ring-2 focus:ring-electric-blue focus:ring-opacity-50"
        >
          {data.cta_text}
        </a>
      </div>
    </section>
  );
};

export default HeroBanner;

```

### ClientApp\src\components\HeroBanner\HeroBanner.jsx
```jsx
import { useState, useEffect } from "react";
import Banner1 from "../../assets/img/anhcuanghia/banner1.png";
import Banner2 from "../../assets/img/anhcuanghia/bannervip.png";
import Banner3 from "../../assets/img/anhcuanghia/hieuthuhai.png";

const Slider = () => {
  const slides = [
    { img: Banner1 },
    { img: Banner2 },
    { img: Banner3 },
  ];

  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);

  // Auto-rotate slides
  useEffect(() => {
    const interval = setInterval(() => {
      nextSlide();
    }, 5000);
    return () => clearInterval(interval);
  }, [currentIndex]);

  const nextSlide = () => {
    setIsTransitioning(true);
    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);
  };

  const prevSlide = () => {
    setIsTransitioning(true);
    setCurrentIndex((prevIndex) => (prevIndex - 1 + slides.length) % slides.length);
  };

  const goToSlide = (index) => {
    setIsTransitioning(true);
    setCurrentIndex(index);
  };

  // Reset transitioning state after animation completes
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsTransitioning(false);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentIndex]);

  return (
    <div className="relative w-full overflow-hidden">
      {/* Slider container */}
      <div className="relative">
        {/* Slider */}
        <div className={`flex relative ${isTransitioning ? "transition-opacity duration-500 ease-in-out" : ""}`}>
          {slides.map((slide, index) => (
            <div
              key={index}
              className={`flex-shrink-0 w-full transition-opacity duration-500 ${index === currentIndex ? "opacity-100" : "opacity-0 absolute"}`}
            >
              <div className="relative">
                <img
                  src={slide.img}
                  alt={`Slide ${index + 1}`}
                  className="w-full h-auto object-cover"
                  loading="lazy"
                />
                {/* Gradient overlay để tạo hiệu ứng trong suốt dần về phía dưới */}
                <div
                  className="absolute inset-0 bg-gradient-to-t from-transparent via-transparent to-black/20 pointer-events-none"
                  style={{
                    maskImage: "linear-gradient(to bottom, black 50%, transparent 100%)",
                    WebkitMaskImage: "linear-gradient(to bottom, black 50%, transparent 100%)"
                  }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Navigation buttons */}
      <button
        className="absolute top-1/2 left-5 -translate-y-1/2 w-12 h-12 bg-white/70 rounded-full flex items-center justify-center z-10 transition-all hover:bg-white/90 hover:scale-105 shadow-md"
        onClick={prevSlide}
      >
        <svg className="w-6 h-6 text-gray-800" viewBox="0 0 24 24">
          <path fill="currentColor" d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z" />
        </svg>
      </button>
      <button
        className="absolute top-1/2 right-5 -translate-y-1/2 w-12 h-12 bg-white/70 rounded-full flex items-center justify-center z-10 transition-all hover:bg-white/90 hover:scale-105 shadow-md"
        onClick={nextSlide}
      >
        <svg className="w-6 h-6 text-gray-800" viewBox="0 0 24 24">
          <path fill="currentColor" d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z" />
        </svg>
      </button>

      {/* Indicators - Phiên bản cao cấp gọn nhẹ */}
      <div className="absolute bottom-6 left-1/2 -translate-x-1/2 flex space-x-1.5 z-20">
        {slides.map((_, index) => (
          <button
            key={index}
            onClick={() => goToSlide(index)}
            className={`relative w-2 h-2 rounded-full transition-all duration-300 ease-out ${index === currentIndex
                ? "bg-white scale-[1.8] shadow-[0_0_8px_rgba(255,255,255,0.8)]"
                : "bg-white/40 hover:bg-white/60 scale-100"
              }`}
          >
            {index === currentIndex && (
              <span className="absolute inset-0 rounded-full bg-white/20 animate-ping" />
            )}
          </button>
        ))}
      </div>
    </div>
  );
};

export default Slider;
```

### ClientApp\src\components\HeroSlider\HeroSlider.jsx
```jsx
import React from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import slider1 from "..//..//assets/img/HeadPhone/banner_headphone.jpg";
import slider2 from "..//..//assets/img/Laptop/banner_laptop.jpg";
import slider3 from "..//..//assets/img/Phone/banner_iphone.jpg";
import "./HeroSlider.css";

const HeroSlider = () => {
  return (
    <div className="hero-slider">
      <Swiper
        modules={[Navigation, Autoplay]}
        spaceBetween={20} // Khoảng cách giữa các slide
        slidesPerView={2} // Hiển thị 2 slide cùng lúc
        autoplay={{ delay: 3000, disableOnInteraction: false }} // Tự động chuyển slide
        loop={true} // Lặp vô hạn
        pagination={{ clickable: true }} // Hiển thị dots điều hướng
        // navigation // Hiển thị nút điều hướng
        className="custom-swiper"
      >
        <SwiperSlide>
          <img src={slider1} alt="Slide 1" className="slide-image" />
        </SwiperSlide>
        <SwiperSlide>
          <img src={slider2} alt="Slide 2" className="slide-image" />
        </SwiperSlide>
        <SwiperSlide>
          <img src={slider3} alt="Slide 3" className="slide-image" />
        </SwiperSlide>
      </Swiper>
    </div>
  );
};

export default HeroSlider;

```

### ClientApp\src\components\Homepage\BannerSlider.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
// File removed. Migrated to BannerSlider.jsx
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination, Autoplay } from 'swiper/modules';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

const BannerSlider = () => {
  const [banners, setBanners] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchBanners = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/banners');
        setBanners(response.data);
      } catch (err) {
        setError('Failed to load banners.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchBanners();
  }, []);

  if (loading) {
    return <div className="text-white">Loading banners...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  if (banners.length === 0) {
    return null; // Don't render if no banners
  }

  return (
    <section className="w-full h-auto overflow-hidden">
      <Swiper
        modules={[Navigation, Pagination, Autoplay]}
        spaceBetween={0}
        slidesPerView={1}
        navigation
        pagination={{ clickable: true }}
        autoplay={{
          delay: 5000,
          disableOnInteraction: false,
        }}
        loop={true}
        className="w-full h-full"
      >
        {banners.map((banner) => (
          <SwiperSlide key={banner.id}>
            <a href={banner.linkUrl || '#'} className="block w-full h-full">
              <img 
                src={banner.imageUrl}
                alt="Banner"
                className="w-full h-full object-cover"
              />
            </a>
          </SwiperSlide>
        ))}
      </Swiper>
    </section>
  );
};

export default BannerSlider;

```

### ClientApp\src\components\Homepage\BannerSlider.jsx
```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination, Autoplay } from 'swiper/modules';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

const BannerSlider = () => {
  const [banners, setBanners] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() => {
    const fetchBanners = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/banners');
        setBanners(response.data);
      } catch (err) {
        setError('Failed to load banners.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchBanners();
  }, []);
  if (loading) return <div className="text-white">Loading banners...</div>;
  if (error) return <div className="text-red-500">{error}</div>;
  if (banners.length === 0) return null;
  return (
    <section className="w-full h-auto overflow-hidden">
      <Swiper
        modules={[Navigation, Pagination, Autoplay]}
        spaceBetween={0}
        slidesPerView={1}
        navigation
        pagination={{ clickable: true }}
        autoplay={{ delay: 5000, disableOnInteraction: false }}
        loop={true}
        className="w-full h-full"
      >
        {banners.map((banner) => (
          <SwiperSlide key={banner.id}>
            <img src={banner.imageUrl} alt={banner.title} className="w-full h-64 md:h-96 object-cover rounded-xl shadow-lg" />
          </SwiperSlide>
        ))}
      </Swiper>
    </section>
  );
};

export default BannerSlider;

```

### ClientApp\src\components\Homepage\BrandTrustSection.js
```js
import React from 'react';

const BrandTrustSection = ({ data }) => {
  return (
    <section className="py-16 md:py-24 bg-gray-900/50">
      <div className="container mx-auto px-4">
        {/* Brand Logos */}
        <div className="flex justify-center items-center flex-wrap gap-x-12 gap-y-8 mb-16">
          {(data?.logos || []).map((brand) => (
            <div key={brand.id} className="flex-shrink-0">
              <img 
                src={brand.logo_url} 
                alt={brand.name} 
                className="h-8 md:h-10 object-contain filter grayscale hover:filter-none transition-all duration-300"
              />
            </div>
          ))}
        </div>

        {/* Commitments */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
          {(data?.commitments || []).map((commitment) => (
            <div key={commitment.id} className="p-4">
              {/* You can use a proper icon library here */}
              <div className="flex items-center justify-center h-16 w-16 mx-auto mb-4 bg-white/5 rounded-full border border-white-20">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-electric-blue h-6 w-6"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/></svg>
              </div>
              <h3 className="font-display text-xl font-bold text-white">{commitment.title}</h3>
              <p className="text-light-gray mt-1">{commitment.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default BrandTrustSection;

```

### ClientApp\src\components\Homepage\CategoriesSection.js
```js
import React from 'react';

const CategoriesSection = ({ data }) => {
  return (
    <section className="py-16 md:py-24 bg-primary-dark">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          {data.items.map((category) => (
            <a
              key={category.id}
              href={category.link}
              className="group block bg-white/5 p-6 rounded-lg border border-white-20 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:border-electric-blue"
            >
              <div className="flex flex-col items-center text-center">
                <img src={category.image_url} alt={category.name} className="h-24 w-24 object-contain mb-4 filter grayscale group-hover:filter-none transition-all duration-300" />
                <h3 className="font-display text-xl font-bold text-white transition-colors duration-300 group-hover:text-electric-blue">
                  {category.name}
                </h3>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  );
};

export default CategoriesSection;

```

### ClientApp\src\components\Homepage\FeaturedProductsSection.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductCard from '@/components/shared/ProductCard';

// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation } from 'swiper/modules';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/navigation';

const FeaturedProductsSection = ({ data }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchProducts = async () => {
      if (!data.collection_id) return;
      try {
        setLoading(true);
        const response = await axios.get(`/api/products?collectionId=${data.collection_id}`);
        setProducts(response.data);
      } catch (error) {
        console.error('Failed to fetch featured products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [data.collection_id]);

  if (loading) {
    return <div>Loading products...</div>; // Or a proper skeleton loader
  }

  return (
    <section className="py-16 md:py-24 bg-primary-dark">
      <div className="container mx-auto px-4">
        <h2 className="font-display text-3xl md:text-4xl font-bold text-center text-white mb-12">
          {data.title}
        </h2>
        <Swiper
          modules={[Navigation]}
          spaceBetween={30}
          slidesPerView={1}
          navigation
          breakpoints={{
            640: {
              slidesPerView: 2,
            },
            768: {
              slidesPerView: 3,
            },
            1024: {
              slidesPerView: 4,
            },
          }}
          className="!pb-10"
        >
          {products.map((product) => (
            <SwiperSlide key={product.id}>
              <ProductCard product={product} />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
    </section>
  );
};

export default FeaturedProductsSection;

```

### ClientApp\src\components\Homepage\HeroSection.js
```js
import React from 'react';

const HeroSection = ({ data }) => {
  return (
    <section className="relative h-screen flex items-center justify-center text-center text-white overflow-hidden">
      {data.background_type === 'video' ? (
        <video
          autoPlay
          loop
          muted
          playsInline
          className="absolute top-0 left-0 w-full h-full object-cover z-0"
          src={data.background_url}
        >
          Your browser does not support the video tag.
        </video>
      ) : (
        <div
          className="absolute top-0 left-0 w-full h-full bg-cover bg-center z-0"
          style={{ backgroundImage: `url(${data.background_url})` }}
        ></div>
      )}

      <div className="absolute top-0 left-0 w-full h-full bg-black opacity-50 z-10"></div>

      <div className="relative z-20 flex flex-col items-center px-4">
        <h1 className="font-display text-4xl md:text-6xl lg:text-7xl uppercase font-bold tracking-wider mb-4">
          {data.headline}
        </h1>
        <p className="font-sans text-lg md:text-xl text-light-gray mb-8 max-w-2xl">
          {data.slogan}
        </p>
        <a
          href={data.cta_link}
          className="font-sans uppercase font-semibold tracking-widest px-8 py-3 border-2 border-electric-blue text-white transition-all duration-300 hover:bg-electric-blue hover:text-primary-dark focus:outline-none focus:ring-2 focus:ring-electric-blue focus:ring-opacity-50"
        >
          {data.cta_text}
        </a>
      </div>
    </section>
  );
};

export default HeroSection;

```

### ClientApp\src\components\Homepage\SpecialOfferSection.js
```js
import React, { useState, useEffect } from 'react';

const CountdownTimer = ({ endDate }) => {
    const calculateTimeLeft = () => {
        const difference = +new Date(endDate) - +new Date();
        let timeLeft = {};

        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60),
            };
        }

        return timeLeft;
    };

    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

    useEffect(() => {
        const timer = setTimeout(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);

        return () => clearTimeout(timer);
    });

    const timerComponents = [];

    Object.keys(timeLeft).forEach((interval) => {
        if (!timeLeft[interval] && timeLeft[interval] !== 0) {
            return;
        }

        timerComponents.push(
            <div key={interval} className="text-center">
                <div className="font-display text-3xl md:text-4xl font-bold text-neon-magenta">
                    {String(timeLeft[interval]).padStart(2, '0')}
                </div>
                <div className="text-xs uppercase text-light-gray">{interval}</div>
            </div>
        );
    });

    return (
        <div className="flex space-x-4">
            {timerComponents.length ? timerComponents : <span>Time's up!</span>}
        </div>
    );
};

const SpecialOfferSection = ({ data }) => {
    const imageUrl = data.image_url?.startsWith("http") 
        ? data.image_url 
        : `${process.env.REACT_APP_API_BASE_URL}/${data.image_url}`;

    return (
        <section className="py-16 md:py-24 bg-primary-dark">
            <div className="container mx-auto px-4">
                <div className="relative rounded-lg overflow-hidden bg-gray-900">
                    <img src={imageUrl} alt="Special Offer" className="absolute w-full h-full object-cover opacity-30" />
                    <div className="relative p-8 md:p-16 flex flex-col lg:flex-row items-center justify-between">
                        <div className="text-center lg:text-left mb-8 lg:mb-0">
                            <h2 className="font-display text-3xl md:text-4xl font-bold text-white uppercase">{data.headline}</h2>
                            <p className="mt-2 text-lg text-light-gray max-w-lg">{data.sub_text}</p>
                            <div className="mt-4 flex items-center justify-center lg:justify-start space-x-4">
                                {data.originalPrice && (
                                    <span className="text-2xl text-gray-500 line-through">
                                        {data.originalPrice.toLocaleString('vi-VN')}đ
                                    </span>
                                )}
                                {data.discountPrice && (
                                    <span className="text-4xl font-bold text-neon-magenta">
                                        {data.discountPrice.toLocaleString('vi-VN')}đ
                                    </span>
                                )}
                            </div>
                        </div>
                        <div className="flex flex-col items-center">
                            {data.countdown_enabled && <CountdownTimer endDate={data.countdown_end_date} />}
                            <a href={data.cta_link} className="mt-6 font-sans uppercase font-semibold tracking-widest px-8 py-3 bg-neon-magenta text-primary-dark transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-neon-magenta focus:ring-opacity-50 rounded-md">
                                {data.cta_text}
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default SpecialOfferSection;

```

### ClientApp\src\components\layouts\AdminLayout.js
```js
import React from "react";
import Sidebar from "@/components/Admin/common/Sidebar.jsx";

const AdminLayout = ({ children }) => {
  return (
    <div className="flex h-screen bg-gray-900 text-gray-100">
      {/* BG */}
      <div className="fixed inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900" />
      </div>

      <Sidebar />
      <div className="flex-1 flex flex-col relative z-10 min-h-0">
        {children}
      </div>
    </div>
  );
};

export default AdminLayout;

```

### ClientApp\src\components\layouts\DefaultLayout.js
```js
import React from 'react';
import Navbar from '@/components/Navbar/Navbar';
import Footer from '@/components/Footer/Footer';

const DefaultLayout = ({ children }) => {
  return (
    <div className="flex flex-col min-h-screen bg-primary-dark">
      <Navbar />
      <main className="flex-grow">
        {children}
      </main>
      <Footer />
    </div>
  );
};

export default DefaultLayout;

```

### ClientApp\src\components\List\CategoryMenu.jsx
```jsx
import React from "react";
import {
  Box,
  Container,
  Grid,
  Typography,
  Skeleton,
  Paper,
  Fade,
  Chip,
} from "@mui/material";
import { motion } from "framer-motion";
import { useCategories } from "@/hooks/api/useCategories";

const CategoryMenu = () => {
  const { categories, loading } = useCategories();
  const [hoveredCategory, setHoveredCategory] = React.useState(null);

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  };

  if (loading) {
    return (
      <Box p={3}>
        <Grid container spacing={3}>
          {[1, 2, 3, 4, 5, 6].map((item) => (
            <Grid item xs={6} sm={4} md={2} key={item}>
              <Skeleton
                variant="rounded"
                height={160}
                sx={{
                  borderRadius: 4,
                  transform: "none",
                  backgroundColor: "rgba(0,0,0,0.04)",
                }}
              />
            </Grid>
          ))}
        </Grid>
      </Box>
    );
  }

  return (
    <Box p={3}>
      <motion.div variants={container} initial="hidden" animate="show">
        <Grid container spacing={3}>
          {categories
            .filter((cat) => !cat.parentId)
            .map((category) => (
              <Grid item xs={6} sm={4} md={2} key={category.id}>
                <motion.div variants={item}>
                  <Paper
                    elevation={0}
                    component={motion.div}
                    whileHover={{ y: -8 }}
                    onMouseEnter={() => setHoveredCategory(category.id)}
                    onMouseLeave={() => setHoveredCategory(null)}
                    onClick={() =>
                      (window.location.href = `/ProductList?categoryId=${category.id}`)
                    }
                    sx={{
                      p: 2,
                      height: "100%",
                      borderRadius: 4,
                      cursor: "pointer",
                      overflow: "hidden",
                      position: "relative",
                      border: "1px solid",
                      borderColor: "divider",
                      transition: "all 0.3s ease",
                      background:
                        "linear-gradient(135deg, rgba(255,255,255,0.95), rgba(255,255,255,0.9))",
                      backdropFilter: "blur(10px)",
                      "&:hover": {
                        borderColor: "primary.main",
                        boxShadow:
                          "0 10px 20px -10px rgba(0,0,0,0.1), 0 0 0 1px rgba(0,0,0,0.02)",
                      },
                    }}
                  >
                    {/* Background Pattern */}
                    <Box
                      sx={{
                        position: "absolute",
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        opacity: 0.03,
                        background:
                          "repeating-linear-gradient(45deg, #000 0, #000 1px, transparent 0, transparent 50%)",
                        backgroundSize: "10px 10px",
                        zIndex: 0,
                      }}
                    />

                    <Box
                      sx={{
                        position: "relative",
                        zIndex: 1,
                        height: "100%",
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "center",
                        textAlign: "center",
                      }}
                    >
                      {/* Category Image */}
                      <Box
                        sx={{
                          mb: 2,
                          width: "100%",
                          aspectRatio: "1",
                          position: "relative",
                          overflow: "hidden",
                          borderRadius: 3,
                        }}
                      >
                        <Box
                          component="img"
                          src={
                            category.image?.startsWith("http")
                              ? category.image
                              : `${process.env.REACT_APP_API_BASE_URL}/${category.image}`
                          }
                          alt={category.name}
                          onError={(e) => {
                            e.target.onerror = null;
                            e.target.src = "https://via.placeholder.com/150";
                          }}
                          sx={{
                            width: "100%",
                            height: "100%",
                            objectFit: "contain",
                            transition: "transform 0.6s ease",
                            transform:
                              hoveredCategory === category.id
                                ? "scale(1.1)"
                                : "scale(1)",
                          }}
                        />
                      </Box>

                      {/* Category Name */}
                      <Typography
                        variant="subtitle2"
                        sx={{
                          fontWeight: 600,
                          color: "text.primary",
                          transition: "color 0.3s ease",
                          position: "relative",
                          "&::after": {
                            content: '""',
                            position: "absolute",
                            bottom: -4,
                            left: "50%",
                            width:
                              hoveredCategory === category.id ? "100%" : "0%",
                            height: 2,
                            bgcolor: "primary.main",
                            transition: "all 0.3s ease",
                            transform: "translateX(-50%)",
                          },
                        }}
                      >
                        {category.name}
                      </Typography>

                      {/* Product Count */}
                      <Fade in={hoveredCategory === category.id}>
                        <Chip
                          label="Xem ngay"
                          size="small"
                          color="primary"
                          sx={{
                            mt: 1,
                            fontSize: "0.75rem",
                            height: 24,
                          }}
                        />
                      </Fade>
                    </Box>
                  </Paper>
                </motion.div>
              </Grid>
            ))}
        </Grid>
      </motion.div>
    </Box>
  );
};

export default CategoryMenu;

```

### ClientApp\src\components\List\FilterSection.jsx
```jsx
import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Slider,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Chip,
  Button,
  Skeleton,
  Avatar,
  Divider,
  Collapse,
  IconButton,
} from "@mui/material";
import { ChevronDown, Filter, X, CheckCircle2, Circle } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useBrands } from "@/hooks/api/useBrands";

const priceRanges = [
  { value: "all", min: 0, max: Infinity, label: "Tất cả" },
  { value: "0-2000000", min: 0, max: 2000000, label: "Dưới 2 triệu" },
  {
    value: "2000000-4000000",
    min: 2000000,
    max: 4000000,
    label: "2 - 4 triệu",
  },
  {
    value: "4000000-7000000",
    min: 4000000,
    max: 7000000,
    label: "4 - 7 triệu",
  },
  {
    value: "7000000-13000000",
    min: 7000000,
    max: 13000000,
    label: "7 - 13 triệu",
  },
  {
    value: "13000000-20000000",
    min: 13000000,
    max: 20000000,
    label: "13 - 20 triệu",
  },
  {
    value: "20000000-99999999",
    min: 20000000,
    max: 99999999,
    label: "Trên 20 triệu",
  },
];

const FilterSection = ({ onPriceChange, onBrandChange }) => {
  const [expanded, setExpanded] = useState(["price", "brand"]);
  const [selectedBrands, setSelectedBrands] = useState([]);
  const [selectedPrice, setSelectedPrice] = useState("all");
  const [showAllBrands, setShowAllBrands] = useState(false);
  const { brands, loading } = useBrands(true);

  const handleAccordionChange = (panel) => (_, isExpanded) => {
    setExpanded(
      isExpanded
        ? [...expanded, panel]
        : expanded.filter((item) => item !== panel)
    );
  };

  const handlePriceChange = (range) => {
    setSelectedPrice(range);
    onPriceChange(range);
  };

  const handleBrandChange = (brandId) => {
    const newSelectedBrands = selectedBrands.includes(brandId)
      ? selectedBrands.filter((id) => id !== brandId)
      : [...selectedBrands, brandId];

    setSelectedBrands(newSelectedBrands);
    onBrandChange(newSelectedBrands.length > 0 ? newSelectedBrands : null);
  };

  const clearFilters = () => {
    setSelectedPrice("all");
    setSelectedBrands([]);
    onPriceChange("all");
    onBrandChange(null);
  };

  const hasActiveFilters = selectedPrice !== "all" || selectedBrands.length > 0;

  return (
    <Box>
      {/* Header */}
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          mb: 3,
        }}
      >
        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <Filter size={20} />
          <Typography variant="subtitle1" fontWeight={600}>
            Bộ lọc tìm kiếm
          </Typography>
        </Box>
        {hasActiveFilters && (
          <IconButton
            size="small"
            onClick={clearFilters}
            sx={{
              color: "text.secondary",
              "&:hover": {
                color: "error.main",
                bgcolor: "error.lighter",
              },
            }}
          >
            <X size={18} />
          </IconButton>
        )}
      </Box>

      {/* Active Filters */}
      <AnimatePresence>
        {hasActiveFilters && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2 }}
          >
            <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mb: 3 }}>
              {selectedPrice !== "all" && (
                <Chip
                  label={
                    priceRanges.find((r) => r.value === selectedPrice)?.label
                  }
                  onDelete={() => handlePriceChange("all")}
                  size="small"
                  color="primary"
                  variant="outlined"
                />
              )}
              {selectedBrands.map((brandId) => {
                const brand = brands.find((b) => b.id === brandId);
                return (
                  brand && (
                    <Chip
                      key={brandId}
                      label={brand.name}
                      onDelete={() => handleBrandChange(brandId)}
                      size="small"
                      color="primary"
                      variant="outlined"
                      avatar={
                        brand.logo ? (
                          <Avatar
                            src={
                              brand.logo?.startsWith("http")
                                ? brand.logo
                                : `${process.env.REACT_APP_API_BASE_URL}/${brand.logo}`
                            }
                            sx={{ width: 20, height: 20 }}
                          />
                        ) : null
                      }
                    />
                  )
                );
              })}
            </Box>
          </motion.div>
        )}
      </AnimatePresence>

      <Divider sx={{ mb: 3 }} />

      {/* Price Filter */}
      <Accordion
        expanded={expanded.includes("price")}
        onChange={handleAccordionChange("price")}
        elevation={0}
        disableGutters
        sx={{
          "&:before": { display: "none" },
          mb: 2,
          bgcolor: "transparent",
        }}
      >
        <AccordionSummary
          expandIcon={<ChevronDown size={20} />}
          sx={{
            px: 0,
            "&.Mui-expanded": {
              minHeight: 48,
            },
          }}
        >
          <Typography variant="subtitle2" fontWeight={600}>
            Khoảng giá
          </Typography>
        </AccordionSummary>
        <AccordionDetails sx={{ px: 0, py: 1 }}>
          <FormGroup>
            {priceRanges.map((range) => (
              <motion.div
                key={range.value}
                whileHover={{ x: 4 }}
                transition={{ duration: 0.2 }}
              >
                <FormControlLabel
                  control={
                    <Checkbox
                      icon={<Circle size={18} />}
                      checkedIcon={<CheckCircle2 size={18} />}
                      checked={selectedPrice === range.value}
                      onChange={() => handlePriceChange(range.value)}
                      size="small"
                    />
                  }
                  label={
                    <Typography
                      variant="body2"
                      sx={{
                        color:
                          selectedPrice === range.value
                            ? "primary.main"
                            : "text.primary",
                        fontWeight: selectedPrice === range.value ? 500 : 400,
                      }}
                    >
                      {range.label}
                    </Typography>
                  }
                  sx={{
                    py: 0.5,
                    transition: "all 0.2s",
                    "&:hover": {
                      color: "primary.main",
                    },
                  }}
                />
              </motion.div>
            ))}
          </FormGroup>
        </AccordionDetails>
      </Accordion>

      {/* Brand Filter */}
      <Accordion
        expanded={expanded.includes("brand")}
        onChange={handleAccordionChange("brand")}
        elevation={0}
        disableGutters
        sx={{
          "&:before": { display: "none" },
          bgcolor: "transparent",
        }}
      >
        <AccordionSummary
          expandIcon={<ChevronDown size={20} />}
          sx={{
            px: 0,
            "&.Mui-expanded": {
              minHeight: 48,
            },
          }}
        >
          <Typography variant="subtitle2" fontWeight={600}>
            Thương hiệu
          </Typography>
        </AccordionSummary>
        <AccordionDetails sx={{ px: 0, py: 1 }}>
          {loading ? (
            <Box sx={{ py: 2 }}>
              <Skeleton height={32} sx={{ mb: 1 }} />
              <Skeleton height={32} sx={{ mb: 1 }} />
              <Skeleton height={32} />
            </Box>
          ) : (
            <FormGroup>
              <AnimatePresence>
                {brands
                  .slice(0, showAllBrands ? undefined : 6)
                  .map((brand, index) => (
                    <motion.div
                      key={brand.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2, delay: index * 0.05 }}
                    >
                      <FormControlLabel
                        control={
                          <Checkbox
                            icon={<Circle size={18} />}
                            checkedIcon={<CheckCircle2 size={18} />}
                            checked={selectedBrands.includes(brand.id)}
                            onChange={() => handleBrandChange(brand.id)}
                            size="small"
                          />
                        }
                        label={
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              gap: 1,
                            }}
                          >
                            {brand.logo && (
                              <Avatar
                                src={
                                  brand.logo?.startsWith("http")
                                    ? brand.logo
                                    : `${process.env.REACT_APP_API_BASE_URL}/${brand.logo}`
                                }
                                sx={{ width: 24, height: 24 }}
                                variant="rounded"
                              />
                            )}
                            <Typography
                              variant="body2"
                              sx={{
                                color: selectedBrands.includes(brand.id)
                                  ? "primary.main"
                                  : "text.primary",
                                fontWeight: selectedBrands.includes(brand.id)
                                  ? 500
                                  : 400,
                              }}
                            >
                              {brand.name}
                            </Typography>
                          </Box>
                        }
                        sx={{
                          py: 0.5,
                          transition: "all 0.2s",
                          "&:hover": {
                            color: "primary.main",
                          },
                        }}
                      />
                    </motion.div>
                  ))}
              </AnimatePresence>

              {brands.length > 6 && (
                <Box sx={{ mt: 1 }}>
                  <Button
                    size="small"
                    onClick={() => setShowAllBrands(!showAllBrands)}
                    sx={{
                      textTransform: "none",
                      color: "primary.main",
                      "&:hover": {
                        bgcolor: "primary.lighter",
                      },
                    }}
                  >
                    {showAllBrands
                      ? "Thu gọn"
                      : `Xem thêm ${brands.length - 6} thương hiệu`}
                  </Button>
                </Box>
              )}
            </FormGroup>
          )}
        </AccordionDetails>
      </Accordion>
    </Box>
  );
};

export default FilterSection;

```

### ClientApp\src\components\List\ProductGrid.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import ProductHoverPreview from "./ProductHoverPreview";
import ProductPagination from "./ProductPagination";
import { motion } from "framer-motion";
import { Typography, Rating } from "@mui/material";
import CompareModal from "../CompareProduct/CompareModal";
import "./ProductCard.css";
import "./ProductActions.css";

const container = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.3,
    },
  },
};

const item = {
  hidden: { opacity: 0, y: 20 },
  show: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.43, 0.13, 0.23, 0.96],
    },
  },
};

const ProductGrid = ({
  selectedCategory,
  selectedPriceRange,
  selectedBrand,
  viewMode,
}) => {
  const [products, setProducts] = useState([]);
  const [allProducts, setAllProducts] = useState([]); // Lưu tất cả sản phẩm
  const [currentPage, setCurrentPage] = useState(1);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hoveredProduct, setHoveredProduct] = useState(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [productSpecs, setProductSpecs] = useState({});
  const [compareModalOpen, setCompareModalOpen] = useState(false);
  const [compareCount, setCompareCount] = useState(0);
  const [toastNotification, setToastNotification] = useState(null);
  const [loadingStates, setLoadingStates] = useState({});
  const navigate = useNavigate();

  const PRODUCTS_PER_PAGE = 9;

  // Handle mouse interaction
  const handleMouseEnter = async (product, event) => {
    setHoveredProduct(product);
    setMousePosition({ x: event.clientX, y: event.clientY });

    if (!productSpecs[product.id]) {
      try {
        const productType = product.category?.name
          ?.toLowerCase()
          .includes("phone")
          ? "PhoneSpecifications"
          : product.category?.name?.toLowerCase().includes("laptop")
          ? "LaptopSpecifications"
          : product.category?.name?.toLowerCase().includes("headphone")
          ? "HeadphoneSpecifications"
          : null;

        if (productType) {
          const response = await fetch(
            `${process.env.REACT_APP_API_BASE_URL}/api/Specifications/${productType}/product/${product.id}`
          );
          if (response.ok) {
            const specs = await response.json();
            setProductSpecs((prev) => ({
              ...prev,
              [product.id]: {
                ...specs,
                type: productType.replace("Specifications", "").toLowerCase(),
              },
            }));
          }
        }
      } catch (err) {
        console.error("Error fetching specifications:", err);
      }
    }
  };
  const handleMouseLeave = () => setHoveredProduct(null);
  const handleMouseMove = (event) => {
    if (hoveredProduct) {
      setMousePosition({ x: event.clientX, y: event.clientY });
    }
  };

  // Toast notification functions
  const showToast = (message, type = "success", title = "") => {
    setToastNotification({ message, type, title });
    setTimeout(() => setToastNotification(null), 3000);
  };

  // Set loading state for specific button
  const setButtonLoading = (productId, buttonType, isLoading) => {
    setLoadingStates((prev) => ({
      ...prev,
      [`${productId}-${buttonType}`]: isLoading,
    }));
  };
  useEffect(() => {
    const fetchProductsAndBrands = async () => {
      setLoading(true);
      try {
        const [productsRes, brandsRes] = await Promise.all([
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
        ]);

        if (!productsRes.ok || !brandsRes.ok) {
          throw new Error("Không thể tải dữ liệu");
        }

        const productsData = await productsRes.json();
        const brandsData = await brandsRes.json();

        const brandsMap = (brandsData.$values || brandsData || []).reduce(
          (acc, brand) => {
            acc[brand.id] = brand;
            return acc;
          },
          {}
        );

        let filteredProducts = productsData.$values || productsData || [];

        if (selectedCategory) {
          filteredProducts = filteredProducts.filter(
            (product) => product.categoryId === selectedCategory
          );
        }

        if (selectedBrand) {
          filteredProducts = filteredProducts.filter(
            (product) => product.brandId === selectedBrand
          );
        }

        if (selectedPriceRange && selectedPriceRange !== "all") {
          const [minPrice, maxPrice] = selectedPriceRange
            .split("-")
            .map(Number);
          filteredProducts = filteredProducts.filter((product) => {
            const price =
              product.variants?.[0]?.discountPrice ||
              product.variants?.[0]?.price ||
              0;
            return price >= minPrice && price <= maxPrice;
          });
        }

        const processedProducts = filteredProducts.map((product) => {
          const variant = product.variants?.[0] || {};
          const image =
            product.images?.[0]?.imageUrl ||
            "https://via.placeholder.com/300?text=No+Image";
          const oldPrice = variant.price || 0;
          const newPrice = variant.discountPrice || oldPrice;
          const discountAmount = oldPrice - newPrice;
          const discount =
            oldPrice > 0 ? Math.round((discountAmount / oldPrice) * 100) : 0;

          const brand = brandsMap[product.brandId];

          return {
            id: product.id,
            name: product.name,
            oldPrice,
            newPrice,
            discount,
            discountAmount,
            image,
            brand,
            rating: 4.5,
            ratingCount: Math.floor(Math.random() * 100) + 50,
            variant,
            category: product.category,
          };
        });

        setAllProducts(processedProducts);
        setCurrentPage(1); // Reset về trang đầu khi filter thay đổi
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProductsAndBrands();
  }, [selectedCategory, selectedPriceRange, selectedBrand]);

  // Effect để cập nhật sản phẩm hiển thị dựa trên trang hiện tại
  useEffect(() => {
    const startIndex = (currentPage - 1) * PRODUCTS_PER_PAGE;
    const endIndex = startIndex + PRODUCTS_PER_PAGE;
    setProducts(allProducts.slice(startIndex, endIndex));
  }, [allProducts, currentPage]);

  // Hàm xử lý thay đổi trang
  const handlePageChange = (page) => {
    setCurrentPage(page);
    // Scroll to top when page changes
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  // Tính tổng số trang
  const totalPages = Math.ceil(allProducts.length / PRODUCTS_PER_PAGE);

  // Theo dõi số lượng sản phẩm trong compareList
  useEffect(() => {
    const updateCompareCount = () => {
      const compareList = JSON.parse(
        localStorage.getItem("compareList") || "[]"
      );
      setCompareCount(compareList.length);
    };

    updateCompareCount();

    window.addEventListener("storage", updateCompareCount);
    window.addEventListener("compareListChanged", updateCompareCount);

    return () => {
      window.removeEventListener("storage", updateCompareCount);
      window.removeEventListener("compareListChanged", updateCompareCount);
    };
  }, []);
  // Function để thêm/xóa sản phẩm khỏi compare list
  const toggleCompare = async (productId, productName) => {
    setButtonLoading(productId, "compare", true);

    try {
      // Simulate API delay
      await new Promise((resolve) => setTimeout(resolve, 500));

      const compareList = JSON.parse(
        localStorage.getItem("compareList") || "[]"
      );

      if (compareList.includes(productId)) {
        const updatedList = compareList.filter((id) => id !== productId);
        localStorage.setItem("compareList", JSON.stringify(updatedList));
        setCompareCount(updatedList.length);
        window.dispatchEvent(new Event("compareListChanged"));
        showToast(
          `Đã xóa "${productName}" khỏi danh sách so sánh!`,
          "success",
          "Xóa thành công"
        );
      } else {
        if (compareList.length >= 4) {
          showToast(
            "Chỉ có thể so sánh tối đa 4 sản phẩm cùng lúc!",
            "warning",
            "Giới hạn so sánh"
          );
          return;
        }

        compareList.push(productId);
        localStorage.setItem("compareList", JSON.stringify(compareList));
        setCompareCount(compareList.length);
        window.dispatchEvent(new Event("compareListChanged"));
        showToast(
          `Đã thêm "${productName}" vào danh sách so sánh!`,
          "success",
          "Thêm thành công"
        );
      }

      setProducts((prevProducts) => [...prevProducts]);
    } finally {
      setButtonLoading(productId, "compare", false);
    }
  };

  // Function để thêm sản phẩm vào giỏ hàng
  const addToCart = async (product) => {
    setButtonLoading(product.id, "cart", true);

    try {
      // Simulate API call to add to cart
      await new Promise((resolve) => setTimeout(resolve, 800));

      // Get existing cart from localStorage or create new one
      const existingCart = JSON.parse(localStorage.getItem("cart") || "[]");

      // Check if product already exists in cart
      const existingItemIndex = existingCart.findIndex(
        (item) => item.id === product.id
      );

      if (existingItemIndex > -1) {
        // Update quantity if product already exists
        existingCart[existingItemIndex].quantity += 1;
        showToast(
          `Đã cập nhật số lượng "${product.name}" trong giỏ hàng!`,
          "success",
          "Cập nhật giỏ hàng"
        );
      } else {
        // Add new product to cart
        const cartItem = {
          id: product.id,
          name: product.name,
          price: product.newPrice,
          image: product.image,
          brand: product.brand?.name || "",
          quantity: 1,
          variant: product.variant,
        };
        existingCart.push(cartItem);
        showToast(
          `Đã thêm "${product.name}" vào giỏ hàng!`,
          "success",
          "Thêm thành công"
        );
      }

      // Save updated cart to localStorage
      localStorage.setItem("cart", JSON.stringify(existingCart));

      // Dispatch event to update cart count in other components
      window.dispatchEvent(new Event("cartChanged"));

      // Temporarily add success class to button
      const buttonElement = document.querySelector(
        `[data-product-id="${product.id}"] .add-to-cart-btn`
      );
      if (buttonElement) {
        buttonElement.classList.add("btn-success");
        setTimeout(() => {
          buttonElement.classList.remove("btn-success");
        }, 600);
      }
    } catch (error) {
      console.error("Error adding to cart:", error);
      showToast("Có lỗi xảy ra khi thêm vào giỏ hàng!", "error", "Lỗi");
    } finally {
      setButtonLoading(product.id, "cart", false);
    }
  };

  // Function để mở modal so sánh
  const openCompareModal = () => {
    const compareList = JSON.parse(localStorage.getItem("compareList") || "[]");

    if (compareList.length < 1) {
      alert("Cần ít nhất 1 sản phẩm để so sánh!");
      return;
    }

    setCompareModalOpen(true);
  };

  if (loading) {
    return (
      <div className="products-grid">
        {[...Array(8)].map((_, index) => (
          <motion.div key={index} variants={item}>
            <div className="skeleton-card">
              <div className="skeleton-image" />
              <div className="skeleton-content">
                <div className="skeleton-text title" />
                <div className="skeleton-text" />
                <div className="skeleton-text price" />
              </div>
            </div>
          </motion.div>
        ))}
      </div>
    );
  }

  if (error) {
    return <div className="text-red-500 text-center p-4">{error}</div>;
  }

  return (
    <div className="w-full py-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <div className="max-w-7xl mx-auto px-4">
        {" "}
        {allProducts.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">📱</div>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">
              Không có sản phẩm phù hợp
            </h3>
            <p className="text-gray-500">
              Hãy thử thay đổi bộ lọc hoặc từ khóa tìm kiếm
            </p>
          </div>
        ) : (
          <motion.div variants={container} initial="hidden" animate="show">
            <div className="products-grid">
              {products.map((product) => {
                const isInCompare = JSON.parse(
                  localStorage.getItem("compareList") || "[]"
                ).includes(product.id);

                return (
                  <motion.div
                    key={product.id}
                    variants={item}
                    onMouseEnter={(e) => handleMouseEnter(product, e)}
                    onMouseLeave={handleMouseLeave}
                    onMouseMove={handleMouseMove}
                  >
                    <div
                      className="product-card"
                      onClick={() => navigate(`/product/${product.id}`)}
                    >
                      {/* Product Image */}
                      <div className="product-image">
                        {/* Discount Badge */}
                        {product.discount > 0 && (
                          <div className="absolute top-2 left-2 z-10">
                            <span className="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                              -{product.discount}%
                            </span>
                          </div>
                        )}

                        {/* Compare Badge */}
                        {isInCompare && (
                          <div className="absolute top-2 right-2 z-10">
                            <span className="bg-blue-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                              ✓ Đã chọn
                            </span>
                          </div>
                        )}

                        <img
                          src={
                            product.image.startsWith("http")
                              ? product.image
                              : `${process.env.REACT_APP_API_BASE_URL}/${product.image}`
                          }
                          alt={product.name}
                          onError={(e) => {
                            e.target.onerror = null;
                            e.target.src =
                              "https://via.placeholder.com/300?text=Error";
                          }}
                        />
                      </div>

                      {/* Product Content */}
                      <div className="product-content">
                        {/* Brand */}
                        {product.brand && (
                          <div className="product-brand">
                            {product.brand.logo && (
                              <img
                                src={
                                  product.brand.logo.startsWith("http")
                                    ? product.brand.logo
                                    : `${process.env.REACT_APP_API_BASE_URL}/${product.brand.logo}`
                                }
                                alt={product.brand.name}
                                className="brand-logo"
                                onError={(e) => {
                                  e.target.onerror = null;
                                  e.target.style.display = "none";
                                }}
                              />
                            )}
                            <Typography
                              variant="caption"
                              sx={{
                                color: "text.secondary",
                                fontWeight: 500,
                              }}
                            >
                              {product.brand.name}
                            </Typography>
                          </div>
                        )}
                        {/* Product Name */}
                        <h3 className="product-name">{product.name}</h3>
                        {/* Rating */}
                        <div className="product-rating">
                          <Rating
                            value={product.rating}
                            precision={0.5}
                            size="small"
                            readOnly
                          />
                          <Typography variant="body2" color="text.secondary">
                            ({product.ratingCount})
                          </Typography>
                        </div>
                        {/* Price */}
                        <div className="product-price">
                          {product.oldPrice > product.newPrice && (
                            <div className="old-price">
                              {product.oldPrice.toLocaleString()}đ
                            </div>
                          )}
                          <div className="current-price">
                            {product.newPrice.toLocaleString()}đ
                          </div>
                        </div>{" "}
                        {/* Action Buttons */}
                        <div
                          className="product-actions"
                          data-product-id={product.id}
                        >
                          <button
                            className={`compare-btn ${
                              isInCompare ? "active" : ""
                            } ${
                              loadingStates[`${product.id}-compare`]
                                ? "btn-loading"
                                : ""
                            }`}
                            onClick={(e) => {
                              e.stopPropagation();
                              toggleCompare(product.id, product.name);
                            }}
                            disabled={loadingStates[`${product.id}-compare`]}
                          >
                            {loadingStates[`${product.id}-compare`]
                              ? ""
                              : isInCompare
                              ? "✓ Đã chọn"
                              : "So sánh"}
                          </button>

                          <button
                            className={`add-to-cart-btn ${
                              loadingStates[`${product.id}-cart`]
                                ? "btn-loading"
                                : ""
                            }`}
                            onClick={(e) => {
                              e.stopPropagation();
                              addToCart(product);
                            }}
                            disabled={loadingStates[`${product.id}-cart`]}
                          >
                            {loadingStates[`${product.id}-cart`]
                              ? ""
                              : "Thêm vào giỏ"}
                          </button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>

            {/* Pagination */}
            <ProductPagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
              totalProducts={allProducts.length}
              productsPerPage={PRODUCTS_PER_PAGE}
              loading={loading}
            />
          </motion.div>
        )}
        {/* Floating Compare Button */}
        {compareCount > 0 && (
          <div className="fixed bottom-8 left-8 z-[9998]">
            <button
              onClick={openCompareModal}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-4 rounded-full shadow-2xl transition-all duration-300 flex items-center space-x-3 transform hover:scale-105"
            >
              <div className="relative">
                <svg
                  className="w-6 h-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                  />
                </svg>
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold rounded-full w-5 h-5 flex items-center justify-center">
                  {compareCount}
                </span>
              </div>
              <span className="font-semibold">So sánh</span>
            </button>
          </div>
        )}
        {/* Product Hover Preview */}
        <ProductHoverPreview
          product={{
            ...hoveredProduct,
            specifications: hoveredProduct
              ? productSpecs[hoveredProduct.id]
              : null,
          }}
          isVisible={Boolean(hoveredProduct)}
          position={mousePosition}
        />{" "}
        {/* Compare Modal */}
        <CompareModal
          isOpen={compareModalOpen}
          onClose={() => setCompareModalOpen(false)}
        />
        {/* Toast Notification */}
        {toastNotification && (
          <div className={`toast-notification ${toastNotification.type}`}>
            <div className={`toast-icon ${toastNotification.type}`}>
              {toastNotification.type === "success"
                ? "✓"
                : toastNotification.type === "error"
                ? "✗"
                : toastNotification.type === "warning"
                ? "⚠"
                : "ℹ"}
            </div>
            <div className="toast-content">
              {toastNotification.title && (
                <div className="toast-title">{toastNotification.title}</div>
              )}
              <div className="toast-message">{toastNotification.message}</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProductGrid;

```

### ClientApp\src\components\List\ProductHoverPreview.jsx
```jsx
import React from "react";
import {
  Smartphone,
  Laptop,
  Headphones,
  Monitor,
  Cpu,
  MemoryStick,
  Battery,
  Bluetooth,
  Weight,
  HardDrive,
  Camera,
  Wifi,
  Settings,
  Radio,
} from "lucide-react";
import "./ProductHoverPreview.css";

const ProductHoverPreview = ({ product, isVisible, position }) => {
  if (!isVisible || !product) return null;

  const getSpecIcon = (key) => {
    const icons = {
      cpu: Cpu,
      ram: MemoryStick,
      storage: HardDrive,
      battery: Battery,
      screen: Monitor,
      camera: Camera,
      weight: Weight,
      bluetooth: Bluetooth,
      wifi: Wifi,
      type: Headphones,
      connectionType: Radio,
      port: Settings,
    };
    return icons[key.toLowerCase()] || Settings;
  };

  const formatSpecKey = (key) => {
    const keyMap = {
      cpu: "CPU",
      ram: "RAM",
      storage: "Bộ nhớ",
      battery: "Pin",
      screen: "Màn hình",
      camera: "Camera",
      weight: "Trọng lượng",
      bluetooth: "Bluetooth",
      wifi: "Wifi",
      type: "Loại",
      connectionType: "Kết nối",
      port: "Cổng kết nối",
    };
    return keyMap[key.toLowerCase()] || key;
  };

  const renderSpecs = () => {
    if (!product.specifications) return null;

    const specs = { ...product.specifications };
    delete specs.id;
    delete specs.productId;
    delete specs.product;
    delete specs.type;

    return Object.entries(specs)
      .filter(([_, value]) => value)
      .slice(0, 6)
      .map(([key, value]) => {
        const Icon = getSpecIcon(key);
        return (
          <div key={key} className="spec-item">
            <div className="spec-icon">
              <Icon size={16} />
            </div>
            <div className="spec-content">
              <div className="spec-label">{formatSpecKey(key)}</div>
              <div className="spec-value">{value}</div>
            </div>
          </div>
        );
      });
  };

  const previewStyle = {
    transform: `translate(${position.x + 20}px, ${position.y + 20}px)`,
  };

  return (
    <div className="preview-card" style={previewStyle}>
      <div className="preview-header">
        <img
          src={
            product.image?.startsWith("http")
              ? product.image
              : `${process.env.REACT_APP_API_BASE_URL}/${product.image}`
          }
          alt={product.name}
          className="preview-image"
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = "https://via.placeholder.com/200?text=No+Image";
          }}
        />
        <div className="preview-title">
          <div className="preview-name">{product.name}</div>
          {product.brand && (
            <div className="preview-brand">
              {product.brand.logo && (
                <img
                  src={
                    product.brand.logo.startsWith("http")
                      ? product.brand.logo
                      : `${process.env.REACT_APP_API_BASE_URL}/${product.brand.logo}`
                  }
                  alt={product.brand.name}
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.style.display = "none";
                  }}
                />
              )}
              <span>{product.brand.name}</span>
            </div>
          )}
          <div className="preview-price">
            <span className="preview-current-price">
              {product.newPrice.toLocaleString()}đ
            </span>
            {product.oldPrice > product.newPrice && (
              <>
                <span className="preview-old-price">
                  {product.oldPrice.toLocaleString()}đ
                </span>
                <span className="preview-discount">-{product.discount}%</span>
              </>
            )}
          </div>
        </div>
      </div>

      {product.specifications && (
        <div className="preview-specs">
          <div className="preview-specs-title">
            <Settings size={16} />
            Thông số kỹ thuật
          </div>
          <div className="specs-grid">{renderSpecs()}</div>
        </div>
      )}
    </div>
  );
};

export default ProductHoverPreview;

```

### ClientApp\src\components\List\ProductPagination.jsx
```jsx
import React from "react";
import { Pagination, Box, Typography } from "@mui/material";
import { styled } from "@mui/material/styles";

const StyledPagination = styled(Pagination)(({ theme }) => ({
  "& .MuiPaginationItem-root": {
    borderRadius: "12px",
    margin: "0 4px",
    border: "1px solid transparent",
    transition: "all 0.3s ease",
    fontWeight: 500,
    minWidth: "40px",
    height: "40px",

    "&:hover": {
      backgroundColor: theme.palette.primary.main,
      color: "white",
      transform: "translateY(-2px)",
      boxShadow: "0 4px 12px rgba(99, 102, 241, 0.3)",
    },

    "&.Mui-selected": {
      backgroundColor: theme.palette.primary.main,
      color: "white",
      fontWeight: 600,
      boxShadow: "0 4px 12px rgba(99, 102, 241, 0.4)",

      "&:hover": {
        backgroundColor: theme.palette.primary.dark,
      },
    },
  },

  "& .MuiPaginationItem-ellipsis": {
    color: theme.palette.text.secondary,
  },
}));

const PaginationInfo = styled(Typography)(({ theme }) => ({
  color: theme.palette.text.secondary,
  fontSize: "0.875rem",
  fontWeight: 500,
  display: "flex",
  alignItems: "center",
  gap: "4px",
}));

const ProductPagination = ({
  currentPage,
  totalPages,
  onPageChange,
  totalProducts,
  productsPerPage = 9,
  loading = false,
}) => {
  if (loading || totalPages <= 1) {
    return null;
  }

  const startProduct = (currentPage - 1) * productsPerPage + 1;
  const endProduct = Math.min(currentPage * productsPerPage, totalProducts);

  return (
    <Box
      sx={{
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        flexWrap: "wrap",
        gap: 2,
        mt: 6,
        mb: 4,
        p: 3,
        bgcolor: "background.paper",
        borderRadius: 3,
        border: "1px solid",
        borderColor: "divider",
        backdropFilter: "blur(20px)",
        backgroundColor: "rgba(255, 255, 255, 0.9)",
        boxShadow: "0 4px 20px rgba(0, 0, 0, 0.05)",
      }}
    >
      {/* Thông tin hiển thị */}
      <PaginationInfo>
        Hiển thị <strong>{startProduct}</strong>-<strong>{endProduct}</strong>{" "}
        trong tổng số <strong>{totalProducts}</strong> sản phẩm
      </PaginationInfo>

      {/* Pagination Controls */}
      <StyledPagination
        count={totalPages}
        page={currentPage}
        onChange={(event, page) => onPageChange(page)}
        color="primary"
        size="large"
        siblingCount={1}
        boundaryCount={1}
        showFirstButton
        showLastButton
        sx={{
          "& .MuiPaginationItem-root": {
            fontSize: "0.875rem",
          },
        }}
      />
    </Box>
  );
};

export default ProductPagination;

```

### ClientApp\src\components\Navbar\Navbar.jsx
```jsx
import React, { useState, useEffect, useRef } from "react";
import {
  ShoppingCart,
  User,
  Search,
  Scale,
  Star,
  MapPin,
  LogOut,
  ShoppingBag,
  Settings,
} from "lucide-react";
import { useNavigate, NavLink } from "react-router-dom";
import "./Navbar.css";
import { useUserProfile } from "@/hooks/api/useUserProfile";
import { useCategories } from "@/hooks/api/useCategories";
import { useBrands } from "@/hooks/api/useBrands";
import { useSearch } from "@/hooks/api/useSearch";
import menuIcon from "@/assets/icon/menu.svg";
import logo from "@/assets/img/Phone/logo.png";
import AuthModal from "@/components/Auth/AuthModal";
import CartDrawer from "@/components/shoppingcart/CartDrawer"; // Import Drawer

const Navbar = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isDropdownProfileOpen, setIsDropdownProfileOpen] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem("token"));
  const [anchorEl, setAnchorEl] = useState(null);
  const searchRef = useRef(null);
  const dropdownRef = useRef(null);
  const navigate = useNavigate();
  const [isCartOpen, setIsCartOpen] = useState(false);

  // Custom hooks
  const { user, initUserId, fetchUserProfile } = useUserProfile();
  const { categories } = useCategories();
  const { brands } = useBrands();
  const { results: searchResults, loading: searchLoading, search } = useSearch();

  // Khởi tạo user profile
  useEffect(() => {
    const id = initUserId();
    if (id) fetchUserProfile(id);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Debounce search
  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchTerm.trim().length > 0) {
        search(searchTerm);
      }
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm, search]);

  // Đóng dropdown khi click bên ngoài
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsDropdownOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  // Đóng dropdown khi click bên ngoài
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (searchRef.current && !searchRef.current.contains(event.target)) {
        // setSearchResults(null); // Đã loại bỏ state này, không cần làm gì
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("AvatarUrl");
    setIsLoggedIn(false);
    setAnchorEl(null);
  };
  // thanh tìm kiếm
  // Gọi API tìm kiếm với debounce
  useEffect(() => {
    const timer = setTimeout(() => {
      if (searchTerm.trim().length > 0) {
        search(searchTerm);
      }
    }, 300);
    return () => clearTimeout(timer);
  }, [searchTerm, search]);

  const handleSearchSubmit = (e) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchTerm)}`);
    }
  };

  const handleItemClick = (type, id) => {
    navigate(
      type === "product"
        ? `/product/${id}`
        : type === "category"
        ? `/ProductList?categoryId=${id}`
        : `/ProductList?brandIds=${id}`
    );
    setSearchTerm("");
  };
  return (
    <div className="navbar-wrapper">
      <nav className="navbar">
        <div className="navbar-container">
          {/* Logo */}
          <img
            src={logo}
            alt="SHN Gear"
            className="navbar-logo"
            onClick={() => navigate("/")}
            style={{ cursor: "pointer" }}
          />

          {/* Menu Premium - Giữ nguyên nút gốc */}
          <div className="menu-container relative font-sans" ref={dropdownRef}>
            {/* Nút menu giữ nguyên 100% như thiết kế của bạn */}
            <button
              className="menu-button"
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
            >
              <img src={menuIcon} alt="Menu" />
              Danh mục
            </button>

            {isDropdownOpen && (
              <div className="dropdown-menu absolute left-0 mt-1 w-[320px] bg-white shadow-2xl rounded-lg border border-gray-100 z-50 overflow-hidden animate-fadeIn">
                {/* Header */}
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-3 border-b border-gray-100">
                  <h3 className="text-sm font-semibold text-gray-700 flex items-center">
                    <svg
                      className="w-4 h-4 mr-2 text-purple-500"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    DANH MỤC SẢN PHẨM
                  </h3>
                </div>

                {/* Content with scroll */}
                <div className="max-h-[65vh] overflow-y-auto custom-scrollbar">
                  {/* Categories Section */}
                  <div className="p-2">
                    {categories
                      .filter((c) => !c.parentId)
                      .map((category) => (
                        <div key={category.id} className="mb-1 group">
                          {/* Parent Category */}
                          <div
                            className="flex items-center justify-between px-3 py-2.5 rounded-lg hover:bg-purple-50 transition-colors cursor-pointer"
                            onClick={() =>
                              navigate(`/ProductList?categoryId=${category.id}`)
                            }
                          >
                            <div className="flex items-center">
                              <div className="w-8 h-8 flex items-center justify-center bg-blue-100 rounded-lg mr-3 text-blue-600">
                                {category.icon || (
                                  <svg
                                    className="w-4 h-4"
                                    fill="currentColor"
                                    viewBox="0 0 20 20"
                                  >
                                    <path
                                      fillRule="evenodd"
                                      d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12z"
                                      clipRule="evenodd"
                                    />
                                  </svg>
                                )}
                              </div>
                              <span className="font-medium text-gray-800">
                                {category.name}
                              </span>
                            </div>
                            {categories.some(
                              (c) => c.parentId === category.id
                            ) && (
                              <svg
                                className="w-4 h-4 text-gray-400 group-hover:text-purple-500 transition-colors"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                  clipRule="evenodd"
                                />
                              </svg>
                            )}
                          </div>

                          {/* Subcategories */}
                          {categories.some(
                            (c) => c.parentId === category.id
                          ) && (
                            <div className="ml-12 mt-1 space-y-1">
                              {categories
                                .filter((c) => c.parentId === category.id)
                                .map((subCategory) => (
                                  <div
                                    key={subCategory.id}
                                    className="px-3 py-1.5 text-sm rounded-lg hover:bg-blue-50 cursor-pointer flex items-center transition-colors"
                                    onClick={() =>
                                      navigate(
                                        `/ProductList?categoryId=${subCategory.id}`
                                      )
                                    }
                                  >
                                    <div className="w-2 h-2 bg-blue-300 rounded-full mr-2"></div>
                                    <span className="text-gray-700">
                                      {subCategory.name}
                                    </span>
                                  </div>
                                ))}
                            </div>
                          )}
                        </div>
                      ))}
                  </div>

                  {/* Brands Section */}
                  <div className="border-t border-gray-100 mx-3"></div>
                  <div className="p-3">
                    <div className="flex justify-between items-center mb-3">
                      <h4 className="text-xs font-semibold text-gray-500 uppercase tracking-wider">
                        THƯƠNG HIỆU
                      </h4>
                      <button
                        className="text-xs text-blue-600 hover:text-blue-800 transition-colors"
                        onClick={() => navigate("/Productlist")}
                      >
                        Xem tất cả →
                      </button>
                    </div>

                    <div className="grid grid-cols-3 gap-3">
                      {brands.slice(0, 6).map((brand) => (
                        <div
                          key={brand.id}
                          className="text-center cursor-pointer group"
                          onClick={() =>
                            navigate(`/ProductList?brandId=${brand.id}`)
                          }
                        >
                          <div className="w-full aspect-square bg-white border border-gray-200 rounded-lg flex items-center justify-center p-2 group-hover:border-blue-300 transition-all shadow-sm">
                            {brand.logo ? (
                              <img
                                src={brand.logo}
                                alt={brand.name}
                                className="w-full h-full object-contain"
                              />
                            ) : (
                              <span className="text-lg font-bold text-gray-400">
                                {brand.name.charAt(0)}
                              </span>
                            )}
                          </div>
                          <span className="block mt-2 text-xs font-medium text-gray-700 truncate px-1">
                            {brand.name}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Footer */}
                <div className="bg-gray-50 px-3 py-2 border-t border-gray-100 text-center">
                  <button
                    className="text-xs text-blue-600 hover:text-blue-800 font-medium transition-colors"
                    onClick={() => navigate("/productlist")}
                  >
                    Xem tất cả sản phẩm →
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* Thêm vào file CSS */}
          <style>{`
            .animate-fadeIn {
              animation: fadeIn 0.2s ease-out forwards;
            }
            @keyframes fadeIn {
              from {
                opacity: 0;
                transform: translateY(-5px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }
            .custom-scrollbar::-webkit-scrollbar {
              width: 6px;
            }
            .custom-scrollbar::-webkit-scrollbar-thumb {
              background: rgba(0, 0, 0, 0.1);
              border-radius: 3px;
            }
          `}</style>

          {/* Thanh tìm kiếm (giữ nguyên) */}
          <div className="search-bar" ref={searchRef}>
            <form
              onSubmit={handleSearchSubmit}
              className="relative flex items-center justify-between w-full"
            >
              <input
                type="text"
                placeholder="Tìm kiếm sản phẩm..."
                className="search-input flex-1 px-4 py-2"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onFocus={() => searchTerm && search(searchTerm)}
              />
              <button type="submit" className="search-button">
                <Search className="h-5 w-5" />
              </button>
            </form>

            {/* Dropdown kết quả - Phiên bản tinh chỉnh */}
            {searchResults && (
              <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-1 bg-white shadow-lg rounded-lg border border-gray-200 z-50 w-[28rem] max-h-[70vh] overflow-y-auto">
                {searchLoading ? (
                  <div className="p-4 flex items-center justify-center text-sm text-gray-500">
                    <svg
                      className="animate-spin h-5 w-5 mr-3 text-blue-500"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Đang tìm kiếm...
                  </div>
                ) : (
                  <div className="divide-y divide-gray-100">
                    {/* Sản phẩm */}
                    {searchResults.products.length > 0 && (
                      <div className="py-2">
                        <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                          Sản phẩm
                        </div>
                        {searchResults.products.slice(0, 3).map((product) => (
                          <div
                            key={product.id}
                            className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                            onClick={() =>
                              handleItemClick("product", product.id)
                            }
                          >
                            <div className="flex-shrink-0 w-10 h-10 bg-gray-100 rounded-md overflow-hidden">
                              <img
                                src={
                                  product.imageUrl?.startsWith("http")
                                    ? product.imageUrl
                                    : `${process.env.REACT_APP_API_BASE_URL}${
                                        product.imageUrl?.startsWith("/")
                                          ? ""
                                          : "/"
                                      }${product.imageUrl}`
                                }
                                alt={product.name}
                                className="w-full h-full object-contain"
                                onError={(e) => {
                                  e.target.onerror = null;
                                  e.target.src = "/images/default-product.png";
                                }}
                              />
                            </div>
                            <div className="ml-3 min-w-0">
                              <p className="text-sm font-medium text-gray-800 truncate">
                                {product.name}
                              </p>
                              <div className="flex items-center mt-1">
                                <span className="text-sm font-semibold text-blue-600">
                                  {product.price.toLocaleString("vi-VN")}đ
                                </span>
                                {product.discountedPrice && (
                                  <span className="ml-2 text-xs text-gray-400 line-through">
                                    {product.discountedPrice.toLocaleString(
                                      "vi-VN"
                                    )}
                                    đ
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Danh mục */}
                    {searchResults.categories.length > 0 && (
                      <div className="py-2">
                        <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                          Danh mục
                        </div>
                        {searchResults.categories
                          .slice(0, 3)
                          .map((category) => (
                            <div
                              key={category.id}
                              className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                              onClick={() =>
                                handleItemClick("category", category.id)
                              }
                            >
                              <div className="flex-shrink-0 w-10 h-10 bg-blue-50 rounded-md flex items-center justify-center">
                                <svg
                                  className="w-5 h-5 text-blue-500"
                                  fill="none"
                                  stroke="currentColor"
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    strokeLinecap="round"
                                    strokeWidth="2"
                                    d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
                                  ></path>
                                </svg>
                              </div>
                              <div className="ml-3">
                                <p className="text-sm font-medium text-gray-800">
                                  {category.name}
                                </p>
                              </div>
                            </div>
                          ))}
                      </div>
                    )}

                    {/* Thương hiệu */}
                    {searchResults.brands.length > 0 && (
                      <div className="py-2">
                        <div className="px-4 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider">
                          Thương hiệu
                        </div>
                        {searchResults.brands.slice(0, 3).map((brand) => (
                          <div
                            key={brand.id}
                            className="px-4 py-3 hover:bg-blue-50 cursor-pointer flex items-center transition-colors duration-150"
                            onClick={() => handleItemClick("brand", brand.id)}
                          >
                            <div className="flex-shrink-0 w-10 h-10 bg-gray-100 rounded-md overflow-hidden flex items-center justify-center">
                              {brand.logoUrl ? (
                                <img
                                  src={brand.logoUrl}
                                  alt={brand.name}
                                  className="w-full h-full object-contain"
                                />
                              ) : (
                                <span className="text-lg font-bold text-gray-400">
                                  {brand.name.charAt(0)}
                                </span>
                              )}
                            </div>
                            <div className="ml-3">
                              <p className="text-sm font-medium text-gray-800">
                                {brand.name}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Footer */}
                    {searchResults.products.length > 0 ||
                    searchResults.categories.length > 0 ||
                    searchResults.brands.length > 0 ? (
                      <div className="p-3 text-center bg-gray-50">
                        <button
                          className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                          onClick={() => {
                            navigate(`/productlist`);
                          }}
                        >
                          Xem tất cả {searchResults.totalResults} kết quả →
                        </button>
                      </div>
                    ) : (
                      <div className="p-6 text-center">
                        <svg
                          className="mx-auto h-12 w-12 text-gray-400"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeWidth="1.5"
                            d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                          ></path>
                        </svg>
                        <h3 className="mt-2 text-sm font-medium text-gray-700">
                          Không tìm thấy kết quả
                        </h3>
                        <p className="mt-1 text-sm text-gray-500">
                          Thử với từ khóa tìm kiếm khác
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
          {/* Avatar và Giỏ hàng */}
          <div className="avatarandcart">
            {/* Avatar và Giỏ hàng */}
            <div className="flex items-center gap-4">
              {isLoggedIn ? (
                <div className="relative">
                  <button
                    onClick={() =>
                      setIsDropdownProfileOpen(!isDropdownProfileOpen)
                    }
                    className="p-1 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"
                    aria-label="Menu người dùng"
                    aria-haspopup="true"
                    aria-expanded={!!anchorEl}
                  >
                    <User className="w-8 h-8 text-white" />
                  </button>

                  {isDropdownProfileOpen && (
                    <div className="absolute right-0 mt-2 w-56 origin-top-right bg-white rounded-lg shadow-xl z-50 overflow-hidden transition-all duration-200 ease-out">
                      <div className="py-1 flex flex-col">
                        <div className="px-4 py-3 border-b border-gray-100">
                          <p className="text-sm font-medium text-gray-900">
                            Xin chào, {user?.fullName || "Khách"}
                          </p>
                          <p className="text-xs text-gray-500 truncate">
                            {user?.email || "user@example.com"}
                          </p>
                        </div>
                        {/* Thêm điều kiện hiển thị cho admin */}
                        {user?.role?.id === 1 && (
                          <NavLink
                            to="/admin/overview"
                            className={({ isActive }) =>
                              `px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center${isActive ? ' bg-blue-50 text-blue-600' : ''}`
                            }
                          >
                            <Settings className="w-4 h-4 mr-3" />
                            Trang quản trị
                          </NavLink>
                        )}
                        <NavLink
                          to="/profile/info"
                          className={({ isActive }) =>
                            `px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center${isActive ? ' bg-blue-50 text-blue-600' : ''}`
                          }
                        >
                          <User className="w-4 h-4 mr-3" />
                          Thông tin cá nhân
                        </NavLink>

                        <NavLink
                          to="/profile/orders"
                          className={({ isActive }) =>
                            `px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center${isActive ? ' bg-blue-50 text-blue-600' : ''}`
                          }
                        >
                          <ShoppingBag className="w-4 h-4 mr-3" />
                          Đơn hàng của tôi
                        </NavLink>

                        <NavLink
                          to="/profile/loyalty"
                          className={({ isActive }) =>
                            `px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center${isActive ? ' bg-blue-50 text-blue-600' : ''}`
                          }
                        >
                          <Star className="w-4 h-4 mr-3" />
                          Khách hàng thân thiết
                        </NavLink>

                        <NavLink
                          to="/profile/address"
                          className={({ isActive }) =>
                            `px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors flex items-center${isActive ? ' bg-blue-50 text-blue-600' : ''}`
                          }
                        >
                          <MapPin className="w-4 h-4 mr-3" />
                          Sổ địa chỉ
                        </NavLink>

                        <NavLink
                          to="/"
                          onClick={() => {
                            handleLogout();
                          }}
                          className="px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-colors flex items-center mt-1 border-t border-gray-100"
                        >
                          <LogOut className="w-4 h-4 mr-3" />
                          Đăng xuất
                        </NavLink>
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <button
                  onClick={() => setIsAuthModalOpen(true)}
                  className="p-1 rounded-full hover:bg-white hover:bg-opacity-20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"
                  aria-label="Đăng nhập"
                >
                  <User className="w-8 h-8 text-white" />
                </button>
              )}
            </div>
            <button className="cart-button" onClick={() => setIsCartOpen(true)}>
              <ShoppingCart size={22} />
              Giỏ Hàng
            </button>
          </div>
        </div>

        {/* Modal đăng nhập */}
        <AuthModal
          isOpen={isAuthModalOpen}
          onClose={() => setIsAuthModalOpen(false)}
        />
        <CartDrawer isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
      </nav>
    </div>
  );
};

export default Navbar;

```

### ClientApp\src\components\NotificationBar\notification.jsx
```jsx
import React from 'react';
import './notification.css'; // Đảm bảo bạn import file CSS nếu chưa

const Notification = () => {
  return (
    <div className="notification-container">
      <nav>
        <ul className="items-center pc:flex">
          <li className="pr-4">
            <div className="flex cursor-pointer items-center b2-medium">
              <img 
                alt="Deal chớp nhoáng" 
                loading="lazy" 
                width="32" 
                height="32" 
                decoding="async" 
                data-nimg="1" 
                className="mr-2" 
                srcSet="https://cdn2.fptshop.com.vn/unsafe/32x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png 1x, https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png 2x" 
                src="https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/7_Deal_Chong_Deal_652fe1f961.png"
              />
              Deal chớp nhoáng
            </div>
          </li>
          <li className="pr-4">
            <a className="flex items-center b2-medium" href="https://localhost:44479/ProductList?brandId=1">
              <img 
                alt="Xả kho giá sốc, số lượng có hạn!" 
                loading="lazy" 
                width="32" 
                height="32" 
                decoding="async" 
                data-nimg="1" 
                className="mr-2" 
                srcSet="https://cdn2.fptshop.com.vn/unsafe/32x0/filters:quality(100)/soc_2f6cbf28ff.png 1x, https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/soc_2f6cbf28ff.png 2x" 
                src="https://cdn2.fptshop.com.vn/unsafe/64x0/filters:quality(100)/soc_2f6cbf28ff.png"
              />
              Xả kho giá sốc, số lượng có hạn!
            </a>
          </li>
        </ul>
      </nav>
    </div>
  );
}

export default Notification;

```

### ClientApp\src\components\Order\OrderLookup.jsx
```jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Box,
  TextField,
  Button,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  Divider,
  Stack,
  Chip,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import PrintIcon from "@mui/icons-material/Print";
import VisibilityIcon from "@mui/icons-material/Visibility";
import { useOrderLookup } from "@/hooks/api/useOrderLookup";
import { motion } from "framer-motion";

const OrderLookup = () => {
  const [phoneNumber, setPhoneNumber] = useState("");
  const { orders, loading, error, searchOrdersByPhone } = useOrderLookup();
  const navigate = useNavigate();

  const handleSearch = () => {
    searchOrdersByPhone(phoneNumber);
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case "Pending":
        return "Chờ xác nhận";
      case "Processing":
        return "Đã xác nhận";
      case "Shipped":
        return "Đang vận chuyển";
      case "Delivered":
        return "Đã giao hàng";
      case "Cancelled":
        return "Đã hủy";
      case "Paid":
        return "Đã thanh toán";
      default:
        return status;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Delivered":
        return "success";
      case "Shipped":
        return "info";
      case "Processing":
        return "warning";
      case "Cancelled":
        return "error";
      case "Paid":
        return "success";
      default:
        return "default";
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  return (
    <Box sx={{ maxWidth: 1200, mx: "auto", p: 3 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
      >
        <Paper elevation={3} sx={{ p: 4, mb: 4, borderRadius: 2 }}>
          <Typography
            variant="h5"
            gutterBottom
            sx={{ fontWeight: "bold", mb: 3 }}
          >
            Tra cứu đơn hàng
          </Typography>

          <Stack
            direction={{ xs: "column", sm: "row" }}
            spacing={2}
            alignItems="center"
            mb={3}
          >
            <TextField
              fullWidth
              label="Nhập số điện thoại"
              variant="outlined"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              placeholder="Ví dụ: 0778706084"
              InputProps={{
                startAdornment: (
                  <SearchIcon sx={{ color: "action.active", mr: 1 }} />
                ),
              }}
              sx={{ flex: 1 }}
            />
            <Button
              variant="contained"
              onClick={handleSearch}
              disabled={loading}
              sx={{ height: 56, px: 4, minWidth: 150 }}
              startIcon={
                loading ? <CircularProgress size={20} color="inherit" /> : null
              }
            >
              {loading ? "Đang tìm..." : "Tra cứu"}
            </Button>
          </Stack>

          {error && (
            <Alert severity="error" sx={{ mb: 3 }}>
              {error}
            </Alert>
          )}
        </Paper>

        {orders.length > 0 && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold" }}>
              Kết quả tra cứu ({orders.length} đơn hàng)
            </Typography>

            {orders.map((order) => (
              <Card key={order.orderId} sx={{ mb: 4, boxShadow: 3 }}>
                <CardContent>
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      mb: 2,
                    }}
                  >
                    <Typography variant="h6" sx={{ fontWeight: "bold" }}>
                      Đơn hàng #{order.orderId}
                    </Typography>
                    <Chip
                      label={getStatusLabel(order.orderStatus)}
                      color={getStatusColor(order.orderStatus)}
                      sx={{ fontWeight: "bold" }}
                    />
                  </Box>

                  <Divider sx={{ my: 2 }} />

                  <Box
                    sx={{ display: "flex", flexWrap: "wrap", gap: 3, mb: 3 }}
                  >
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        Ngày đặt:
                      </Typography>
                      <Typography>{order.orderDate}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        Dự kiến giao:
                      </Typography>
                      <Typography>{order.estimatedDelivery}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        Tổng tiền:
                      </Typography>
                      <Typography sx={{ fontWeight: "bold" }}>
                        {order.formattedTotal}
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        Phương thức:
                      </Typography>
                      <Typography>{order.paymentMethod}</Typography>
                    </Box>
                  </Box>

                  <Box sx={{ mb: 3 }}>
                    <Typography
                      variant="subtitle2"
                      color="text.secondary"
                      gutterBottom
                    >
                      Thông tin giao hàng:
                    </Typography>
                    <Box sx={{ pl: 2 }}>
                      <Typography>
                        <strong>{order.shippingInfo.fullName}</strong> |{" "}
                        {order.shippingInfo.phone}
                      </Typography>
                      <Typography sx={{ mb: 1 }}>
                        {order.shippingInfo.address}
                      </Typography>
                      <Typography>Email: {order.shippingInfo.email}</Typography>
                    </Box>
                  </Box>

                  <Typography
                    variant="subtitle2"
                    color="text.secondary"
                    gutterBottom
                  >
                    Sản phẩm đã đặt:
                  </Typography>
                  <TableContainer>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Sản phẩm</TableCell>
                          <TableCell align="center">Biến thể</TableCell>
                          <TableCell align="right">Số lượng</TableCell>
                          <TableCell align="right">Đơn giá</TableCell>
                          <TableCell align="right">Thành tiền</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {order.products.map((product, index) => (
                          <TableRow key={index}>
                            <TableCell>
                              <Box
                                sx={{ display: "flex", alignItems: "center" }}
                              >
                                <Box
                                  component="img"
                                  src={
                                    product.image.startsWith("http")
                                      ? product.image // Ảnh từ API (URL đầy đủ)
                                      : `${process.env.REACT_APP_API_BASE_URL}/${product.image}` // Ảnh local trong wwwroot
                                  }
                                  alt={product.name || "Ảnh sản phẩm"}
                                  sx={{
                                    width: 60,
                                    height: 60,
                                    objectFit: "contain",
                                    mr: 2,
                                    borderRadius: 1,
                                    backgroundColor: "grey.100",
                                  }}
                                />
                                <Typography>{product.name}</Typography>
                              </Box>
                            </TableCell>
                            <TableCell align="center">
                              <Chip label={product.variant} size="small" />
                            </TableCell>
                            <TableCell align="right">
                              {product.quantity}
                            </TableCell>
                            <TableCell align="right">
                              {formatPrice(product.price)}
                            </TableCell>
                            <TableCell align="right">
                              <Typography fontWeight="bold">
                                {formatPrice(product.total)}
                              </Typography>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Box
                    sx={{ display: "flex", justifyContent: "flex-end", mt: 3 }}
                  >
                    <Button
                      variant="outlined"
                      startIcon={<VisibilityIcon />}
                      onClick={() => navigate(`/orders/${order.orderId}`)}
                      sx={{ mr: 2 }}
                    >
                      Xem chi tiết
                    </Button>
                    <Button
                      variant="contained"
                      startIcon={<PrintIcon />}
                      onClick={() => window.print()}
                    >
                      In hóa đơn
                    </Button>
                  </Box>
                </CardContent>
              </Card>
            ))}
          </motion.div>
        )}
      </motion.div>
    </Box>
  );
};

export default OrderLookup;

```

### ClientApp\src\components\Order\PaymentSuccess.jsx
```jsx
import React, { useEffect, useState } from "react";
import { Box, Typography, Button, Container, Stack } from "@mui/material";
import { motion } from "framer-motion";
import CheckCircleOutlineIcon from "@mui/icons-material/CheckCircleOutline";
import SearchIcon from "@mui/icons-material/Search";
import { useNavigate, useLocation } from "react-router-dom";

const PaymentSuccess = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [orderDetails, setOrderDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchOrderDetails = async () => {
      try {
        const searchParams = new URLSearchParams(location.search);
        const orderId = searchParams.get("orderId");

        if (!orderId) {
          console.error("No order ID provided");
          return;
        }

        const response = await fetch(`/api/Order/${orderId}`);
        if (!response.ok) throw new Error("Failed to fetch order details");

        const data = await response.json();
        setOrderDetails(data);
      } catch (error) {
        console.error("Error fetching order details:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchOrderDetails();
  }, [location]);

  // Loading state
  if (isLoading) {
    return (
      <Container maxWidth="sm" sx={{ mt: 8, textAlign: "center" }}>
        <Typography>Đang tải thông tin đơn hàng...</Typography>
      </Container>
    );
  }

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            textAlign: "center",
            p: 4,
            borderRadius: 2,
            boxShadow: 3,
            backgroundColor: "background.paper",
          }}
        >
          {/* Icon thành công */}
          <motion.div
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 0.5 }}
          >
            <CheckCircleOutlineIcon
              sx={{ fontSize: 80, color: "success.main", mb: 2 }}
            />
          </motion.div>

          {/* Tiêu đề */}
          <Typography
            variant="h4"
            component="h1"
            gutterBottom
            sx={{ fontWeight: "bold" }}
          >
            Thanh toán thành công!
          </Typography>

          {/* Thông báo */}
          <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
            Cảm ơn bạn đã mua hàng. Đơn hàng của bạn đã được xác nhận và sẽ được
            xử lý trong thời gian sớm nhất.
          </Typography>

          {/* Chi tiết đơn hàng giả lập */}
          <Box
            sx={{
              width: "100%",
              p: 2,
              mb: 3,
              borderRadius: 1,
              backgroundColor: "grey.100",
              textAlign: "left",
            }}
          >
            <Typography variant="subtitle1" sx={{ mb: 1 }}>
              Thông tin đơn hàng:
            </Typography>
            {orderDetails && (
              <>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  Mã đơn hàng: #{orderDetails.id}
                </Typography>
                <Typography variant="body2" sx={{ mb: 1 }}>
                  Tổng tiền:{" "}
                  {new Intl.NumberFormat("vi-VN", {
                    style: "currency",
                    currency: "VND",
                  }).format(orderDetails.totalAmount)}
                </Typography>
                <Typography variant="body2">
                  Trạng thái:{" "}
                  {orderDetails.orderStatus === "Paid"
                    ? "Đã thanh toán"
                    : orderDetails.orderStatus}
                </Typography>
              </>
            )}
          </Box>

          {/* Nút hành động */}
          <Stack
            direction="row"
            spacing={2}
            sx={{ width: "100%", justifyContent: "center" }}
          >
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                variant="outlined"
                size="large"
                startIcon={<SearchIcon />}
                onClick={() => navigate("/order-lookup")}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 2,
                  fontWeight: "bold",
                  textTransform: "none",
                }}
              >
                Tra cứu đơn hàng
              </Button>
            </motion.div>

            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                variant="contained"
                size="large"
                onClick={() => navigate("/")}
                sx={{
                  px: 4,
                  py: 1.5,
                  borderRadius: 2,
                  fontWeight: "bold",
                  textTransform: "none",
                }}
              >
                Về trang chủ
              </Button>
            </motion.div>
          </Stack>

          {/* Thông báo phụ */}
          <Typography variant="caption" color="text.secondary" sx={{ mt: 3 }}>
            Bạn sẽ nhận được email xác nhận đơn hàng trong ít phút.
          </Typography>
        </Box>
      </motion.div>
    </Container>
  );
};

export default PaymentSuccess;

```

### ClientApp\src\components\PaymentSuccess\PaymentSuccess.jsx
```jsx
import React, { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  Paper,
  Grid,
  Alert,
} from "@mui/material";
import { CheckCircle, Search, Home } from "@mui/icons-material";
import { useLocation, useNavigate } from "react-router-dom";

const PaymentSuccess = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [orderData, setOrderData] = useState(null);

  useEffect(() => {
    // Lấy dữ liệu từ state hoặc localStorage
    const stateData = location.state;
    const localStorageData = localStorage.getItem("currentOrder");

    if (stateData) {
      setOrderData(stateData);
    } else if (localStorageData) {
      try {
        const parsedData = JSON.parse(localStorageData);
        setOrderData(parsedData);
        // Xóa dữ liệu khỏi localStorage sau khi sử dụng
        localStorage.removeItem("currentOrder");
      } catch (error) {
        console.error("Lỗi khi parse dữ liệu localStorage:", error);
      }
    }
  }, [location.state]);

  const handleTrackOrder = () => {
    if (orderData?.orderId) {
      navigate(`/order-tracking/${orderData.orderId}`);
    }
  };

  const handleGoHome = () => {
    navigate("/");
  };

  if (!orderData) {
    return (
      <Box sx={{ p: 4, textAlign: "center" }}>
        <Alert severity="warning">Không tìm thấy thông tin đơn hàng</Alert>
        <Button variant="contained" onClick={handleGoHome} sx={{ mt: 2 }}>
          Về trang chủ
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 4, maxWidth: 800, margin: "0 auto" }}>
      <Paper sx={{ p: 4, textAlign: "center" }}>
        <CheckCircle sx={{ fontSize: 80, color: "success.main", mb: 2 }} />

        <Typography variant="h4" sx={{ fontWeight: "bold", mb: 2 }}>
          Đặt Hàng thành công!
        </Typography>

        <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
          Cảm ơn bạn đã mua hàng. Đơn hàng của bạn đã được xác nhận và sẽ được
          xử lý trong thời gian sớm nhất.
        </Typography>

        <Box sx={{ mb: 4, textAlign: "left" }}>
          <Typography variant="h6" sx={{ fontWeight: "bold", mb: 2 }}>
            Thông tin đơn hàng:
          </Typography>

          <Grid container spacing={2} sx={{ mb: 3 }}>
            <Grid item xs={6}>
              <Typography variant="body2" color="text.secondary">
                Mã đơn hàng:
              </Typography>
              <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                #{orderData.orderId}
              </Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography variant="body2" color="text.secondary">
                Phương thức thanh toán:
              </Typography>
              <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                {orderData.paymentMethodName}
              </Typography>
            </Grid>
          </Grid>

          {/* Danh sách sản phẩm */}
          <Typography variant="h6" sx={{ fontWeight: "bold", mb: 2 }}>
            Sản phẩm đã mua:
          </Typography>

          <List sx={{ mb: 3 }}>
            {orderData.orderItems?.map((item, index) => (
              <ListItem key={index} sx={{ px: 0, py: 1 }}>
                <ListItemAvatar>
                  <img
                    src={
                      item.productImage?.startsWith("http")
                        ? item.productImage
                        : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}`
                    }
                    alt={item.productName}
                    style={{
                      width: 60,
                      height: 60,
                      objectFit: "cover",
                      borderRadius: 8,
                    }}
                    onError={(e) => {
                      e.target.onerror = null;
                      e.target.src = "https://via.placeholder.com/60";
                    }}
                  />
                </ListItemAvatar>
                <ListItemText
                  primary={
                    <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                      {item.productName}
                    </Typography>
                  }
                  secondary={
                    <Box>
                      <Typography variant="body2" color="text.secondary">
                        {item.variantColor} - {item.variantStorage}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        Số lượng: {item.quantity}
                      </Typography>
                    </Box>
                  }
                />
                <Typography variant="body1" sx={{ fontWeight: "bold" }}>
                  {(
                    item.productDiscountPrice || item.productPrice
                  )?.toLocaleString()}
                  ₫
                </Typography>
              </ListItem>
            ))}
          </List>

          <Divider sx={{ my: 2 }} />

          {/* Tổng kết thanh toán */}
          <Box sx={{ mb: 2 }}>
            <Box
              sx={{ display: "flex", justifyContent: "space-between", mb: 1 }}
            >
              <Typography>Tạm tính:</Typography>
              <Typography>
                {(
                  (orderData.totalAmount || 0) + (orderData.discountAmount || 0)
                ).toLocaleString()}
                ₫
              </Typography>
            </Box>

            {orderData.discountAmount > 0 && (
              <>
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    mb: 1,
                  }}
                >
                  <Typography>
                    Mã giảm giá ({orderData.voucherCode}):
                  </Typography>
                  <Typography color="success.main">
                    -{orderData.discountAmount.toLocaleString()}₫
                  </Typography>
                </Box>
              </>
            )}

            <Divider sx={{ my: 1 }} />

            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
              <Typography variant="h6" sx={{ fontWeight: "bold" }}>
                Tổng cộng:
              </Typography>
              <Typography
                variant="h6"
                sx={{ fontWeight: "bold", color: "error.main" }}
              >
                {(
                  orderData.finalAmount ||
                  orderData.totalAmount ||
                  0
                ).toLocaleString()}
                ₫
              </Typography>
            </Box>
          </Box>
        </Box>

        <Box sx={{ display: "flex", gap: 2, justifyContent: "center" }}>
          <Button
            variant="outlined"
            startIcon={<Search />}
            onClick={handleTrackOrder}
            size="large"
          >
            Tra cứu đơn hàng
          </Button>
          <Button
            variant="contained"
            startIcon={<Home />}
            onClick={handleGoHome}
            size="large"
          >
            Về trang chủ
          </Button>
        </Box>

        <Typography variant="body2" color="text.secondary" sx={{ mt: 3 }}>
          Bạn sẽ nhận được email xác nhận đơn hàng trong ít phút.
        </Typography>
      </Paper>
    </Box>
  );
};

export default PaymentSuccess;

```

### ClientApp\src\components\ProductInfoPage\ProductImage.jsx
```jsx
import React, { useState } from "react";
import {
  Box,
  IconButton,
  Dialog,
  Fade,
  Typography,
  Paper,
} from "@mui/material";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Thumbs, Zoom, EffectFade } from "swiper/modules";
import { ChevronLeft, ChevronRight, Maximize2, X } from "lucide-react";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/thumbs";
import "swiper/css/zoom";
import "swiper/css/effect-fade";

const ProductImage = ({ images, name }) => {
  const [thumbsSwiper, setThumbsSwiper] = useState(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);
  const [showControls, setShowControls] = useState(false);

  const handleFullscreen = () => setIsFullscreen(true);
  const closeFullscreen = () => setIsFullscreen(false);

  return (
    <Box
      sx={{
        position: "relative",
        "&:hover .image-controls": {
          opacity: 1,
        },
      }}
      onMouseEnter={() => setShowControls(true)}
      onMouseLeave={() => setShowControls(false)}
    >
      {/* Main Image Slider */}
      <Paper
        elevation={0}
        sx={{
          borderRadius: 3,
          overflow: "hidden",
          bgcolor: "white",
          position: "relative",
          border: "1px solid #e0e0e0", // Subtle border
        }}
      >
        <Swiper
          modules={[Navigation, Thumbs, Zoom, EffectFade]}
          effect="fade"
          navigation={{
            prevEl: ".swiper-button-prev",
            nextEl: ".swiper-button-next",
          }}
          thumbs={{ swiper: thumbsSwiper }}
          zoom={true}
          onSlideChange={(swiper) => setActiveIndex(swiper.activeIndex)}
          className="product-main-slider"
        >
          {images.map((image, index) => (
            <SwiperSlide key={index}>
              <Box
                sx={{
                  position: "relative",
                  paddingTop: "100%",
                  cursor: "zoom-in",
                  bgcolor: "#f8f8f8",
                }}
              >
                <Fade in timeout={500}>
                  <Box
                    component="img"
                    src={
                      image?.imageUrl?.startsWith("http")
                        ? image.imageUrl
                        : `${process.env.REACT_APP_API_BASE_URL}/${image.imageUrl}`
                    }
                    alt={`${name} - Hình ${index + 1}`}
                    sx={{
                      position: "absolute",
                      top: 0,
                      left: 0,
                      width: "100%",
                      height: "100%",
                      objectFit: "contain",
                      padding: 2,
                      transition: "transform 0.3s ease",
                      "&:hover": {
                        transform: "scale(1.05)",
                      },
                    }}
                    onError={(e) => {
                      e.target.onerror = null;
                      e.target.src =
                        "https://via.placeholder.com/400?text=No+Image";
                    }}
                    onClick={handleFullscreen}
                  />
                </Fade>
              </Box>
            </SwiperSlide>
          ))}
        </Swiper>

        {/* Image Controls */}
        <Fade in={showControls}>
          <Box
            className="image-controls"
            sx={{ opacity: 0, transition: "opacity 0.3s ease" }}
          >
            <IconButton
              className="swiper-button-prev"
              sx={{
                position: "absolute",
                left: 16,
                top: "50%",
                transform: "translateY(-50%)",
                zIndex: 2,
                bgcolor: "rgba(255,255,255,0.9)",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                "&:hover": {
                  bgcolor: "rgba(255,255,255,1)",
                  transform: "translateY(-50%) scale(1.1)",
                },
                transition: "all 0.3s ease",
                color: "#d32f2f", // Added color
              }}
            >
              <ChevronLeft />
            </IconButton>
            <IconButton
              className="swiper-button-next"
              sx={{
                position: "absolute",
                right: 16,
                top: "50%",
                transform: "translateY(-50%)",
                zIndex: 2,
                bgcolor: "rgba(255,255,255,0.9)",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                "&:hover": {
                  bgcolor: "rgba(255,255,255,1)",
                  transform: "translateY(-50%) scale(1.1)",
                },
                transition: "all 0.3s ease",
                color: "#d32f2f", // Added color
              }}
            >
              <ChevronRight />
            </IconButton>
            <IconButton
              onClick={handleFullscreen}
              sx={{
                position: "absolute",
                right: 16,
                top: 16,
                zIndex: 2,
                bgcolor: "rgba(255,255,255,0.9)",
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
                "&:hover": {
                  bgcolor: "rgba(255,255,255,1)",
                  transform: "scale(1.1)",
                },
                transition: "all 0.3s ease",
                color: "#d32f2f", // Added color
              }}
            >
              <Maximize2 size={20} />
            </IconButton>
          </Box>
        </Fade>

        {/* Image Counter */}
        <Box
          sx={{
            position: "absolute",
            bottom: 16,
            right: 16,
            zIndex: 2,
            bgcolor: "rgba(0,0,0,0.6)",
            color: "white",
            px: 1.5,
            py: 0.5,
            borderRadius: 2,
            fontSize: "0.875rem",
          }}
        >
          {activeIndex + 1}/{images.length}
        </Box>
      </Paper>

      {/* Thumbnail Slider */}
      <Box sx={{ mt: 2 }}>
        <Swiper
          onSwiper={setThumbsSwiper}
          spaceBetween={8}
          slidesPerView={4.5}
          freeMode={true}
          watchSlidesProgress={true}
          modules={[Navigation, Thumbs]}
          className="product-thumb-slider"
        >
          {images.map((image, index) => (
            <SwiperSlide key={index}>
              <Paper
                elevation={0}
                sx={{
                  position: "relative",
                  paddingTop: "100%",
                  borderRadius: 2,
                  overflow: "hidden",
                  border:
                    activeIndex === index
                      ? "2px solid #d32f2f"
                      : "2px solid transparent",
                  cursor: "pointer",
                  transition: "all 0.3s ease",
                  "&:hover": {
                    transform: "translateY(-2px)",
                    borderColor: "#d32f2f", // Added hover border
                  },
                }}
              >
                <Box
                  component="img"
                  src={
                    image?.imageUrl?.startsWith("http")
                      ? image.imageUrl
                      : `${process.env.REACT_APP_API_BASE_URL}/${image.imageUrl}`
                  }
                  alt={`${name} - Thumbnail ${index + 1}`}
                  sx={{
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    objectFit: "contain",
                    p: 1,
                  }}
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src =
                      "https://via.placeholder.com/100?text=No+Image";
                  }}
                />
              </Paper>
            </SwiperSlide>
          ))}
        </Swiper>
      </Box>

      {/* Fullscreen Dialog */}
      <Dialog
        fullScreen
        open={isFullscreen}
        onClose={closeFullscreen}
        TransitionComponent={Fade}
        sx={{
          "& .MuiDialog-paper": {
            bgcolor: "rgba(0,0,0,0.95)",
          },
        }}
      >
        <Box sx={{ position: "relative", height: "100%" }}>
          <IconButton
            onClick={closeFullscreen}
            sx={{
              position: "absolute",
              right: 24,
              top: 24,
              zIndex: 2,
              color: "white",
              bgcolor: "rgba(255,255,255,0.1)",
              "&:hover": {
                bgcolor: "rgba(255,255,255,0.2)",
              },
            }}
          >
            <X />
          </IconButton>

          <Box
            sx={{
              height: "100%",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              p: 4,
            }}
          >
            <Typography
              variant="h6"
              sx={{
                color: "rgba(255,255,255,0.7)",
                mb: 2,
                textAlign: "center",
              }}
            >
              {name}
            </Typography>
            <Swiper
              modules={[Navigation, Zoom]}
              navigation
              zoom={{
                maxRatio: 3,
                minRatio: 1,
              }}
              initialSlide={activeIndex}
              className="fullscreen-slider"
            >
              {images.map((image, index) => (
                <SwiperSlide key={index}>
                  <Box
                    className="swiper-zoom-container"
                    sx={{
                      height: "80vh",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    <Box
                      component="img"
                      src={
                        image?.imageUrl?.startsWith("http")
                          ? image.imageUrl
                          : `${process.env.REACT_APP_API_BASE_URL}/${image.imageUrl}`
                      }
                      alt={`${name} - Fullscreen ${index + 1}`}
                      sx={{
                        maxHeight: "90vh",
                        maxWidth: "90vw",
                        objectFit: "contain",
                      }}
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src =
                          "https://via.placeholder.com/800?text=No+Image";
                      }}
                    />
                  </Box>
                </SwiperSlide>
              ))}
            </Swiper>
            <Typography
              variant="caption"
              sx={{
                color: "rgba(255,255,255,0.5)",
                mt: 2,
              }}
            >
              Cuộn để phóng to • Click để xem chi tiết
            </Typography>
          </Box>
        </Box>
      </Dialog>
    </Box>
  );
};

export default ProductImage;

```

### ClientApp\src\components\ProductInfoPage\ProductInfo.jsx
```jsx
import React from "react";
import { Box, Typography, Divider, Paper, Rating } from "@mui/material";
import { Award, Shield, Truck, Gift } from "lucide-react";

const ProductInfo = ({ product }) => {
  return (
    <Paper
      elevation={0}
      sx={{
        bgcolor: "white",
        borderRadius: 3,
        overflow: "hidden",
        transition: "all 0.3s ease",
      }}
    >
      {/* Hero Section với Gradient Background */}
      <Box
        sx={{
          background: "linear-gradient(135deg, #d32f2f 0%, #f44336 100%)",
          py: 4,
          px: 3,
          color: "white",
          position: "relative",
          overflow: "hidden",
        }}
      >
        {/* Animated Background Pattern */}
        <Box
          sx={{
            position: "absolute",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            opacity: 0.1,
            background:
              'url(\'data:image/svg+xml,%3Csvg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"%3E%3Cg fill="%23ffffff" fill-opacity="0.4" fill-rule="evenodd"%3E%3Ccircle cx="3" cy="3" r="3"/%3E%3Ccircle cx="13" cy="13" r="3"/%3E%3C/g%3E%3C/svg%3E\')',
          }}
        />

        {/* Product Name với Typography Hierarchy */}
        <Typography
          variant="h3"
          component="h1"
          sx={{
            fontWeight: 800,
            mb: 2,
            position: "relative",
            textShadow: "2px 2px 4px rgba(0,0,0,0.2)",
            "&::after": {
              content: '""',
              position: "absolute",
              bottom: -8,
              left: 0,
              width: 60,
              height: 4,
              bgcolor: "white",
              borderRadius: 2,
            },
          }}
        >
          {product?.name}
        </Typography>

        {/* Price and Rating Section */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            mt: 2,
            mb: 3,
          }}
        >
          <Typography
            variant="h4"
            sx={{
              fontWeight: 700,
              color: "#FFEB3B", // A vibrant yellow for price
              textShadow: "1px 1px 3px rgba(0,0,0,0.3)",
            }}
          >
            {product?.price?.toLocaleString("vi-VN")} VNĐ
          </Typography>
          <Box sx={{ display: "flex", alignItems: "center" }}>
            <Rating
              value={product?.averageRating || 0}
              precision={0.5}
              readOnly
              sx={{ color: "#FFEB3B" }}
            />
            <Typography variant="caption" sx={{ color: "white", ml: 1 }}>
              ({product?.reviewCount || 0} đánh giá)
            </Typography>
          </Box>
        </Box>

        {/* Brand Section */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            gap: 2,
            mt: 3,
            position: "relative",
          }}
        >
          <Box
            sx={{
              bgcolor: "white",
              p: 1.5,
              borderRadius: 2,
              boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
              display: "flex",
              alignItems: "center",
              gap: 2,
            }}
          >
            {product?.brand?.logo && (
              <Box
                component="img"
                src={
                  product.brand.logo?.startsWith("http")
                    ? product.brand.logo
                    : `${process.env.REACT_APP_API_BASE_URL}/${product.brand.logo}`
                }
                alt={product?.brand?.name || "Brand Logo"}
                sx={{
                  width: 40,
                  height: 40,
                  objectFit: "contain",
                }}
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = "https://via.placeholder.com/40?text=No+Logo";
                }}
              />
            )}
            <Box>
              <Typography
                variant="overline"
                sx={{
                  color: "text.secondary",
                  letterSpacing: 2,
                }}
              >
                Thương hiệu
              </Typography>
              <Typography
                variant="subtitle1"
                sx={{
                  fontWeight: 700,
                  color: "text.primary",
                }}
              >
                {product?.brand?.name}
              </Typography>
            </Box>
          </Box>

          {/* Stock Status */}
          <Box sx={{ ml: "auto" }}>
            <Typography
              variant="subtitle1"
              sx={{
                fontWeight: 700,
                color: product?.stock > 0 ? "#4CAF50" : "#F44336", // Green for in stock, Red for out of stock
                bgcolor: "white",
                p: 1,
                borderRadius: 1,
                boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
              }}
            >
              {product?.stock > 0 ? "Còn hàng" : "Hết hàng"}
            </Typography>
          </Box>
        </Box>
      </Box>

      {/* Main Content Section */}
      <Box sx={{ p: 3 }}>
        {/* Benefits Grid */}
        <Box
          sx={{
            display: "grid",
            gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
            gap: 2,
            mb: 4,
          }}
        >
          {[
            {
              icon: Shield,
              label: "Chính hãng",
              desc: "100% sản phẩm chính hãng",
            },
            {
              icon: Award,
              label: "Bảo hành 24 tháng",
              desc: "Hỗ trợ đổi trả miễn phí",
            },
            {
              icon: Truck,
              label: "Giao hàng trong 2h",
              desc: "Với đơn hàng nội thành",
            },
            {
              icon: Gift,
              label: "Quà tặng hấp dẫn",
              desc: "Nhiều phần quà giá trị",
            },
          ].map((item, index) => (
            <Paper
              key={index}
              elevation={0}
              sx={{
                p: 2,
                borderRadius: 2,
                border: "1px solid",
                borderColor: "divider",
                display: "flex",
                alignItems: "center",
                gap: 2,
                transition: "all 0.3s ease",
                "&:hover": {
                  transform: "translateY(-2px)",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
                },
              }}
            >
              <Box
                sx={{
                  width: 40,
                  height: 40,
                  borderRadius: 2,
                  bgcolor: "primary.main",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  color: "white",
                }}
              >
                <item.icon size={24} />
              </Box>
              <Box>
                <Typography variant="subtitle2" fontWeight="bold">
                  {item.label}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {item.desc}
                </Typography>
              </Box>
            </Paper>
          ))}
        </Box>

        <Divider sx={{ my: 3 }} />

        {/* Product Description */}
        <Paper
          elevation={0}
          sx={{
            position: "relative",
            p: 3,
            borderRadius: 2,
            bgcolor: "#f8f9fa",
            border: "1px solid",
            borderColor: "divider",
          }}
        >
          <Typography
            variant="h6"
            sx={{
              mb: 3,
              fontWeight: 600,
              display: "flex",
              alignItems: "center",
              gap: 1,
              color: "#1a1a1a",
              position: "relative",
              "&::before": {
                content: '""',
                width: 4,
                height: 24,
                bgcolor: "primary.main",
                borderRadius: 1,
              },
            }}
          >
            Mô tả sản phẩm
          </Typography>
          <Typography
            variant="body1"
            sx={{
              color: "#2c3e50",
              lineHeight: 2,
              textAlign: "justify",
              letterSpacing: "0.3px",
              maxHeight: 300,
              overflowY: "auto",
              pr: 2,
              "& strong": {
                color: "#1a1a1a",
                fontWeight: 700,
                backgroundColor: "rgba(211, 47, 47, 0.1)",
                padding: "0 4px",
                borderRadius: 1,
              },
              "&::-webkit-scrollbar": {
                width: "8px",
              },
              "&::-webkit-scrollbar-track": {
                background: "#f1f1f1",
                borderRadius: "4px",
              },
              "&::-webkit-scrollbar-thumb": {
                background: "#d32f2f",
                borderRadius: "4px",
                "&:hover": {
                  background: "#b71c1c",
                },
              },
            }}
          >
            {product?.description}
          </Typography>
        </Paper>
      </Box>
    </Paper>
  );
};

export default ProductInfo;

```

### ClientApp\src\components\ProductInfoPage\ProductReviews.jsx
```jsx
import React, { useState, useEffect, useCallback } from "react";
import { 
  Snackbar, 
  Alert, 
  CircularProgress, 
  Box, 
  Typography, 
  Card, 
  CardContent, 
  Button, 
  TextField, 
  Rating, 
  Avatar, 
  Chip,
  Divider,
  LinearProgress
} from "@mui/material";
import { 
  Star, 
  CheckCircle, // For verified purchase
  Person, 
  RateReview, 
  Send,
  Close 
} from "@mui/icons-material";
import { useReviews, useSubmitReview, useUserReview } from "@/hooks/api/useReviews";
import { jwtDecode } from "jwt-decode";

const ProductReviews = ({ productId }) => {
  const [showForm, setShowForm] = useState(false);
  const [rating, setRating] = useState(5);
  const [comment, setComment] = useState("");
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" });
  const token = localStorage.getItem("token");
  let currentUserId = null;
  if (token) {
    try {
      const decoded = jwtDecode(token);
      currentUserId = decoded.nameid || decoded.sub || decoded.UserId || null;
    } catch (err) {
      console.error("Token decode error:", err);
    }
  }

  const { reviews, loading, error, averageRating, fetchReviews, fetchAverageRating } = useReviews(productId);
  const { userReview, refetchUserReview } = useUserReview(currentUserId, productId);
  const { submitReview } = useSubmitReview(productId, () => {
    fetchReviews();
    fetchAverageRating();
    refetchUserReview(); // Refetch user's specific review after submission
  });

  // Xử lý khi không có dữ liệu hoặc API trả về rỗng
  const safeReviews = Array.isArray(reviews) ? reviews : [];
  const safeAverageRating = typeof averageRating === 'number' && !isNaN(averageRating) ? averageRating : 0;

  const handleSubmitReview = async (e) => {
    e.preventDefault();

    if (!token || !currentUserId) {
      setSnackbar({ open: true, message: "Vui lòng đăng nhập để đánh giá", severity: "warning" });
      return;
    }

    if (!comment.trim() || rating < 1 || rating > 5) {
      setSnackbar({ open: true, message: "Vui lòng nhập đầy đủ thông tin đánh giá", severity: "warning" });
      return;
    }

    try {
      await submitReview({ rating, comment });
      setShowForm(false);
      setComment("");
      setRating(5);
      setSnackbar({ open: true, message: "Đánh giá của bạn đã được gửi và đang chờ kiểm duyệt!", severity: "success" });
    } catch (err) {
      // Hiển thị thông báo chi tiết từ backend nếu có
      const errorMsg = err?.response?.data?.message || err?.message || "Gửi đánh giá thất bại";
      setSnackbar({ open: true, message: errorMsg, severity: "error" });
    }
  };
  
  // Check if user has reviewed, considering both general reviews and their specific review
  const hasReviewed = safeReviews.some((r) => r.userId === Number(currentUserId)) || !!userReview;

  const getRatingDistribution = () => {
    const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };
    safeReviews.forEach(review => {
      distribution[review.rating] = (distribution[review.rating] || 0) + 1;
    });
    return distribution;
  };

  const ratingDistribution = getRatingDistribution();
  const totalReviews = safeReviews.length;

  return (
    <Box sx={{ p: 0 }}>
      {/* Header Section */}
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 2, color: '#1976d2' }}>
          <RateReview sx={{ mr: 1, verticalAlign: 'middle' }} />
          Đánh giá & Bình luận
        </Typography>
        
        {/* Average Rating Display */}
        <Card sx={{ maxWidth: 400, mx: 'auto', mb: 3 }}>
          <CardContent sx={{ textAlign: 'center', py: 3 }}>
            <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#ff9800', mb: 1 }}>
              {safeAverageRating.toFixed(1)}
            </Typography>
            <Rating value={safeAverageRating} readOnly precision={0.1} size="large" sx={{ mb: 1 }} />
            <Typography variant="body2" color="text.secondary">
              Dựa trên {totalReviews} đánh giá
            </Typography>
          </CardContent>
        </Card>

        {/* Rating Distribution */}
        {totalReviews > 0 && (
          <Card sx={{ maxWidth: 500, mx: 'auto', mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, textAlign: 'center' }}>
                Phân bố đánh giá
              </Typography>
              {[5, 4, 3, 2, 1].map((star) => (
                <Box key={star} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Typography sx={{ minWidth: 20 }}>{star}</Typography>
                  <Star sx={{ color: '#ff9800', fontSize: 16, mx: 0.5 }} />
                  <LinearProgress 
                    variant="determinate" 
                    value={totalReviews > 0 ? (ratingDistribution[star] / totalReviews) * 100 : 0}
                    sx={{ 
                      flexGrow: 1, 
                      mx: 1, 
                      height: 8, 
                      borderRadius: 4,
                      bgcolor: '#f5f5f5',
                      '& .MuiLinearProgress-bar': { bgcolor: '#ff9800' }
                    }} 
                  />
                  <Typography sx={{ minWidth: 30, fontSize: '0.875rem', color: 'text.secondary' }}>
                    {ratingDistribution[star]}
                  </Typography>
                </Box>
              ))}
            </CardContent>
          </Card>
        )}
      </Box>

      {/* Loading State */}
      {loading && (
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', py: 4 }}>
          <CircularProgress size={24} sx={{ mr: 2 }} />
          <Typography color="text.secondary">Đang tải đánh giá...</Typography>
        </Box>
      )}

      {/* Error State */}
      {error && (
        <Alert severity="warning" sx={{ mb: 3 }}>
          <Typography variant="body2">
            {error.includes('404') || error.includes('Not Found') 
              ? 'Chức năng đánh giá đang được phát triển. Vui lòng quay lại sau!'
              : `Lỗi khi tải đánh giá: ${error}`
            }
          </Typography>
        </Alert>
      )}

      {/* User's Own Review (if exists) */}
      {userReview && (
        <Card sx={{ mb: 2, boxShadow: 3, borderRadius: 2, border: '2px solid #1976d2', bgcolor: '#e3f2fd' }}>
          <CardContent>
            <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
              <Avatar sx={{ bgcolor: '#1976d2', mr: 2, width: 48, height: 48, fontSize: '1.5rem' }}>
                {userReview.userName ? userReview.userName[0].toUpperCase() : '?'}
              </Avatar>
              <Box sx={{ flexGrow: 1 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: '#1976d2' }}>
                    Đánh giá của bạn
                  </Typography>
                  <Chip 
                    icon={<Star sx={{ fontSize: 16 }} />}
                    label={`${userReview.rating}`}
                    size="small"
                    sx={{
                      bgcolor: '#ffeb3b',
                      color: '#333',
                      fontWeight: 'bold',
                      px: 1,
                    }}
                  />
                </Box>
                <Rating value={userReview.rating} readOnly size="small" sx={{ mb: 1 }} />
                <Typography variant="body1" sx={{ mb: 2, lineHeight: 1.6, color: '#333' }}>
                  {userReview.comment}
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  {new Date(userReview.createdAt).toLocaleDateString('vi-VN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                  {userReview.hasPurchased && (
                    <Chip
                      icon={<CheckCircle />}
                      label="Đã xác minh mua hàng"
                      size="small"
                      color="success"
                      sx={{ ml: 1, height: 20, fontSize: '0.75rem' }}
                    />
                  )}
                  {!userReview.isApproved && (
                    <Chip
                      label="Đang chờ duyệt"
                      size="small"
                      color="info"
                      sx={{ ml: 1, height: 20, fontSize: '0.75rem' }}
                    />
                  )}
                </Typography>
              </Box>
            </Box>
          </CardContent>
        </Card>
      )}

      {/* Reviews List */}
      {!loading && !error && (
        <Box sx={{ mb: 4 }}>
          {safeReviews.length > 0 ? (
            <Box>
              {safeReviews.map((review, index) => (
                <Card key={review.id} sx={{ mb: 2, boxShadow: 2, borderRadius: 2, transition: 'all 0.3s ease', '&:hover': { boxShadow: 4 } }}>
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'flex-start', mb: 2 }}>
                      <Avatar sx={{ bgcolor: '#d32f2f', mr: 2, width: 48, height: 48, fontSize: '1.5rem' }}>
                        {review.userName ? review.userName[0].toUpperCase() : '?'}
                      </Avatar>
                      <Box sx={{ flexGrow: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                          <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: '#333' }}>
                            {review.userName}
                          </Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Chip 
                              icon={<Star sx={{ fontSize: 16 }} />}
                              label={`${review.rating}`}
                              size="small"
                              sx={{
                                bgcolor: '#ffeb3b',
                                color: '#333',
                                fontWeight: 'bold',
                                px: 1,
                              }}
                            />
                            {review.hasPurchased && (
                              <Chip
                                icon={<CheckCircle />}
                                label="Đã xác minh mua hàng"
                                size="small"
                                color="success"
                                sx={{ height: 20, fontSize: '0.75rem' }}
                              />
                            )}
                          </Box>
                        </Box>
                        <Rating value={review.rating} readOnly size="small" sx={{ mb: 1 }} />
                        <Typography variant="body1" sx={{ mb: 2, lineHeight: 1.6, color: '#555' }}>
                          {review.comment}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {new Date(review.createdAt).toLocaleDateString('vi-VN', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              ))}
            </Box>
          ) : (
            <Card sx={{ textAlign: 'center', py: 6, boxShadow: 2, borderRadius: 2 }}>
              <CardContent>
                <RateReview sx={{ fontSize: 60, color: '#bdbdbd', mb: 2 }} />
                <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
                  {error ? 'Không thể tải đánh giá' : 'Chưa có đánh giá nào'}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {error 
                    ? 'Hệ thống đang bảo trì, vui lòng thử lại sau'
                    : 'Hãy là người đầu tiên đánh giá sản phẩm này'
                  }
                </Typography>
              </CardContent>
            </Card>
          )}
        </Box>
      )}

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        TransitionProps={{ appear: true }}
      >
        <Alert 
          severity={snackbar.severity} 
          variant="filled" 
          sx={{ width: '100%', fontWeight: 500, fontSize: '1rem', display: 'flex', alignItems: 'center' }}
          iconMapping={{
            success: <CheckCircle fontSize="inherit" sx={{ color: '#43a047' }} />,
            error: <Close fontSize="inherit" sx={{ color: '#d32f2f' }} />,
            warning: <RateReview fontSize="inherit" sx={{ color: '#ffa726' }} />,
            info: <Person fontSize="inherit" sx={{ color: '#1976d2' }} />,
          }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>

      {/* Add Review Button */}
      {!hasReviewed && currentUserId && !error && (
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 3 }}>
          <Button
            variant="contained"
            size="large"
            startIcon={showForm ? <Close /> : <RateReview />}
            onClick={() => setShowForm(!showForm)}
            sx={{
              borderRadius: 3,
              px: 4,
              py: 1.5,
              textTransform: 'none',
              fontSize: '1rem',
              boxShadow: 3,
              bgcolor: '#d32f2f',
              position: 'relative',
              zIndex: 2,
              transition: 'all 0.2s',
              '&:hover': { boxShadow: 5, bgcolor: '#b71c1c' }
            }}
            title={showForm ? "Đóng form đánh giá" : "Viết đánh giá về sản phẩm này"}
          >
            {showForm ? "Đóng form đánh giá" : "Viết đánh giá"}
          </Button>
        </Box>
      )}

      {/* Review Form */}
      {showForm && (
        <Card sx={{ mb: 3, boxShadow: 3, borderRadius: 2, animation: 'fadeInUp 0.3s' }}>
          <CardContent sx={{ p: { xs: 2, sm: 4 } }}>
            <Typography variant="h6" sx={{ mb: 3, textAlign: 'center', color: '#d32f2f', fontWeight: 'bold' }}>
              Chia sẻ đánh giá của bạn
            </Typography>
            <Box component="form" onSubmit={handleSubmitReview} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              <Box sx={{ textAlign: 'center' }}>
                <Typography component="legend" sx={{ mb: 1, fontWeight: 'medium', color: '#555' }}>
                  Đánh giá của bạn:
                </Typography>
                <Rating
                  value={rating}
                  onChange={(event, newValue) => setRating(newValue || 1)}
                  size="large"
                  sx={{ fontSize: { xs: '2rem', sm: '2.5rem' }, color: '#ffeb3b' }}
                />
                <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                  {rating === 5 && "Tuyệt vời! 🌟"}
                  {rating === 4 && "Rất tốt! 👍"}
                  {rating === 3 && "Bình thường 😐"}
                  {rating === 2 && "Không tốt 👎"}
                  {rating === 1 && "Rất tệ 😞"}
                </Typography>
              </Box>
              <TextField
                fullWidth
                multiline
                rows={4}
                variant="outlined"
                label="Nhận xét của bạn"
                placeholder="Chia sẻ trải nghiệm của bạn về sản phẩm này..."
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                required
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 2,
                  },
                }}
              />
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                <Button
                  type="button"
                  variant="outlined"
                  size="large"
                  onClick={() => setShowForm(false)}
                  sx={{ px: 4, borderRadius: 2, borderColor: '#d32f2f', color: '#d32f2f', '&:hover': { borderColor: '#b71c1c', bgcolor: 'rgba(211, 47, 47, 0.04)' } }}
                  title="Hủy đánh giá"
                >
                  Hủy
                </Button>
                <Button
                  type="submit"
                  variant="contained"
                  size="large"
                  startIcon={<Send />}
                  sx={{
                    px: 4,
                    borderRadius: 2,
                    boxShadow: 3,
                    bgcolor: '#d32f2f',
                    position: 'relative',
                    '&:hover': { boxShadow: 5, bgcolor: '#b71c1c' }
                  }}
                  title="Gửi đánh giá"
                  disabled={snackbar.severity === 'success' && snackbar.open}
                >
                  Gửi đánh giá
                </Button>
              </Box>
            </Box>
          </CardContent>
        </Card>
      )}

      {/* Hiệu ứng chuyển động cho form đánh giá */}
      <style>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(20px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>

      {/* Login prompt for non-logged in users */}
      {!currentUserId && (
        <Card sx={{ textAlign: 'center', bgcolor: '#f5f5f5', borderRadius: 2, boxShadow: 1 }}>
          <CardContent sx={{ py: 3 }}>
            <Typography variant="body1" color="text.secondary">
              Đăng nhập để có thể đánh giá và bình luận sản phẩm
            </Typography>
          </CardContent>
        </Card>
      )}

      {/* Already reviewed message */}
      {hasReviewed && !userReview && (
        <Alert severity="info" sx={{ textAlign: 'center', borderRadius: 2, boxShadow: 1 }}>
          Bạn đã đánh giá sản phẩm này rồi. Cảm ơn phản hồi của bạn!
        </Alert>
      )}
    </Box>
  );
};

export default ProductReviews;


```

### ClientApp\src\components\ProductInfoPage\ProductSpecifications.jsx
```jsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  Collapse,
  CircularProgress,
  Alert,
  Button,
  Divider,
} from '@mui/material';
import {
  ChevronDown,
  ChevronUp,
  Maximize2,
  Minimize2,
} from 'lucide-react';

const SpecificationDisplay = ({ productId }) => {
  const [specs, setSpecs] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expanded, setExpanded] = useState(true);
  const [showAllSpecs, setShowAllSpecs] = useState(false);

  useEffect(() => {
    const fetchSpecifications = async () => {
      try {
        setLoading(true);
        setError(null);


        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/Specifications/by-product/${productId}`
        );

        if (!response.ok) {
          throw new Error('Không tìm thấy thông số kỹ thuật');
        }

        const data = await response.json();
        setSpecs(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    if (productId ) {
      fetchSpecifications();
    }
  }, [productId]);



  // Render specs from API array
  const renderSpecs = () => {
    if (!Array.isArray(specs)) return null;
    // Sort by displayOrder
    const sortedSpecs = [...specs].sort((a, b) => a.displayOrder - b.displayOrder);
    const basicSpecs = sortedSpecs.slice(0, 4);
    const displaySpecs = showAllSpecs ? sortedSpecs : basicSpecs;

    return (
      <List sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}>
        {displaySpecs.map((spec, index) => (
          <ListItem
            key={spec.id || index}
            sx={{
              py: 1.5,
              px: { xs: 1, sm: 2 },
              display: 'flex',
              alignItems: 'center',
              gap: 2,
              borderRadius: 2,
              transition: 'background 0.2s',
              '&:hover': { bgcolor: 'action.hover' },
            }}
          >
            {/* Icon for spec (example: use Maximize2 for demo, can customize per spec type) */}
            <Box sx={{ minWidth: 32, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <Maximize2 size={20} color="#1976d2" />
            </Box>
            <ListItemText
              primary={
                <Typography variant="body2" color="text.secondary" fontWeight={600}>
                  {spec.name}
                </Typography>
              }
              secondary={
                spec.value ? (
                  <Typography variant="body1" fontWeight="medium" color="text.primary">
                    {spec.value}{spec.unit ? ` ${spec.unit}` : ''}
                  </Typography>
                ) : (
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Typography variant="body1" color="warning.main" fontWeight="medium">
                      Đang cập nhật
                    </Typography>
                    {/* Tooltip for updating */}
                    <Box component="span" sx={{ cursor: 'pointer' }} title="Thông số này sẽ được cập nhật sớm.">
                      <Minimize2 size={16} color="#ffa726" />
                    </Box>
                  </Box>
                )
              }
            />
          </ListItem>
        ))}
        {sortedSpecs.length > basicSpecs.length && (
          <ListItem sx={{ justifyContent: 'center', pt: 2, bgcolor: 'transparent' }}>
            <Button
              variant="outlined"
              onClick={() => setShowAllSpecs(!showAllSpecs)}
              endIcon={showAllSpecs ? <Minimize2 size={20} /> : <Maximize2 size={20} />}
              sx={{
                borderRadius: 2,
                px: 3,
                py: 1,
                fontWeight: 600,
                bgcolor: 'white',
                boxShadow: 1,
                textTransform: 'none',
                '&:hover': { bgcolor: 'action.hover' },
              }}
            >
              {showAllSpecs ? 'Thu gọn' : 'Xem thêm thông số'}
            </Button>
          </ListItem>
        )}
      </List>
    );
  };


  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', my: 4, py: 4 }}>
        <CircularProgress size={40} />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ my: 4 }}>
        {error}
      </Alert>
    );
  }

  if (!specs) {
    return null;
  }

  return (
    <Box
      sx={{
        bgcolor: 'white',
        borderRadius: 3,
        overflow: 'hidden',
        boxShadow: 2,
        maxWidth: 600,
        mx: 'auto',
        my: { xs: 2, sm: 4 },
        p: 0,
      }}
    >
      <Button
        onClick={() => setExpanded(!expanded)}
        sx={{
          width: '100%',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          p: { xs: 1.5, sm: 2 },
          textTransform: 'none',
          bgcolor: 'white',
          borderBottom: '1px solid #eee',
          borderRadius: 0,
          fontWeight: 700,
          fontSize: { xs: 16, sm: 20 },
          '&:hover': {
            bgcolor: 'action.hover',
          },
        }}
      >
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Typography variant="h6" fontWeight="bold" color="text.primary">
            Thông số kỹ thuật
          </Typography>
        </Box>
        {expanded ? <ChevronUp size={22} /> : <ChevronDown size={22} />}
      </Button>
      <Collapse in={expanded}>
        <Divider />
        <Box sx={{ p: { xs: 1, sm: 2 } }}>
          {renderSpecs()}
        </Box>
      </Collapse>
    </Box>
  );
};

export default SpecificationDisplay;
```

### ClientApp\src\components\ProductInfoPage\ProductVariants.jsx
```jsx
import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Grid,
  Card,
  CardActionArea,
  Button,
  Snackbar,
  Alert,
  Chip,
  Fade,
  Tooltip,
  IconButton,
  Divider,
} from "@mui/material";
import {
  CheckCircle,
  ShoppingCart,
  LocalOffer,
  Info,
  AddCircle,
  RemoveCircle,
} from "@mui/icons-material";
import { jwtDecode } from "jwt-decode";
import axios from "axios";

const ProductVariants = ({ variants, onAddToCart }) => {
  const [selectedColor, setSelectedColor] = useState(variants[0].color);
  const availableStorages = variants
    .filter((v) => v.color === selectedColor)
    .map((v) => v.storage);
  const [selectedStorage, setSelectedStorage] = useState(availableStorages[0]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState("success");
  const [quantity, setQuantity] = useState(1);
  const [showDiscount, setShowDiscount] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      setShowDiscount((prev) => !prev);
    }, 3000);
    return () => clearInterval(timer);
  }, []);

  const handleSelectColor = (color) => {
    setSelectedColor(color);
    const newStorages = variants
      .filter((v) => v.color === color)
      .map((v) => v.storage);
    setSelectedStorage(newStorages[0]);
  };

  const handleSelectStorage = (storage) => {
    if (availableStorages.includes(storage)) {
      setSelectedStorage(storage);
    }
  };

  const selectedVariant = variants.find(
    (v) => v.storage === selectedStorage && v.color === selectedColor
  );

  const formatCurrency = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  const calculateDiscount = (original, discounted) => {
    if (!original || !discounted) return 0;
    return Math.round(((original - discounted) / original) * 100);
  };

  const handleQuantityChange = (delta) => {
    const newQuantity = quantity + delta;
    if (
      newQuantity >= 1 &&
      newQuantity <= (selectedVariant?.stockQuantity || 1)
    ) {
      setQuantity(newQuantity);
    }
  };

  const handleAddToCart = async () => {
    try {
      if (!selectedVariant) {
        showSnackbar(
          "⚠️ Vui lòng chọn biến thể sản phẩm trước khi thêm vào giỏ hàng!",
          "warning"
        );
        return;
      }

      if (selectedVariant.stockQuantity <= 0) {
        showSnackbar("❌ Sản phẩm này đã hết hàng!", "error");
        return;
      }

      const token = localStorage.getItem("token");

      const primaryImage =
        selectedVariant.product?.images?.find((img) => img.isPrimary)
          ?.imageUrl || "";
      const productName = selectedVariant.product?.name || "Sản phẩm không tên";
      const variantColor = selectedColor;
      const variantStorage = selectedStorage;
      const price = selectedVariant.price || 0;
      const discountPrice = selectedVariant.discountPrice || 0;

      if (token) {
        const decoded = jwtDecode(token);
        const userId = parseInt(decoded.sub, 10);
        await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/Cart`,
          {
            productVariantId: selectedVariant.id,
            quantity: 1,
            userId: userId,
          },
          { headers: { Authorization: `Bearer ${token}` } }
        );
      } else {
        const sessionCart = JSON.parse(sessionStorage.getItem("cart")) || [];
        const existingItemIndex = sessionCart.findIndex(
          (item) => item.productVariantId === selectedVariant.id
        );

        if (existingItemIndex >= 0) {
          sessionCart[existingItemIndex].quantity += 1;
        } else {
          sessionCart.push({
            productVariantId: selectedVariant.id,
            quantity: 1,
            productImage: primaryImage,
            productName: productName,
            variantColor: variantColor,
            variantStorage: variantStorage,
            productPrice: price,
            productDiscountPrice: discountPrice,
            addedAt: new Date().toISOString(),
          });
        }

        sessionStorage.setItem("cart", JSON.stringify(sessionCart));
      }

      showSnackbar("🛒 Sản phẩm đã được thêm vào giỏ hàng!", "success");
      if (onAddToCart) onAddToCart();
    } catch (error) {
      console.error("❌ Lỗi khi thêm vào giỏ hàng:", error);
      showSnackbar(`❌ Không thể thêm vào giỏ hàng: ${error.message}`, "error");
    }
  };

  const showSnackbar = (message, severity) => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  const handleCloseSnackbar = () => {
    setSnackbarOpen(false);
  };

  return (
    <Box
      sx={{
        backgroundColor: "white",
        borderRadius: 2,
        p: 3,
        boxShadow: "0 4px 6px -1px rgba(0,0,0,0.1)",
      }}
    >
      {/* Màu sắc */}
      <Typography variant="h6" fontWeight="bold" gutterBottom>
        Màu sắc
      </Typography>
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {[...new Set(variants.map((v) => v.color))].map((color) => (
          <Grid item key={color}>
            <Card
              elevation={selectedColor === color ? 8 : 1}
              sx={{
                borderRadius: 2,
                transform: selectedColor === color ? "scale(1.05)" : "scale(1)",
                transition: "all 0.3s ease-in-out",
                border: selectedColor === color ? "2px solid #d32f2f" : "2px solid transparent",
                "&:hover": {
                  transform: "scale(1.05)",
                  borderColor: "#d32f2f",
                },
              }}
            >
              <CardActionArea
                onClick={() => handleSelectColor(color)}
                sx={{
                  position: "relative",
                  width: 120,
                  height: 120,
                }}
              >
                <Box
                  component="img"
                  src={
                    variants.find((v) => v.color === color)?.product
                      ?.images?.[0]?.imageUrl
                  }
                  alt={color}
                  sx={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                  }}
                />
                <Box
                  sx={{
                    position: "absolute",
                    bottom: 0,
                    left: 0,
                    right: 0,
                    bgcolor: "rgba(255,255,255,0.9)",
                    p: 1,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    gap: 0.5,
                  }}
                >
                  <Typography variant="subtitle2" fontWeight="bold">
                    {color}
                  </Typography>
                  {selectedColor === color && (
                    <CheckCircle
                      sx={{ color: "#d32f2f", width: 16, height: 16 }}
                    />
                  )}
                </Box>
              </CardActionArea>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Dung lượng */}
      <Typography variant="h6" fontWeight="bold" gutterBottom>
        Dung lượng
      </Typography>
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {[...new Set(variants.map((v) => v.storage))].map((storage) => (
          <Grid item key={storage}>
            <Tooltip
              title={
                !availableStorages.includes(storage)
                  ? "Không có sẵn với màu đã chọn"
                  : ""
              }
              arrow
            >
              <Card
                elevation={selectedStorage === storage ? 4 : 1}
                sx={{
                  minWidth: 120,
                  opacity: availableStorages.includes(storage) ? 1 : 0.5,
                  transition: "all 0.2s ease",
                  transform:
                    selectedStorage === storage ? "translateY(-4px)" : "none",
                  border:
                    selectedStorage === storage
                      ? "2px solid #d32f2f"
                      : "1px solid #ddd",
                  "&:hover": {
                    borderColor: availableStorages.includes(storage) ? "#d32f2f" : "#ddd",
                  },
                }}
              >
                <CardActionArea
                  onClick={() => handleSelectStorage(storage)}
                  disabled={!availableStorages.includes(storage)}
                  sx={{ p: 2 }}
                >
                  <Typography
                    variant="h6"
                    align="center"
                    sx={{
                      fontWeight: "bold",
                      color: selectedStorage === storage ? "#d32f2f" : "#333",
                    }}
                  >
                    {storage}
                  </Typography>
                </CardActionArea>
              </Card>
            </Tooltip>
          </Grid>
        ))}
      </Grid>

      {/* Giá và thông tin */}
      {selectedVariant && (
        <Box
          sx={{
            mt: 4,
            p: 3,
            borderRadius: 2,
            bgcolor: "#f5f5f5",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            gap: 2,
          }}
        >
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Chip
              icon={<LocalOffer />}
              label={`-${calculateDiscount(
                selectedVariant.price,
                selectedVariant.discountPrice
              )}%`}
              color="error"
              sx={{ fontSize: "1.1rem" }}
            />
            <Box sx={{ textAlign: "center" }}>
              <Fade in={showDiscount}>
                <Typography
                  variant="h4"
                  component="div"
                  sx={{
                    fontWeight: "bold",
                    color: "#d32f2f",
                    textShadow: "0px 2px 4px rgba(0,0,0,0.1)",
                  }}
                >
                  {formatCurrency(selectedVariant.discountPrice)}
                </Typography>
              </Fade>
              <Typography
                variant="body1"
                sx={{
                  textDecoration: "line-through",
                  color: "text.secondary",
                  mt: 0.5,
                }}
              >
                {formatCurrency(selectedVariant.price)}
              </Typography>
            </Box>
          </Box>

          <Divider flexItem sx={{ my: 2 }} />

          {/* Số lượng */}
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Typography variant="subtitle1">Số lượng:</Typography>
            <Box sx={{ display: "flex", alignItems: "center" }}>
              <IconButton
                onClick={() => handleQuantityChange(-1)}
                disabled={quantity <= 1}
                size="small"
              >
                <RemoveCircle />
              </IconButton>
              <Typography sx={{ mx: 2, minWidth: 30, textAlign: "center" }}>
                {quantity}
              </Typography>
              <IconButton
                onClick={() => handleQuantityChange(1)}
                disabled={quantity >= selectedVariant.stockQuantity}
                size="small"
              >
                <AddCircle />
              </IconButton>
            </Box>
            <Tooltip title="Số lượng còn lại" arrow>
              <Chip
                icon={<Info />}
                label={`Còn ${selectedVariant.stockQuantity} sản phẩm`}
                variant="outlined"
                size="small"
              />
            </Tooltip>
          </Box>

          {/* Nút thao tác */}
          <Box sx={{ display: "flex", gap: 2, width: "100%", mt: 3 }}>
            <Button
              onClick={handleAddToCart}
              variant="outlined"
              startIcon={<ShoppingCart />}
              sx={{
                flex: 1,
                height: 56,
                borderColor: "#d32f2f",
                color: "#d32f2f",
                borderWidth: 2,
                "&:hover": {
                  borderWidth: 2,
                  borderColor: "#b71c1c",
                  bgcolor: "rgba(211, 47, 47, 0.08)",
                },
              }}
            >
              Thêm vào giỏ
            </Button>
            <Button
              variant="contained"
              sx={{
                flex: 2,
                height: 56,
                bgcolor: "#d32f2f",
                fontSize: "1.1rem",
                fontWeight: "bold",
                "&:hover": {
                  bgcolor: "#b71c1c",
                },
              }}
            >
              Mua ngay
            </Button>
          </Box>
        </Box>
      )}

      {/* Snackbar thông báo */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity}
          elevation={6}
          variant="filled"
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default ProductVariants;

```

### ClientApp\src\components\ProductInfoPage\RelatedProducts.jsx
```jsx
import React, { useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import { useProducts } from "@/hooks/api/useProducts";
import { useBrands } from "@/hooks/api/useBrands";
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardMedia,
  Button,
  CircularProgress,
  Alert,
  Chip,
  IconButton,
} from "@mui/material";
import { ChevronLeft, ChevronRight } from "@mui/icons-material";

const RelatedProducts = ({ productId, brandId, categoryId }) => {
  const { products: productsArray, loading: loadingProducts, error: errorProducts } = useProducts();
  const { brands: brandsArray, loading: loadingBrands, error: errorBrands } = useBrands(true);
  const [error, setError] = React.useState("");
  const navigate = useNavigate();

  const relatedProducts = useMemo(() => {
    if (loadingProducts || loadingBrands) return [];
    if (errorProducts || errorBrands) {
      setError(errorProducts || errorBrands);
      return [];
    }
    if (!productsArray.length || !brandsArray.length) return [];

    return productsArray
      .filter(
        (product) =>
          product.id !== productId &&
          (product.brandId === brandId || product.categoryId === categoryId)
      )
      .map((product) => {
        const variant = product.variants?.[0] || {};
        const image = product.images?.[0]?.imageUrl || "/images/placeholder.jpg";
        const oldPrice = variant.price || 0;
        const newPrice = variant.discountPrice || oldPrice;
        const discountAmount = oldPrice - newPrice;
        const discount =
          oldPrice > 0
            ? `-${Math.round((discountAmount / oldPrice) * 100)}%`
            : "0%";

        const brand = brandsArray.find((b) => b.id === product.brandId);

        return {
          id: product.id,
          name: product.name,
          oldPrice,
          newPrice,
          discount,
          discountAmount,
          image,
          features: [
            variant.storage || "Không xác định",
            brand?.name || "Không có thương hiệu",
          ],
        };
      });
  }, [productsArray, brandsArray, loadingProducts, loadingBrands, errorProducts, errorBrands, productId, brandId, categoryId]);

  if (loadingProducts || loadingBrands) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
        <CircularProgress />
      </Box>
    );
  }
  if (error) {
    return (
      <Alert severity="error" sx={{ my: 4 }}>
        {error}
      </Alert>
    );
  }

  if (relatedProducts.length === 0) {
    return null; // Or a message indicating no related products
  }

  return (
    <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center', py: 3 }}>
      <Box sx={{ maxWidth: 1200, width: '100%', px: 2, bgcolor: 'white', borderRadius: 2, boxShadow: 3, p: 3 }}>
        <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 3, color: '#333' }}>
          Sản phẩm liên quan
        </Typography>
        <Box sx={{ position: 'relative' }}>
          <Swiper
            modules={[Navigation]}
            navigation={{
              prevEl: '.swiper-button-prev-related',
              nextEl: '.swiper-button-next-related',
            }}
            spaceBetween={20}
            slidesPerView={1}
            breakpoints={{
              640: { slidesPerView: 2 },
              768: { slidesPerView: 3 },
              1024: { slidesPerView: 4 },
            }}
            className="pb-6"
          >
            {relatedProducts.map((product) => (
              <SwiperSlide key={product.id}>
                <Card
                  sx={{
                    maxWidth: 280,
                    mx: 'auto',
                    borderRadius: 2,
                    boxShadow: 2,
                    transition: 'all 0.3s ease',
                    '&:hover': { boxShadow: 6, transform: 'translateY(-5px)' },
                    cursor: 'pointer',
                  }}
                  onClick={() => navigate(`/product/${product.id}`)}
                >
                  <CardMedia
                    component="img"
                    height="180"
                    image={
                      product.image?.startsWith("http")
                        ? product.image
                        : `${process.env.REACT_APP_API_BASE_URL}/${product.image}`
                    }
                    alt={product.name}
                    sx={{ objectFit: 'contain', p: 2 }}
                    onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/180"; }}
                  />
                  <CardContent sx={{ p: 2 }}>
                    <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1, minHeight: 50 }}>
                      {product.name}
                    </Typography>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
                      <Typography variant="body2" color="text.secondary" sx={{ textDecoration: 'line-through' }}>
                        {product.oldPrice.toLocaleString('vi-VN')} đ
                      </Typography>
                      {product.discount !== "0%" && (
                        <Chip label={product.discount} color="error" size="small" sx={{ fontWeight: 'bold' }} />
                      )}
                    </Box>
                    <Typography variant="h6" color="primary.main" sx={{ fontWeight: 'bold', mb: 1 }}>
                      {product.newPrice.toLocaleString('vi-VN')} đ
                    </Typography>
                    {product.discountAmount > 0 && (
                      <Typography variant="caption" color="success.main" sx={{ fontWeight: 'medium' }}>
                        Giảm {product.discountAmount.toLocaleString('vi-VN')} đ
                      </Typography>
                    )}
                    <Box sx={{ mt: 1 }}>
                      {product.features.map((feature, index) => (
                        <Typography key={index} variant="caption" color="text.secondary" display="block">
                          • {feature}
                        </Typography>
                      ))}
                    </Box>
                  </CardContent>
                </Card>
              </SwiperSlide>
            ))}
          </Swiper>
          <IconButton
            className="swiper-button-prev-related"
            sx={{
              position: 'absolute',
              left: -10,
              top: '50%',
              transform: 'translateY(-50%)',
              zIndex: 10,
              bgcolor: 'rgba(255,255,255,0.8)',
              boxShadow: 1,
              '&:hover': { bgcolor: 'rgba(255,255,255,1)', boxShadow: 3 },
            }}
          >
            <ChevronLeft />
          </IconButton>
          <IconButton
            className="swiper-button-next-related"
            sx={{
              position: 'absolute',
              right: -10,
              top: '50%',
              transform: 'translateY(-50%)',
              zIndex: 10,
              bgcolor: 'rgba(255,255,255,0.8)',
              boxShadow: 1,
              '&:hover': { bgcolor: 'rgba(255,255,255,1)', boxShadow: 3 },
            }}
          >
            <ChevronRight />
          </IconButton>
        </Box>
      </Box>
    </Box>
  );
};

export default RelatedProducts;

```

### ClientApp\src\components\Profile\AddPaymentMethod.jsx
```jsx
import React, { useState } from "react";
import { usePaymentMethod } from "@/hooks/api/usePaymentMethod";

const AddPaymentMethod = () => {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const { addPaymentMethod, loading, message, setMessage } = usePaymentMethod();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const result = await addPaymentMethod(name, description);
    if (result) {
      setName("");
      setDescription("");
    }
  };

  return (
    <div className="max-w-md mx-auto mt-12 p-6 bg-white rounded-xl shadow-lg border-t-4 border-[#cb1c22]">
      <h2 className="text-2xl font-bold mb-6 text-[#cb1c22] text-center">
        Thêm phương thức thanh toán
      </h2>
      <form onSubmit={handleSubmit}>
        <div className="mb-5">
          <label className="block text-gray-700 font-semibold mb-2">
            Tên phương thức
          </label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#cb1c22] focus:border-transparent transition-all duration-200"
            required
          />
        </div>
        <div className="mb-5">
          <label className="block text-gray-700 font-semibold mb-2">
            Mô tả
          </label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#cb1c22] focus:border-transparent transition-all duration-200"
            rows={3}
          />
        </div>
        {message && (
          <div className="mb-4 text-center text-green-600 font-semibold">
            {message}
            <button type="button" className="ml-2 text-red-500" onClick={() => setMessage("")}>x</button>
          </div>
        )}
        <button
          type="submit"
          className="w-full bg-[#cb1c22] text-white font-bold py-3 rounded-md hover:bg-[#a3151a] transition-all duration-200"
          disabled={loading}
        >
          {loading ? "Đang thêm..." : "Thêm phương thức"}
        </button>
      </form>
    </div>
  );
};

export default AddPaymentMethod;
```

### ClientApp\src\components\Profile\AddressBook.jsx
```jsx
import { useEffect, useState } from "react";
import { jwtDecode } from "jwt-decode";
import {
  Card,
  CardContent,
  CardHeader,
  Button,
  Typography,
  Modal,
  Box,
  TextField,
  IconButton,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Divider,
  Stack,
  Paper,
} from "@mui/material";
import { Delete, Edit, Add, Close } from "@mui/icons-material";
import { styled } from "@mui/material/styles";
import { useAddresses } from "@/hooks/api/useAddresses";

const StyledCard = styled(Card)(({ theme }) => ({
  maxWidth: "800px",
  margin: "2rem auto",
  borderRadius: "12px",
  backgroundColor: "#ffffff",
  boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
  border: "1px solid #e5e7eb",
  overflow: "hidden",
}));

const AddressItem = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(3),
  marginBottom: theme.spacing(2),
  borderRadius: "8px",
  backgroundColor: "#ffffff",
  border: "1px solid #e5e7eb",
  transition: "all 0.2s ease",
  "&:hover": {
    borderColor: "#cb1c22",
    boxShadow: "0 4px 12px rgba(203,28,34,0.15)",
    transform: "translateY(-1px)",
  },
}));

const AddressComponent = () => {
  const [openModal, setOpenModal] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [addressToDelete, setAddressToDelete] = useState(null);
  const [newAddress, setNewAddress] = useState({
    fullName: "",
    addressLine1: "",
    addressLine2: "",
    city: "",
    state: "",
    zipCode: "",
    country: "",
    phoneNumber: "",
  });
  const { addresses, loading, error, fetchAddresses, addAddress, updateAddress, deleteAddress } = useAddresses();

  useEffect(() => {
    fetchAddresses();
  }, [fetchAddresses]);

  const handleOpenModal = (address = null) => {
    setEditMode(!!address);
    setSelectedAddress(address);
    setNewAddress(
      address || {
        fullName: "",
        addressLine1: "",
        addressLine2: "",
        city: "",
        state: "",
        zipCode: "",
        country: "",
        phoneNumber: "",
      }
    );
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setEditMode(false);
    setSelectedAddress(null);
  };

  const handleInputChange = (e) => {
    setNewAddress({ ...newAddress, [e.target.name]: e.target.value });
  };

  const handleSaveAddress = async () => {
    try {
      if (editMode && selectedAddress) {
        const response = await updateAddress(selectedAddress.id, newAddress);
        // setAddresses(
        //   addresses.map((addr) =>
        //     addr.id === selectedAddress.id ? response.data : addr
        //   )
        // );
      } else {
        const response = await addAddress(newAddress);
        // setAddresses([...addresses, response.data]);
      }
      handleCloseModal();
    } catch (error) {
      console.error("Lỗi khi lưu địa chỉ:", error);
    }
  };

  const handleOpenDeleteDialog = (address) => {
    setAddressToDelete(address);
    setDeleteDialogOpen(true);
  };

  const handleCloseDeleteDialog = () => {
    setAddressToDelete(null);
    setDeleteDialogOpen(false);
  };

  const handleDeleteAddress = async () => {
    if (!addressToDelete) return;
    try {
      await deleteAddress(addressToDelete.id);
      // setAddresses(addresses.filter((addr) => addr.id !== addressToDelete.id));
    } catch (error) {
      console.error("Lỗi khi xóa địa chỉ:", error);
    }
    handleCloseDeleteDialog();
  };

  const fieldLabels = {
    fullName: "Họ và tên",
    addressLine1: "Địa chỉ dòng 1",
    addressLine2: "Địa chỉ dòng 2 (tùy chọn)",
    city: "Thành phố",
    state: "Tỉnh/Thành phố",
    zipCode: "Mã bưu điện",
    country: "Quốc gia",
    phoneNumber: "Số điện thoại",
  };
  const hiddenFieldsInEditMode = ["id", "userId", "user"];

  return (
    <Box sx={{ p: 3 }}>
      <StyledCard>
        <CardHeader
          title={
            <Typography variant="h5" fontWeight="600" color="#1f2937">
              Sổ địa chỉ
            </Typography>
          }
          action={
            <Button
              variant="contained"
              startIcon={<Add />}
              onClick={() => handleOpenModal()}
              sx={{
                backgroundColor: "#cb1c22",
                color: "white",
                fontWeight: "500",
                px: 3,
                py: 1,
                borderRadius: "6px",
                textTransform: "none",
                boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                "&:hover": {
                  backgroundColor: "#a11520",
                  boxShadow: "0 2px 6px rgba(0,0,0,0.15)",
                },
              }}
            >
              Thêm địa chỉ
            </Button>
          }
          sx={{
            borderBottom: "1px solid #e5e7eb",
            pb: 2,
          }}
        />
        <CardContent>
          {loading ? (
            <Box textAlign="center" py={4}>
              <Typography color="text.secondary">
                Đang tải địa chỉ...
              </Typography>
            </Box>
          ) : addresses.length === 0 ? (
            <Box
              textAlign="center"
              py={8}
              sx={{
                backgroundColor: "#f9fafb",
                borderRadius: "8px",
                border: "1px dashed #d1d5db",
              }}
            >
              <Typography variant="h6" fontWeight="500" mb={1} color="#6b7280">
                Chưa có địa chỉ nào
              </Typography>
              <Typography variant="body2" color="#9ca3af" mb={3}>
                Thêm địa chỉ để thuận tiện cho việc giao hàng
              </Typography>
              <Button
                variant="outlined"
                startIcon={<Add />}
                onClick={() => handleOpenModal()}
                sx={{
                  borderColor: "#cb1c22",
                  color: "#cb1c22",
                  fontWeight: "500",
                  px: 3,
                  py: 1,
                  textTransform: "none",
                  "&:hover": {
                    backgroundColor: "#cb1c22",
                    color: "white",
                    borderColor: "#cb1c22",
                  },
                }}
              >
                Thêm địa chỉ đầu tiên
              </Button>
            </Box>
          ) : (
            <Stack spacing={3}>
              {addresses.map((address) => (
                <AddressItem key={address.id}>
                  <Stack
                    direction="row"
                    justifyContent="space-between"
                    alignItems="flex-start"
                  >
                    <Box>
                      <Typography
                        variant="h6"
                        fontWeight="600"
                        mb={1}
                        color="#1f2937"
                      >
                        {address.fullName}
                      </Typography>

                      <Typography variant="body1" mb={0.5} color="#374151">
                        {address.addressLine1}
                      </Typography>

                      {address.addressLine2 && (
                        <Typography variant="body2" mb={1} color="#6b7280">
                          {address.addressLine2}
                        </Typography>
                      )}

                      <Typography variant="body2" mb={1} color="#6b7280">
                        {address.city}, {address.state} {address.zipCode}
                      </Typography>

                      <Typography variant="body2" mb={2} color="#6b7280">
                        {address.country}
                      </Typography>

                      <Box
                        sx={{
                          display: "inline-flex",
                          alignItems: "center",
                          px: 2,
                          py: 0.5,
                          backgroundColor: "#f3f4f6",
                          borderRadius: "4px",
                          border: "1px solid #e5e7eb",
                        }}
                      >
                        <Typography
                          variant="body2"
                          fontWeight="500"
                          color="#374151"
                        >
                          📞 {address.phoneNumber}
                        </Typography>
                      </Box>
                    </Box>
                    <Stack direction="row" spacing={1}>
                      <IconButton
                        onClick={() => handleOpenModal(address)}
                        sx={{
                          color: "#3b82f6",
                          backgroundColor: "#eff6ff",
                          border: "1px solid #dbeafe",
                          width: 36,
                          height: 36,
                          "&:hover": {
                            backgroundColor: "#3b82f6",
                            color: "white",
                            borderColor: "#3b82f6",
                          },
                        }}
                      >
                        <Edit fontSize="small" />
                      </IconButton>
                      <IconButton
                        onClick={() => handleOpenDeleteDialog(address)}
                        sx={{
                          color: "#ef4444",
                          backgroundColor: "#fef2f2",
                          border: "1px solid #fecaca",
                          width: 36,
                          height: 36,
                          "&:hover": {
                            backgroundColor: "#ef4444",
                            color: "white",
                            borderColor: "#ef4444",
                          },
                        }}
                      >
                        <Delete fontSize="small" />
                      </IconButton>
                    </Stack>
                  </Stack>
                </AddressItem>
              ))}
            </Stack>
          )}
        </CardContent>
      </StyledCard>

      {/* Modal thêm/sửa địa chỉ */}
      <Modal open={openModal} onClose={handleCloseModal}>
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: { xs: "90%", sm: "500px" },
            bgcolor: "background.paper",
            boxShadow: 24,
            borderRadius: "12px",
            maxHeight: "90vh",
            overflowY: "auto",
          }}
        >
          <Box sx={{ p: 3 }}>
            <Stack
              direction="row"
              justifyContent="space-between"
              alignItems="center"
              mb={3}
            >
              <Typography variant="h6" fontWeight="600">
                {editMode ? "Chỉnh sửa địa chỉ" : "Thêm địa chỉ mới"}
              </Typography>
              <IconButton onClick={handleCloseModal}>
                <Close />
              </IconButton>
            </Stack>

            <Divider sx={{ mb: 3 }} />

            <Stack spacing={2}>
              {Object.keys(newAddress)
                .filter(
                  (key) => !editMode || !hiddenFieldsInEditMode.includes(key)
                )
                .map((key) => (
                  <TextField
                    key={key}
                    fullWidth
                    label={fieldLabels[key] || key}
                    name={key}
                    value={newAddress[key]}
                    onChange={handleInputChange}
                    size="small"
                    variant="outlined"
                    required={key !== "addressLine2"} // Chỉ addressLine2 là không bắt buộc
                  />
                ))}
            </Stack>

            <Stack direction="row" spacing={2} justifyContent="flex-end" mt={4}>
              <Button
                variant="outlined"
                onClick={handleCloseModal}
                sx={{
                  color: "text.primary",
                  borderColor: "rgba(0,0,0,0.23)",
                }}
              >
                Hủy
              </Button>
              <Button
                variant="contained"
                onClick={handleSaveAddress}
                sx={{
                  backgroundColor: "primary.main",
                  "&:hover": {
                    backgroundColor: "primary.dark",
                  },
                }}
              >
                {editMode ? "Cập nhật" : "Lưu địa chỉ"}
              </Button>
            </Stack>
          </Box>
        </Box>
      </Modal>

      {/* Dialog xác nhận xóa */}
      <Dialog
        open={deleteDialogOpen}
        onClose={handleCloseDeleteDialog}
        PaperProps={{
          sx: {
            borderRadius: "12px",
            padding: "16px",
          },
        }}
      >
        <DialogTitle fontWeight="600">Xác nhận xóa địa chỉ</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Bạn có chắc chắn muốn xóa địa chỉ này? Thao tác này không thể hoàn
            tác.
          </DialogContentText>
        </DialogContent>
        <DialogActions sx={{ p: 2 }}>
          <Button
            onClick={handleCloseDeleteDialog}
            sx={{
              color: "text.primary",
              "&:hover": {
                backgroundColor: "rgba(0,0,0,0.04)",
              },
            }}
          >
            Hủy
          </Button>
          <Button
            onClick={handleDeleteAddress}
            color="error"
            variant="contained"
            sx={{
              "&:hover": {
                backgroundColor: "error.dark",
              },
            }}
          >
            Xóa
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AddressComponent;

```

### ClientApp\src\components\Profile\LoyaltyProgram.jsx
```jsx
import React, { useState } from 'react';
import { useLoyaltyStatus, useSpinWheel } from "@/hooks/api/useLoyalty";
import { motion } from 'framer-motion';
import {
  Box,
  Typography,
  LinearProgress,
  Button,
  Card,
  CardContent,
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  CircularProgress,
  Snackbar,
  Alert,
  Paper,
  IconButton,
} from '@mui/material';
import { Casino, EmojiEvents, Celebration, InfoOutlined } from '@mui/icons-material';


const SpinWheel = ({ onSpin, spinning, disabled, spinCost }) => {
  const [rotation, setRotation] = useState(0);
  const rewards = [
    'Giải nhất',
    'Giải nhì',
    'Giải ba',
    'Khuyến khích',
    'Giải May mắn',
    'Giải ba',
  ];

  const handleSpin = () => {
    if (!spinning && !disabled) {
      // Quay 5 vòng + random góc
      const nextRotation = rotation + 360 * 5 + Math.floor(Math.random() * 360);
      setRotation(nextRotation);
      onSpin();
    }
  };

  return (
    <Box sx={{ position: 'relative', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <motion.div
        animate={{ rotate: rotation }}
        transition={{ duration: spinning ? 3 : 0.5, ease: 'easeOut' }}
        style={{
          width: 450,
          height: 450,
          borderRadius: '50%',
          background: 'conic-gradient(#ff4d4d, #ffeb3b, #4caf50, #2196f3, #9c27b0, #ff9800, #ff4d4d)',
          position: 'relative',
          border: '10px solid #fff',
          boxShadow: '0 0 25px rgba(0,0,0,0.5)',
        }}
      >
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            bgcolor: 'white',
            borderRadius: '50%',
            width: 100,
            height: 100,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            boxShadow: '0 0 20px rgba(0,0,0,0.3)',
          }}
        >
          <Casino sx={{ fontSize: 60, color: '#1976d2' }} />
        </Box>

        {rewards.map((reward, index) => {
          const angle = (360 / rewards.length) * index;
          return (
            <Box
              key={index}
              sx={{
                position: 'absolute',
                width: '100%',
                height: '100%',
                transform: `rotate(${angle}deg)`,
                pointerEvents: 'none',
              }}
            >
              <Typography
                sx={{
                  position: 'absolute',
                  top: '15%',
                  left: '50%',
                  transform: 'translateX(-50%) rotate(0deg)',
                  color: 'white',
                  fontWeight: 'bold',
                  fontSize: '20px',
                  textShadow: '2px 2px 5px rgba(0,0,0,0.6)',
                  whiteSpace: 'nowrap',
                }}
              >
                {reward}
              </Typography>
            </Box>
          );
        })}
      </motion.div>

      <Box
        sx={{
          position: 'absolute',
          top: -30,
          width: 50,
          height: 50,
          bgcolor: 'red',
          clipPath: 'polygon(50% 100%, 0 0, 100% 0)',
          zIndex: 1,
          boxShadow: '0 5px 15px rgba(0,0,0,0.3)',
        }}
      />

      <Button
        variant="contained"
        color="primary"
        onClick={handleSpin}
        disabled={spinning || disabled}
        sx={{
          mt: 4,
          fontWeight: 'bold',
          padding: '15px 40px',
          fontSize: '18px',
          borderRadius: '30px',
          boxShadow: '0 5px 15px rgba(0,0,0,0.2)',
          '&:hover': { boxShadow: '0 8px 25px rgba(0,0,0,0.3)' },
        }}
      >
        {spinning ? (
          <>
            <CircularProgress size={24} sx={{ mr: 1, color: 'white' }} />
            Đang quay...
          </>
        ) : (
          `Quay ngay (${spinCost.toLocaleString()} điểm)`
        )}
      </Button>
    </Box>
  );
};





const LoyaltyProgram = () => {
  const [openDialog, setOpenDialog] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [openRulesDialog, setOpenRulesDialog] = useState(false);

  // Custom hook lấy loyalty
  const { loyaltyData, loading, error, userId, refetch } = useLoyaltyStatus();
  // Custom hook quay vòng quay
  const { spin, spinning, spinResult } = useSpinWheel(userId, () => {
    setTimeout(() => {
      setOpenDialog(true);
      setSnackbar({ open: true, message: 'Quay thành công!', severity: 'success' });
      refetch();
    }, 3000);
  });

  const handleSpinWheel = () => {
    spin();
  };

  const handleCloseSnackbar = () => {
    setSnackbar((prev) => ({ ...prev, open: false }));
  };

  const getProgressValue = (currentPoints, rank) => {
    switch (rank) {
      case 'Admin':
        return 100;
      case 'VIP 1':
        return (currentPoints / 50000) * 100;
      case 'VIP 2':
        return (currentPoints / 125000) * 100;
      case 'VIP 3':
        return (currentPoints / 225000) * 100;
      default:
        return (currentPoints / 50000) * 100;
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" bgcolor="#f5f5f5">
        <CircularProgress size={60} thickness={5} />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh" bgcolor="#f5f5f5">
        <Paper elevation={3} sx={{ p: 4, borderRadius: 2 }}>
          <Typography color="error" variant="h6">
            {error}
          </Typography>
          <Button variant="outlined" color="primary" sx={{ mt: 2 }} onClick={() => window.location.reload()}>
            Thử lại
          </Button>
        </Paper>
      </Box>
    );
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#f5f5f5', py: 4 }}>
      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      <Box sx={{ maxWidth: '1000px', margin: '0 auto', px: 2, position: 'relative' }}>
        {/* Nút dấu ! ở góc trên bên phải */}
        <IconButton
          onClick={() => setOpenRulesDialog(true)}
          sx={{
            position: 'absolute',
            top: 10,
            right: 10,
            color: '#1976d2',
            bgcolor: 'white',
            boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
            '&:hover': { bgcolor: '#e3f2fd' },
          }}
        >
          <InfoOutlined sx={{ fontSize: 30 }} />
        </IconButton>

        <Paper
          elevation={4}
          sx={{
            p: 4,
            borderRadius: 3,
            background: 'linear-gradient(135deg, #ffffff 0%, #e3f2fd 100%)',
            mb: 4,
          }}
        >
          <Typography
            variant="h3"
            align="center"
            gutterBottom
            sx={{
              fontWeight: 'bold',
              color: '#1976d2',
              textShadow: '1px 1px 3px rgba(0,0,0,0.1)',
            }}
          >
            <EmojiEvents sx={{ verticalAlign: 'middle', mr: 1, fontSize: 40 }} />
            Chương trình Khách hàng Thân thiết
          </Typography>

          {loyaltyData && (
            <Card sx={{ boxShadow: '0 8px 20px rgba(0,0,0,0.1)', borderRadius: 3 }}>
              <CardContent>
                <Grid container spacing={4} alignItems="center">
                  <Grid item xs={12}>
                    <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#333', mb: 2, textAlign: 'center' }}>
                      Hạng hiện tại: <span style={{ color: '#1976d2' }}>{loyaltyData.currentRank}</span>
                    </Typography>
                    <Typography variant="h6" sx={{ color: '#555', mb: 2, textAlign: 'center' }}>
                      Điểm tích lũy:{' '}
                      <span style={{ fontWeight: 'bold', color: '#4caf50' }}>
                        {loyaltyData.currentPoints.toLocaleString()}
                      </span>
                    </Typography>
                    {loyaltyData.currentRank !== 'Admin' && (
                      <Box sx={{ mb: 4, maxWidth: 600, mx: 'auto' }}>
                        <Typography variant="body1" color="text.secondary" sx={{ textAlign: 'center' }}>
                          Cần thêm{' '}
                          <strong style={{ color: '#ff9800' }}>
                            {(loyaltyData.pointsNeededForNextRank || 0).toLocaleString()}
                          </strong>{' '}
                          điểm để lên hạng tiếp theo
                        </Typography>
                        <LinearProgress
                          variant="determinate"
                          value={getProgressValue(loyaltyData.currentPoints, loyaltyData.currentRank)}
                          sx={{
                            height: 12,
                            borderRadius: 6,
                            mt: 1,
                            backgroundColor: 'grey.200',
                            '& .MuiLinearProgress-bar': {
                              borderRadius: 6,
                              background: 'linear-gradient(to right, #4caf50, #81c784)',
                            },
                          }}
                        />
                      </Box>
                    )}
                    <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: 6 }}>
                      <SpinWheel
                        onSpin={handleSpinWheel}
                        spinning={spinning}
                        disabled={!loyaltyData.canSpin}
                        spinCost={loyaltyData.spinCost || 0}
                      />
                    </Box>
                  </Grid>
                </Grid>
              </CardContent>
            </Card>
          )}
        </Paper>

        {/* Dialog kết quả vòng quay */}
        <Dialog
          open={openDialog}
          onClose={() => setOpenDialog(false)}
          PaperProps={{ sx: { borderRadius: 3, overflow: 'hidden' } }}
        >
          <DialogTitle
            sx={{
              bgcolor: 'primary.main',
              color: 'white',
              fontWeight: 'bold',
              display: 'flex',
              alignItems: 'center',
              py: 2,
            }}
          >
            <Celebration sx={{ mr: 1 }} />
            Kết quả vòng quay
          </DialogTitle>
          <DialogContent sx={{ pt: 3, pb: 2 }}>
            <DialogContentText sx={{ fontSize: '1.1rem', color: '#333' }}>
              {spinResult?.prizeType === 'Voucher' ? (
                <>
                  Chúc mừng! Bạn đã nhận được voucher trị giá{' '}
                  <strong style={{ color: '#4caf50' }}>
                    {(spinResult.voucher?.discountAmount || 0).toLocaleString()}₫
                  </strong>
                </>
              ) : (
                'Rất tiếc! Bạn không trúng phần thưởng lần này.'
              )}
            </DialogContentText>
            {spinResult?.prizeType === 'Voucher' && (
              <Paper
                elevation={2}
                sx={{
                  mt: 2,
                  p: 2,
                  background: 'linear-gradient(to right, #e8f5e9, #c8e6c9)',
                  borderRadius: 2,
                  textAlign: 'center',
                }}
              >
                <Typography variant="h5" sx={{ fontWeight: 'bold', color: '#2e7d32' }}>
                  {spinResult.voucher?.code || 'N/A'}
                </Typography>
                <Typography variant="body1" sx={{ mt: 1, color: '#555' }}>
                  Hạn sử dụng:{' '}
                  {spinResult.voucher?.expiryDate
                    ? new Date(spinResult.voucher.expiryDate).toLocaleDateString('vi-VN')
                    : 'N/A'}
                </Typography>
              </Paper>
            )}
            <DialogContentText sx={{ mt: 2, fontSize: '1.1rem', color: '#333' }}>
              Điểm còn lại:{' '}
              <strong style={{ color: '#1976d2' }}>
                {(spinResult?.remainingPoints || 0).toLocaleString()}
              </strong>
            </DialogContentText>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              onClick={() => setOpenDialog(false)}
              variant="contained"
              color="primary"
              sx={{ borderRadius: 20, px: 4 }}
            >
              Đóng
            </Button>
          </DialogActions>
        </Dialog>

        {/* Dialog thể lệ */}
        <Dialog
          open={openRulesDialog}
          onClose={() => setOpenRulesDialog(false)}
          PaperProps={{ sx: { borderRadius: 3, overflow: 'hidden', minWidth: '500px' } }}
        >
          <DialogTitle
            sx={{
              bgcolor: 'primary.main',
              color: 'white',
              fontWeight: 'bold',
              display: 'flex',
              alignItems: 'center',
              py: 2,
            }}
          >
            <InfoOutlined sx={{ mr: 1 }} />
            Thể lệ chương trình
          </DialogTitle>
          <DialogContent sx={{ pt: 3 }}>
            <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
              Quy định quay vòng quay may mắn
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - Mỗi lần quay sẽ tiêu tốn số điểm tương ứng với hạng thành viên:
            </Typography>
            <Typography variant="body2" sx={{ ml: 2 }}>
              • VIP 0: 5000 điểm<br />
              • VIP 1: 5000 điểm<br />
              • VIP 2: 5000 điểm<br />
              • VIP 3: 5000 điểm
            </Typography>
            <Typography variant="h6" sx={{ fontWeight: 'bold', mt: 3, mb: 2 }}>
              Phần thưởng theo hạng thành viên
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 0</strong>:<br />
              • 50% cơ hội nhận voucher 50,000₫<br />
              • 30% cơ hội nhận voucher 20,000₫<br />
              • 20% không nhận được gì
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 1</strong>:<br />
              • 40% cơ hội nhận voucher 100,000₫<br />
              • 30% cơ hội nhận voucher 50,000₫<br />
              • 30% cơ hội nhận voucher 20,000₫
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 2</strong>:<br />
              • 30% cơ hội nhận voucher 200,000₫<br />
              • 30% cơ hội nhận voucher 100,000₫<br />
              • 40% cơ hội nhận voucher 50,000₫
            </Typography>
            <Typography variant="body1" sx={{ mb: 1 }}>
              - <strong>VIP 3</strong>:<br />
              • 20% cơ hội nhận voucher 350,000₫<br />
              • 30% cơ hội nhận voucher 200,000₫<br />
              • 50% cơ hội nhận voucher 100,000₫
            </Typography>
            <Typography variant="body2" sx={{ mt: 2, color: '#555' }}>
              Lưu ý: Voucher có hạn sử dụng 30 ngày kể từ ngày nhận.
            </Typography>
          </DialogContent>
          <DialogActions sx={{ p: 2 }}>
            <Button
              onClick={() => setOpenRulesDialog(false)}
              variant="contained"
              color="primary"
              sx={{ borderRadius: 20, px: 4 }}
            >
              Đóng
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
};

export default LoyaltyProgram;
```

### ClientApp\src\components\Profile\ProfileInfo.jsx
```jsx
import React, { useState, useEffect } from "react";
import { User } from "lucide-react";
import {
  Modal,
  TextField,
  Button,
  Typography,
  CircularProgress,
  Snackbar,
  Avatar,
  Alert,
  Box,
} from "@mui/material";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import EditIcon from "@mui/icons-material/Edit";
import { useUserProfile } from "@/hooks/api/useUserProfile";

const ProfileInfo = () => {
  // Đã khai báo openModal ở dưới, xóa dòng này để tránh trùng lặp
  const [updatedUser, setUpdatedUser] = useState({
    fullName: "",
    email: "",
    role: "",
    phoneNumber: "",
    gender: "",
    dateOfBirth: "",
  });
  // Đã khai báo birthDate ở dưới, xóa dòng này để tránh trùng lặp
  // Đã khai báo snackbar ở dưới, xóa dòng này để tránh trùng lặp

  const {
    user,
    setUser,
    loading,
    error,
    userId,
    setUserId,
    initUserId,
    fetchUserProfile,
    updateUserProfile,
  } = useUserProfile();
  const [openModal, setOpenModal] = useState(false);
  // Đã khai báo updatedUser ở dưới, xóa dòng này để tránh trùng lặp
  // Đã khai báo userId ở dưới, xóa dòng này để tránh trùng lặp
  const [birthDate, setBirthDate] = useState(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: "",
    severity: "success",
  });

  // Add custom styles for VIP animations
  React.useEffect(() => {
    const style = document.createElement("style");
    style.textContent = `
      @keyframes shimmer {
        0% { left: -100%; }
        100% { left: 100%; }
      }
      .animate-spin-slow {
        animation: spin 3s linear infinite;
      }
      @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    return () => document.head.removeChild(style);
  }, []);

  useEffect(() => {
    const id = initUserId();
    if (id) {
      setUserId(id);
      fetchUserProfile(id).then((data) => {
        setUpdatedUser(data);
        if (data?.dateOfBirth) setBirthDate(new Date(data.dateOfBirth));
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // fetchUserProfile đã được chuyển vào hook

  const handleOpenModal = () => setOpenModal(true);
  const handleCloseModal = () => setOpenModal(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUpdatedUser((prev) => ({ ...prev, [name]: value }));
  };

  const handleDateChange = (newValue) => {
    setBirthDate(newValue);
    setUpdatedUser((prev) => ({
      ...prev,
      dateOfBirth: newValue ? newValue.toISOString().split("T")[0] : "",
    }));
  };

  const handleSaveProfile = async () => {
    try {
      await updateUserProfile(updatedUser);
      showSnackbar("Cập nhật thông tin thành công", "success");
      handleCloseModal();
    } catch (error) {
      console.error("Failed to update profile:", error);
      showSnackbar(
        error?.response?.data?.message || "Cập nhật thất bại",
        "error"
      );
    }
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <CircularProgress />
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar((prev) => ({ ...prev, open: false }))}
      >
        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
      </Snackbar>

      <div className="bg-gradient-to-br from-white via-gray-50 to-gray-100 rounded-3xl shadow-2xl overflow-hidden border border-gray-100 transform hover:scale-[1.01] transition-all duration-300">
        {/* Premium Header with Gradient */}
        <div
          className="relative p-8 overflow-hidden"
          style={{
            background: "linear-gradient(135deg, #cb1c22 0%, #8B0000 100%)",
          }}
        >
          {/* Decorative Elements */}
          <div className="absolute top-0 left-0 w-full h-full">
            <div className="absolute top-0 left-0 w-full h-full bg-black opacity-10"></div>
            <div className="absolute -top-24 -right-24 w-48 h-48 bg-white opacity-10 rounded-full"></div>
            <div className="absolute -bottom-24 -left-24 w-64 h-64 bg-white opacity-10 rounded-full"></div>
          </div>

          <div className="relative flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-white mb-2">
                Thông tin cá nhân
              </h1>
              <div className="w-20 h-1 bg-white opacity-50 rounded-full"></div>
            </div>
            <Button
              variant="contained"
              startIcon={<EditIcon />}
              onClick={handleOpenModal}
              sx={{
                bgcolor: "rgba(255,255,255,0.95)",
                color: "#cb1c22",
                fontWeight: "bold",
                backdropFilter: "blur(10px)",
                "&:hover": {
                  bgcolor: "#fff",
                  transform: "translateY(-2px)",
                  boxShadow: "0 10px 20px -10px rgba(0,0,0,0.3)",
                },
                transition: "all 0.3s ease",
              }}
            >
              Chỉnh sửa
            </Button>
          </div>
        </div>

        {/* Content with Premium Styling */}
        <div className="p-8 grid md:grid-cols-3 gap-8">
          {/* Avatar Section with Enhanced Design */}
          <div className="md:col-span-1">
            <div className="flex flex-col items-center p-6 bg-white rounded-2xl shadow-lg transform hover:translateY(-5px) transition-all duration-300">
              <div className="relative">
                <Avatar
                  sx={{
                    width: 140,
                    height: 140,
                    bgcolor: "#f8f9fa",
                    fontSize: "3.5rem",
                    border: "4px solid white",
                    boxShadow: "0 8px 16px -4px rgba(203,28,34,0.2)",
                  }}
                >
                  <User className="w-20 h-20 text-gray-700" />
                </Avatar>
                <div className="absolute bottom-0 right-0 w-8 h-8 bg-green-500 rounded-full border-4 border-white"></div>
              </div>{" "}
              <Typography variant="h5" className="font-bold mt-4 mb-1">
                {user.fullName || "Khách hàng"}
              </Typography>{" "}
              <Typography
                variant="body2"
                className={`px-4 py-1.5 rounded-full font-semibold text-sm ${
                  user.role?.name?.toLowerCase().includes("vip")
                    ? "bg-gradient-to-r from-yellow-400 to-amber-400 text-amber-900 shadow-lg shadow-yellow-400/30"
                    : user.role?.name?.toLowerCase().includes("admin")
                    ? "bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg shadow-purple-500/30"
                    : "bg-gray-100 text-gray-600"
                } transform hover:scale-105 transition-all duration-300`}
                sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: "4px",
                }}
              >
                {user.role?.name?.toLowerCase().includes("vip") && (
                  <span className="text-amber-800">👑</span>
                )}
                {user.role?.name?.toLowerCase().includes("admin") && (
                  <span className="text-purple-200">⚡</span>
                )}
                <span
                  className={
                    user.role?.name?.toLowerCase().includes("vip") ||
                    user.role?.name?.toLowerCase().includes("admin")
                      ? "font-bold uppercase tracking-wide"
                      : ""
                  }
                >
                  {user.role?.name || "Thành viên"}
                </span>
              </Typography>
            </div>
          </div>{" "}
          {/* Info Section with Premium Design */}
          <div className="md:col-span-2 bg-gradient-to-br from-white to-gray-50 rounded-2xl shadow-xl p-8 border border-gray-100 transform hover:shadow-2xl transition-all duration-300">
            <div className="mb-6">
              <h2 className="text-xl font-bold text-gray-800 mb-2 flex items-center">
                <span className="bg-gradient-to-r from-red-500 to-red-600 text-white p-2 rounded-lg mr-3">
                  ℹ️
                </span>
                Chi tiết thông tin
              </h2>
              <div className="h-1 w-16 bg-gradient-to-r from-red-500 to-red-600 rounded-full"></div>
            </div>
            <div className="grid gap-6">
              <InfoField icon="👤" label="Họ và tên" value={user.fullName} />
              <InfoField icon="📧" label="Email" value={user.email} />
              <InfoField
                icon="📱"
                label="Số điện thoại"
                value={user.phoneNumber || "Chưa cập nhật"}
              />
              <InfoField
                icon="⚧"
                label="Giới tính"
                value={user.gender || "Chưa cập nhật"}
              />
              <InfoField
                icon="🎂"
                label="Ngày sinh"
                value={
                  user.dateOfBirth
                    ? new Date(user.dateOfBirth).toLocaleDateString("vi-VN")
                    : "Chưa cập nhật"
                }
              />
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Modal */}
      <Modal
        open={openModal}
        onClose={handleCloseModal}
        aria-labelledby="modal-modal-title"
        BackdropProps={{
          sx: {
            backgroundColor: "rgba(0, 0, 0, 0.3)",
            backdropFilter: "blur(8px)",
          },
        }}
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: "100%",
            maxWidth: "32rem",
            bgcolor: "background.paper",
            borderRadius: "16px",
            boxShadow: "0 24px 48px -12px rgba(0,0,0,0.18)",
            p: 4,
            border: "1px solid",
            borderColor: "divider",
            outline: "none",
          }}
        >
          {/* Modal Header */}
          <div className="relative mb-6 pb-6 border-b border-gray-200">
            <Typography
              id="modal-title"
              variant="h5"
              className="font-bold text-center"
              sx={{
                color: "#cb1c22",
                position: "relative",
              }}
            >
              Chỉnh sửa thông tin
            </Typography>
          </div>

          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <div className="space-y-4">
              <TextField
                fullWidth
                label="Họ và tên"
                name="fullName"
                value={updatedUser?.fullName || ""}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "&:hover fieldset": {
                      borderColor: "#cb1c22",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#cb1c22",
                    },
                  },
                }}
              />

              <TextField
                fullWidth
                label="Email"
                name="email"
                value={updatedUser?.email || ""}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "&:hover fieldset": {
                      borderColor: "#cb1c22",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#cb1c22",
                    },
                  },
                }}
              />

              <TextField
                fullWidth
                label="Số điện thoại"
                name="phoneNumber"
                value={updatedUser?.phoneNumber || ""}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "&:hover fieldset": {
                      borderColor: "#cb1c22",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#cb1c22",
                    },
                  },
                }}
              />

              <TextField
                fullWidth
                label="Giới tính"
                name="gender"
                value={updatedUser?.gender || ""}
                onChange={handleInputChange}
                variant="outlined"
                size="small"
                select
                SelectProps={{
                  native: true,
                  sx: {
                    "&:focus": {
                      backgroundColor: "transparent",
                    },
                  },
                }}
                sx={{
                  "& .MuiOutlinedInput-root": {
                    "&:hover fieldset": {
                      borderColor: "#cb1c22",
                    },
                    "&.Mui-focused fieldset": {
                      borderColor: "#cb1c22",
                    },
                  },
                }}
              >
                <option value=""></option>
                <option value="Nam">Nam</option>
                <option value="Nữ">Nữ</option>
                <option value="Khác">Khác</option>
              </TextField>

              <DatePicker
                label="Ngày sinh"
                value={birthDate}
                onChange={handleDateChange}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    fullWidth
                    size="small"
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        "&:hover fieldset": {
                          borderColor: "#cb1c22",
                        },
                        "&.Mui-focused fieldset": {
                          borderColor: "#cb1c22",
                        },
                      },
                    }}
                  />
                )}
                inputFormat="dd/MM/yyyy"
              />

              {/* Action Buttons */}
              <div className="flex justify-end space-x-3 pt-6">
                <Button
                  variant="outlined"
                  onClick={handleCloseModal}
                  sx={{
                    borderColor: "rgba(0, 0, 0, 0.2)",
                    color: "rgb(107, 114, 128)",
                    "&:hover": {
                      borderColor: "rgb(107, 114, 128)",
                      backgroundColor: "rgba(0, 0, 0, 0.04)",
                    },
                  }}
                >
                  Hủy
                </Button>
                <Button
                  variant="contained"
                  onClick={handleSaveProfile}
                  sx={{
                    bgcolor: "#cb1c22",
                    color: "white",
                    boxShadow: "0 4px 10px -3px rgba(203,28,34,0.5)",
                    "&:hover": {
                      bgcolor: "#e62128",
                      transform: "translateY(-1px)",
                      boxShadow: "0 6px 15px -3px rgba(203,28,34,0.5)",
                    },
                  }}
                >
                  Lưu thay đổi
                </Button>
              </div>
            </div>
          </LocalizationProvider>
        </Box>
      </Modal>
    </div>
  );
};

// Reusable Info Field Component
const InfoField = ({ icon, label, value }) => (
  <div className="bg-white rounded-xl p-4 border border-gray-100 hover:border-red-200 hover:bg-red-50/30 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-md group">
    <div className="flex items-start space-x-4">
      <div className="text-2xl bg-gradient-to-br from-gray-100 to-gray-200 p-2 rounded-lg group-hover:from-red-100 group-hover:to-red-200 transition-all duration-300">
        {icon}
      </div>
      <div className="flex-1">
        <Typography
          variant="subtitle2"
          className="text-gray-500 font-medium mb-2 uppercase tracking-wide text-xs"
        >
          {label}
        </Typography>
        <Typography
          variant="body1"
          className="font-semibold text-gray-800 leading-relaxed"
          sx={{
            transition: "all 0.3s ease",
            "&:hover": {
              color: "#cb1c22",
            },
          }}
        >
          {value || "Chưa cập nhật"}
        </Typography>
      </div>
      <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
      </div>
    </div>
  </div>
);

export default ProfileInfo;

```

### ClientApp\src\components\Profile\ProfileSidebar.jsx
```jsx
import React from "react";
import "./ProfileSidebar.css"; // Nếu có file CSS riêng

const ProfileSidebar = ({ setActiveTab }) => {

  return (
    <div className="profile-sidebar m-24">
      <ul>
        <li onClick={() => setActiveTab("profile")}>Thông tin cá nhân</li>
        <li onClick={() => setActiveTab("orders")}>Đơn hàng của tôi</li>
        <li onClick={() => setActiveTab("loyalty")}>Khách hàng thân thiết</li>
        <li onClick={() => setActiveTab("address")}> Sổ địa chỉ nhận hàng</li>
      </ul>
    </div>
  );
};

export default ProfileSidebar;

```

### ClientApp\src\components\Profile\UserOrders.jsx
```jsx
import React, { useEffect, useState } from "react";
import { useOrders } from "@/hooks/api/useOrders";
import { useNavigate } from "react-router-dom";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography,
  CircularProgress,
  Avatar,
  Collapse,
  IconButton,
  Box,
  Chip,
} from "@mui/material";
import { KeyboardArrowDown, KeyboardArrowUp } from "@mui/icons-material";

const UserOrders = () => {
  // Đã khai báo expandedOrder ở dưới, xóa dòng này để tránh trùng lặp
  const { orders, loading, error, userId, setUserId, initUserId, fetchOrders } = useOrders();
  const [expandedOrder, setExpandedOrder] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const id = initUserId();
    if (id) {
      setUserId(id);
      fetchOrders(id, 1, 10);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const toggleOrderExpand = (orderId) => {
    setExpandedOrder(expandedOrder === orderId ? null : orderId);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Delivered":
        return "success";
      case "Pending":
        return "warning";
      case "Cancelled":
        return "error";
      case "Paid":
        return "primary";
      default:
        return "default";
    }
  };

  const handleProductClick = (productId) => {
    console.log("Product ID clicked:", productId);
    console.log("Navigating to:", `/product/${productId}`);

    if (productId) {
      navigate(`/product/${productId}`);
    } else {
      console.error("Product ID is undefined or null");
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <CircularProgress />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Typography color="error">{error}</Typography>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: "1200px", margin: "6rem auto", padding: "0 1rem" }}>
      <Typography variant="h4" gutterBottom align="center">
        Danh sách đơn hàng của bạn
      </Typography>

      {orders.length === 0 ? (
        <Box sx={{ textAlign: "center", p: 4 }}>
          <Typography variant="h6">Bạn chưa có đơn hàng nào</Typography>
          <Typography variant="body1" sx={{ mt: 2 }}>
            Hãy bắt đầu mua sắm ngay để trải nghiệm dịch vụ của chúng tôi!
          </Typography>
        </Box>
      ) : (
        <TableContainer
          component={Paper}
          sx={{ border: "1px solid #e0e0e0", borderRadius: "8px" }}
        >
          <Table>
            <TableHead sx={{ backgroundColor: "#f5f5f5" }}>
              <TableRow>
                <TableCell />
                <TableCell sx={{ fontWeight: "bold" }}>Mã đơn hàng</TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="right">
                  Ngày đặt
                </TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="right">
                  Tổng tiền
                </TableCell>
                <TableCell sx={{ fontWeight: "bold" }} align="center">
                  Trạng thái
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {orders.map((order) => (
                <React.Fragment key={order.id}>
                  <TableRow hover>
                    <TableCell>
                      <IconButton
                        aria-label="expand row"
                        size="small"
                        onClick={() => toggleOrderExpand(order.id)}
                      >
                        {expandedOrder === order.id ? (
                          <KeyboardArrowUp />
                        ) : (
                          <KeyboardArrowDown />
                        )}
                      </IconButton>
                    </TableCell>
                    <TableCell component="th" scope="row">
                      #{order.id}
                    </TableCell>
                    <TableCell align="right">
                      {new Date(order.orderDate).toLocaleDateString("vi-VN")}
                    </TableCell>
                    <TableCell align="right">
                      {order.totalAmount.toLocaleString("vi-VN")}₫
                    </TableCell>
                    <TableCell align="center">
                      <Chip
                        label={order.orderStatus}
                        color={getStatusColor(order.orderStatus)}
                        variant="outlined"
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell
                      style={{ paddingBottom: 0, paddingTop: 0 }}
                      colSpan={6}
                    >
                      <Collapse
                        in={expandedOrder === order.id}
                        timeout="auto"
                        unmountOnExit
                      >
                        <Box sx={{ margin: 2 }}>
                          <Typography variant="h6" gutterBottom>
                            Chi tiết đơn hàng
                          </Typography>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>Sản phẩm</TableCell>
                                <TableCell align="right">Đơn giá</TableCell>
                                <TableCell align="center">Số lượng</TableCell>
                                <TableCell align="right">Thành tiền</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {order.items.map((item) => {
                                console.log("Item data:", item); // Debug: xem cấu trúc item
                                return (
                                  <TableRow
                                    key={`${order.id}-${item.productVariantId}`}
                                  >
                                    <TableCell>
                                      <Box
                                        sx={{
                                          display: "flex",
                                          alignItems: "center",
                                          gap: 2,
                                        }}
                                      >
                                        <Avatar
                                          src={
                                            item.productImage?.startsWith(
                                              "http"
                                            )
                                              ? item.productImage // Ảnh từ API (URL đầy đủ)
                                              : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}` // Ảnh local trong wwwroot
                                          }
                                          sx={{ width: 56, height: 56 }}
                                          variant="rounded"
                                          alt="Product img"
                                          className="size-10"
                                          onError={(e) => {
                                            e.target.onerror = null;
                                          }}
                                        />
                                        <Box>
                                          <Typography
                                            variant="subtitle1"
                                            sx={{
                                              cursor: "pointer",
                                              color: "primary.main",
                                              "&:hover": {
                                                textDecoration: "underline",
                                                color: "primary.dark",
                                              },
                                            }}
                                            onClick={() =>
                                              handleProductClick(item.productId)
                                            }
                                          >
                                            {item.productName}
                                          </Typography>
                                          <Typography
                                            variant="body2"
                                            color="text.secondary"
                                          >
                                            {item.variantColor} -{" "}
                                            {item.variantStorage}
                                          </Typography>
                                        </Box>
                                      </Box>
                                    </TableCell>
                                    <TableCell align="right">
                                      {item.price.toLocaleString("vi-VN")}₫
                                    </TableCell>
                                    <TableCell align="center">
                                      {item.quantity}
                                    </TableCell>
                                    <TableCell align="right">
                                      {(
                                        item.price * item.quantity
                                      ).toLocaleString("vi-VN")}
                                      ₫
                                    </TableCell>
                                  </TableRow>
                                );
                              })}
                            </TableBody>
                          </Table>
                          <Box
                            sx={{
                              mt: 2,
                              display: "flex",
                              justifyContent: "space-between",
                            }}
                          >
                            <Typography variant="body2">
                              Phương thức thanh toán:{" "}
                              {order.paymentMethodId === 1
                                ? "Tiền mặt"
                                : "Thanh toán online"}
                            </Typography>
                            <Box sx={{ textAlign: "right" }}>
                              <Typography variant="body1">
                                <strong>Tổng cộng:</strong>{" "}
                                {order.totalAmount.toLocaleString("vi-VN")}₫
                              </Typography>
                              {order.orderStatus === "Pending" && (
                                <Typography
                                  variant="body2"
                                  color="text.secondary"
                                >
                                  Đơn hàng đang chờ xử lý
                                </Typography>
                              )}
                            </Box>
                          </Box>
                        </Box>
                      </Collapse>
                    </TableCell>
                  </TableRow>
                </React.Fragment>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </div>
  );
};

export default UserOrders;

```

### ClientApp\src\components\Profile\ViewedProducts.jsx
```jsx
import React from "react";

const products = [
  {
    id: 1,
    name: "Samsung Galaxy S25 Ultra 5G",
    price: "31.990.000 ₫",
    oldPrice: "33.990.000 ₫",
    discount: "-6%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 2,
    name: "iPhone 15 Pro Max 256GB",
    price: "29.090.000 ₫",
    oldPrice: "35.000.000 ₫",
    discount: "-17%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 3,
    name: "Xiaomi 14 Ultra 512GB",
    price: "26.990.000 ₫",
    oldPrice: "29.300.000 ₫",
    discount: "-8%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
  {
    id: 4,
    name: "OPPO Find X7 Ultra 1TB",
    price: "27.990.000 ₫",
    oldPrice: "31.100.000 ₫",
    discount: "-10%",
    img: "https://cdn2.cellphones.com.vn/358x/media/catalog/product/x/i/xiaomi-14-ultra.png",
  },
];

const ViewedProducts = () => {
  return (
    <div className="viewed-products">
      <h2>Sản phẩm đã xem</h2>
      <div className="products-row">
        {products.map((product) => (
          <div key={product.id} className="product-item">
            <img src={product.img} alt={product.name} />
            <p>{product.name}</p>
            <div className="price-container">
              <s className="old-price">{product.oldPrice}</s>
              <span className="discount">{product.discount}</span>
            </div>
            <p className="price">{product.price}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ViewedProducts;

```

### ClientApp\src\components\ServiceSlider\ServiceSlider.jsx
```jsx
import React from "react";
import "./ServiceSlider.css"; // Import file CSS

const services = [
  {
    href: "dich-vu/the-game",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/the_game_a74fbf07e8_32a77df1b0.svg?w=128&q=100",
    title: "Thẻ game",
  },
  {
    href: "dich-vu/thanh-toan-hoa-don-internet",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_internet_bd9a355225_03e954c658.svg?w=128&q=100",
    title: "Đóng phí Internet",
  },
  {
    href: "dich-vu/thanh-toan-tra-gop",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tra_gop_d424d9683f_a8e4090e13.svg?w=128&q=100",
    title: "Thanh toán trả góp",
  },
  {
    href: "dich-vu/thanh-toan-tien-nuoc",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_nuoc_7f2b577ea8_fc7c4fe67e.svg?w=128&q=100",
    title: "Tiền nước",
  },
  {
    href: "dich-vu/thanh-toan-tien-dien",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/tien_dien_522ab38b64_fc4ab62614.svg?w=128&q=100",
    title: "Tiền điện",
  },
  {
    href: "dich-vu",
    imgSrc: "https://cdn2.fptshop.com.vn/svg/Khac_a756550960.svg?w=128&q=100",
    title: "Dịch vụ khác",
  },
];

const ServiceSlider = () => {
  return (
    <div className="service-container">
      <div className="service-wrapper">
        {services.map((service, index) => (
          <a key={index} href={service.href} className="service-item">
            <img src={service.imgSrc} alt={service.title} className="service-icon" />
            <p className="service-title">{service.title}</p>
          </a>
        ))}
      </div>
    </div>
  );
};

export default ServiceSlider;

```

### ClientApp\src\components\shared\ProductCard.js
```js
import React from 'react';

const ProductCard = ({ product }) => {

  // Xử lý ảnh chính xác, hỗ trợ cả link tuyệt đối và tương đối
  let primaryImage = '/images/default-product.png';
  if (product.images && product.images.length > 0) {
    const imgObj = product.images.find(img => img.isPrimary) || product.images[0];
    if (imgObj?.imageUrl) {
      primaryImage = imgObj.imageUrl.startsWith('http')
        ? imgObj.imageUrl
        : `${process.env.REACT_APP_API_BASE_URL ? process.env.REACT_APP_API_BASE_URL.replace(/\/$/, '') : ''}/${imgObj.imageUrl.replace(/^\//, '')}`;
    }
  }

  const isFlashSaleActive = product.isFlashSale && product.flashSalePrice && 
                            new Date(product.flashSaleStartDate) <= new Date() && 
                            new Date(product.flashSaleEndDate) >= new Date();

  return (
    <div className="group relative bg-primary-dark border border-white-20 rounded-lg overflow-hidden transition-all duration-300 hover:border-electric-blue">
      <div className="aspect-w-1 aspect-h-1 w-full overflow-hidden">
        <img
          src={primaryImage}
          alt={product.name}
          className="w-full h-full object-cover object-center transition-transform duration-300 group-hover:scale-105"
          onError={e => { e.target.onerror = null; e.target.src = '/images/default-product.png'; }}
        />
      </div>
      <div className="p-4 text-left">
        <h3 className="font-sans text-base font-semibold text-white">
          <a href={`/product/${product.id}`}>
            <span aria-hidden="true" className="absolute inset-0" />
            {product.name}
          </a>
        </h3>
        <div className="mt-1 flex items-baseline">
          {isFlashSaleActive ? (
            <>
              <p className="text-lg font-bold text-neon-magenta mr-2">
                {product.flashSalePrice?.toLocaleString('vi-VN')}₫
              </p>
              <p className="text-sm text-light-gray line-through">
                {product.variants[0]?.price?.toLocaleString('vi-VN')}₫
              </p>
            </>
          ) : (
            <p className="text-lg font-bold text-electric-blue">
              {product.variants[0]?.price?.toLocaleString('vi-VN')}₫
            </p>
          )}
        </div>
      </div>
      <div className="absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        <button className="p-2 rounded-full bg-electric-blue text-primary-dark">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M6 19a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H6Z"/><path d="M12 15V9"/><path d="M9 12h6"/></svg>
        </button>
      </div>
    </div>
  );
};

export default ProductCard;
```

### ClientApp\src\components\shoppingcart\CartDrawer.jsx
```jsx
import React, { useEffect, useState } from "react";
import { 
  Drawer, 
  IconButton, 
  List, 
  ListItemText, 
  Avatar, 
  Typography, 
  Button, 
  Box, 
  TextField, 
  Modal, 
  Checkbox,
  Chip,
  Divider,
  CircularProgress
} from "@mui/material";
import { X, Delete, Plus, Minus, Gift } from "lucide-react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

const CartDrawer = ({ isOpen, onClose }) => {
  const [cartItems, setCartItems] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [userId, setUserId] = useState(null);
  const [voucherCode, setVoucherCode] = useState("");
  const [discountAmount, setDiscountAmount] = useState(0);
  const [totalAmount, setTotalAmount] = useState(0);
  const [originalTotal, setOriginalTotal] = useState(0);
  const [selectedItem, setSelectedItem] = useState(null);
  const [quantityModalOpen, setQuantityModalOpen] = useState(false);
  const [voucherApplied, setVoucherApplied] = useState(false);
  const [loading, setLoading] = useState(false);
  const [voucherLoading, setVoucherLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCart = async () => {
      const token = localStorage.getItem("token");
      setLoading(true);
      
      try {
        let items = [];
        let id = null;
        
        if (token) {
          const decoded = jwtDecode(token);
          id = parseInt(decoded.sub, 10);
          setUserId(id);
          
          // Lấy cả giỏ hàng từ API và session storage nếu có
          const [apiResponse, sessionCart] = await Promise.all([
            axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Cart?userId=${id}`, {
              headers: { Authorization: `Bearer ${token}` },
            }),
            sessionStorage.getItem("cart")
          ]);

          items = apiResponse.data;

          // Merge với giỏ hàng từ session nếu có
          if (sessionCart) {
            const sessionItems = JSON.parse(sessionCart);
            const mergedItems = await mergeCartItems(items, sessionItems);
            items = mergedItems;
            sessionStorage.removeItem("cart");
          }
        } else {
          // Chưa đăng nhập: lấy từ session storage
          const sessionCart = sessionStorage.getItem("cart");
          if (sessionCart) {
            const sessionItems = JSON.parse(sessionCart);
            items = await Promise.all(
              sessionItems.map(async (item) => {
                try {
                  const response = await axios.get(
                    `${process.env.REACT_APP_API_BASE_URL}/api/Cart/variant-info/${item.productVariantId}`
                  );
                  return {
                    ...item,
                    productName: response.data.productName,
                    productImage: response.data.productImage,
                    variantColor: response.data.variantColor,
                    variantStorage: response.data.variantStorage,
                    productPrice: response.data.price,
                    productDiscountPrice: response.data.discountPrice
                  };
                } catch (error) {
                  console.error("Error fetching variant info:", error);
                  return {
                    ...item,
                    productName: "Sản phẩm không tên",
                    productImage: "https://via.placeholder.com/100",
                    variantColor: "Không xác định",
                    variantStorage: "Không xác định",
                    productPrice: 0,
                    productDiscountPrice: 0
                  };
                }
              })
            );
          }
        }

        setCartItems(items);
        setSelectedItems(items);
        calculateTotalAmount(items, discountAmount);
      } catch (error) {
        console.error("Error fetching cart:", error);
      } finally {
        setLoading(false);
      }
    };

    const mergeCartItems = async (apiItems, sessionItems) => {
      // Gộp các sản phẩm trùng nhau
      const merged = [...apiItems];
      
      for (const sessionItem of sessionItems) {
        const existingItem = merged.find(item => 
          item.productVariantId === sessionItem.productVariantId);
        
        if (existingItem) {
          existingItem.quantity += sessionItem.quantity;
        } else {
          try {
            const response = await axios.get(
              `${process.env.REACT_APP_API_BASE_URL}/api/Cart/variant-info/${sessionItem.productVariantId}`
            );
            merged.push({
              ...sessionItem,
              productName: response.data.productName,
              productImage: response.data.productImage,
              variantColor: response.data.variantColor,
              variantStorage: response.data.variantStorage,
              productPrice: response.data.price,
              productDiscountPrice: response.data.discountPrice
            });
          } catch (error) {
            console.error("Error fetching variant info:", error);
          }
        }
      }
      
      return merged;
    };

    if (isOpen) {
      fetchCart();
    }
  }, [isOpen]);

  // Sửa lỗi: Cập nhật hàm calculateTotalAmount để nhận discountAmount như một tham số
  const calculateTotalAmount = (items, discount = discountAmount) => {
    const total = items.reduce((sum, item) => {
      const price = item.productDiscountPrice || item.productPrice;
      return sum + price * item.quantity;
    }, 0);
    
    setOriginalTotal(total);
    setTotalAmount(total - discount); // Áp dụng giảm giá vào tổng tiền
  };

  const handleRemoveItem = async (id) => {
    try {
      const token = localStorage.getItem("token");
      const numericId = Number(id);

      if (token && userId) {
        await axios.delete(`${process.env.REACT_APP_API_BASE_URL}/api/Cart/remove/${numericId}?userId=${userId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
      } else {
        const sessionCart = sessionStorage.getItem("cart");
        if (sessionCart) {
          const updatedCart = JSON.parse(sessionCart).filter(item => item.productVariantId !== numericId);
          sessionStorage.setItem("cart", JSON.stringify(updatedCart));
        }
      }

      const updatedItems = cartItems.filter((item) => item.productVariantId !== numericId);
      setCartItems(updatedItems);
      setSelectedItems(updatedItems);
      calculateTotalAmount(updatedItems);
    } catch (error) {
      console.error("Error removing item:", error);
    }
  };

  // Sửa lỗi: Cập nhật hàm handleApplyVoucher để tính lại totalAmount
  const handleApplyVoucher = async () => {
    if (!userId) {
      alert("Vui lòng đăng nhập để tận hưởng ưu đãi.");
      return;
    }

    if (voucherApplied) {
      alert("Voucher đã được áp dụng.");
      return;
    }

    setVoucherLoading(true);
    try {
      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/vouchers/apply`, { 
        code: voucherCode, 
        userId 
      });
      
      const newDiscountAmount = response.data.discountAmount;
      setDiscountAmount(newDiscountAmount);
      setVoucherApplied(true);
      
      // Tính toán lại tổng tiền với giá trị giảm giá mới
      calculateTotalAmount(selectedItems, newDiscountAmount);
    } catch (error) {
      console.error("Error applying voucher:", error);
      alert(error.response?.data?.message || "Voucher không hợp lệ hoặc đã hết hạn.");
    } finally {
      setVoucherLoading(false);
    }
  };

  // Sửa lỗi: Cập nhật hàm handleRemoveVoucher để tính lại totalAmount
  const handleRemoveVoucher = () => {
    setVoucherCode("");
    setDiscountAmount(0);
    setVoucherApplied(false);
    calculateTotalAmount(selectedItems, 0); // Đặt discount = 0
  };

  const handlePlaceOrder = () => {
    if (selectedItems.length === 0) {
      alert("Vui lòng chọn ít nhất một sản phẩm!");
      return;
    }
    navigate("/checkout", { 
      state: { 
        selectedItems, 
        totalAmount, 
        originalTotal,
        discountAmount,
        voucherCode: voucherApplied ? voucherCode : null 
      } 
    });
  };

  const handleQuantityChange = (item) => {
    setSelectedItem(item);
    setQuantityModalOpen(true);
  };

  const updateQuantity = async (newQuantity) => {
    if (!selectedItem) return;

    const updatedItems = cartItems.map((item) =>
      item.productVariantId === selectedItem.productVariantId
        ? { ...item, quantity: newQuantity }
        : item
    ).filter(item => item.quantity > 0);

    try {
      const token = localStorage.getItem("token");
      if (token && userId) {
        await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/Cart/update`, {
          userId,
          productVariantId: selectedItem.productVariantId,
          quantity: newQuantity
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });
      } else {
        sessionStorage.setItem("cart", JSON.stringify(updatedItems));
      }

      setCartItems(updatedItems);
      setSelectedItems(updatedItems);
      calculateTotalAmount(updatedItems);
    } catch (error) {
      console.error("Error updating quantity:", error);
    }
  };

  const handleIncreaseQuantity = () => {
    if (!selectedItem) return;
    const newQuantity = selectedItem.quantity + 1;
    updateQuantity(newQuantity);
  };

  const handleDecreaseQuantity = () => {
    if (!selectedItem) return;
    const newQuantity = Math.max(1, selectedItem.quantity - 1);
    updateQuantity(newQuantity);
  };

  // Sửa lỗi: Cập nhật hàm handleSelectItem để tính lại totalAmount với discountAmount hiện tại
  const handleSelectItem = (item) => {
    const isSelected = selectedItems.some(
      (selectedItem) => selectedItem.productVariantId === item.productVariantId
    );
    const updatedSelectedItems = isSelected
      ? selectedItems.filter((selectedItem) => selectedItem.productVariantId !== item.productVariantId)
      : [...selectedItems, item];
    
    setSelectedItems(updatedSelectedItems);
    calculateTotalAmount(updatedSelectedItems, discountAmount);
  };

  return (
    <Drawer 
      anchor="right" 
      open={isOpen} 
      onClose={onClose} 
      PaperProps={{ 
        sx: { 
          width: { xs: '100%', sm: 500 }, 
          p: 2,
          display: 'flex',
          flexDirection: 'column'
        } 
      }}
    >
      <Box className="flex items-center justify-between p-4 border-b">
        <Typography variant="h6" fontWeight="bold">Giỏ Hàng Của Bạn</Typography>
        <IconButton onClick={onClose}>
          <X />
        </IconButton>
      </Box>

      {loading ? (
        <Box display="flex" justifyContent="center" alignItems="center" flexGrow={1}>
          <CircularProgress />
        </Box>
      ) : cartItems.length > 0 ? (
        <>
          <List sx={{ flexGrow: 1, overflowY: 'auto', px: 1 }}>
            {cartItems.map((item) => (
              <Box
                key={item.productVariantId}
                sx={{
                  p: 2,
                  border: "1px solid #e0e0e0",
                  borderRadius: 2,
                  mb: 2,
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  backgroundColor: "#fff",
                  '&:hover': {
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
                  }
                }}
              >
                <Checkbox
                  checked={selectedItems.some(
                    (selectedItem) => selectedItem.productVariantId === item.productVariantId
                  )}
                  onChange={() => handleSelectItem(item)}
                  color="primary"
                />
                <img
  src={item.productImage?.startsWith("http") 
    ? item.productImage 
    : `${process.env.REACT_APP_API_BASE_URL}/${item.productImage}`}
  alt={item.productName}
  className="w-full h-full object-contain transition-transform duration-500 group-hover:scale-110"
  onError={(e) => { 
    e.target.onerror = null; 
    e.target.src = "https://via.placeholder.com/150"; 
  }}
  style={{
    width: '80px',
    height: '80px',
    objectFit: 'contain'
  }}
/>
                <Box sx={{ flexGrow: 1 }}>
                  <Typography fontWeight="medium" sx={{ mb: 0.5 }}>
                    {item.productName}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                    {item.variantColor} - {item.variantStorage}
                  </Typography>
                  {item.productDiscountPrice ? (
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="body2" sx={{ textDecoration: 'line-through', color: 'text.secondary' }}>
                        {(item.productPrice * item.quantity).toLocaleString()}₫
                      </Typography>
                      <Typography variant="body2" fontWeight="bold" color="error">
                        {(item.productDiscountPrice * item.quantity).toLocaleString()}₫
                      </Typography>
                    </Box>
                  ) : (
                    <Typography variant="body2" fontWeight="medium">
                      {(item.productPrice * item.quantity).toLocaleString()}₫
                    </Typography>
                  )}
                  <Box 
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1,
                      mt: 0.5 
                    }}
                    onClick={() => handleQuantityChange(item)}
                  >
                    <Typography 
                      variant="body2" 
                      color="text.secondary"
                      sx={{ cursor: 'pointer' }}
                    >
                      Số lượng: 
                    </Typography>
                    <Chip 
                      label={item.quantity} 
                      size="small"
                      sx={{ cursor: 'pointer' }}
                    />
                  </Box>
                </Box>
                <IconButton 
                  onClick={() => handleRemoveItem(item.productVariantId)}
                  sx={{ color: 'error.main' }}
                >
                  <Delete size={20} />
                </IconButton>
              </Box>
            ))}
          </List>

          <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fafafa' }}>
            {userId && (
              <>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Gift size={20} color="#ff6b6b" style={{ marginRight: 8 }} />
                  <Typography variant="subtitle1" fontWeight="medium">
                    Mã giảm giá
                  </Typography>
                </Box>
                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <TextField
                    fullWidth
                    size="small"
                    variant="outlined"
                    placeholder="Nhập mã giảm giá"
                    value={voucherCode}
                    onChange={(e) => setVoucherCode(e.target.value)}
                    disabled={voucherApplied}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        borderRadius: '4px',
                      }
                    }}
                  />
                  {voucherApplied ? (
                    <Button 
                      variant="outlined" 
                      color="error"
                      onClick={handleRemoveVoucher}
                      sx={{ minWidth: '100px' }}
                    >
                      Hủy
                    </Button>
                  ) : (
                    <Button 
                      variant="contained" 
                      color="primary"
                      onClick={handleApplyVoucher}
                      disabled={!voucherCode || voucherLoading}
                      sx={{ minWidth: '100px' }}
                    >
                      {voucherLoading ? <CircularProgress size={20} /> : 'Áp dụng'}
                    </Button>
                  )}
                </Box>
                {discountAmount > 0 && (
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    mb: 1 
                  }}>
                    <Typography variant="body2">Giảm giá:</Typography>
                    <Typography variant="body2" color="error" fontWeight="medium">
                      -{discountAmount.toLocaleString()}₫
                    </Typography>
                  </Box>
                )}
                <Divider sx={{ my: 1 }} />
              </>
            )}
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mb: 1 
            }}>
              <Typography variant="body1">Tạm tính:</Typography>
              <Typography variant="body1" fontWeight="medium">
                {originalTotal.toLocaleString()}₫
              </Typography>
            </Box>
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mb: 2 
            }}>
              <Typography variant="h6">Tổng cộng:</Typography>
              <Typography variant="h6" fontWeight="bold" color="error">
                {totalAmount.toLocaleString()}₫
              </Typography>
            </Box>
            
            <Button
              fullWidth
              variant="contained"
              color="error"
              size="large"
              onClick={handlePlaceOrder}
              disabled={selectedItems.length === 0}
              sx={{
                py: 1.5,
                borderRadius: '4px',
                fontWeight: 'bold',
                fontSize: '1rem'
              }}
            >
              Tiến hành đặt hàng
            </Button>
          </Box>
        </>
      ) : (
        <Box 
          display="flex" 
          flexDirection="column" 
          justifyContent="center" 
          alignItems="center" 
          flexGrow={1}
          textAlign="center"
          p={4}
        >
          <Typography variant="h6" gutterBottom>
            Giỏ hàng của bạn đang trống
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            Hãy thêm sản phẩm vào giỏ hàng để bắt đầu mua sắm
          </Typography>
          <Button 
            variant="outlined" 
            color="primary"
            onClick={onClose}
          >
            Tiếp tục mua sắm
          </Button>
        </Box>
      )}

      <Modal open={quantityModalOpen} onClose={() => setQuantityModalOpen(false)}>
      <Box
        sx={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
          width: 300,
          bgcolor: "background.paper",
          boxShadow: 24,
          p: 3,
          borderRadius: 2,
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: 2,
        }}
      >
        <Typography variant="h6" fontWeight="medium">
          Điều chỉnh số lượng
        </Typography>
        <Box display="flex" alignItems="center" gap={3}>
          <IconButton 
            onClick={() => {
              const newQuantity = Math.max(1, selectedItem.quantity - 1);
              setSelectedItem({...selectedItem, quantity: newQuantity});
            }}
            disabled={selectedItem?.quantity <= 1}
            sx={{ 
              border: '1px solid #e0e0e0',
              '&:hover': { bgcolor: '#f5f5f5' }
            }}
          >
            <Minus size={20} />
          </IconButton>
          <Typography variant="h5" sx={{ minWidth: 40, textAlign: 'center' }}>
            {selectedItem?.quantity}
          </Typography>
          <IconButton 
            onClick={() => {
              const newQuantity = selectedItem.quantity + 1;
              setSelectedItem({...selectedItem, quantity: newQuantity});
            }}
            sx={{ 
              border: '1px solid #e0e0e0',
              '&:hover': { bgcolor: '#f5f5f5' }
            }}
          >
            <Plus size={20} />
          </IconButton>
        </Box>
        <Box display="flex" gap={2} width="100%">
          <Button 
            variant="outlined" 
            fullWidth
            onClick={() => setQuantityModalOpen(false)}
            sx={{ py: 1 }}
          >
            Hủy
          </Button>
          <Button 
            variant="contained" 
            fullWidth
            onClick={() => {
              updateQuantity(selectedItem.quantity);
              setQuantityModalOpen(false);
            }}
            sx={{ py: 1 }}
          >
            Xác nhận
          </Button>
        </Box>
      </Box>
    </Modal>
    </Drawer>
  );
};

export default CartDrawer;
```

### ClientApp\src\components\shoppingcart\CartItem.jsx
```jsx
import React, { useState } from "react";
import { FaTrash } from "react-icons/fa";
import { useCart } from "@/hooks/api/useCart";

const CartItem = ({ item }) => {
  const [quantity, setQuantity] = useState(item.quantity || 1);
  const { addToCart } = useCart();

  const handleIncrease = async () => {
    const newQuantity = quantity + 1;
    setQuantity(newQuantity);
    await addToCart(item.id, 1);
  };

  return (
    <div className="border p-4 rounded-lg bg-white shadow-md">
      <div className="flex items-center justify-between">
        <input type="checkbox" className="mr-2" />
        {item.image && (
          <img
            src={item.image}
            alt={item.name || "Sản phẩm"}
            className="w-16 h-16 rounded"
          />
        )}
        <div className="ml-4 flex-1">
          <h2 className="font-bold text-lg">
            {item.name || "Sản phẩm không có tên"}
          </h2>
          <span className="text-gray-600">
            Màu: {item.color || "Không xác định"}
          </span>
        </div>
        <span className="text-red-500 font-bold text-lg">
          {item.price ? item.price.toLocaleString() : "0"} đ
        </span>
        <div className="flex items-center">
          <button
            onClick={() => setQuantity(quantity > 1 ? quantity - 1 : 1)}
            className="px-2 border bg-gray-200"
          >
            -
          </button>
          <span className="px-4">{quantity}</span>
          <button onClick={handleIncrease} className="px-2 border bg-gray-200">
            +
          </button>
        </div>
        <button className="ml-4 text-gray-500 hover:text-red-500">
          <FaTrash size={18} />
        </button>
      </div>
    </div>
  );
};

export default CartItem;

```

### ClientApp\src\components\shoppingcart\OrderSummary.jsx
```jsx
import React from "react";

const OrderSummary = ({ total = 0, payable = 0 }) => {
  return (
    <div className="border p-4 rounded-lg bg-white shadow-md">
      <h2 className="font-bold text-lg mb-4">Thông tin đơn hàng</h2>

      <div className="flex justify-between mb-2">
        <span>Tổng tiền</span>
        <span className="font-bold">{(total ?? 0).toLocaleString()} đ</span>
      </div>

      <div className="flex justify-between mb-2 border-t pt-2">
        <span>Cần thanh toán</span>
        <span className="font-bold text-red-500">
          {(payable ?? 0).toLocaleString()} đ
        </span>
      </div>

      <button className="w-full bg-red-500 text-white py-2 rounded-lg font-bold text-lg">
        Xác nhận đơn
      </button>
    </div>
  );
};

export default OrderSummary;

```

### ClientApp\src\hooks\index.js
```js
// Main hooks index file - exports all custom hooks for easy importing
// Organized by category for better developer experience

// API Hooks
export {
  useApi,
  useApiData,
  useApiMutation,
  usePaginatedApi,
  useSearchApi,
} from "./api/useApi";

export {
  useProducts,
  useProduct,
  useProductSearch,
  useProductFilters,
  useProductCategories,
  useProductBrands,
  useProductComparison,
  useRelatedProducts,
  useProductRecommendations,
} from "./api/useProducts";

export {
  useCart,
  useCartItems,
  useCartActions,
  useGuestCart,
  useCartSync,
  useCartPersistence,
} from "./api/useCart";

export {
  useOrders,
  useOrder,
  useOrderHistory,
  useOrderTracking,
  useOrderActions,
  useOrderStatistics,
} from "./api/useOrders";

export {
  useReviews,
  useProductReviews,
  useUserReviews,
  useReviewActions,
  useReviewModeration,
  useReviewStatistics,
} from "./api/useReviews";

export {
  useAddresses,
  useUserAddresses,
  useAddressValidation,
  useShippingZones,
  useAddressActions,
} from "./api/useAddresses";

export {
  useAdmin,
  useAdminUsers,
  useAdminProducts,
  useAdminOrders,
  useAdminAnalytics,
  useAdminSettings,
  useAdminReports,
} from "./api/useAdmin";

export {
  useChat,
  useChatConnection,
  useChatHistory,
  useChatActions,
  useAdminChat,
  useChatNotifications,
} from "./api/useChat";

export {
  useFeatures,
  useFlashSales,
  useLoyaltyProgram,
  useVouchers,
  useWishlist,
  useNotifications,
  useRecentlyViewed,
} from "./api/useFeatures";

// Authentication Hooks
export {
  useAuth,
  useAuthState,
  useAuthActions,
  useProfile,
  useProfileActions,
  usePasswordReset,
  useEmailVerification,
  useRoleManagement,
} from "./auth/useAuth";

// UI Hooks
export {
  useDebounce,
  usePagination,
  useForm,
  useModal,
  useToast,
  useLocalStorage,
  useSessionStorage,
  useToggle,
  useClickOutside,
  useKeyPress,
  useWindowSize,
  useScrollPosition,
  useIntersectionObserver,
  useImageLazyLoad,
  useInfiniteScroll,
  useTabManager,
  useConfirmDialog,
  useFileUpload,
  useClipboard,
} from "./ui/useUI";

// Utility function to check if all hooks are properly exported
export const getAvailableHooks = () => {
  return {
    api: [
      "useApi",
      "useApiData",
      "useApiMutation",
      "usePaginatedApi",
      "useSearchApi",
      "useProducts",
      "useProduct",
      "useProductSearch",
      "useProductFilters",
      "useCart",
      "useCartItems",
      "useCartActions",
      "useOrders",
      "useOrder",
      "useOrderHistory",
      "useReviews",
      "useProductReviews",
      "useUserReviews",
      "useAddresses",
      "useUserAddresses",
      "useAddressValidation",
      "useAdmin",
      "useAdminUsers",
      "useAdminProducts",
      "useChat",
      "useChatConnection",
      "useChatHistory",
      "useFeatures",
      "useFlashSales",
      "useLoyaltyProgram",
    ],
    auth: ["useAuth", "useAuthState", "useAuthActions", "useProfile"],
    ui: [
      "useDebounce",
      "usePagination",
      "useForm",
      "useModal",
      "useToast",
      "useLocalStorage",
      "useToggle",
      "useClickOutside",
      "useKeyPress",
    ],
  };
};

// Hook categories for documentation and discovery
export const HOOK_CATEGORIES = {
  API: "api",
  AUTH: "auth",
  UI: "ui",
};

// Common hook patterns and utilities
export const HOOK_PATTERNS = {
  LOADING_STATES: ["loading", "error", "data"],
  CRUD_OPERATIONS: ["create", "read", "update", "delete"],
  FORM_STATES: ["values", "errors", "touched", "isValid"],
};

```

### ClientApp\src\hooks\api\useAddresses.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

/**
 * Hook for managing user addresses
 */
export const useAddresses = () => {
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [userId, setUserId] = useState(null);

  // Get user ID from token
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (Number.isInteger(id)) {
          setUserId(id);
        }
      } catch (error) {
        console.error("Error decoding token:", error);
      }
    }
  }, []);

  const fetchAddresses = useCallback(async () => {
    if (!userId) return;
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/address/user/${userId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      const addressData = response.data.$values || response.data || [];
      setAddresses(addressData);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch addresses");
      console.error("Error fetching addresses:", err);
    } finally {
      setLoading(false);
    }
  }, [userId]);

  const addAddress = useCallback(
    async (addressData) => {
      if (!userId) throw new Error("User not authenticated");
      try {
        setLoading(true);
        setError(null);
        const token = localStorage.getItem("token");
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/address/add`,
          {
            ...addressData,
            userId,
          },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        const newAddress = response.data;
        setAddresses((prev) => [...prev, newAddress]);
        return newAddress;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || "Failed to add address";
        setError(errorMessage);
        throw new Error(errorMessage);
      } finally {
        setLoading(false);
      }
    },
    [userId]
  );

  const updateAddress = useCallback(async (addressId, addressData) => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/address/update/${addressId}`,
        addressData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      const updatedAddress = response.data;
      setAddresses((prev) =>
        prev.map((addr) => (addr.id === addressId ? updatedAddress : addr))
      );
      return updatedAddress;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update address";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteAddress = useCallback(async (addressId) => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      await axios.delete(
        `${process.env.REACT_APP_API_BASE_URL}/api/address/delete/${addressId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setAddresses((prev) => prev.filter((addr) => addr.id !== addressId));
      return true;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to delete address";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const setDefaultAddress = useCallback(async (addressId) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/address/${addressId}/set-default`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      // Update local state to reflect the change
      setAddresses((prev) =>
        prev.map((addr) => ({
          ...addr,
          isDefault: addr.id === addressId,
        }))
      );
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to set default address";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  // Initialize addresses on mount
  useEffect(() => {
    if (userId) {
      fetchAddresses();
    }
  }, [userId, fetchAddresses]);

  // Get default address
  const defaultAddress =
    addresses.find((addr) => addr.isDefault) || addresses[0] || null;

  return {
    addresses,
    defaultAddress,
    loading,
    error,
    addAddress,
    updateAddress,
    deleteAddress,
    setDefaultAddress,
    fetchAddresses,
  };
};

/**
 * Hook for address validation
 */
export const useAddressValidation = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const validateAddress = useCallback(async (address) => {
    try {
      setLoading(true);
      setError(null);

      // Basic validation
      const errors = {};

      if (!address.fullName?.trim()) {
        errors.fullName = "Full name is required";
      }

      if (!address.phoneNumber?.trim()) {
        errors.phoneNumber = "Phone number is required";
      } else if (!/^[0-9+\-\s()]+$/.test(address.phoneNumber)) {
        errors.phoneNumber = "Invalid phone number format";
      }

      if (!address.addressLine1?.trim()) {
        errors.addressLine1 = "Address line 1 is required";
      }

      if (!address.city?.trim()) {
        errors.city = "City is required";
      }

      if (!address.state?.trim()) {
        errors.state = "State/Province is required";
      }

      if (!address.postalCode?.trim()) {
        errors.postalCode = "Postal code is required";
      }

      if (!address.country?.trim()) {
        errors.country = "Country is required";
      }

      if (Object.keys(errors).length > 0) {
        return { isValid: false, errors };
      }

      // Additional validation can be added here (e.g., API calls to validate postal codes)

      return { isValid: true, errors: {} };
    } catch (err) {
      setError("Address validation failed");
      return { isValid: false, errors: { general: "Validation failed" } };
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    validateAddress,
    loading,
    error,
  };
};

/**
 * Hook for address autocomplete/suggestions
 */
export const useAddressSuggestions = () => {
  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const getSuggestions = useCallback(async (query) => {
    if (!query || query.length < 3) {
      setSuggestions([]);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      // This would typically call a geocoding service like Google Maps API
      // For now, we'll return a mock response
      const mockSuggestions = [
        {
          id: 1,
          description: `${query} Street, Example City, Example State`,
          addressLine1: `${query} Street`,
          city: "Example City",
          state: "Example State",
          postalCode: "12345",
          country: "Vietnam",
        },
        {
          id: 2,
          description: `${query} Avenue, Another City, Example State`,
          addressLine1: `${query} Avenue`,
          city: "Another City",
          state: "Example State",
          postalCode: "67890",
          country: "Vietnam",
        },
      ];

      setSuggestions(mockSuggestions);
    } catch (err) {
      setError("Failed to fetch address suggestions");
      setSuggestions([]);
    } finally {
      setLoading(false);
    }
  }, []);

  const clearSuggestions = useCallback(() => {
    setSuggestions([]);
  }, []);

  return {
    suggestions,
    loading,
    error,
    getSuggestions,
    clearSuggestions,
  };
};

/**
 * Hook for shipping calculations
 */
export const useShipping = () => {
  const [shippingOptions, setShippingOptions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const calculateShipping = useCallback(async (address, items) => {
    try {
      setLoading(true);
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/shipping/calculate`,
        {
          address,
          items,
        }
      );

      const options = response.data || [];
      setShippingOptions(options);
      return options;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to calculate shipping";
      setError(errorMessage);
      setShippingOptions([]);
      return [];
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    shippingOptions,
    loading,
    error,
    calculateShipping,
  };
};

```

### ClientApp\src\hooks\api\useAdmin.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";

/**
 * Hook for admin dashboard statistics
 */
export const useAdminStats = () => {
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalProducts: 0,
    totalOrders: 0,
    totalRevenue: 0,
    newUsersToday: 0,
    pendingOrders: 0,
    lowStockProducts: 0,
    averageOrderValue: 0,
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchStats = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/dashboard/stats`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setStats(response.data);
    } catch (err) {
      setError(
        err.response?.data?.message || "Failed to fetch admin statistics"
      );
      console.error("Error fetching admin stats:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchStats();
  }, [fetchStats]);

  return {
    stats,
    loading,
    error,
    refetch: fetchStats,
  };
};

/**
 * Hook for managing users (Admin)
 */
export const useAdminUsers = () => {
  const [users, setUsers] = useState([]);
  const [roles, setRoles] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchUsers = useCallback(async (filters = {}) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const params = new URLSearchParams();

      Object.entries(filters).forEach(([key, value]) => {
        if (value !== null && value !== undefined && value !== "") {
          params.append(key, value);
        }
      });

      let url = `${process.env.REACT_APP_API_BASE_URL}/api/admin/users`;
      if (params.toString()) {
        url += `?${params.toString()}`;
      }

      const response = await axios.get(url, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const userData = response.data.$values || response.data || [];
      setUsers(userData);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch users");
      console.error("Error fetching users:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchRoles = useCallback(async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/roles`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const rolesData = response.data.$values || response.data || [];
      setRoles(rolesData);
    } catch (err) {
      console.error("Error fetching roles:", err);
    }
  }, []);

  const updateUser = useCallback(async (userId, userData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/users/${userId}`,
        userData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const updatedUser = response.data;
      setUsers((prev) =>
        prev.map((user) => (user.id === userId ? updatedUser : user))
      );

      return updatedUser;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update user";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteUser = useCallback(async (userId) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      await axios.delete(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/users/${userId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setUsers((prev) => prev.filter((user) => user.id !== userId));
      return true;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to delete user";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const createUser = useCallback(async (userData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/users`,
        userData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const newUser = response.data;
      setUsers((prev) => [...prev, newUser]);
      return newUser;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to create user";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchUsers();
    fetchRoles();
  }, [fetchUsers, fetchRoles]);

  return {
    users,
    roles,
    loading,
    error,
    fetchUsers,
    updateUser,
    deleteUser,
    createUser,
  };
};

/**
 * Hook for managing products (Admin)
 */
export const useAdminProducts = () => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchProducts = useCallback(async (filters = {}) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const params = new URLSearchParams();

      Object.entries(filters).forEach(([key, value]) => {
        if (value !== null && value !== undefined && value !== "") {
          params.append(key, value);
        }
      });

      let url = `${process.env.REACT_APP_API_BASE_URL}/api/admin/products`;
      if (params.toString()) {
        url += `?${params.toString()}`;
      }

      const response = await axios.get(url, {
        headers: { Authorization: `Bearer ${token}` },
      });

      const productsData = response.data.$values || response.data || [];
      setProducts(productsData);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch products");
      console.error("Error fetching products:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchProductData = useCallback(async () => {
    try {
      const token = localStorage.getItem("token");
      const [categoriesRes, brandsRes] = await Promise.all([
        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
        axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/brands`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
      ]);

      setCategories(categoriesRes.data.$values || categoriesRes.data || []);
      setBrands(brandsRes.data.$values || brandsRes.data || []);
    } catch (err) {
      console.error("Error fetching product data:", err);
    }
  }, []);

  const createProduct = useCallback(async (productData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/products`,
        productData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const newProduct = response.data;
      setProducts((prev) => [...prev, newProduct]);
      return newProduct;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to create product";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const updateProduct = useCallback(async (productId, productData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/products/${productId}`,
        productData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const updatedProduct = response.data;
      setProducts((prev) =>
        prev.map((product) =>
          product.id === productId ? updatedProduct : product
        )
      );

      return updatedProduct;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update product";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteProduct = useCallback(async (productId) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      await axios.delete(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/products/${productId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setProducts((prev) => prev.filter((product) => product.id !== productId));
      return true;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to delete product";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchProducts();
    fetchProductData();
  }, [fetchProducts, fetchProductData]);

  return {
    products,
    categories,
    brands,
    loading,
    error,
    fetchProducts,
    createProduct,
    updateProduct,
    deleteProduct,
  };
};

/**
 * Hook for managing categories (Admin)
 */
export const useAdminCategories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchCategories = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/categories`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const categoriesData = response.data.$values || response.data || [];
      setCategories(categoriesData);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch categories");
      console.error("Error fetching categories:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  const createCategory = useCallback(async (categoryData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/categories`,
        categoryData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const newCategory = response.data;
      setCategories((prev) => [...prev, newCategory]);
      return newCategory;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to create category";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const updateCategory = useCallback(async (categoryId, categoryData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/categories/${categoryId}`,
        categoryData,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      const updatedCategory = response.data;
      setCategories((prev) =>
        prev.map((category) =>
          category.id === categoryId ? updatedCategory : category
        )
      );

      return updatedCategory;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update category";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const deleteCategory = useCallback(async (categoryId) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      await axios.delete(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/categories/${categoryId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setCategories((prev) =>
        prev.filter((category) => category.id !== categoryId)
      );
      return true;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to delete category";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  return {
    categories,
    loading,
    error,
    fetchCategories,
    createCategory,
    updateCategory,
    deleteCategory,
  };
};

/**
 * Hook for admin analytics
 */
export const useAdminAnalytics = (timeRange = "month") => {
  const [analyticsData, setAnalyticsData] = useState({
    revenue: [],
    orders: [],
    users: [],
    products: [],
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchAnalytics = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/admin/analytics`,
        {
          params: { range: timeRange },
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setAnalyticsData(response.data);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch analytics data");
      console.error("Error fetching analytics:", err);
    } finally {
      setLoading(false);
    }
  }, [timeRange]);

  useEffect(() => {
    fetchAnalytics();
  }, [fetchAnalytics]);

  return {
    analyticsData,
    loading,
    error,
    refetch: fetchAnalytics,
  };
};

```

### ClientApp\src\hooks\api\useApi.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

/**
 * Base API hook for common API operations
 * @param {string} endpoint - API endpoint
 * @param {Object} options - Configuration options
 * @returns {Object} - API state and functions
 */
export const useApi = (endpoint, options = {}) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const {
    immediate = true,
    defaultValue = null,
    transform = (data) => data,
    onSuccess,
    onError,
  } = options;

  const execute = useCallback(
    async (config = {}) => {
      try {
        setLoading(true);
        setError(null);

        const response = await axios({
          url: `${API_BASE_URL}${endpoint}`,
          method: "GET",
          ...config,
        });

        const transformedData = transform(response.data);
        setData(transformedData);

        if (onSuccess) onSuccess(transformedData);

        return transformedData;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || err.message || "An error occurred";
        setError(errorMessage);

        if (onError) onError(err);

        throw err;
      } finally {
        setLoading(false);
      }
    },
    [endpoint, transform, onSuccess, onError]
  );

  const reset = useCallback(() => {
    setData(defaultValue);
    setError(null);
    setLoading(false);
  }, [defaultValue]);

  useEffect(() => {
    if (immediate && endpoint) {
      execute();
    }
  }, [execute, immediate, endpoint]);

  return {
    data,
    loading,
    error,
    execute,
    reset,
    setData,
  };
};

/**
 * Hook for POST requests
 */
export const usePost = (endpoint, options = {}) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const execute = useCallback(
    async (data, config = {}) => {
      try {
        setLoading(true);
        setError(null);

        const response = await axios.post(
          `${API_BASE_URL}${endpoint}`,
          data,
          config
        );

        if (options.onSuccess) options.onSuccess(response.data);

        return response.data;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || err.message || "An error occurred";
        setError(errorMessage);

        if (options.onError) options.onError(err);

        throw err;
      } finally {
        setLoading(false);
      }
    },
    [endpoint, options]
  );

  return {
    execute,
    loading,
    error,
    setError,
  };
};

/**
 * Hook for PUT requests
 */
export const usePut = (endpoint, options = {}) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const execute = useCallback(
    async (data, config = {}) => {
      try {
        setLoading(true);
        setError(null);

        const response = await axios.put(
          `${API_BASE_URL}${endpoint}`,
          data,
          config
        );

        if (options.onSuccess) options.onSuccess(response.data);

        return response.data;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || err.message || "An error occurred";
        setError(errorMessage);

        if (options.onError) options.onError(err);

        throw err;
      } finally {
        setLoading(false);
      }
    },
    [endpoint, options]
  );

  return {
    execute,
    loading,
    error,
    setError,
  };
};

/**
 * Hook for DELETE requests
 */
export const useDelete = (options = {}) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const execute = useCallback(
    async (endpoint, config = {}) => {
      try {
        setLoading(true);
        setError(null);

        const response = await axios.delete(
          `${API_BASE_URL}${endpoint}`,
          config
        );

        if (options.onSuccess) options.onSuccess(response.data);

        return response.data;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || err.message || "An error occurred";
        setError(errorMessage);

        if (options.onError) options.onError(err);

        throw err;
      } finally {
        setLoading(false);
      }
    },
    [options]
  );

  return {
    execute,
    loading,
    error,
    setError,
  };
};

export default useApi;

```

### ClientApp\src\hooks\api\useBrands.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";

const API_URL = `${process.env.REACT_APP_API_BASE_URL}/api/brands`;

export const useBrands = (drawerOpen) => {
  const [brands, setBrands] = useState([]);
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [brandToDelete, setBrandToDelete] = useState(null);
  const [loading, setLoading] = useState(false); // Thêm state loading
  const [error, setError] = useState(null); // Thêm state error

  const fetchBrands = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(API_URL);
      setBrands(response.data);
    } catch (err) {
      console.error("Failed to fetch brands:", err);
      setError("Không thể tải danh sách thương hiệu. Vui lòng thử lại.");
      // Có thể setBrands([]) ở đây nếu muốn clear data cũ khi lỗi
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (drawerOpen === undefined || drawerOpen) {
      fetchBrands();
    }
  }, [drawerOpen, fetchBrands]);

  const handleConfirmDelete = async () => {
    if (!brandToDelete) return;
    setLoading(true);
    try {
      await axios.delete(`${API_URL}/${brandToDelete.id}`);
      await fetchBrands();
      setDeleteDialogOpen(false);
      setBrandToDelete(null);
    } catch (err) {
      console.error("Failed to delete brand:", err);
      setError("Xóa thương hiệu thất bại. Vui lòng thử lại.");
    } finally {
      setLoading(false);
    }
  };

  const handleOpenModal = (brand = null) => {
    setSelectedBrand(brand);
    setModalOpen(true);
  };

  const handleCloseModal = (shouldRefresh = false) => {
    setModalOpen(false);
    setSelectedBrand(null);
    if (shouldRefresh) {
      fetchBrands();
    }
  };

  const handleOpenDeleteDialog = (brand) => {
    setBrandToDelete(brand);
    setDeleteDialogOpen(true);
  };

  const handleCloseDeleteDialog = () => {
    setDeleteDialogOpen(false);
  };

  return {
    brands,
    selectedBrand,
    modalOpen,
    deleteDialogOpen,
    brandToDelete,
    loading,
    error,
    actions: {
      fetchBrands,
      handleOpenModal,
      handleCloseModal,
      handleOpenDeleteDialog,
      handleCloseDeleteDialog,
      handleConfirmDelete,
      clearError: () => setError(null)
    }
  };
};

```

### ClientApp\src\hooks\api\useCart.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

/**
 * Hook for managing shopping cart
 */
export const useCart = () => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [userId, setUserId] = useState(null);

  // Get user ID from token
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (Number.isInteger(id)) {
          setUserId(id);
        }
      } catch (error) {
        console.error("Error decoding token:", error);
      }
    }
  }, []);

  // Fetch cart items
  const fetchCart = useCallback(async () => {
    const token = localStorage.getItem("token");
    setLoading(true);
    setError(null);

    try {
      let items = [];

      if (token && userId) {
        // Fetch from API for logged-in users
        const [apiResponse, sessionCart] = await Promise.all([
          axios.get(
            `${process.env.REACT_APP_API_BASE_URL}/api/Cart?userId=${userId}`,
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          ),
          sessionStorage.getItem("cart"),
        ]);

        const apiItems = apiResponse.data?.$values || apiResponse.data || [];
        const sessionItems = sessionCart ? JSON.parse(sessionCart) : [];

        // Merge API items with session items
        const merged = [...apiItems];
        sessionItems.forEach((sessionItem) => {
          if (
            !merged.find(
              (item) => item.productVariantId === sessionItem.productVariantId
            )
          ) {
            merged.push(sessionItem);
          }
        });

        // Sync session items to database
        if (sessionItems.length > 0) {
          await Promise.all(
            sessionItems.map((item) =>
              axios.post(
                `${process.env.REACT_APP_API_BASE_URL}/api/Cart`,
                {
                  userId,
                  productVariantId: item.productVariantId,
                  quantity: item.quantity,
                },
                {
                  headers: { Authorization: `Bearer ${token}` },
                }
              )
            )
          );
          sessionStorage.removeItem("cart");
        }

        items = merged;
      } else {
        // Get from session storage for guests
        const sessionCart = sessionStorage.getItem("cart");
        items = sessionCart ? JSON.parse(sessionCart) : [];
      }

      setCartItems(items);
    } catch (err) {
      setError(err.message);
      console.error("Error fetching cart:", err);
    } finally {
      setLoading(false);
    }
  }, [userId]);

  // Add item to cart
  const addToCart = useCallback(
    async (productVariantId, quantity = 1) => {
      const token = localStorage.getItem("token");
      setLoading(true);
      setError(null);

      try {
        if (token && userId) {
          // Add to database for logged-in users
          await axios.post(
            `${process.env.REACT_APP_API_BASE_URL}/api/Cart`,
            {
              userId,
              productVariantId,
              quantity,
            },
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
        } else {
          // Add to session storage for guests
          const sessionCart = JSON.parse(
            sessionStorage.getItem("cart") || "[]"
          );
          const existingItem = sessionCart.find(
            (item) => item.productVariantId === productVariantId
          );

          if (existingItem) {
            existingItem.quantity += quantity;
          } else {
            sessionCart.push({ productVariantId, quantity });
          }

          sessionStorage.setItem("cart", JSON.stringify(sessionCart));
        }

        // Refresh cart
        await fetchCart();
      } catch (err) {
        setError(err.message);
        throw err;
      } finally {
        setLoading(false);
      }
    },
    [userId, fetchCart]
  );

  // Update item quantity
  const updateQuantity = useCallback(
    async (productVariantId, quantity) => {
      const token = localStorage.getItem("token");
      setLoading(true);
      setError(null);

      try {
        if (quantity <= 0) {
          // Remove item if quantity is 0
          await removeFromCart(productVariantId);
          return;
        }

        if (token && userId) {
          // Update in database for logged-in users
          await axios.put(
            `${process.env.REACT_APP_API_BASE_URL}/api/Cart/update`,
            {
              userId,
              productVariantId,
              quantity,
            },
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
        } else {
          // Update in session storage for guests
          const sessionCart = JSON.parse(
            sessionStorage.getItem("cart") || "[]"
          );
          const itemIndex = sessionCart.findIndex(
            (item) => item.productVariantId === productVariantId
          );

          if (itemIndex !== -1) {
            sessionCart[itemIndex].quantity = quantity;
            sessionStorage.setItem("cart", JSON.stringify(sessionCart));
          }
        }

        // Refresh cart
        await fetchCart();
      } catch (err) {
        setError(err.message);
        throw err;
      } finally {
        setLoading(false);
      }
    },
    [userId, fetchCart]
  );

  // Remove item from cart
  const removeFromCart = useCallback(
    async (productVariantId) => {
      const token = localStorage.getItem("token");
      setLoading(true);
      setError(null);

      try {
        if (token && userId) {
          // Remove from database for logged-in users
          await axios.delete(
            `${process.env.REACT_APP_API_BASE_URL}/api/Cart/${userId}/${productVariantId}`,
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
        } else {
          // Remove from session storage for guests
          const sessionCart = JSON.parse(
            sessionStorage.getItem("cart") || "[]"
          );
          const updatedCart = sessionCart.filter(
            (item) => item.productVariantId !== productVariantId
          );
          sessionStorage.setItem("cart", JSON.stringify(updatedCart));
        }

        // Refresh cart
        await fetchCart();
      } catch (err) {
        setError(err.message);
        throw err;
      } finally {
        setLoading(false);
      }
    },
    [userId, fetchCart]
  );

  // Clear entire cart
  const clearCart = useCallback(async () => {
    const token = localStorage.getItem("token");
    setLoading(true);
    setError(null);

    try {
      if (token && userId) {
        // Clear from database for logged-in users
        await axios.delete(
          `${process.env.REACT_APP_API_BASE_URL}/api/Cart/clear/${userId}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
      } else {
        // Clear session storage for guests
        sessionStorage.removeItem("cart");
      }

      setCartItems([]);
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [userId]);

  // Calculate cart totals
  const getCartTotals = useCallback(() => {
    const subtotal = cartItems.reduce((total, item) => {
      const price = item.discountPrice || item.price || 0;
      return total + price * item.quantity;
    }, 0);

    const tax = subtotal * 0.1; // 10% tax
    const total = subtotal + tax;

    return {
      subtotal,
      tax,
      total,
      itemCount: cartItems.reduce((count, item) => count + item.quantity, 0),
    };
  }, [cartItems]);

  // Initialize cart on mount
  useEffect(() => {
    if (userId !== null) {
      fetchCart();
    }
  }, [userId, fetchCart]);

  return {
    cartItems,
    loading,
    error,
    addToCart,
    updateQuantity,
    removeFromCart,
    clearCart,
    fetchCart,
    ...getCartTotals(),
  };
};

/**
 * Hook for managing vouchers
 */
export const useVoucher = () => {
  const [appliedVoucher, setAppliedVoucher] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const applyVoucher = useCallback(async (voucherCode) => {
    if (!voucherCode.trim()) return;

    setLoading(true);
    setError(null);

    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/vouchers/apply`,
        { code: voucherCode }
      );

      const voucher = response.data;
      setAppliedVoucher(voucher);
      return voucher;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Invalid voucher code";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const removeVoucher = useCallback(() => {
    setAppliedVoucher(null);
    setError(null);
  }, []);

  const calculateDiscount = useCallback(
    (subtotal) => {
      if (!appliedVoucher) return 0;

      if (appliedVoucher.discountType === "percentage") {
        return (subtotal * appliedVoucher.discountAmount) / 100;
      } else {
        return Math.min(appliedVoucher.discountAmount, subtotal);
      }
    },
    [appliedVoucher]
  );

  return {
    appliedVoucher,
    loading,
    error,
    applyVoucher,
    removeVoucher,
    calculateDiscount,
  };
};

```

### ClientApp\src\hooks\api\useCategories.js
```js
import { useState, useEffect } from "react";
import axios from "axios";

export const useCategories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
        const data = response.data;
        const categoriesArray = Array.isArray(data.$values)
          ? data.$values
          : Array.isArray(data)
          ? data
          : [];
        setCategories(categoriesArray);
      } catch (error) {
        setError("Không thể tải danh mục: " + error.message);
        setCategories([]);
      } finally {
        setLoading(false);
      }
    };
    fetchCategories();
  }, []);

  return { categories, loading, error };
};

```

### ClientApp\src\hooks\api\useChat.js
```js
import { useState, useEffect, useCallback, useRef } from "react";
import { HubConnectionBuilder, LogLevel } from "@microsoft/signalr";

/**
 * Hook for managing chat functionality
 */
export const useChat = (isAdmin = false) => {
  const [connection, setConnection] = useState(null);
  const [messages, setMessages] = useState([]);
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [error, setError] = useState(null);
  const [sessionId, setSessionId] = useState(null);

  const API_BASE_URL =
    process.env.REACT_APP_API_BASE_URL || "https://localhost:7107";

  const initializeConnection = useCallback(async () => {
    if (isConnecting || connection) return;

    try {
      setIsConnecting(true);
      setError(null);

      const token = localStorage.getItem("token");
      const hubUrl = isAdmin
        ? `${API_BASE_URL}/chathub?isAdmin=true`
        : `${API_BASE_URL}/chathub`;

      const newConnection = new HubConnectionBuilder()
        .withUrl(hubUrl, {
          accessTokenFactory: () => token,
          transport: 1, // WebSockets
        })
        .withAutomaticReconnect()
        .configureLogging(LogLevel.Information)
        .build();

      // Set up event handlers
      newConnection.on("ReceiveMessage", (sessionId, message) => {
        setMessages((prev) => [...prev, { ...message, sessionId }]);
      });

      newConnection.on("UserJoined", (sessionId, userName) => {
        console.log(`User ${userName} joined session ${sessionId}`);
      });

      newConnection.on("UserLeft", (sessionId, userName) => {
        console.log(`User ${userName} left session ${sessionId}`);
      });

      newConnection.on("SessionCreated", (newSessionId) => {
        setSessionId(newSessionId);
      });

      if (isAdmin) {
        newConnection.on("NewSession", (session) => {
          // Handle new session notification for admin
          console.log("New chat session created:", session);
        });

        newConnection.on("SessionEnded", (sessionId) => {
          console.log("Session ended:", sessionId);
        });
      }

      // Start connection
      await newConnection.start();

      setConnection(newConnection);
      setIsConnected(true);
      console.log("Chat connection established");
    } catch (err) {
      console.error("Error connecting to chat:", err);
      setError("Failed to connect to chat");
    } finally {
      setIsConnecting(false);
    }
  }, [isConnecting, connection, isAdmin, API_BASE_URL]);

  const sendMessage = useCallback(
    async (messageText, targetSessionId = null) => {
      if (!connection || !isConnected || !messageText.trim()) return;

      try {
        const currentSessionId = targetSessionId || sessionId;

        if (isAdmin && targetSessionId) {
          await connection.invoke(
            "SendMessageToSession",
            targetSessionId,
            messageText
          );
        } else {
          await connection.invoke("SendMessage", currentSessionId, messageText);
        }
      } catch (err) {
        console.error("Error sending message:", err);
        setError("Failed to send message");
      }
    },
    [connection, isConnected, sessionId, isAdmin]
  );

  const joinSession = useCallback(
    async (sessionIdToJoin) => {
      if (!connection || !isConnected) return;

      try {
        await connection.invoke("JoinSession", sessionIdToJoin);
        setSessionId(sessionIdToJoin);
      } catch (err) {
        console.error("Error joining session:", err);
        setError("Failed to join session");
      }
    },
    [connection, isConnected]
  );

  const leaveSession = useCallback(async () => {
    if (!connection || !isConnected || !sessionId) return;

    try {
      await connection.invoke("LeaveSession", sessionId);
      setSessionId(null);
      setMessages([]);
    } catch (err) {
      console.error("Error leaving session:", err);
      setError("Failed to leave session");
    }
  }, [connection, isConnected, sessionId]);

  const endSession = useCallback(
    async (sessionIdToEnd = sessionId) => {
      if (!connection || !isConnected || !sessionIdToEnd) return;

      try {
        await connection.invoke("EndSession", sessionIdToEnd);
        if (sessionIdToEnd === sessionId) {
          setSessionId(null);
          setMessages([]);
        }
      } catch (err) {
        console.error("Error ending session:", err);
        setError("Failed to end session");
      }
    },
    [connection, isConnected, sessionId]
  );

  const disconnect = useCallback(async () => {
    if (connection) {
      try {
        await connection.stop();
        setConnection(null);
        setIsConnected(false);
        setMessages([]);
        setSessionId(null);
      } catch (err) {
        console.error("Error disconnecting:", err);
      }
    }
  }, [connection]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (connection && connection.state !== "Disconnected") {
        connection.stop().catch(console.error);
      }
    };
  }, [connection]);

  return {
    connection,
    messages,
    isConnected,
    isConnecting,
    error,
    sessionId,
    initializeConnection,
    sendMessage,
    joinSession,
    leaveSession,
    endSession,
    disconnect,
    setError,
  };
};

/**
 * Hook for admin chat sessions management
 */
export const useAdminChatSessions = () => {
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const API_BASE_URL =
    process.env.REACT_APP_API_BASE_URL || "https://localhost:7107";

  const fetchSessions = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await fetch(`${API_BASE_URL}/api/chat/admin/sessions`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch sessions: ${response.status}`);
      }

      const data = await response.json();
      setSessions(data);
    } catch (err) {
      console.error("Error fetching sessions:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [API_BASE_URL]);

  const getSessionMessages = useCallback(
    async (sessionId) => {
      try {
        const token = localStorage.getItem("token");
        const response = await fetch(
          `${API_BASE_URL}/api/chat/admin/sessions/${sessionId}/messages`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error(`Failed to fetch messages: ${response.status}`);
        }

        const data = await response.json();
        return data;
      } catch (err) {
        console.error("Error fetching session messages:", err);
        throw err;
      }
    },
    [API_BASE_URL]
  );

  const updateSessionStatus = useCallback(
    async (sessionId, status) => {
      try {
        const token = localStorage.getItem("token");
        const response = await fetch(
          `${API_BASE_URL}/api/chat/admin/sessions/${sessionId}/status`,
          {
            method: "PUT",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ status }),
          }
        );

        if (!response.ok) {
          throw new Error(
            `Failed to update session status: ${response.status}`
          );
        }

        // Update local state
        setSessions((prev) =>
          prev.map((session) =>
            session.id === sessionId ? { ...session, status } : session
          )
        );
      } catch (err) {
        console.error("Error updating session status:", err);
        throw err;
      }
    },
    [API_BASE_URL]
  );

  useEffect(() => {
    fetchSessions();

    // Auto refresh every 30 seconds
    const interval = setInterval(fetchSessions, 30000);
    return () => clearInterval(interval);
  }, [fetchSessions]);

  return {
    sessions,
    loading,
    error,
    fetchSessions,
    getSessionMessages,
    updateSessionStatus,
  };
};

/**
 * Hook for chat message formatting and utilities
 */
export const useChatUtils = () => {
  const formatTime = useCallback((timestamp) => {
    try {
      const date = new Date(timestamp);
      return date.toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
        timeZone: "Asia/Ho_Chi_Minh",
        hour12: false,
      });
    } catch (error) {
      console.error("Error formatting time:", error);
      return "";
    }
  }, []);

  const formatDate = useCallback((timestamp) => {
    try {
      const date = new Date(timestamp);
      return date.toLocaleDateString("vi-VN", {
        year: "numeric",
        month: "short",
        day: "numeric",
        timeZone: "Asia/Ho_Chi_Minh",
      });
    } catch (error) {
      console.error("Error formatting date:", error);
      return "";
    }
  }, []);

  const isToday = useCallback((timestamp) => {
    try {
      const messageDate = new Date(timestamp);
      const today = new Date();
      return messageDate.toDateString() === today.toDateString();
    } catch (error) {
      return false;
    }
  }, []);

  const groupMessagesByDate = useCallback(
    (messages) => {
      const grouped = {};

      messages.forEach((message) => {
        const date = formatDate(message.timestamp);
        if (!grouped[date]) {
          grouped[date] = [];
        }
        grouped[date].push(message);
      });

      return grouped;
    },
    [formatDate]
  );

  const generateSessionId = useCallback(() => {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }, []);

  return {
    formatTime,
    formatDate,
    isToday,
    groupMessagesByDate,
    generateSessionId,
  };
};

/**
 * Hook for chat typing indicators
 */
export const useTypingIndicator = (connection, sessionId) => {
  const [typingUsers, setTypingUsers] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const typingTimeoutRef = useRef(null);

  // Set up typing event listeners
  useEffect(() => {
    if (!connection) return;

    const handleUserTyping = (userId, userName, sessionId) => {
      setTypingUsers((prev) => {
        const existing = prev.find((user) => user.userId === userId);
        if (!existing) {
          return [...prev, { userId, userName, sessionId }];
        }
        return prev;
      });

      // Remove typing indicator after 3 seconds
      setTimeout(() => {
        setTypingUsers((prev) => prev.filter((user) => user.userId !== userId));
      }, 3000);
    };

    const handleUserStoppedTyping = (userId) => {
      setTypingUsers((prev) => prev.filter((user) => user.userId !== userId));
    };

    connection.on("UserTyping", handleUserTyping);
    connection.on("UserStoppedTyping", handleUserStoppedTyping);

    return () => {
      connection.off("UserTyping", handleUserTyping);
      connection.off("UserStoppedTyping", handleUserStoppedTyping);
    };
  }, [connection]);

  const startTyping = useCallback(() => {
    if (!connection || !sessionId) return;

    if (!isTyping) {
      setIsTyping(true);
      connection.invoke("StartTyping", sessionId).catch(console.error);
    }

    // Clear existing timeout
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    // Stop typing after 2 seconds of inactivity
    typingTimeoutRef.current = setTimeout(() => {
      stopTyping();
    }, 2000);
  }, [connection, sessionId, isTyping]);

  const stopTyping = useCallback(() => {
    if (!connection || !sessionId || !isTyping) return;

    setIsTyping(false);
    connection.invoke("StopTyping", sessionId).catch(console.error);

    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
      typingTimeoutRef.current = null;
    }
  }, [connection, sessionId, isTyping]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, []);

  return {
    typingUsers: typingUsers.filter((user) => user.sessionId === sessionId),
    startTyping,
    stopTyping,
  };
};

```

### ClientApp\src\hooks\api\useFeatures.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";

/**
 * Hook for managing flash sales
 */
export const useFlashSale = () => {
  const [flashSaleProducts, setFlashSaleProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [timeLeft, setTimeLeft] = useState({
    hours: 0,
    minutes: 0,
    seconds: 0,
  });

  const fetchFlashSaleProducts = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(
        `${process.env.REACT_APP_API_BASE_URL}/api/Products/lowest-price`
      );

      if (!response.ok) {
        throw new Error("Failed to fetch flash sale products");
      }

      const productsData = await response.json();

      const formattedProducts = productsData.map((product) => {
        const variant = product.variants?.[0] || {};
        const image =
          product.images?.[0]?.imageUrl || "/images/placeholder.jpg";

        const oldPrice = variant.price || 0;
        const newPrice = variant.discountPrice || oldPrice;
        const discountAmount = oldPrice - newPrice;
        const discount =
          oldPrice > 0
            ? `-${Math.round((discountAmount / oldPrice) * 100)}%`
            : "0%";

        return {
          id: product.id,
          name: product.name,
          oldPrice,
          newPrice,
          discount,
          discountAmount,
          image,
          features: product.features || [],
          brand: product.brand,
          rating: product.rating || 0,
          reviewCount: product.reviewCount || 0,
        };
      });

      setFlashSaleProducts(formattedProducts);
    } catch (err) {
      setError(err.message);
      console.error("Error fetching flash sale products:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  // Countdown timer calculation
  useEffect(() => {
    const calculateTimeLeft = () => {
      const now = new Date();
      const currentDay = now.getDay(); // 0 = Sunday, 1-6 = Monday-Saturday
      const endOfWeek = new Date(now);

      // Set to next Sunday (end of week)
      const daysUntilSunday = currentDay === 0 ? 7 : 7 - currentDay;
      endOfWeek.setDate(now.getDate() + daysUntilSunday);
      endOfWeek.setHours(23, 59, 59, 999);

      const timeDiff = endOfWeek.getTime() - now.getTime();

      if (timeDiff > 0) {
        const hours = Math.floor(timeDiff / (1000 * 60 * 60));
        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

        setTimeLeft({ hours, minutes, seconds });
      } else {
        setTimeLeft({ hours: 0, minutes: 0, seconds: 0 });
      }
    };

    calculateTimeLeft();
    const interval = setInterval(calculateTimeLeft, 1000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    fetchFlashSaleProducts();
  }, [fetchFlashSaleProducts]);

  const isFlashSaleActive =
    timeLeft.hours > 0 || timeLeft.minutes > 0 || timeLeft.seconds > 0;

  return {
    flashSaleProducts,
    loading,
    error,
    timeLeft,
    isFlashSaleActive,
    refetch: fetchFlashSaleProducts,
  };
};

/**
 * Hook for managing best sellers
 */
export const useBestSellers = () => {
  const [bestSellers, setBestSellers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchBestSellers = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const [productsResponse, categoriesResponse, brandsResponse] =
        await Promise.all([
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/categories`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
        ]);

      if (
        !productsResponse.ok ||
        !categoriesResponse.ok ||
        !brandsResponse.ok
      ) {
        throw new Error("Failed to fetch data");
      }

      const [products, categories, brands] = await Promise.all([
        productsResponse.json(),
        categoriesResponse.json(),
        brandsResponse.json(),
      ]);

      const productsData = products.$values || products || [];
      const categoriesData = categories.$values || categories || [];
      const brandsData = brands.$values || brands || [];

      // Filter and sort products by sales/popularity (mock implementation)
      const bestSellingProducts = productsData
        .filter((product) => product.variants && product.variants.length > 0)
        .sort((a, b) => (b.salesCount || 0) - (a.salesCount || 0))
        .slice(0, 12)
        .map((product) => {
          const category = categoriesData.find(
            (cat) => cat.id === product.categoryId
          );
          const brand = brandsData.find((br) => br.id === product.brandId);

          return {
            ...product,
            category: category || { name: "Unknown" },
            brand: brand || { name: "Unknown", logo: null },
          };
        });

      setBestSellers(bestSellingProducts);
    } catch (err) {
      setError(err.message);
      console.error("Error fetching best sellers:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchBestSellers();
  }, [fetchBestSellers]);

  return {
    bestSellers,
    loading,
    error,
    refetch: fetchBestSellers,
  };
};

/**
 * Hook for managing featured categories
 */
export const useFeaturedCategories = () => {
  const [featuredCategories, setFeaturedCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchFeaturedCategories = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(
        `${process.env.REACT_APP_API_BASE_URL}/api/categories`
      );

      if (!response.ok) {
        throw new Error("Failed to fetch categories");
      }

      const data = await response.json();
      const categoriesData = data.$values || data || [];

      // Filter featured categories (first 6 for display)
      const featured = categoriesData.slice(0, 6);
      setFeaturedCategories(featured);
    } catch (err) {
      setError(err.message);
      console.error("Error fetching featured categories:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchFeaturedCategories();
  }, [fetchFeaturedCategories]);

  return {
    featuredCategories,
    loading,
    error,
    refetch: fetchFeaturedCategories,
  };
};

/**
 * Hook for managing hero banner slider
 */
export const useHeroBanner = (slides, autoPlayInterval = 5000) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [isPaused, setIsPaused] = useState(false);

  const nextSlide = useCallback(() => {
    if (isTransitioning) return;

    setIsTransitioning(true);
    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);

    setTimeout(() => setIsTransitioning(false), 300);
  }, [isTransitioning, slides.length]);

  const prevSlide = useCallback(() => {
    if (isTransitioning) return;

    setIsTransitioning(true);
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + slides.length) % slides.length
    );

    setTimeout(() => setIsTransitioning(false), 300);
  }, [isTransitioning, slides.length]);

  const goToSlide = useCallback(
    (index) => {
      if (isTransitioning || index === currentIndex) return;

      setIsTransitioning(true);
      setCurrentIndex(index);

      setTimeout(() => setIsTransitioning(false), 300);
    },
    [isTransitioning, currentIndex]
  );

  const pauseAutoPlay = useCallback(() => {
    setIsPaused(true);
  }, []);

  const resumeAutoPlay = useCallback(() => {
    setIsPaused(false);
  }, []);

  // Auto-play functionality
  useEffect(() => {
    if (isPaused || slides.length <= 1) return;

    const interval = setInterval(() => {
      nextSlide();
    }, autoPlayInterval);

    return () => clearInterval(interval);
  }, [nextSlide, isPaused, autoPlayInterval, slides.length]);

  return {
    currentIndex,
    isTransitioning,
    isPaused,
    nextSlide,
    prevSlide,
    goToSlide,
    pauseAutoPlay,
    resumeAutoPlay,
  };
};

/**
 * Hook for managing loyalty program data
 */
export const useLoyalty = () => {
  const [loyaltyData, setLoyaltyData] = useState({
    currentTier: null,
    points: 0,
    nextTierPoints: 0,
    benefits: [],
    history: [],
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchLoyaltyData = useCallback(async () => {
    const token = localStorage.getItem("token");
    if (!token) return;

    try {
      setLoading(true);
      setError(null);

      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/status`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setLoyaltyData(response.data);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch loyalty data");
      console.error("Error fetching loyalty data:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  const redeemPoints = useCallback(async (pointsToRedeem, rewardId) => {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("Authentication required");

    try {
      setLoading(true);
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/redeem`,
        {
          points: pointsToRedeem,
          rewardId,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      // Update local data
      setLoyaltyData((prev) => ({
        ...prev,
        points: prev.points - pointsToRedeem,
      }));

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to redeem points";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchLoyaltyData();
  }, [fetchLoyaltyData]);

  return {
    loyaltyData,
    loading,
    error,
    fetchLoyaltyData,
    redeemPoints,
  };
};

/**
 * Hook for managing vouchers
 */
export const useVouchers = () => {
  const [vouchers, setVouchers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchVouchers = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/vouchers/available`
      );

      const vouchersData = response.data.$values || response.data || [];
      setVouchers(vouchersData);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch vouchers");
      console.error("Error fetching vouchers:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  const validateVoucher = useCallback(async (voucherCode) => {
    try {
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/vouchers/validate`,
        { code: voucherCode }
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Invalid voucher code";
      setError(errorMessage);
      throw new Error(errorMessage);
    }
  }, []);

  useEffect(() => {
    fetchVouchers();
  }, [fetchVouchers]);

  return {
    vouchers,
    loading,
    error,
    fetchVouchers,
    validateVoucher,
  };
};

```

### ClientApp\src\hooks\api\useFlashSaleProducts.js
```js
import { useState, useEffect } from "react";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const useFlashSaleProducts = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        // Corrected endpoint to fetch actual flash sale products
        const response = await axios.get(`${API_BASE_URL}/api/Products/flash-sale`);
        // The response from this endpoint is a simple array of ProductDto
        setProducts(response.data || []);
      } catch (error) {
        setError("Không thể tải sản phẩm: " + error.message);
        setProducts([]);
      } finally {
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  return { products, loading, error };
};

```

### ClientApp\src\hooks\api\useLoyalty.js
```js
import { useState, useCallback } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

// Hook lấy trạng thái loyalty của user
export function useLoyaltyStatus() {
  const [loyaltyData, setLoyaltyData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [userId, setUserId] = useState(null);

  const fetchLoyaltyData = useCallback(async () => {
    setLoading(true);
    setError("");
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("Vui lòng đăng nhập để xem trạng thái thành viên");
        setLoading(false);
        return;
      }
      const decoded = jwtDecode(token);
      const id = parseInt(decoded.sub, 10);
      if (!Number.isInteger(id)) {
        setError("Token không hợp lệ");
        setLoading(false);
        return;
      }
      setUserId(id);
      const currentTime = Date.now() / 1000;
      if (decoded.exp < currentTime) {
        setError("Token đã hết hạn, vui lòng đăng nhập lại");
        setLoading(false);
        return;
      }
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/my-status?userId=${id}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setLoyaltyData(response.data);
    } catch (err) {
      setError("Không thể tải thông tin chương trình khách hàng thân thiết");
    } finally {
      setLoading(false);
    }
  }, []);

  // fetch on mount
  useState(() => {
    fetchLoyaltyData();
  }, [fetchLoyaltyData]);

  return { loyaltyData, loading, error, userId, refetch: fetchLoyaltyData };
}

// Hook quay vòng quay may mắn
export function useSpinWheel(userId, onSuccess) {
  const [spinning, setSpinning] = useState(false);
  const [spinResult, setSpinResult] = useState(null);
  const [error, setError] = useState("");

  const spin = useCallback(async () => {
    setSpinning(true);
    setError("");
    try {
      const token = localStorage.getItem("token");
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/loyalty/spin-wheel?userId=${userId}`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setSpinResult(response.data);
      if (onSuccess) onSuccess();
    } catch (err) {
      setError(err.response?.data || "Không thể quay vòng quay");
    } finally {
      setSpinning(false);
    }
  }, [userId, onSuccess]);

  return { spin, spinning, spinResult, error };
}

```

### ClientApp\src\hooks\api\useOrderLookup.js
```js
import { useState, useCallback } from "react";
import axios from "axios";

export const useOrderLookup = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const searchOrdersByPhone = useCallback(async (phoneNumber) => {
    if (!phoneNumber.trim()) {
      setError("Vui lòng nhập số điện thoại");
      setOrders([]);
      return;
    }
    setLoading(true);
    setError(null);
    setOrders([]);
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/by-phone/${phoneNumber}`
      );
      if (response.data && Array.isArray(response.data)) {
        if (response.data.length > 0) {
          setOrders(response.data);
        } else {
          setError("Không tìm thấy đơn hàng nào với số điện thoại này");
        }
      } else {
        setError("Dữ liệu trả về không hợp lệ");
      }
    } catch (err) {
      setError(
        err.response?.data?.message || "Lỗi khi tra cứu đơn hàng. Vui lòng thử lại."
      );
    } finally {
      setLoading(false);
    }
  }, []);

  return { orders, loading, error, searchOrdersByPhone };
};

```

### ClientApp\src\hooks\api\useOrders.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

/**
 * Hook for managing orders
 */
export const useOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [userId, setUserId] = useState(null);

  // Lấy userId từ token khi khởi tạo
  const initUserId = useCallback(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = decoded.sub;
        if (id) {
          setUserId(id);
          return id;
        }
      } catch (err) {
        setError("Lỗi khi giải mã token");
      }
    }
    return null;
  }, []);

  const fetchOrders = useCallback(
    async (id, page = 1, pageSize = 10) => {
      setLoading(true);
      setError(null);
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders/user/${id}/paged`,
          {
            headers: { Authorization: `Bearer ${token}` },
            params: { page, pageSize },
          }
        );
        setOrders(response.data.orders);
        return response.data.orders;
      } catch (err) {
        setError(err.response?.data?.message || "Không thể tải danh sách đơn hàng.");
      } finally {
        setLoading(false);
      }
    },
    []
  );

  return {
    orders,
    loading,
    error,
    userId,
    setUserId,
    initUserId,
    fetchOrders,
  };
};

/**
 * Hook for fetching a single order
 */
export const useOrder = (orderId) => {
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchOrder = useCallback(async () => {
    if (!orderId) return;

    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}`,
        {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
        }
      );

      setOrder(response.data);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch order");
      console.error("Error fetching order:", err);
    } finally {
      setLoading(false);
    }
  }, [orderId]);

  useEffect(() => {
    fetchOrder();
  }, [fetchOrder]);

  return {
    order,
    loading,
    error,
    refetch: fetchOrder,
  };
};

/**
 * Hook for creating orders
 */
export const useCreateOrder = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const createOrder = useCallback(async (orderData) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders`,
        orderData,
        {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
        }
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to create order";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    createOrder,
    loading,
    error,
  };
};

/**
 * Hook for updating order status
 */
export const useUpdateOrderStatus = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const updateStatus = useCallback(async (orderId, status) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/${orderId}/status`,
        { status },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update order status";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    updateStatus,
    loading,
    error,
  };
};

/**
 * Hook for order lookup by phone number
 */
export const useOrderLookup = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const lookupOrders = useCallback(async (phoneNumber) => {
    if (!phoneNumber.trim()) {
      setError("Please enter a phone number");
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const response = await axios.get(
        `${
          process.env.REACT_APP_API_BASE_URL
        }/api/orders/lookup?phoneNumber=${encodeURIComponent(phoneNumber)}`
      );

      const ordersData = response.data.$values || response.data || [];
      setOrders(ordersData);
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "No orders found for this phone number";
      setError(errorMessage);
      setOrders([]);
    } finally {
      setLoading(false);
    }
  }, []);

  const clearResults = useCallback(() => {
    setOrders([]);
    setError(null);
  }, []);

  return {
    orders,
    loading,
    error,
    lookupOrders,
    clearResults,
  };
};

/**
 * Hook for order statistics (Admin)
 */
export const useOrderStats = () => {
  const [stats, setStats] = useState({
    totalOrders: 0,
    pendingOrders: 0,
    completedOrders: 0,
    totalRevenue: 0,
    averageOrderValue: 0,
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchStats = useCallback(async (timeRange = "all") => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/stats?range=${timeRange}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setStats(response.data);
    } catch (err) {
      setError(
        err.response?.data?.message || "Failed to fetch order statistics"
      );
      console.error("Error fetching order stats:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchStats();
  }, [fetchStats]);

  return {
    stats,
    loading,
    error,
    refetch: fetchStats,
  };
};

/**
 * Hook for sales data (Admin)
 */
export const useSalesData = (timeRange = "month") => {
  const [salesData, setSalesData] = useState([]);
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchSalesData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/dashboard/sales-overview`,
        {
          params: { range: timeRange },
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setSalesData(response.data.chartData || []);
      setSummary(response.data.summary || null);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch sales data");
      console.error("Error fetching sales data:", err);
    } finally {
      setLoading(false);
    }
  }, [timeRange]);

  useEffect(() => {
    fetchSalesData();
  }, [fetchSalesData]);

  return {
    salesData,
    summary,
    loading,
    error,
    refetch: fetchSalesData,
  };
};

/**
 * Hook for sales by category data (Admin)
 */
export const useSalesByCategory = () => {
  const [categoryData, setCategoryData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchCategoryData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/orders/sales-by-category`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setCategoryData(response.data);
    } catch (err) {
      setError(
        err.response?.data?.message || "Failed to fetch category sales data"
      );
      console.error("Error fetching category sales data:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchCategoryData();
  }, [fetchCategoryData]);

  return {
    categoryData,
    loading,
    error,
    refetch: fetchCategoryData,
  };
};

/**
 * Hook for payment processing
 */
export const usePayment = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const processPayment = useCallback(async (paymentData) => {
    try {
      setLoading(true);
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/payment/process`,
        paymentData
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Payment processing failed";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const createPayPalOrder = useCallback(async (orderData) => {
    try {
      setLoading(true);
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/paypal/create-order`,
        orderData
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to create PayPal order";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  const capturePayPalOrder = useCallback(async (orderId) => {
    try {
      setLoading(true);
      setError(null);

      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/paypal/capture-order`,
        { orderId }
      );

      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to capture PayPal order";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    loading,
    error,
    processPayment,
    createPayPalOrder,
    capturePayPalOrder,
  };
};

```

### ClientApp\src\hooks\api\usePaymentMethod.js
```js
import { useState } from "react";
import axios from "axios";

export const usePaymentMethod = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState("");

  const addPaymentMethod = async (name, description) => {
    setLoading(true);
    setError(null);
    setMessage("");
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/PaymentMethod`,
        { name, description }
      );
      setMessage(`Thêm thành công: ${response.data.name}`);
      return response.data;
    } catch (err) {
      setError("Lỗi: " + err.message);
      setMessage("Lỗi: " + err.message);
      return null;
    } finally {
      setLoading(false);
    }
  };

  return { addPaymentMethod, loading, error, message, setMessage };
};

```

### ClientApp\src\hooks\api\useProductData.js
```js
import { useState, useEffect } from "react";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const useProductData = () => {
  const [categories, setCategories] = useState([]);
  const [brands, setBrands] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [categoriesRes, brandsRes] = await Promise.all([
          axios.get(`${API_BASE_URL}/api/categories`),
          axios.get(`${API_BASE_URL}/api/brands`),
        ]);
        setCategories(categoriesRes.data.$values || categoriesRes.data || []);
        setBrands(brandsRes.data.$values || brandsRes.data || []);
      } catch (err) {
        console.error("Error fetching product data:", err);
        setError("Không thể tải dữ liệu cho danh mục hoặc thương hiệu.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  return { categories, brands, loading, error };
};

```

### ClientApp\src\hooks\api\useProductForm.js
```js
import { useForm } from "react-hook-form";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const useProductForm = ({ onAddProduct, onClose, initialImages = [], initialImageUrls = [""] }) => {
  const { 
    register, 
    handleSubmit, 
    reset, 
    control, 
    setValue, 
    watch,
    formState
  } = useForm({
    defaultValues: {
      name: "",
      description: "",
      categoryId: "",
      brandId: "",
      images: initialImages,
      variants: [],
    },
    mode: "onChange",
  });

  const { errors } = formState;

  const handleFormSubmit = async (data, uploadedImages) => {
    try {
      if (uploadedImages.length === 0) {
        console.error("No images provided for the product.");
        return;
      }

      const productData = {
        ...data,
        categoryId: parseInt(data.categoryId),
        brandId: parseInt(data.brandId),
        images: uploadedImages,
        variants: data.variants.map((variant) => ({
          ...variant,
          price: parseFloat(variant.price),
          discountPrice: variant.discountPrice ? parseFloat(variant.discountPrice) : null,
          stockQuantity: parseInt(variant.stockQuantity) || 0,
        })),
      };

      const response = await axios.post(
        `${API_BASE_URL}/api/Products`,
        productData
      );

      onAddProduct(response.data);
      reset(); 
      onClose(); 
      return response.data;
    } catch (error) {
      console.error("Error adding product:", error);
      throw error;
    }
  };

  return {
    register,
    handleSubmit,
    control,
    resetForm: reset,
    setValue,
    watch,
    formState,
    handleFormSubmit,
  };
};

```

### ClientApp\src\hooks\api\useProductImageManager.js
```js
import { useState } from "react";
import axios from "axios";

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

export const useProductImageManager = (initialLocalImages = [], initialImageUrls = [""]) => {
  const [tabValue, setTabValue] = useState(0); // 0: Upload, 1: URL
  const [localImages, setLocalImages] = useState(initialLocalImages); // { file, preview, isPrimary }
  const [imageUrls, setImageUrls] = useState(initialImageUrls); // Mảng các URL ảnh
  const [uploadingImage, setUploadingImage] = useState(false);
  const [imageError, setImageError] = useState("");

  const handleImageUploadFromDevice = (e) => {
    const files = Array.from(e.target.files);
    if (!files.length) return;

    setImageError("");
    const newImages = files.map((file, idx) => ({
      file,
      preview: URL.createObjectURL(file),
      isPrimary: localImages.length === 0 && idx === 0,
    }));

    setLocalImages((prev) => {
      const combined = [...prev, ...newImages];
      if (
        combined.filter((img) => img.isPrimary).length > 1 ||
        (prev.length > 0 &&
          combined.some(
            (img) => img.isPrimary && !prev.find((p) => p.file === img.file)?.isPrimary
          ))
      ) {
        return combined.map((img, index) => ({ ...img, isPrimary: index === 0 }));
      }
      if (combined.length > 0 && !combined.some((img) => img.isPrimary)) {
        combined[0].isPrimary = true;
      }
      return combined;
    });
  };

  const handleRemoveLocalImage = (indexToRemove) => {
    const imageToRemove = localImages[indexToRemove];
    URL.revokeObjectURL(imageToRemove.preview);
    setLocalImages((prev) => {
        const updated = prev.filter((_, index) => index !== indexToRemove);
        if (imageToRemove.isPrimary && updated.length > 0 && !updated.some(img => img.isPrimary)) {
            updated[0].isPrimary = true;
        }
        return updated;
    });
  };

  const setPrimaryLocalImage = (indexToSetPrimary) => {
    setLocalImages(prev => prev.map((img, index) => ({
        ...img,
        isPrimary: index === indexToSetPrimary
    })));
  };

  const handleAddUrlField = () => {
    setImageUrls((prev) => [...prev, ""]);
  };

  const handleUrlInputChange = (index, value) => {
    setImageError("");
    const newUrls = [...imageUrls];
    newUrls[index] = value;
    setImageUrls(newUrls);
  };

  const handleRemoveUrlInput = (index) => {
    const newUrls = imageUrls.filter((_, i) => i !== index);
    setImageUrls(newUrls);
  };

  const processImagesForSubmission = async () => {
    setUploadingImage(true);
    setImageError("");
    let processedImages = [];

    try {
      if (tabValue === 0) {
        if (localImages.length === 0) {
          setImageError("Vui lòng chọn ít nhất một ảnh để tải lên.");
          setUploadingImage(false);
          return { error: "Vui lòng chọn ít nhất một ảnh để tải lên.", images: [] };
        }

        processedImages = await Promise.all(
          localImages.map(async (img) => {
            const formData = new FormData();
            formData.append("file", img.file);
            const response = await axios.post(
              `${API_BASE_URL}/api/upload`,
              formData,
              { headers: { "Content-Type": "multipart/form-data" } }
            );
            return {
              imageUrl: response.data.imageUrl,
              isPrimary: img.isPrimary,
            };
          })
        );
      } else {
        const validUrls = imageUrls.filter(url => url && url.trim() !== "");
        if (validUrls.length === 0) {
          setImageError("Vui lòng nhập ít nhất một URL ảnh hợp lệ.");
          setUploadingImage(false);
          return { error: "Vui lòng nhập ít nhất một URL ảnh hợp lệ.", images: [] };
        }
        processedImages = validUrls.map((url, index) => ({
          imageUrl: url,
          isPrimary: index === 0,
        }));
      }
    } catch (error) {
      console.error("Error processing images:", error);
      setImageError("Lỗi trong quá trình xử lý ảnh. Vui lòng thử lại.");
      setUploadingImage(false);
      return { error: "Lỗi trong quá trình xử lý ảnh.", images: [] };
    }

    setUploadingImage(false);
    if (processedImages.length > 0 && !processedImages.some(img => img.isPrimary)) {
        processedImages[0].isPrimary = true;
    }
    return { images: processedImages, error: null };
  };

  const resetImageManager = () => {
    setLocalImages(initialLocalImages);
    imageUrls.forEach(url => { if (url && url.startsWith('blob:')) URL.revokeObjectURL(url); });
    localImages.forEach(img => URL.revokeObjectURL(img.preview));
    setImageUrls(initialImageUrls);
    setTabValue(0);
    setImageError("");
    setUploadingImage(false);
  };

  return {
    tabValue,
    setTabValue,
    localImages,
    handleImageUploadFromDevice,
    handleRemoveLocalImage,
    setPrimaryLocalImage,
    imageUrls,
    handleAddUrlField,
    handleUrlInputChange,
    handleRemoveUrlInput,
    uploadingImage,
    imageError,
    setImageError,
    processImagesForSubmission,
    resetImageManager,
  };
};

```

### ClientApp\src\hooks\api\useProducts.js
```js
import { useState, useEffect, useCallback, useMemo } from "react";
import { useApi, usePost, usePut, useDelete } from "./useApi";

/**
 * Hook for fetching products
 */
export const useProducts = (filters = {}) => {
  const {
    data: products,
    loading,
    error,
    execute,
  } = useApi("/api/Products", {
    immediate: true,
    defaultValue: [],
    transform: (data) => data.$values || data || [],
  });

  const filteredProducts = useMemo(() => {
    if (!products) return [];

    let filtered = [...products];

    // Apply category filter
    if (filters.categoryId) {
      filtered = filtered.filter(
        (product) => product.categoryId === filters.categoryId
      );
    }

    // Apply brand filter
    if (filters.brandId) {
      filtered = filtered.filter(
        (product) => product.brandId === filters.brandId
      );
    }

    // Apply price range filter
    if (filters.priceRange) {
      const { min, max } = filters.priceRange;
      filtered = filtered.filter((product) => {
        const price =
          product.variants?.[0]?.discountPrice ||
          product.variants?.[0]?.price ||
          0;
        return price >= min && price <= max;
      });
    }

    // Apply search filter
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(
        (product) =>
          product.name.toLowerCase().includes(searchLower) ||
          product.description?.toLowerCase().includes(searchLower)
      );
    }

    return filtered;
  }, [products, filters]);

  return {
    products: filteredProducts,
    allProducts: products,
    loading,
    error,
    refetch: execute,
  };
};

/**
 * Hook for fetching a single product
 */
export const useProduct = (productId) => {
  const {
    data: product,
    loading,
    error,
    execute,
  } = useApi(productId ? `/api/Products/${productId}` : null, {
    immediate: !!productId,
  });

  return {
    product,
    loading,
    error,
    refetch: execute,
  };
};

/**
 * Hook for fetching product categories
 */
export const useCategories = () => {
  const {
    data: categories,
    loading,
    error,
    execute,
  } = useApi("/api/categories", {
    immediate: true,
    defaultValue: [],
    transform: (data) => data.$values || data || [],
  });

  return {
    categories,
    loading,
    error,
    refetch: execute,
  };
};

/**
 * Hook for fetching brands
 */
export const useBrands = () => {
  const {
    data: brands,
    loading,
    error,
    execute,
  } = useApi("/api/brands", {
    immediate: true,
    defaultValue: [],
    transform: (data) => data.$values || data || [],
  });

  return {
    brands,
    loading,
    error,
    refetch: execute,
  };
};

/**
 * Hook for product search
 */
export const useProductSearch = () => {
  const [searchResults, setSearchResults] = useState(null);
  const [isSearching, setIsSearching] = useState(false);
  const [searchError, setSearchError] = useState(null);

  const search = useCallback(async (query) => {
    if (!query.trim()) {
      setSearchResults(null);
      return;
    }

    try {
      setIsSearching(true);
      setSearchError(null);

      const response = await fetch(
        `${
          process.env.REACT_APP_API_BASE_URL
        }/api/search?query=${encodeURIComponent(query)}`
      );

      if (!response.ok) throw new Error("Search failed");

      const data = await response.json();
      setSearchResults(data);
    } catch (err) {
      setSearchError(err.message);
      setSearchResults(null);
    } finally {
      setIsSearching(false);
    }
  }, []);

  const clearSearch = useCallback(() => {
    setSearchResults(null);
    setSearchError(null);
  }, []);

  return {
    searchResults,
    isSearching,
    searchError,
    search,
    clearSearch,
  };
};

/**
 * Hook for managing compare products
 */
export const useCompareProducts = () => {
  const [compareList, setCompareList] = useState([]);
  const [compareProducts, setCompareProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  // Load compare list from localStorage
  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem("compareList") || "[]");
    setCompareList(saved);
  }, []);

  // Fetch product details when compare list changes
  useEffect(() => {
    const fetchCompareProducts = async () => {
      if (compareList.length === 0) {
        setCompareProducts([]);
        return;
      }

      try {
        setLoading(true);
        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/Products/compare`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(compareList),
          }
        );

        if (!response.ok) throw new Error("Failed to fetch compare products");

        const data = await response.json();
        setCompareProducts(data);
      } catch (error) {
        console.error("Error fetching compare products:", error);
        setCompareProducts([]);
      } finally {
        setLoading(false);
      }
    };

    fetchCompareProducts();
  }, [compareList]);

  const addToCompare = useCallback(
    (productId) => {
      const newList = [...compareList];
      if (!newList.includes(productId) && newList.length < 4) {
        newList.push(productId);
        setCompareList(newList);
        localStorage.setItem("compareList", JSON.stringify(newList));
        window.dispatchEvent(new Event("compareListChanged"));
      }
    },
    [compareList]
  );

  const removeFromCompare = useCallback(
    (productId) => {
      const newList = compareList.filter((id) => id !== productId);
      setCompareList(newList);
      localStorage.setItem("compareList", JSON.stringify(newList));
      window.dispatchEvent(new Event("compareListChanged"));
    },
    [compareList]
  );

  const clearCompareList = useCallback(() => {
    setCompareList([]);
    setCompareProducts([]);
    localStorage.removeItem("compareList");
    window.dispatchEvent(new Event("compareListChanged"));
  }, []);

  return {
    compareList,
    compareProducts,
    loading,
    addToCompare,
    removeFromCompare,
    clearCompareList,
    canAddMore: compareList.length < 4,
  };
};

/**
 * Hook for fetching related products
 */
export const useRelatedProducts = (productId, brandId, categoryId) => {
  const [relatedProducts, setRelatedProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRelatedProducts = async () => {
      if (!productId) return;

      try {
        setLoading(true);
        setError(null);

        const [productsRes, brandsRes] = await Promise.all([
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/Products`),
          fetch(`${process.env.REACT_APP_API_BASE_URL}/api/brands`),
        ]);

        if (!productsRes.ok || !brandsRes.ok) {
          throw new Error("Failed to fetch related products");
        }

        const [productsData, brandsData] = await Promise.all([
          productsRes.json(),
          brandsRes.json(),
        ]);

        const products = productsData.$values || productsData || [];
        const brands = brandsData.$values || brandsData || [];

        // Filter related products (same brand or category, exclude current product)
        const related = products
          .filter(
            (product) =>
              product.id !== parseInt(productId) &&
              (product.brandId === brandId || product.categoryId === categoryId)
          )
          .slice(0, 8)
          .map((product) => {
            const brand = brands.find((b) => b.id === product.brandId);
            return {
              ...product,
              brand: brand || { name: "Unknown", logo: null },
            };
          });

        setRelatedProducts(related);
      } catch (err) {
        setError(err.message);
        setRelatedProducts([]);
      } finally {
        setLoading(false);
      }
    };

    fetchRelatedProducts();
  }, [productId, brandId, categoryId]);

  return {
    relatedProducts,
    loading,
    error,
  };
};

/**
 * Hook for product specifications
 */
export const useProductSpecifications = (productType, productId) => {
  const [specs, setSpecs] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchSpecifications = async () => {
      if (!productType || !productId) return;

      try {
        setLoading(true);
        setError(null);

        let endpoint;
        switch (productType) {
          case "phone":
            endpoint = "PhoneSpecifications";
            break;
          case "laptop":
            endpoint = "LaptopSpecifications";
            break;
          case "headphone":
            endpoint = "HeadphoneSpecifications";
            break;
          default:
            throw new Error("Unsupported product type");
        }

        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/${endpoint}/product/${productId}`
        );

        if (!response.ok) {
          throw new Error("Failed to fetch specifications");
        }

        const data = await response.json();
        setSpecs(data);
      } catch (err) {
        setError(err.message);
        setSpecs(null);
      } finally {
        setLoading(false);
      }
    };

    fetchSpecifications();
  }, [productType, productId]);

  return {
    specs,
    loading,
    error,
  };
};

```

### ClientApp\src\hooks\api\useProductSpecificationManager.js
```js
import { useState, useEffect, useCallback, useMemo } from "react";
import axios from "axios";

const API_BASE_URL_SPECS = `${process.env.REACT_APP_API_BASE_URL}/api/Specifications`;

export const useSpecificationForm = (product, open, onClose) => {
  const [specifications, setSpecifications] = useState([]); // Now an array
  const [loadingState, setLoadingState] = useState({
    fetch: false,
    submit: false,
    delete: false
  });
  const [snackbarState, setSnackbarState] = useState({ open: false, message: '', severity: 'info' });
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [specToDelete, setSpecToDelete] = useState(null); // To store the specific spec to delete

  const showSnackbar = (message, severity = 'success') => {
    setSnackbarState({ open: true, message, severity });
  };

  const resetComponentState = useCallback(() => {
    setSpecifications([]);
    setDeleteDialogOpen(false);
    setSpecToDelete(null);
  }, []);

  const fetchSpecifications = useCallback(async () => {
    if (!product?.id) {
      setSpecifications([]);
      return;
    }
    setLoadingState(prev => ({ ...prev, fetch: true }));
    try {
      const response = await axios.get(`${API_BASE_URL_SPECS}/product/${product.id}`);
      setSpecifications(response.data.$values || response.data || []);
    } catch (error) {
      console.error("Lỗi khi tải thông số kỹ thuật:", error);
      showSnackbar(error.response?.data?.message || error.message || "Không thể tải thông số kỹ thuật.", "error");
      setSpecifications([]);
    } finally {
      setLoadingState(prev => ({ ...prev, fetch: false }));
    }
  }, [product?.id]);

  const handleAddOrUpdateSpecification = useCallback(async (specData) => {
    if (!product?.id) {
      showSnackbar("Không thể lưu: Thiếu thông tin sản phẩm.", "error");
      return;
    }
    setLoadingState(prev => ({ ...prev, submit: true }));
    const payload = { ...specData, productId: product.id };

    try {
      let successMessage = "";
      if (specData.id) { // Update existing specification
        await axios.put(`${API_BASE_URL_SPECS}/${specData.id}`, payload);
        successMessage = 'Cập nhật thông số thành công!';
      } else { // Add new specification
        const postResponse = await axios.post(API_BASE_URL_SPECS, payload);
        successMessage = 'Thêm thông số thành công!';
      }
      showSnackbar(successMessage, "success");
      fetchSpecifications(); // Re-fetch to update the list
    } catch (error) {
      console.error("Lỗi khi lưu thông số:", error);
      const errorData = error.response?.data;
      let errorMsg = "Đã xảy ra lỗi khi lưu thông số.";
      if (typeof errorData === 'string') {
        errorMsg = errorData;
      } else if (errorData?.message) {
        errorMsg = errorData.message;
      } else if (errorData?.errors && typeof errorData.errors === 'object') {
        errorMsg = Object.values(errorData.errors).flat().join('; ');
      } else if (errorData?.title) {
        errorMsg = errorData.title;
      }
      showSnackbar(errorMsg, "error");
    } finally {
      setLoadingState(prev => ({ ...prev, submit: false }));
    }
  }, [product?.id, fetchSpecifications]);

  const handleDeleteSpecification = useCallback(async () => {
    if (!specToDelete) return;
    setLoadingState(prev => ({ ...prev, delete: true }));
    try {
      await axios.delete(`${API_BASE_URL_SPECS}/${specToDelete.id}`);
      showSnackbar("Thông số kỹ thuật đã được xóa thành công!", "success");
      setDeleteDialogOpen(false);
      setSpecToDelete(null);
      fetchSpecifications(); // Re-fetch to update the list
    } catch (error) {
      console.error("Lỗi khi xóa thông số:", error);
      showSnackbar(error.response?.data?.message || error.message || "Không thể xóa thông số kỹ thuật.", "error");
    } finally {
      setLoadingState(prev => ({ ...prev, delete: false }));
    }
  }, [specToDelete, fetchSpecifications]);

  useEffect(() => {
    if (open && product) {
      fetchSpecifications();
    } else if (!open) {
      resetComponentState();
    }
  }, [open, product, fetchSpecifications, resetComponentState]);

  const handleDeleteClick = useCallback((spec) => {
    setSpecToDelete(spec);
    setDeleteDialogOpen(true);
  }, []);

  const handleCloseDeleteDialog = () => {
    if (!loadingState.delete) {
      setDeleteDialogOpen(false);
      setSpecToDelete(null);
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbarState(prev => ({ ...prev, open: false }));
  };

  const anyLoading = loadingState.fetch || loadingState.submit || loadingState.delete;
  const showInitialLoadSpinner = loadingState.fetch && specifications.length === 0 && open;
  const showRefetchProgressBar = loadingState.fetch && specifications.length > 0 && open;

  return {
    specifications,
    loadingState,
    snackbarState,
    deleteDialogOpen,
    specToDelete,
    anyLoading,
    showInitialLoadSpinner,
    showRefetchProgressBar,
    actions: {
      handleAddOrUpdateSpecification,
      handleDeleteSpecification,
      handleDeleteClick,
      handleCloseDeleteDialog,
      handleCloseSnackbar,
      showSnackbar
    }
  };
};

```

### ClientApp\src\hooks\api\useReviews.js
```js
import { useState, useEffect, useCallback } from "react";
import axios from "axios";

/**
 * Hook for managing product reviews
 */
export const useReviews = (productId) => {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [averageRating, setAverageRating] = useState(0);
  const [ratingDistribution, setRatingDistribution] = useState({
    5: 0,
    4: 0,
    3: 0,
    2: 0,
    1: 0,
  });

  const fetchReviews = useCallback(async () => {
    if (!productId) return;

    try {
      setLoading(true);
      setError(null);

      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/Review/product/${productId}`
      );

      const reviewsData = response.data.$values || response.data || [];
      setReviews(reviewsData);

      // Calculate average rating từ data reviews
      if (reviewsData.length > 0) {
        const totalRating = reviewsData.reduce(
          (sum, review) => sum + review.rating,
          0
        );
        setAverageRating(totalRating / reviewsData.length);

        // Calculate rating distribution
        const distribution = { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 };
        reviewsData.forEach((review) => {
          distribution[review.rating]++;
        });
        setRatingDistribution(distribution);
      } else {
        setAverageRating(0);
        setRatingDistribution({ 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 });
      }
    } catch (err) {
      setError(err.response?.data?.message || "Không thể tải đánh giá");
      console.error("Error fetching reviews:", err);
    } finally {
      setLoading(false);
    }
  }, [productId]);

  useEffect(() => {
    fetchReviews();
  }, [fetchReviews]);

  return {
    reviews,
    loading,
    error,
    averageRating,
    ratingDistribution,
    totalReviews: reviews.length,
    refetch: fetchReviews,
    fetchReviews, // Alias để tương thích với component hiện tại
    fetchAverageRating: fetchReviews, // Alias vì average rating được tính cùng lúc
  };
};

/**
 * Hook for submitting reviews
 */
export const useSubmitReview = (productId, onSuccess) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const submitReview = useCallback(
    async (reviewData) => {
      try {
        setLoading(true);
        setError(null);

        const token = localStorage.getItem("token");
        if (!token) {
          throw new Error("You must be logged in to submit a review");
        }

        if (!token) {
          throw new Error("You must be logged in to submit a review");
        }

        // Backend sẽ tự lấy userId từ JWT token
        const response = await axios.post(
          `${process.env.REACT_APP_API_BASE_URL}/api/Review`,
          {
            productId: parseInt(productId),
            rating: reviewData.rating,
            comment: reviewData.comment,
          },
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        if (onSuccess) {
          onSuccess(response.data);
        }

        return response.data;
      } catch (err) {
        const errorMessage =
          err.response?.data?.message || "Failed to submit review";
        setError(errorMessage);
        throw new Error(errorMessage);
      } finally {
        setLoading(false);
      }
    },
    [productId, onSuccess]
  );

  return {
    submitReview,
    loading,
    error,
    setError,
  };
};

export const useUserReview = (userId, productId) => {
  const [userReview, setUserReview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchUserReview = useCallback(async () => {
    if (!userId || !productId) {
      setUserReview(null);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/Review/user/${userId}/product/${productId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setUserReview(response.data);
    } catch (err) {
      if (err.response && err.response.status === 404) {
        setUserReview(null); // No review found for this user/product
      } else {
        setError(err.response?.data?.message || "Không thể tải đánh giá của bạn");
        console.error("Error fetching user review:", err);
      }
    } finally {
      setLoading(false);
    }
  }, [userId, productId]);

  useEffect(() => {
    fetchUserReview();
  }, [fetchUserReview]);

  return { userReview, loading, error, refetchUserReview: fetchUserReview };
};

export const useReviewModeration = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const approveReview = useCallback(async (reviewId) => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/Review/${reviewId}/approve`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      return true;
    } catch (err) {
      setError(err.response?.data?.message || "Không thể duyệt đánh giá");
      console.error("Error approving review:", err);
      return false;
    } finally {
      setLoading(false);
    }
  }, []);

  const rejectReview = useCallback(async (reviewId) => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/Review/${reviewId}/reject`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      return true;
    } catch (err) {
      setError(err.response?.data?.message || "Không thể từ chối đánh giá");
      console.error("Error rejecting review:", err);
      return false;
    } finally {
      setLoading(false);
    }
  }, []);

  return { approveReview, rejectReview, loading, error };
};

export const useReviewAnalytics = () => {
  const [analytics, setAnalytics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchAnalytics = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/Review/analytics`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setAnalytics(response.data);
    } catch (err) {
      setError(err.response?.data?.message || "Không thể tải phân tích đánh giá");
      console.error("Error fetching review analytics:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAnalytics();
  }, [fetchAnalytics]);

  return { analytics, loading, error, refetchAnalytics: fetchAnalytics };
};

export const useAllReviews = (filters = {}) => {
  const [allReviews, setAllReviews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchAllReviews = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const token = localStorage.getItem("token");

      const queryParams = new URLSearchParams();
      for (const key in filters) {
        if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {
          queryParams.append(key, filters[key]);
        }
      }

      const url = `${process.env.REACT_APP_API_BASE_URL}/api/Review/all?${queryParams.toString()}`;

      const response = await axios.get(
        url,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      setAllReviews(response.data.$values || response.data || []);
    } catch (err) {
      setError(err.response?.data?.message || "Không thể tải tất cả đánh giá");
      console.error("Error fetching all reviews:", err);
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    fetchAllReviews();
  }, [fetchAllReviews]);

  return { allReviews, loading, error, refetchAllReviews: fetchAllReviews };
};

```

### ClientApp\src\hooks\api\useSearch.js
```js
import { useState, useCallback } from "react";
import axios from "axios";

export const useSearch = () => {
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const search = useCallback(async (query, limit = 5) => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/search`,
        {
          params: { query, limit },
        }
      );
      setResults(response.data);
      return response.data;
    } catch (err) {
      setError(err.response?.data?.message || "Search failed");
      setResults({ products: [], categories: [], brands: [], totalResults: 0 });
    } finally {
      setLoading(false);
    }
  }, []);

  return { results, loading, error, search };
};

```

### ClientApp\src\hooks\api\useUserProfile.js
```js
import { useState, useCallback } from "react";
import axios from "axios";
import { jwtDecode } from "jwt-decode";

export const useUserProfile = () => {
  const [user, setUser] = useState({
    fullName: "",
    email: "",
    role: "",
    phoneNumber: "",
    gender: "",
    dateOfBirth: "",
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [userId, setUserId] = useState(null);

  // Lấy userId từ token khi khởi tạo
  const initUserId = useCallback(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const id = parseInt(decoded.sub, 10);
        if (Number.isInteger(id)) {
          setUserId(id);
          return id;
        }
      } catch (err) {
        setError("Lỗi khi giải mã token");
      }
    }
    return null;
  }, []);

  const fetchUserProfile = useCallback(async (id) => {
    setLoading(true);
    setError(null);
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/users/${id}`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setUser(response.data);
      return response.data;
    } catch (err) {
      setError(err.response?.data?.message || "Lỗi khi lấy thông tin user");
    } finally {
      setLoading(false);
    }
  }, []);

  const updateUserProfile = useCallback(async (updatedUser) => {
    setLoading(true);
    setError(null);
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/users/profile`,
        updatedUser,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setUser(response.data.user);
      return response.data.user;
    } catch (err) {
      setError(err.response?.data?.message || "Cập nhật thất bại");
      throw err;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    user,
    setUser,
    loading,
    error,
    userId,
    setUserId,
    initUserId,
    fetchUserProfile,
    updateUserProfile,
  };
};

```

### ClientApp\src\hooks\auth\useAuth.js
```js
import {
  useState,
  useEffect,
  useCallback,
  createContext,
  useContext,
} from "react";
import { jwtDecode } from "jwt-decode";
import axios from "axios";

// Create Auth Context
const AuthContext = createContext();

/**
 * Auth Provider Component
 */
export const AuthProvider = ({ children }) => {
  const auth = useAuth();
  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;
};

/**
 * Hook to use auth context
 */
export const useAuthContext = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuthContext must be used within an AuthProvider");
  }
  return context;
};

/**
 * Main authentication hook
 */
export const useAuth = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [sessionExpired, setSessionExpired] = useState(false);

  // Check if user is authenticated on mount
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const currentTime = Date.now() / 1000;

        if (decoded.exp > currentTime) {
          setUser({
            id: parseInt(decoded.sub, 10),
            email: decoded.email,
            role:
              decoded.role ||
              decoded[
                "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
              ],
            fullName:
              decoded.name ||
              decoded[
                "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
              ],
          });
          setIsAuthenticated(true);
        } else {
          // Token expired
          localStorage.removeItem("token");
          setSessionExpired(true);
        }
      } catch (error) {
        console.error("Error decoding token:", error);
        localStorage.removeItem("token");
        setSessionExpired(true);
      }
    }
    setLoading(false);
  }, []);

  const login = useCallback(async (email, password) => {
    setSessionExpired(false);
    try {
      setLoading(true);
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/auth/login`,
        { email, password }
      );

      const { token, user: userData } = response.data;

      localStorage.setItem("token", token);
      setUser(userData);
      setIsAuthenticated(true);

      return { success: true, user: userData };
    } catch (error) {
      const message = error.response?.data?.message || "Login failed";
      return { success: false, error: message };
    } finally {
      setLoading(false);
    }
  }, []);

  const register = useCallback(async (userData) => {
    setSessionExpired(false);
    try {
      setLoading(true);
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/auth/register`,
        userData
      );

      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      setUser(newUser);
      setIsAuthenticated(true);

      return { success: true, user: newUser };
    } catch (error) {
      const message = error.response?.data?.message || "Registration failed";
      return { success: false, error: message };
    } finally {
      setLoading(false);
    }
  }, []);

  const logout = useCallback(() => {
    localStorage.removeItem("token");
    setUser(null);
    setIsAuthenticated(false);
    setSessionExpired(false);
  }, []);

  const updateProfile = useCallback(
    async (updates) => {
      if (!user) throw new Error("User not authenticated");

      try {
        setLoading(true);
        const token = localStorage.getItem("token");

        const response = await axios.put(
          `${process.env.REACT_APP_API_BASE_URL}/api/users/${user.id}`,
          updates,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        const updatedUser = response.data;
        setUser(updatedUser);

        return { success: true, user: updatedUser };
      } catch (error) {
        const message =
          error.response?.data?.message || "Profile update failed";
        return { success: false, error: message };
      } finally {
        setLoading(false);
      }
    },
    [user]
  );

  const hasRole = useCallback(
    (role) => {
      return user?.role === role;
    },
    [user]
  );

  const isAdmin = useCallback(() => {
    return hasRole("Admin");
  }, [hasRole]);

  return {
    user,
    loading,
    isAuthenticated,
    sessionExpired,
    login,
    register,
    logout,
    updateProfile,
    hasRole,
    isAdmin,
  };
};

/**
 * Hook for user profile management
 */
export const useProfile = () => {
  const [profile, setProfile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchProfile = useCallback(async (userId) => {
    if (!userId) return;

    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.get(
        `${process.env.REACT_APP_API_BASE_URL}/api/users/${userId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setProfile(response.data);
    } catch (err) {
      setError(err.response?.data?.message || "Failed to fetch profile");
    } finally {
      setLoading(false);
    }
  }, []);

  const updateProfile = useCallback(async (userId, updates) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      const response = await axios.put(
        `${process.env.REACT_APP_API_BASE_URL}/api/users/${userId}`,
        updates,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setProfile(response.data);
      return response.data;
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to update profile";
      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    profile,
    loading,
    error,
    fetchProfile,
    updateProfile,
  };
};

/**
 * Hook for password management
 */
export const usePassword = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const changePassword = useCallback(async (currentPassword, newPassword) => {
    try {
      setLoading(true);
      setError(null);

      const token = localStorage.getItem("token");
      await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/auth/change-password`,
        {
          currentPassword,
          newPassword,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      return { success: true };
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to change password";
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }, []);

  const resetPassword = useCallback(async (email) => {
    try {
      setLoading(true);
      setError(null);

      await axios.post(
        `${process.env.REACT_APP_API_BASE_URL}/api/auth/reset-password`,
        { email }
      );

      return { success: true };
    } catch (err) {
      const errorMessage =
        err.response?.data?.message || "Failed to send reset email";
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    loading,
    error,
    changePassword,
    resetPassword,
  };
};

```

### ClientApp\src\hooks\ui\useUI.js
```js
import { useState, useEffect, useCallback, useRef } from "react";

/**
 * Hook for debouncing values
 */
export const useDebounce = (value, delay) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

/**
 * Hook for managing loading states
 */
export const useLoading = (initialState = {}) => {
  const [loadingStates, setLoadingStates] = useState(initialState);

  const setLoading = useCallback((key, isLoading) => {
    setLoadingStates((prev) => ({
      ...prev,
      [key]: isLoading,
    }));
  }, []);

  const isLoading = useCallback(
    (key) => {
      return !!loadingStates[key];
    },
    [loadingStates]
  );

  const resetLoading = useCallback(() => {
    setLoadingStates({});
  }, []);

  return {
    loadingStates,
    setLoading,
    isLoading,
    resetLoading,
  };
};

/**
 * Hook for managing notification/toast states
 */
export const useNotification = () => {
  const [notification, setNotification] = useState(null);

  const showNotification = useCallback(
    (message, type = "info", duration = 3000, title = "") => {
      setNotification({ message, type, title });

      if (duration > 0) {
        setTimeout(() => {
          setNotification(null);
        }, duration);
      }
    },
    []
  );

  const hideNotification = useCallback(() => {
    setNotification(null);
  }, []);

  const showSuccess = useCallback(
    (message, title = "Success") => {
      showNotification(message, "success", 3000, title);
    },
    [showNotification]
  );

  const showError = useCallback(
    (message, title = "Error") => {
      showNotification(message, "error", 5000, title);
    },
    [showNotification]
  );

  const showWarning = useCallback(
    (message, title = "Warning") => {
      showNotification(message, "warning", 4000, title);
    },
    [showNotification]
  );

  const showInfo = useCallback(
    (message, title = "Info") => {
      showNotification(message, "info", 3000, title);
    },
    [showNotification]
  );

  return {
    notification,
    showNotification,
    hideNotification,
    showSuccess,
    showError,
    showWarning,
    showInfo,
  };
};

/**
 * Hook for managing modal states
 */
export const useModal = (initialState = false) => {
  const [isOpen, setIsOpen] = useState(initialState);

  const open = useCallback(() => setIsOpen(true), []);
  const close = useCallback(() => setIsOpen(false), []);
  const toggle = useCallback(() => setIsOpen((prev) => !prev), []);

  return {
    isOpen,
    open,
    close,
    toggle,
  };
};

/**
 * Hook for managing pagination
 */
export const usePagination = (totalItems, itemsPerPage = 10) => {
  const [currentPage, setCurrentPage] = useState(1);

  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, totalItems);

  const goToPage = useCallback(
    (page) => {
      const newPage = Math.max(1, Math.min(page, totalPages));
      setCurrentPage(newPage);
    },
    [totalPages]
  );

  const nextPage = useCallback(() => {
    goToPage(currentPage + 1);
  }, [currentPage, goToPage]);

  const prevPage = useCallback(() => {
    goToPage(currentPage - 1);
  }, [currentPage, goToPage]);

  const canGoNext = currentPage < totalPages;
  const canGoPrev = currentPage > 1;

  // Reset to page 1 when total items change significantly
  useEffect(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(1);
    }
  }, [totalPages, currentPage]);

  return {
    currentPage,
    totalPages,
    startIndex,
    endIndex,
    itemsPerPage,
    canGoNext,
    canGoPrev,
    goToPage,
    nextPage,
    prevPage,
    setCurrentPage,
  };
};

/**
 * Hook for managing form state
 */
export const useForm = (initialValues = {}, validate) => {
  const [values, setValues] = useState(initialValues);
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const setValue = useCallback(
    (name, value) => {
      setValues((prev) => ({ ...prev, [name]: value }));

      // Clear error when user starts typing
      if (errors[name]) {
        setErrors((prev) => ({ ...prev, [name]: undefined }));
      }
    },
    [errors]
  );

  const setFieldTouched = useCallback((name, isTouched = true) => {
    setTouched((prev) => ({ ...prev, [name]: isTouched }));
  }, []);

  const handleChange = useCallback(
    (e) => {
      const { name, value, type, checked } = e.target;
      setValue(name, type === "checkbox" ? checked : value);
    },
    [setValue]
  );

  const handleBlur = useCallback(
    (e) => {
      const { name } = e.target;
      setFieldTouched(name, true);

      if (validate) {
        const fieldErrors = validate({ ...values, [name]: values[name] });
        if (fieldErrors[name]) {
          setErrors((prev) => ({ ...prev, [name]: fieldErrors[name] }));
        }
      }
    },
    [values, validate, setFieldTouched]
  );

  const validateForm = useCallback(() => {
    if (!validate) return {};

    const formErrors = validate(values);
    setErrors(formErrors);
    return formErrors;
  }, [values, validate]);

  const resetForm = useCallback(
    (newValues = initialValues) => {
      setValues(newValues);
      setErrors({});
      setTouched({});
      setIsSubmitting(false);
    },
    [initialValues]
  );

  const handleSubmit = useCallback(
    (onSubmit) => {
      return async (e) => {
        if (e) {
          e.preventDefault();
        }

        setIsSubmitting(true);

        const formErrors = validateForm();
        const hasErrors = Object.keys(formErrors).length > 0;

        if (!hasErrors) {
          try {
            await onSubmit(values);
          } catch (error) {
            console.error("Form submission error:", error);
          }
        } else {
          // Mark all fields as touched to show errors
          const allTouched = Object.keys(values).reduce((acc, key) => {
            acc[key] = true;
            return acc;
          }, {});
          setTouched(allTouched);
        }

        setIsSubmitting(false);
      };
    },
    [values, validateForm]
  );

  const isValid = Object.keys(errors).length === 0;

  return {
    values,
    errors,
    touched,
    isSubmitting,
    isValid,
    setValue,
    setFieldTouched,
    handleChange,
    handleBlur,
    handleSubmit,
    resetForm,
    validateForm,
  };
};

/**
 * Hook for managing filters
 */
export const useFilters = (initialFilters = {}) => {
  const [filters, setFilters] = useState(initialFilters);

  const setFilter = useCallback((key, value) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  }, []);

  const removeFilter = useCallback((key) => {
    setFilters((prev) => {
      const newFilters = { ...prev };
      delete newFilters[key];
      return newFilters;
    });
  }, []);

  const clearFilters = useCallback(() => {
    setFilters(initialFilters);
  }, [initialFilters]);

  const hasActiveFilters = useCallback(() => {
    return Object.keys(filters).some((key) => {
      const value = filters[key];
      return (
        value !== null &&
        value !== undefined &&
        value !== "" &&
        (Array.isArray(value) ? value.length > 0 : true)
      );
    });
  }, [filters]);

  return {
    filters,
    setFilter,
    removeFilter,
    clearFilters,
    hasActiveFilters: hasActiveFilters(),
  };
};

/**
 * Hook for handling click outside
 */
export const useClickOutside = (callback) => {
  const ref = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (ref.current && !ref.current.contains(event.target)) {
        callback();
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [callback]);

  return ref;
};

/**
 * Hook for managing scroll position
 */
export const useScroll = () => {
  const [scrollPosition, setScrollPosition] = useState(0);

  useEffect(() => {
    const updatePosition = () => {
      setScrollPosition(window.pageYOffset);
    };

    window.addEventListener("scroll", updatePosition);
    updatePosition();

    return () => window.removeEventListener("scroll", updatePosition);
  }, []);

  const scrollToTop = useCallback(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, []);

  const scrollToElement = useCallback((elementId) => {
    const element = document.getElementById(elementId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
    }
  }, []);

  return {
    scrollPosition,
    scrollToTop,
    scrollToElement,
  };
};

/**
 * Hook for managing local storage
 */
export const useLocalStorage = (key, initialValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  const setValue = useCallback(
    (value) => {
      try {
        setStoredValue(value);
        window.localStorage.setItem(key, JSON.stringify(value));
      } catch (error) {
        console.error(`Error setting localStorage key "${key}":`, error);
      }
    },
    [key]
  );

  const removeValue = useCallback(() => {
    try {
      setStoredValue(initialValue);
      window.localStorage.removeItem(key);
    } catch (error) {
      console.error(`Error removing localStorage key "${key}":`, error);
    }
  }, [key, initialValue]);

  return [storedValue, setValue, removeValue];
};

```

### ClientApp\src\pages\Admin\AnalyticsPage.jsx
```jsx
import Header from "../../components/Admin/common/Header";
import OverviewCards from "../../components/Admin/analytics/OverviewCards";
import RevenueChart from "../../components/Admin/analytics/RevenueChart";
import ChannelPerformance from "../../components/Admin/analytics/ChannelPerformance";
import ProductPerformance from "../../components/Admin/analytics/ProductPerformance";
import UserRetention from "../../components/Admin/analytics/UserRetention";
import CustomerSegmentation from "../../components/Admin/analytics/CustomerSegmentation";
import AIPoweredInsights from "../../components/Admin/analytics/AIPoweredInsights";

const AnalyticsPage = () => {
	return (
		<div className='flex-1 overflow-auto relative z-10 bg-gray-900'>
			<Header title={"Phân tích dữ liệu"} />

			<main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
				<OverviewCards />
				<RevenueChart />

				<div className='grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8'>
					<ChannelPerformance />
					<ProductPerformance />
					<UserRetention />
					<CustomerSegmentation />
				</div>

				<AIPoweredInsights />
			</main>
		</div>
	);
};
export default AnalyticsPage;

```

### ClientApp\src\pages\Admin\BestSellerAdminPage.js
```js
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import BestSellerSection from '@/components/BestSellers/BestSellers'; // Import the BestSellerSection component

const BestSellerAdminPage = () => {
  const [homepageConfig, setHomepageConfig] = useState(null);
  const [bestSellerProductIds, setBestSellerProductIds] = useState([]);
  const [bestSellerProductsDetails, setBestSellerProductsDetails] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [searchLoading, setSearchLoading] = useState(false);

  const fetchHomepageConfig = useCallback(async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`);
      const config = response.data;
      setHomepageConfig(config);
      if (config.components.best_seller && config.components.best_seller.productIds) {
        setBestSellerProductIds(config.components.best_seller.productIds);
      }
    } catch (err) {
      setError('Failed to load homepage configuration.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchProductDetails = useCallback(async (ids) => {
    if (ids.length === 0) {
      setBestSellerProductsDetails([]);
      return;
    }
    try {
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products/by-ids?ids=${ids.join(',')}`);
      setBestSellerProductsDetails(response.data);
    } catch (err) {
      console.error('Failed to fetch product details:', err);
      setBestSellerProductsDetails([]); // Clear if error
    }
  }, []);

  useEffect(() => {
    fetchHomepageConfig();
  }, [fetchHomepageConfig]);

  useEffect(() => {
    if (bestSellerProductIds.length > 0) {
      fetchProductDetails(bestSellerProductIds);
    } else {
      setBestSellerProductsDetails([]);
    }
  }, [bestSellerProductIds, fetchProductDetails]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      return;
    }
    try {
      setSearchLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/products/search?keyword=${searchQuery}`);
      // Filter out products already in the best seller list
      const filteredResults = response.data.filter(product => !bestSellerProductIds.includes(product.id));
      setSearchResults(filteredResults);
    } catch (err) {
      console.error('Failed to search products:', err);
      setSearchResults([]);
    } finally {
      setSearchLoading(false);
    }
  };

  const addProductToBestSellers = (product) => {
    if (!bestSellerProductIds.includes(product.id)) {
      setBestSellerProductIds(prevIds => [...prevIds, product.id]);
      setSearchResults(prevResults => prevResults.filter(p => p.id !== product.id)); // Remove from search results
    }
  };

  const removeProductFromBestSellers = (productId) => {
    setBestSellerProductIds(prevIds => prevIds.filter(id => id !== productId));
  };

  const onDragEnd = (result) => {
    if (!result.destination) return;

    const reorderedIds = Array.from(bestSellerProductIds);
    const [removed] = reorderedIds.splice(result.source.index, 1);
    reorderedIds.splice(result.destination.index, 0, removed);

    setBestSellerProductIds(reorderedIds);
  };

  const handleSave = async () => {
    if (!homepageConfig) return;

    try {
      setSaving(true);
      const updatedConfig = { ...homepageConfig };
      updatedConfig.components.best_seller = {
        ...updatedConfig.components.best_seller,
        enabled: true, // Ensure it's enabled when saving products
        productIds: bestSellerProductIds,
      };
      // Ensure 'best_seller' is in the layout if not already
      if (!updatedConfig.layout.includes('best_seller')) {
        updatedConfig.layout.push('best_seller');
      }

      await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`, updatedConfig);
      alert('Best Seller configuration saved successfully!');
    } catch (err) {
      setError('Failed to save Best Seller configuration.');
      console.error(err);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <div className="text-white">Loading Best Seller Admin...</div>;
  }

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  const previewData = {
    enabled: homepageConfig?.components?.best_seller?.enabled || true,
    title: homepageConfig?.components?.best_seller?.title || "Best Sellers",
    productIds: bestSellerProductIds,
  };

  return (
    <div className="container mx-auto p-4 text-white">
      <h1 className="text-3xl font-bold mb-6">Manage Best Sellers</h1>

      {/* Search and Add Products */}
      <div className="mb-8 p-4 border border-gray-700 rounded-lg">
        <h2 className="text-2xl font-semibold mb-4">Add Products</h2>
        <div className="flex mb-4">
          <input
            type="text"
            className="flex-grow p-2 rounded-l-md bg-gray-800 border border-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-electric-blue"
            placeholder="Search products by name..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={(e) => { if (e.key === 'Enter') handleSearch(); }}
          />
          <button
            onClick={handleSearch}
            className="bg-electric-blue text-white px-4 py-2 rounded-r-md hover:bg-electric-blue-dark transition-colors duration-200"
            disabled={searchLoading}
          >
            {searchLoading ? 'Searching...' : 'Search'}
          </button>
        </div>
        <div className="max-h-60 overflow-y-auto border border-gray-700 rounded-md p-2">
          {searchResults.length === 0 && !searchLoading && <p className="text-gray-400">No results or start typing to search.</p>}
          {searchResults.map(product => (
            <div key={product.id} className="flex items-center justify-between p-2 border-b border-gray-700 last:border-b-0">
              <div className="flex items-center">
                {product.images && product.images.length > 0 && (
                  <img src={product.images[0].imageUrl} alt={product.name} className="w-12 h-12 object-cover rounded mr-3" />
                )}
                <span>{product.name}</span>
              </div>
              <button
                onClick={() => addProductToBestSellers(product)}
                className="bg-green-600 text-white px-3 py-1 rounded-md text-sm hover:bg-green-700 transition-colors duration-200"
              >
                Add
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Best Seller List (Drag and Drop) */}
      <div className="mb-8 p-4 border border-gray-700 rounded-lg">
        <h2 className="text-2xl font-semibold mb-4">Current Best Sellers ({bestSellerProductIds.length})</h2>
        <DragDropContext onDragEnd={onDragEnd}>
          <Droppable droppableId="best-sellers-list">
            {(provided) => (
              <div
                {...provided.droppableProps}
                ref={provided.innerRef}
                className="min-h-[100px] border border-gray-600 rounded-md p-2 bg-gray-800"
              >
                {bestSellerProductsDetails.length === 0 && <p className="text-gray-400 text-center py-4">Drag products here or add from search.</p>}
                {bestSellerProductsDetails.map((product, index) => (
                  <Draggable key={product.id} draggableId={product.id.toString()} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        className="flex items-center justify-between p-3 mb-2 bg-gray-700 rounded-md shadow-md border border-gray-600"
                      >
                        <div className="flex items-center">
                          {product.images && product.images.length > 0 && (
                            <img src={product.images[0].imageUrl} alt={product.name} className="w-16 h-16 object-cover rounded mr-4" />
                          )}
                          <span className="font-medium">{product.name}</span>
                        </div>
                        <button
                          onClick={() => removeProductFromBestSellers(product.id)}
                          className="bg-red-600 text-white px-3 py-1 rounded-md text-sm hover:bg-red-700 transition-colors duration-200"
                        >
                          Remove
                        </button>
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
        <button
          onClick={handleSave}
          className="mt-6 bg-blue-600 text-white px-6 py-3 rounded-md text-lg hover:bg-blue-700 transition-colors duration-200 w-full"
          disabled={saving}
        >
          {saving ? 'Saving...' : 'Save Best Seller Configuration'}
        </button>
      </div>

      {/* Live Preview */}
      <div className="p-4 border border-gray-700 rounded-lg bg-gray-900">
        <h2 className="text-2xl font-semibold mb-4">Live Preview</h2>
        <BestSellerSection data={previewData} />
      </div>
    </div>
  );
};

export default BestSellerAdminPage;

```

### ClientApp\src\pages\Admin\CategoryAdminPage.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CategoryAdminPage = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryDescription, setNewCategoryDescription] = useState('');
  const [newCategoryImage, setNewCategoryImage] = useState('');
  const [newCategoryIsActive, setNewCategoryIsActive] = useState(true);
  const [editingCategory, setEditingCategory] = useState(null);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/categories`);
      setCategories(response.data);
    } catch (err) {
      setError('Failed to load categories.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleAddCategory = async () => {
    try {
      await axios.post('/api/categories', {
        name: newCategoryName,
        description: newCategoryDescription,
        image: newCategoryImage,
        isActive: newCategoryIsActive,
      });
      setNewCategoryName('');
      setNewCategoryDescription('');
      setNewCategoryImage('');
      setNewCategoryIsActive(true);
      fetchCategories();
      alert('Category added successfully!');
    } catch (err) {
      alert('Failed to add category.');
      console.error(err);
    }
  };

  const handleEditCategory = (category) => {
    setEditingCategory(category);
    setNewCategoryName(category.name);
    setNewCategoryDescription(category.description);
    setNewCategoryImage(category.image);
    setNewCategoryIsActive(category.isActive);
  };

  const handleUpdateCategory = async () => {
    try {
      await axios.put(`/api/categories/${editingCategory.id}`, {
        id: editingCategory.id,
        name: newCategoryName,
        description: newCategoryDescription,
        image: newCategoryImage,
        isActive: newCategoryIsActive,
      });
      setEditingCategory(null);
      setNewCategoryName('');
      setNewCategoryDescription('');
      setNewCategoryImage('');
      setNewCategoryIsActive(true);
      fetchCategories();
      alert('Category updated successfully!');
    } catch (err) {
      alert('Failed to update category.');
      console.error(err);
    }
  };

  const handleDeleteCategory = async (id) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await axios.delete(`/api/categories/${id}`);
        fetchCategories();
        alert('Category deleted successfully!');
      } catch (err) {
        alert('Failed to delete category.');
        console.error(err);
      }
    }
  };

  if (loading) {
    return <div className="p-4 text-white">Loading categories...</div>;
  }

  if (error) {
    return <div className="p-4 text-red-500">{error}</div>;
  }

  return (
    <div className="p-6 bg-gray-800 min-h-screen text-white">
      <h1 className="text-3xl font-bold mb-6">Manage Categories</h1>

      {/* Add/Edit Category Form */}
      <div className="bg-gray-700 p-6 rounded-lg mb-8">
        <h2 className="text-2xl font-semibold mb-4">
          {editingCategory ? 'Edit Category' : 'Add New Category'}
        </h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-300">Name</label>
            <input
              type="text"
              className="mt-1 block w-full p-2 rounded-md bg-gray-600 border border-gray-500 text-white"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-300">Description</label>
            <textarea
              className="mt-1 block w-full p-2 rounded-md bg-gray-600 border border-gray-500 text-white"
              value={newCategoryDescription}
              onChange={(e) => setNewCategoryDescription(e.target.value)}
            ></textarea>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-300">Image URL</label>
            <input
              type="text"
              className="mt-1 block w-full p-2 rounded-md bg-gray-600 border border-gray-500 text-white"
              value={newCategoryImage}
              onChange={(e) => setNewCategoryImage(e.target.value)}
            />
          </div>
          <label className="inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              className="sr-only peer"
              checked={newCategoryIsActive}
              onChange={(e) => setNewCategoryIsActive(e.target.checked)}
            />
            <div className="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-600 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-500 peer-checked:bg-blue-600"></div>
            <span className="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">Is Active</span>
          </label>
          <button
            onClick={editingCategory ? handleUpdateCategory : handleAddCategory}
            className="mt-4 px-6 py-3 bg-electric-blue text-primary-dark font-bold rounded-md hover:opacity-90 transition-opacity"
          >
            {editingCategory ? 'Update Category' : 'Add Category'}
          </button>
          {editingCategory && (
            <button
              onClick={() => {
                setEditingCategory(null);
                setNewCategoryName('');
                setNewCategoryDescription('');
                setNewCategoryImage('');
                setNewCategoryIsActive(true);
              }}
              className="ml-4 mt-4 px-6 py-3 bg-gray-500 text-white font-bold rounded-md hover:opacity-90 transition-opacity"
            >
              Cancel Edit
            </button>
          )}
        </div>
      </div>

      {/* Categories List */}
      <div className="bg-gray-700 p-6 rounded-lg">
        <h2 className="text-2xl font-semibold mb-4">Existing Categories</h2>
        <ul className="divide-y divide-gray-600">
          {categories.map((category) => (
            <li key={category.id} className="flex justify-between items-center py-3">
              <div>
                <p className="text-lg font-medium text-white">{category.name} {category.isActive ? '(Active)' : '(Inactive)'}</p>
                <p className="text-sm text-gray-400">{category.description}</p>
              </div>
              <div>
                <button
                  onClick={() => handleEditCategory(category)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDeleteCategory(category.id)}
                  className="ml-2 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                >
                  Delete
                </button>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default CategoryAdminPage;

```

### ClientApp\src\pages\Admin\FlashSaleAdminPage.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { AutoComplete, Button, Table, InputNumber, DatePicker, message, Popconfirm, Space, Card, Typography, Select, Spin, Alert, Input } from 'antd';
import { SearchOutlined, DeleteOutlined, PlusOutlined, SaveOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';

const { Text } = Typography;
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

const FlashSaleAdminPage = () => {
  const [products, setProducts] = useState([]); // All products for selection
  const [flashSaleProducts, setFlashSaleProducts] = useState([]); // Products currently on flash sale
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchedProductsOptions, setSearchedProductsOptions] = useState([]);

  const [selectedProductToAdd, setSelectedProductToAdd] = useState(null);
  const [newFlashSalePrice, setNewFlashSalePrice] = useState(0);
  const [newFlashSaleStartDate, setNewFlashSaleStartDate] = useState(null);
  const [newFlashSaleEndDate, setNewFlashSaleEndDate] = useState(null);

  useEffect(() => {
    fetchFlashSaleProducts();
    fetchAllProducts();
  }, []);

  const fetchAllProducts = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/products`);
      setProducts(response.data.$values || response.data || []);
    } catch (err) {
      message.error('Failed to load all products for selection.');
      console.error(err);
    }
  };

  const fetchFlashSaleProducts = async () => {
    setLoading(true);
    try {
      const { data } = await axios.get(`${API_BASE_URL}/api/Products/flash-sale`);
      const detailedProducts = data.$values || data || [];

      const combinedProducts = detailedProducts.map(flashSaleProduct => {
        const primaryImage = flashSaleProduct?.images?.find(img => img.isPrimary) || flashSaleProduct?.images?.[0];
        const imageUrl = primaryImage ? (primaryImage.imageUrl.startsWith("http") ? primaryImage.imageUrl : `${API_BASE_URL}/${primaryImage.imageUrl}`) : "https://via.placeholder.com/50";

        // Determine original price from variants (assuming first variant for simplicity, or find min price)
        const originalPrice = flashSaleProduct.variants?.[0]?.price || 0;

        return {
          ...flashSaleProduct,
          imageUrl: imageUrl,
          originalPrice: originalPrice,
        };
      });
      setFlashSaleProducts(combinedProducts);
    } catch (err) {
      setError('Failed to load flash sale products.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleSearchProduct = (value) => {
    if (value) {
      const filtered = products.filter(p => p.name.toLowerCase().includes(value.toLowerCase()));
      setSearchedProductsOptions(filtered.map(p => ({
        value: p.id,
        label: (
          <Space>
            <img src={p.images?.[0]?.imageUrl?.startsWith("http") ? p.images[0].imageUrl : `${API_BASE_URL}/${p.images?.[0]?.imageUrl}`} alt={p.name} style={{ width: 30, height: 30, objectFit: 'contain' }} onError={(e) => { e.target.onerror = null; e.target.src = "https://via.placeholder.com/30"; }} />
            {p.name}
          </Space>
        ),
        product: p
      })));
    } else {
      setSearchedProductsOptions([]);
    }
    setSearchText(value);
  };

  const handleSelectProduct = (value, option) => {
    setSelectedProductToAdd(option.product);
    setSearchText(option.product.name); // Keep selected product name in search input
  };

  const handleSetFlashSale = async () => {
    if (!selectedProductToAdd || !newFlashSalePrice || !newFlashSaleStartDate || !newFlashSaleEndDate) {
      message.error('Please fill all flash sale fields.');
      return;
    }

    try {
      await axios.put(`${API_BASE_URL}/api/products/${selectedProductToAdd.id}/set-flash-sale`, {
        flashSalePrice: newFlashSalePrice,
        flashSaleStartDate: newFlashSaleStartDate.toISOString(),
        flashSaleEndDate: newFlashSaleEndDate.toISOString(),
      });
      message.success('Flash sale set successfully!');
      resetForm();
      fetchFlashSaleProducts();
    } catch (err) {
      message.error('Failed to set flash sale.');
      console.error(err);
    }
  };

  const handleClearFlashSale = async (productId) => {
    try {
      await axios.put(`${API_BASE_URL}/api/products/${productId}/clear-flash-sale`);
      message.success('Flash sale cleared successfully!');
      fetchFlashSaleProducts();
    } catch (err) {
      message.error('Failed to clear flash sale.');
      console.error(err);
    }
  };

  const resetForm = () => {
    setSelectedProductToAdd(null);
    setNewFlashSalePrice(0);
    setNewFlashSaleStartDate(null);
    setNewFlashSaleEndDate(null);
    setSearchText('');
  };

  const priceOptions = [100000, 500000, 1000000, 2000000, 5000000];

  const columns = [
    {
      title: 'Product',
      key: 'productInfo',
      render: (_, record) => (
        <Space>
          <img src={record.imageUrl} alt={record.name} style={{ width: 50, height: 50, objectFit: 'contain' }} />
          <Text>{record.name}</Text>
        </Space>
      )
    },
    {
      title: 'Original Price',
      key: 'originalPrice',
      render: (_, record) => (
        <Text delete={record.flashSalePrice !== null && record.flashSalePrice < record.originalPrice}>
          {record.originalPrice.toLocaleString('vi-VN')}đ
        </Text>
      )
    },
    {
      title: 'Flash Sale Price',
      dataIndex: 'flashSalePrice',
      key: 'flashSalePrice',
      render: (price) => (
        <Text strong type="danger">
          {price?.toLocaleString('vi-VN')}đ
        </Text>
      )
    },
    {
      title: 'Start Date',
      dataIndex: 'flashSaleStartDate',
      key: 'flashSaleStartDate',
      render: (date) => date ? dayjs(date).format('YYYY-MM-DD HH:mm:ss') : 'N/A'
    },
    {
      title: 'End Date',
      dataIndex: 'flashSaleEndDate',
      key: 'flashSaleEndDate',
      render: (date) => date ? dayjs(date).format('YYYY-MM-DD HH:mm:ss') : 'N/A'
    },
    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Popconfirm title="Are you sure you want to clear flash sale for this product?" onConfirm={() => handleClearFlashSale(record.id)} okText="Yes" cancelText="No">
          <Button danger icon={<DeleteOutlined />} />
        </Popconfirm>
      )
    }
  ];

  if (loading) {
    return <div className="flex justify-center items-center min-h-screen"><Spin size="large" /></div>;
  }

  if (error) {
    return <div className="p-8"><Alert message="Error" description={error} type="error" showIcon /></div>;
  }

  return (
    <div className="p-4 sm:p-6 lg:p-8 bg-gray-900 min-h-screen text-white">
      <h1 className="text-2xl sm:text-3xl font-bold text-white mb-6">Manage Flash Sales</h1>

      <Card title={<span className="text-lg font-semibold text-white">Set Product for Flash Sale</span>} bordered={false} className="shadow-sm mb-8 bg-gray-800" headStyle={{background:'#1f2937', border:'none'}} bodyStyle={{background:'#1f2937'}}>
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          <Text strong className="text-white">Select Product:</Text>
          <AutoComplete
            value={searchText}
            onSearch={handleSearchProduct}
            onSelect={handleSelectProduct}
            options={searchedProductsOptions}
            style={{ width: '100%' }}
            placeholder="Search product by name..."
          >
            <Input prefix={<SearchOutlined />} />
          </AutoComplete>

          {selectedProductToAdd && (
            <Text type="secondary" className="text-gray-300">Selected: {selectedProductToAdd.name}</Text>
          )}

          <Text strong className="text-white">Flash Sale Price:</Text>
          <InputNumber
            className="w-full"
            value={newFlashSalePrice}
            onChange={setNewFlashSalePrice}
            formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',') + 'đ'}
            parser={value => value.replace(/\s?đ|(,*)/g, '')}
            min={0}
          />
          <Space wrap>
            {priceOptions.map(price => (
              <Button key={price} onClick={() => setNewFlashSalePrice(price)}>
                {price.toLocaleString('vi-VN')}đ
              </Button>
            ))}
          </Space>

          <Text strong className="text-white">Start Date/Time:</Text>
          <DatePicker
            showTime
            format="YYYY-MM-DD HH:mm:ss"
            value={newFlashSaleStartDate}
            onChange={setNewFlashSaleStartDate}
            style={{ width: '100%' }}
          />

          <Text strong className="text-white">End Date/Time:</Text>
          <DatePicker
            showTime
            format="YYYY-MM-DD HH:mm:ss"
            value={newFlashSaleEndDate}
            onChange={setNewFlashSaleEndDate}
            style={{ width: '100%' }}
          />

          <Button
            type="primary"
            icon={<SaveOutlined />}
            onClick={handleSetFlashSale}
            size="large"
            style={{ width: '100%' }}
          >
            Set Flash Sale
          </Button>
        </Space>
      </Card>

      <Card title={<span className="text-lg font-semibold text-white">Current Flash Sale Products</span>} bordered={false} className="shadow-sm bg-gray-800" headStyle={{background:'#1f2937', border:'none'}} bodyStyle={{background:'#1f2937'}}>
        <Table
          columns={columns}
          dataSource={flashSaleProducts}
          rowKey="id"
          loading={loading}
          pagination={{ pageSize: 10 }}
          bordered
        />
      </Card>
    </div>
  );
};

export default FlashSaleAdminPage;

```

### ClientApp\src\pages\Admin\HomepageAdminPage.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { motion } from 'framer-motion';
import Header from "@/components/Admin/common/Header";

  import {
  Box,
  Button,
  Switch,
  TextField,
  Typography,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Snackbar,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  InputAdornment,
  Collapse,
  FormControlLabel,
} from '@mui/material';

import {
  DragHandle as DragHandleIcon,
  Visibility as EyeIcon,
  Save as SaveIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
} from '@mui/icons-material';

// Import preview components
import HeroBanner from '@/components/HeroBanner/HeroBanner';
import FeaturedCategories from '@/components/FeaturedCategories/FeaturedCategories';
import BestSellerSection from '@/components/BestSellers/BestSellers';
import FlashSale from '@/components/FlashSale/FlashSale';
import Commitment from '@/components/Commitment/Commitment';
import BannerSlider from '@/components/Homepage/BannerSlider';
import BestSellerManager from '@/components/BestSellerManager/BestSellerManager';

// Custom component for section editing (will be refactored in next step)
const SectionEditor = ({ sectionName, sectionData, onContentChange }) => {
  const [formData, setFormData] = useState(sectionData);

  useEffect(() => {
    setFormData(sectionData);
  }, [sectionData]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === 'checkbox' ? checked : value;
    setFormData(prev => ({
      ...prev,
      [name]: newValue
    }));
    onContentChange(sectionName, name, newValue);
  };

  const renderFormItems = () => {
    const inputProps = {
      style: { color: '#e2e8f0' },
      sx: { '& fieldset': { borderColor: '#4a5568' }, '&:hover fieldset': { borderColor: '#63b3ed' }, '&.Mui-focused fieldset': { borderColor: '#63b3ed' } }
    };
    const inputLabelProps = { style: { color: '#a0aec0' } };

    switch (sectionName) {
      case 'hero':
        return (
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <TextField label="Headline" name="headline" value={formData.headline || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="Slogan" name="slogan" value={formData.slogan || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="CTA Text" name="cta_text" value={formData.cta_text || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="CTA Link" name="cta_link" value={formData.cta_link || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
          </Box>
        );
      case 'featured_products':
      case 'best_seller':
        return <BestSellerManager sectionData={sectionData} onContentChange={onContentChange} />;
      case 'special_offer':
        const priceOptions = [100000, 500000, 1000000, 2000000];
        return (
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <TextField label="Headline" name="headline" value={formData.headline || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="Sub Text" name="sub_text" value={formData.sub_text || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="CTA Text" name="cta_text" value={formData.cta_text || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="CTA Link" name="cta_link" value={formData.cta_link || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField label="Image URL" name="image_url" value={formData.image_url || ''} onChange={handleInputChange} fullWidth InputProps={inputProps} InputLabelProps={inputLabelProps} />
            <TextField
              label="Original Price"
              name="originalPrice"
              value={formData.originalPrice || ''}
              onChange={handleInputChange}
              fullWidth
              type="number"
              InputProps={{
                startAdornment: <InputAdornment position="start" sx={{ color: '#a0aec0' }}>VNĐ</InputAdornment>,
                ...inputProps
              }}
              InputLabelProps={inputLabelProps}
            />
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              {priceOptions.map(price => (
                <Button key={price} variant="outlined" onClick={() => onContentChange(sectionName, 'originalPrice', price)} sx={{ borderColor: '#63b3ed', color: '#63b3ed' }}>
                  {price.toLocaleString('vi-VN')}đ
                </Button>
              ))}
            </Box>
            <TextField
              label="Discount Price"
              name="discountPrice"
              value={formData.discountPrice || ''}
              onChange={handleInputChange}
              fullWidth
              type="number"
              InputProps={{
                startAdornment: <InputAdornment position="start" sx={{ color: '#a0aec0' }}>VNĐ</InputAdornment>,
                ...inputProps
              }}
              InputLabelProps={inputLabelProps}
            />
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              {priceOptions.map(price => (
                <Button key={price} variant="outlined" onClick={() => onContentChange(sectionName, 'discountPrice', price)} sx={{ borderColor: '#63b3ed', color: '#63b3ed' }}>
                  {price.toLocaleString('vi-VN')}đ
                </Button>
              ))}
            </Box>
            <TextField label="Countdown End Date" name="countdown_end_date" value={formData.countdown_end_date || ''} onChange={handleInputChange} fullWidth helperText="Format: YYYY-MM-DDTHH:MM:SS" InputProps={inputProps} InputLabelProps={inputLabelProps} FormHelperTextProps={{ style: { color: '#a0aec0' } }} />
            <FormControlLabel
              control={<Switch checked={formData.countdown_enabled || false} onChange={handleInputChange} name="countdown_enabled" />}
              label="Countdown Enabled"
              sx={{ color: '#e2e8f0' }}
            />
          </Box>
        );
      case 'brand_trust':
        return (
          <Box>
            <Typography variant="h6" sx={{ mb: 2, color: '#e2e8f0' }}>Commitments</Typography>
            <List>
              {formData.commitments?.map((commitment, index) => (
                <ListItem key={index} secondaryAction={
                  <IconButton edge="end" aria-label="delete" onClick={() => {
                    const newCommitments = formData.commitments.filter((_, i) => i !== index);
                    onContentChange(sectionName, 'commitments', newCommitments);
                  }} sx={{ color: '#e2e8f0' }}>
                    <DeleteIcon />
                  </IconButton>
                }>
                  <TextField
                    label="Commitment Title"
                    value={commitment.title || ''}
                    onChange={(e) => {
                      const newCommitments = [...formData.commitments];
                      newCommitments[index].title = e.target.value;
                      onContentChange(sectionName, 'commitments', newCommitments);
                    }}
                    fullWidth
                    InputProps={inputProps}
                    InputLabelProps={inputLabelProps}
                  />
                </ListItem>
              ))}
            </List>
            <Button startIcon={<AddIcon />} onClick={() => {
              const newCommitments = [...(formData.commitments || []), { title: '' }];
              onContentChange(sectionName, 'commitments', newCommitments);
            }} sx={{ color: '#63b3ed', borderColor: '#63b3ed' }}>Add Commitment</Button>
          </Box>
        );
      default:
        return <Typography variant="body2" color="text.secondary">No editor available for this section.</Typography>;
    }
  };

  return (
    <Box sx={{ p: 2 }}>
      {renderFormItems()}
    </Box>
  );
};

const HomepageAdminPage = () => {
  const [config, setConfig] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [previewSection, setPreviewSection] = useState(null);
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');

  useEffect(() => {
    const fetchConfig = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`);
        setConfig(response.data);
      } catch (err) {
        setError('Failed to load homepage configuration.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchConfig();
  }, []);

  const handleSave = async () => {
    try {
      await axios.put(`${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`, config);
      setSnackbarMessage('Homepage configuration saved successfully!');
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
    } catch (err) {
      setSnackbarMessage('Failed to save homepage configuration.');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
      console.error(err);
    }
  };

  const handleToggleSection = (sectionName) => {
    setConfig(prevConfig => ({
      ...prevConfig,
      components: {
        ...prevConfig.components,
        [sectionName]: {
          ...prevConfig.components[sectionName],
          enabled: !prevConfig.components[sectionName].enabled,
        },
      },
    }));
  };

  const handleContentChange = (sectionName, field, value) => {
    setConfig(prevConfig => {
      const newConfig = { ...prevConfig };
      if (field) {
        newConfig.components[sectionName] = {
          ...newConfig.components[sectionName],
          [field]: value
        };
      } else {
        // This case is for when a whole object is passed (e.g., from BestSellerManager)
        newConfig.components[sectionName] = { ...newConfig.components[sectionName], ...value };
      }
      return newConfig;
    });
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;
    const newLayout = Array.from(config.layout);
    const [removed] = newLayout.splice(result.source.index, 1);
    newLayout.splice(result.destination.index, 0, removed);
    setConfig(prevConfig => ({
      ...prevConfig,
      layout: newLayout
    }));
  };

  const handlePreview = (sectionName) => {
    setPreviewSection(sectionName);
    setIsPreviewOpen(true);
  };

  const closePreview = () => {
    setIsPreviewOpen(false);
    setPreviewSection(null);
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', bgcolor: '#1a202c' }}>
        <CircularProgress size={60} sx={{ color: '#63b3ed' }} />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ m: 2, bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: '#f56565' } }}>
        {error}
      </Alert>
    );
  }

  if (!config) {
    return (
      <Alert severity="warning" sx={{ m: 2, bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: '#ecc94b' } }}>
        No configuration found.
      </Alert>
    );
  }

  const componentMap = {
    hero: HeroBanner,
    categories: FeaturedCategories,
    featured_products: BestSellerSection,
    special_offer: FlashSale,
    best_seller: BestSellerSection,
    brand_trust: Commitment,
    banner_slider: BannerSlider,
  };

  return (
    <Box sx={{ flexGrow: 1, bgcolor: '#1a202c', minHeight: '100vh', color: '#e2e8f0' }}>
      <Header title="Quản lý Trang chủ" />

      <Box component="main" sx={{ maxWidth: '7xl', mx: 'auto', py: 6, px: { xs: 2, lg: 8 } }}>
        <motion.div
          className="flex justify-between items-center mb-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Typography variant="h5" component="h1" sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>
            Cấu hình Trang chủ
          </Typography>
          <Button variant="contained" startIcon={<SaveIcon />} onClick={handleSave}>
            Lưu cấu hình
          </Button>
        </motion.div>

        <Grid container spacing={3}>
          <Grid item xs={12} lg={4}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>Thứ tự & Hiển thị Bố cục</Typography>
                  <DragDropContext onDragEnd={handleDragEnd}>
                    <Droppable droppableId="layout-order">
                      {(provided) => (
                        <List {...provided.droppableProps} ref={provided.innerRef}>
                          {config.layout.map((sectionName, index) => (
                            <Draggable key={sectionName} draggableId={sectionName} index={index}>
                              {(provided, snapshot) => (
                                <ListItem
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  {...provided.dragHandleProps}
                                  sx={{
                                    mb: 1,
                                    bgcolor: '#4a5568',
                                    borderRadius: 1,
                                    boxShadow: 1,
                                    border: snapshot.isDragging ? '1px solid #63b3ed' : '1px solid transparent',
                                    transition: 'border 0.2s',
                                  }}
                                  secondaryAction={
                                    <Switch
                                      edge="end"
                                      checked={config.components[sectionName]?.enabled || false}
                                      onChange={() => handleToggleSection(sectionName)}
                                      size="small"
                                    />
                                  }
                                >
                                  <ListItemIcon sx={{ minWidth: 30 }}>
                                    <DragHandleIcon sx={{ color: '#e2e8f0' }} />
                                  </ListItemIcon>
                                  <ListItemText primary={sectionName.replace(/_/g, ' ')} sx={{ textTransform: 'capitalize', color: '#e2e8f0' }} />
                                </ListItem>
                              )}
                            </Draggable>
                          ))}
                          {provided.placeholder}
                        </List>
                      )}
                    </Droppable>
                  </DragDropContext>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} lg={8}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>Nội dung Phần</Typography>
                  <Box>
                    {Object.entries(config.components).map(([sectionName, sectionData]) => (
                      <Collapse key={sectionName} in={true} timeout="auto" unmountOnExit>
                        <Card variant="outlined" sx={{ mb: 2, borderRadius: 1, borderColor: '#4a5568', bgcolor: '#1a202c' }}>
                          <CardContent>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', textTransform: 'capitalize', color: '#e2e8f0' }}>
                                {sectionName.replace(/_/g, ' ')}
                              </Typography>
                              <Box>
                                <Button
                                  size="small"
                                  startIcon={<EyeIcon />}
                                  onClick={() => handlePreview(sectionName)}
                                  sx={{ mr: 1, color: '#63b3ed' }}
                                >
                                  Xem trước
                                </Button>
                                <Switch
                                  checked={sectionData?.enabled || false}
                                  onChange={() => handleToggleSection(sectionName)}
                                  size="small"
                                />
                              </Box>
                            </Box>
                            <SectionEditor
                              sectionName={sectionName}
                              sectionData={sectionData}
                              onContentChange={handleContentChange}
                            />
                          </CardContent>
                        </Card>
                      </Collapse>
                    ))}
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>

        <Dialog open={isPreviewOpen} onClose={closePreview} maxWidth="md" fullWidth PaperProps={{ sx: { bgcolor: '#2d3748', color: '#e2e8f0' } }}>
          <DialogTitle sx={{ bgcolor: '#1a202c', color: '#e2e8f0' }}>Xem trước: {previewSection?.replace(/_/g, ' ')}</DialogTitle>
          <DialogContent dividers sx={{ borderColor: '#4a5568' }}>
            {previewSection && componentMap[previewSection] ? (
              React.createElement(componentMap[previewSection], { data: config.components[previewSection] })
            ) : (
              <Typography variant="body1" color="text.secondary">Không có bản xem trước cho phần này.</Typography>
            )}
          </DialogContent>
          <DialogActions sx={{ bgcolor: '#1a202c' }}>
            <Button onClick={closePreview} sx={{ color: '#63b3ed' }}>Đóng</Button>
          </DialogActions>
        </Dialog>

        <Snackbar
          open={snackbarOpen}
          autoHideDuration={4000}
          onClose={() => setSnackbarOpen(false)}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert onClose={() => setSnackbarOpen(false)} severity={snackbarSeverity} sx={{ width: '100%', bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: snackbarSeverity === 'success' ? '#48bb78' : '#f56565' } }}>
            {snackbarMessage}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
};

export default HomepageAdminPage;

```

### ClientApp\src\pages\Admin\HomepageOverviewPage.js
```js
import { Visibility, VisibilityOff } from '@mui/icons-material';
import { Zap, LayoutDashboard, Tags, ImageIcon } from 'lucide-react';
import React, { useState, useEffect } from "react";
import { Link as RouterLink } from "react-router-dom";
import { motion } from "framer-motion";
import Header from "@/components/Admin/common/Header";
import axios from "axios";

import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Link as MuiLink,
  CircularProgress,
  Alert,
  List,
  ListItem,
  ListItemText,
  Chip,
} from "@mui/material";

const HomepageOverviewPage = () => {
  const [config, setConfig] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchConfig = async () => {
      try {
        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`
        );
        setConfig(response.data);
      } catch (err) {
        setError("Failed to load homepage configuration.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    fetchConfig();
  }, []);

  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
          bgcolor: '#1a202c',
        }}
      >
        <CircularProgress sx={{ color: '#63b3ed' }} />
      </Box>
    );
  }

  if (error) {
    return (
      <Alert severity="error" sx={{ m: 2, bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: '#f56565' } }}>
        {error}
      </Alert>
    );
  }

  if (!config) {
    return (
      <Alert severity="warning" sx={{ m: 2, bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: '#ecc94b' } }}>
        No homepage configuration found.
      </Alert>
    );
  }

  const totalSections = Object.keys(config.components).length;
  const enabledSections = Object.values(config.components).filter(
    (comp) => comp.enabled
  ).length;
  const disabledSections = totalSections - enabledSections;

  const managementLinks = [
    {
      title: "Bố cục & Nội dung Trang chủ",
      description: "Quản lý thứ tự và nội dung của các phần chính trên trang chủ.",
      icon: LayoutDashboard,
      href: "/admin/homepage",
      color: "#6366F1",
    },
    {
      title: "Danh mục Sản phẩm",
      description: "Thêm, chỉnh sửa, xóa và kích hoạt/hủy kích hoạt danh mục sản phẩm.",
      icon: Tags,
      href: "/admin/categories",
      color: "#8B5CF6",
    },
    {
      title: "Sản phẩm Flash Sale",
      description: "Đặt và xóa giá flash sale cũng như thời lượng cho sản phẩm.",
      icon: Zap,
      href: "/admin/flash-sale",
      color: "#EC4899",
    },
    {
      title: "Banner Trang chủ",
      description: "Quản lý các banner hình ảnh cho thanh trượt trang chủ.",
      icon: ImageIcon,
      href: "/admin/banners",
      color: "#10B981",
    },
  ];

  return (
    <Box sx={{ flexGrow: 1, bgcolor: '#1a202c', minHeight: '100vh', color: '#e2e8f0' }}>
      <Header title="Tổng quan Trang chủ" />

      <Box component="main" sx={{ maxWidth: '7xl', mx: 'auto', py: 6, px: { xs: 2, lg: 8 } }}>
        {/* Overview Stats */}
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748' }}>
              <CardContent>
                <Typography variant="h6" color="primary" sx={{ fontWeight: "bold" }}>
                  Tổng số phần
                </Typography>
                <Typography variant="h3" sx={{ fontWeight: "bold", color: "#63b3ed" }}>
                  {totalSections}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748' }}>
              <CardContent>
                <Typography variant="h6" color="success" sx={{ fontWeight: "bold" }}>
                  Phần đang hoạt động
                </Typography>
                <Typography variant="h3" sx={{ fontWeight: "bold", color: "#48bb78" }}>
                  {enabledSections}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748' }}>
              <CardContent>
                <Typography variant="h6" color="error" sx={{ fontWeight: "bold" }}>
                  Phần đã tắt
                </Typography>
                <Typography variant="h3" sx={{ fontWeight: "bold", color: "#f56565" }}>
                  {disabledSections}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </motion.div>

        {/* Section Status List */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card elevation={0} sx={{ borderRadius: 2, mb: 4, bgcolor: '#2d3748' }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: "bold", color: '#e2e8f0' }}>
                Trạng thái các phần trang chủ
              </Typography>
              <List>
                {config.layout.map((sectionName) => (
                  <ListItem
                    key={sectionName}
                    secondaryAction={
                      <Chip
                        label={config.components[sectionName]?.enabled ? "Đang hoạt động" : "Đã tắt"}
                        color={config.components[sectionName]?.enabled ? "success" : "error"}
                        icon={config.components[sectionName]?.enabled ? <Visibility /> : <VisibilityOff />}
                      />
                    }
                  >
                    <ListItemText
                      primary={
                        <Typography variant="body1" sx={{ textTransform: "capitalize", color: '#e2e8f0' }}>
                          {sectionName.replace(/_/g, " ")}
                        </Typography>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        </motion.div>

        {/* Management Links */}
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          {managementLinks.map((item, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <MuiLink
                component={RouterLink}
                to={item.href}
                sx={{
                  textDecoration: "none",
                  "&:hover": { textDecoration: "none" },
                }}
              >
                <Card
                  elevation={0}
                  sx={{
                    borderRadius: 2,
                    height: "100%",
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "space-between",
                    transition: "all 0.3s ease-in-out",
                    bgcolor: '#2d3748',
                    "&:hover": {
                      transform: "translateY(-5px)",
                      boxShadow: 6,
                    },
                  }}
                >
                  <CardContent>
                    <Box
                      sx={{
                        display: "flex",
                        alignItems: "center",
                        mb: 2,
                        color: item.color,
                      }}
                    >
                      {React.createElement(item.icon, { size: 30, style: { marginRight: "12px" } })}
                      <Typography variant="h6" component="h2" sx={{ fontWeight: "bold", color: '#e2e8f0' }}>
                        {item.title}
                      </Typography>
                    </Box>
                    <Typography variant="body2" color="text.secondary">
                      {item.description}
                    </Typography>
                  </CardContent>
                </Card>
              </MuiLink>
            </Grid>
          ))}
        </motion.div>
      </Box>
    </Box>
  );
};

export default HomepageOverviewPage;

```

### ClientApp\src\pages\Admin\OrdersPage.jsx
```jsx
import { useState, useEffect } from "react";
import { CheckCircle, Clock, DollarSign, ShoppingBag } from "lucide-react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "@/components/Admin/common/Header";
import StatCard from "@/components/Admin/common/StatCard";
// import DailyOrders from "@/components/Admin/orders/DailyOrders";
// import OrderDistribution from "@/components/Admin/orders/OrderDistribution";
import OrdersTable from "@/components/Admin/orders/OrdersTable";

const OrdersPage = () => {
  const [orderStats, setOrderStats] = useState({
    totalOrders: 0,
    pendingOrders: 0,
    completedOrders: 0,
    totalRevenue: 0,
  });

  useEffect(() => {
    const fetchOrderStats = async () => {
      try {
        const [
          totalOrdersRes,
          pendingOrdersRes,
          completedOrdersRes,
          totalRevenueRes,
        ] = await Promise.all([
          axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/orders`),
          axios.get(
            `${process.env.REACT_APP_API_BASE_URL}/api/orders/pending-orders`
          ),
          axios.get(
            `${process.env.REACT_APP_API_BASE_URL}/api/orders/completed-orders`
          ),
          axios.get(
            `${process.env.REACT_APP_API_BASE_URL}/api/orders/total-revenue`
          ),
        ]);

        setOrderStats({
          totalOrders: totalOrdersRes.data.length,
          pendingOrders: pendingOrdersRes.data.pendingOrders,
          completedOrders: completedOrdersRes.data.completedOrders,
          totalRevenue: totalRevenueRes.data.totalRevenue,
        });
      } catch (error) {
        console.error("Lỗi khi lấy dữ liệu thống kê đơn hàng:", error);
      }
    };

    fetchOrderStats();
  }, []);

  return (
    <div className="flex-1 relative z-10 overflow-auto">
      <Header title={"Đơn Hàng"} />

      <main className="max-w-7xl mx-auto py-6 px-4 lg:px-8">
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard
            name="Tổng đơn hàng"
            icon={ShoppingBag}
            value={orderStats.totalOrders}
            color="#6366F1"
          />
          <StatCard
            name="Đơn chờ xác nhận"
            icon={Clock}
            value={orderStats.pendingOrders}
            color="#F59E0B"
          />
          <StatCard
            name="Đơn hàng đã hoàn thành"
            icon={CheckCircle}
            value={orderStats.completedOrders}
            color="#10B981"
          />
          <StatCard
            name="Tổng tiền dự tính"
            icon={DollarSign}
            value={orderStats.totalRevenue + " VND"}
            color="#EF4444"
          />
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8"></div>

        <OrdersTable />
      </main>
    </div>
  );
};

export default OrdersPage;

```

### ClientApp\src\pages\Admin\OverviewPage.jsx
```jsx
import { BarChart2, ShoppingBag, Users, Zap } from "lucide-react";
import { motion } from "framer-motion";
import { useEffect, useState } from "react";
import useSWR from "swr";

import Header from "@/components/Admin/common/Header";
import StatCard from "@/components/Admin/common/StatCard";
import SalesOverviewChart from "@/components/Admin/overview/SalesOverviewChart";
import CategoryDistributionChart from "@/components/Admin/overview/CategoryDistributionChart";
import { formatCurrency } from "@/utils/formatCurrency";

const fetcher = (url) => fetch(url).then((res) => res.json());

const OverviewPage = () => {
  // Fetch data từ API
  const { data: statsData, error: statsError } = useSWR(
    `${process.env.REACT_APP_API_BASE_URL}/api/orders/stats`,
    fetcher
  );
  const { data: revenueData, error: revenueError } = useSWR(
    `${process.env.REACT_APP_API_BASE_URL}/api/orders/revenue`,
    fetcher
  );

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (statsData || revenueData || statsError || revenueError) {
      setLoading(false);
    }
  }, [statsData, revenueData, statsError, revenueError]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (statsError || revenueError) {
    return <div>Error loading data</div>;
  }

  return (
    <div className="flex-1 overflow-auto relative z-10">
      <Header title="Tổng quan" />

      <main className="max-w-7xl mx-auto py-6 px-4 lg:px-8">
        {/* STATS */}
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard
            name="Tổng doanh thu"
            icon={Zap}
            value={formatCurrency(statsData?.totalRevenue || 0)}
            color="#6366F1"
          />
          <StatCard
            name="Đơn hàng hoàn thành"
            icon={Users}
            value={statsData?.completedOrders || 0}
            color="#8B5CF6"
          />
          <StatCard
            name="Đơn hàng chờ xử lý"
            icon={ShoppingBag}
            value={statsData?.pendingOrders || 0}
            color="#EC4899"
          />
          <StatCard
            name="Tổng số đơn hàng"
            icon={BarChart2}
            value={statsData?.totalOrders || 0}
            color="#10B981"
          />
        </motion.div>

        {/* CHARTS */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <SalesOverviewChart data={revenueData} />
          <CategoryDistributionChart />
        </div>
      </main>
    </div>
  );
};

export default OverviewPage;

```

### ClientApp\src\pages\Admin\ProductsPage.jsx
```jsx
import { useEffect, useState, useCallback } from "react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "../../components/Admin/common/Header";
import StatCard from "../../components/Admin/common/StatCard";
// import CardProduct from "../../components/Admin/common/CardProduct";

import { AlertTriangle, DollarSign, Package, TrendingUp } from "lucide-react";
import CategoryDistributionChart from "../../components/Admin/overview/CategoryDistributionChart";
import SalesTrendChart from "../../components/Admin/products/SalesTrendChart";
import ProductsTable from "../../components/Admin/products/ProductsTable";

const ProductsPage = () => {
	const [totalProducts, setTotalProducts] = useState(0);
	const [lowStockProducts, setLowStockProducts] = useState(0);
	const [topSelling, setTopSelling] = useState(0);


	// Hàm fetch thống kê sản phẩm
	const fetchStats = useCallback(async () => {
		try {
			const [lowStockRes, totalProductsRes] = await Promise.all([
				axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Products/low-stock`),
				axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/Products/count`)			]);

			setLowStockProducts(lowStockRes.data);
			setTotalProducts(totalProductsRes.data);
		} catch (error) {
			console.error("Lỗi khi lấy dữ liệu sản phẩm:", error);
		}
	}, []);
	// Gọi API khi component mount và khi filterType thay đổi
	useEffect(() => {
		fetchStats();
	}, [fetchStats]);

	return (
		<div className='flex-1 overflow-auto relative z-10'>
			<Header title='Sản Phẩm' />

			<main className='max-w-7xl mx-auto py-6 px-4 lg:px-8'>
				{/* STATS */}
				<motion.div
					className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8'
					initial={{ opacity: 0, y: 20 }}
					animate={{ opacity: 1, y: 0 }}
					transition={{ duration: 1 }}
				>
					<StatCard name='Tổng sản phẩm' icon={Package} value={totalProducts} color='#6366F1' />
					<StatCard
						name="Bán chạy"
						icon={TrendingUp}
						value={topSelling}
						color="#10B981"
					/>
					<StatCard name='Gần hết hàng' icon={AlertTriangle} value={lowStockProducts} color='#F59E0B' />
					<StatCard name='Tổng thu' icon={DollarSign} value={"145002000VND"} color='#EF4444' />
				</motion.div>

				<ProductsTable />

				{/* CHARTS */}
				<div className='grid grid-col-1 lg:grid-cols-2 gap-8'>
					<SalesTrendChart />
					<CategoryDistributionChart />
				</div>
			</main>
		</div>
	);
};

export default ProductsPage;

```

### ClientApp\src\pages\Admin\ReviewManagementPage.jsx
```jsx
import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Header from "@/components/Admin/common/Header";
import { 
  Box, 
  Typography, 
  CircularProgress, 
  Alert, 
  Paper, 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow, 
  Button, 
  Chip, 
  Rating, 
  Grid, 
  Card, 
  CardContent,
  Snackbar,
  LinearProgress,
  TextField, // Added for filter inputs
  FormControl, // Added for select/checkbox filters
  InputLabel, // Added for select labels
  Select, // Added for dropdown filters
  MenuItem, // Added for select options
  FormGroup, // Added for checkbox group
  FormControlLabel, // Added for checkbox labels
  Checkbox // Added for boolean filters
} from "@mui/material";
import { 
  CheckCircleOutline, 
  HighlightOff, 
  Star, 
  RateReview, 
  PendingActions, 
  DoneAll,
  FilterList // Added for filter icon
} from "@mui/icons-material";
import { 
  useAllReviews, 
  useReviewAnalytics, 
  useReviewModeration 
} from "@/hooks/api/useReviews";

const ReviewManagementPage = () => {
  // Filter states
  const [filters, setFilters] = useState({
    isApproved: null,
    minRating: null,
    maxRating: null,
    productId: null,
    userId: null,
    searchComment: "",
  });

  const { allReviews, loading: reviewsLoading, error: reviewsError, refetchAllReviews } = useAllReviews(filters);
  const { analytics, loading: analyticsLoading, error: analyticsError, refetchAnalytics } = useReviewAnalytics();
  const { approveReview, rejectReview, loading: moderationLoading } = useReviewModeration();
  const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" });

  const handleFilterChange = (event) => {
    const { name, value, type, checked } = event.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: type === 'checkbox' ? (checked ? true : false) : value === '' ? null : value,
    }));
  };

  const handleApprove = async (reviewId) => {
    const success = await approveReview(reviewId);
    if (success) {
      setSnackbar({ open: true, message: "Đánh giá đã được duyệt!", severity: "success" });
      refetchAllReviews();
      refetchAnalytics();
    } else {
      setSnackbar({ open: true, message: "Duyệt đánh giá thất bại.", severity: "error" });
    }
  };

  const handleReject = async (reviewId) => {
    const success = await rejectReview(reviewId);
    if (success) {
      setSnackbar({ open: true, message: "Đánh giá đã bị từ chối!", severity: "success" });
      refetchAllReviews();
      refetchAnalytics();
    } else {
      setSnackbar({ open: true, message: "Từ chối đánh giá thất bại.", severity: "error" });
    }
  };

  if (reviewsLoading || analyticsLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', bgcolor: '#1a202c' }}>
        <CircularProgress sx={{ color: '#63b3ed' }} />
      </Box>
    );
  }

  if (reviewsError || analyticsError) {
    return (
      <Alert severity="error" sx={{ m: 2, bgcolor: '#2d3748', color: '#e2e8f0', '& .MuiAlert-icon': { color: '#f56565' } }}>
        Lỗi khi tải dữ liệu: {reviewsError?.message || analyticsError?.message}
      </Alert>
    );
  }

  const safeAllReviews = Array.isArray(allReviews) ? allReviews : [];
  const safeAnalytics = analytics || {};
  const ratingDistribution = safeAnalytics.ratingDistribution || [];

  return (
    <Box sx={{ flexGrow: 1, bgcolor: '#1a202c', minHeight: '100vh', color: '#e2e8f0' }}>
      <Header title="Quản lý Đánh giá Sản phẩm" />

      <Box component="main" sx={{ maxWidth: '7xl', mx: 'auto', py: 6, px: { xs: 2, lg: 8 } }}>
        {/* Analytics Section */}
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <RateReview color="primary" sx={{ fontSize: 30, mr: 1 }} />
                  <Typography variant="h6" color="primary" sx={{ fontWeight: 'bold' }}>Tổng số đánh giá</Typography>
                </Box>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#63b3ed' }}>
                  {safeAnalytics.totalReviews}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <DoneAll color="success" sx={{ fontSize: 30, mr: 1 }} />
                  <Typography variant="h6" color="success" sx={{ fontWeight: 'bold' }}>Đánh giá đã duyệt</Typography>
                </Box>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#48bb78' }}>
                  {safeAnalytics.approvedReviews}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={4}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <PendingActions color="warning" sx={{ fontSize: 30, mr: 1 }} />
                  <Typography variant="h6" color="warning" sx={{ fontWeight: 'bold' }}>Đánh giá chờ duyệt</Typography>
                </Box>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#ecc94b' }}>
                  {safeAnalytics.pendingReviews}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={6}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <Star color="action" sx={{ fontSize: 30, mr: 1 }} />
                  <Typography variant="h6" color="text.secondary" sx={{ fontWeight: 'bold' }}>Điểm trung bình</Typography>
                </Box>
                <Typography variant="h3" sx={{ fontWeight: 'bold', color: '#ecc94b' }}>
                  {safeAnalytics.averageRating?.toFixed(2) || 'N/A'}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={6}>
            <Card elevation={0} sx={{ borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
              <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>Phân bố điểm</Typography>
                {ratingDistribution.length > 0 ? (
                  ratingDistribution.map((dist) => (
                    <Box key={dist.rating} sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
                      <Typography sx={{ minWidth: 20, color: '#e2e8f0' }}>{dist.rating}</Typography>
                      <Star sx={{ color: '#ecc94b', fontSize: 16, mx: 0.5 }} />
                      <LinearProgress 
                        variant="determinate" 
                        value={safeAnalytics.totalReviews > 0 ? (dist.count / safeAnalytics.totalReviews) * 100 : 0}
                        sx={{ 
                          flexGrow: 1, 
                          mx: 1, 
                          height: 8, 
                          borderRadius: 4,
                          bgcolor: '#4a5568',
                          '& .MuiLinearProgress-bar': { bgcolor: '#ecc94b' }
                        }} 
                      />
                      <Typography sx={{ minWidth: 30, fontSize: '0.875rem', color: 'text.secondary' }}>
                        {dist.count}
                      </Typography>
                    </Box>
                  ))
                ) : (
                  <Typography variant="body2" color="text.secondary">Không có dữ liệu phân bố điểm.</Typography>
                )}
              </CardContent>
            </Card>
          </Grid>
        </motion.div>

        {/* Filters Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 0.2 }}
        >
          <Paper elevation={0} sx={{ p: 3, mb: 4, borderRadius: 2, bgcolor: '#2d3748', color: '#e2e8f0' }}>
            <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mb: 2, color: '#e2e8f0' }}>
              <FilterList sx={{ mr: 1 }} /> Bộ lọc
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="small" sx={{ '& .MuiInputLabel-root': { color: '#a0aec0' }, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4a5568' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#63b3ed' }, '& .MuiSvgIcon-root': { color: '#e2e8f0' } }}>
                  <InputLabel>Trạng thái duyệt</InputLabel>
                  <Select
                    name="isApproved"
                    value={filters.isApproved === null ? '' : filters.isApproved}
                    label="Trạng thái duyệt"
                    onChange={handleFilterChange}
                    sx={{ color: '#e2e8f0', bgcolor: '#4a5568' }}
                  >
                    <MenuItem value="" sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>Tất cả</MenuItem>
                    <MenuItem value={true} sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>Đã duyệt</MenuItem>
                    <MenuItem value={false} sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>Chờ duyệt</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="small" sx={{ '& .MuiInputLabel-root': { color: '#a0aec0' }, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4a5568' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#63b3ed' }, '& .MuiSvgIcon-root': { color: '#e2e8f0' } }}>
                  <InputLabel>Điểm tối thiểu</InputLabel>
                  <Select
                    name="minRating"
                    value={filters.minRating === null ? '' : filters.minRating}
                    label="Điểm tối thiểu"
                    onChange={handleFilterChange}
                    sx={{ color: '#e2e8f0', bgcolor: '#4a5568' }}
                  >
                    <MenuItem value="" sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>Tất cả</MenuItem>
                    {[1, 2, 3, 4, 5].map(rating => (
                      <MenuItem key={rating} value={rating} sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>{rating} Sao</MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <FormControl fullWidth size="small" sx={{ '& .MuiInputLabel-root': { color: '#a0aec0' }, '& .MuiOutlinedInput-notchedOutline': { borderColor: '#4a5568' }, '&:hover .MuiOutlinedInput-notchedOutline': { borderColor: '#63b3ed' }, '& .MuiSvgIcon-root': { color: '#e2e8f0' } }}>
                  <InputLabel>Điểm tối đa</InputLabel>
                  <Select
                    name="maxRating"
                    value={filters.maxRating === null ? '' : filters.maxRating}
                    label="Điểm tối đa"
                    onChange={handleFilterChange}
                    sx={{ color: '#e2e8f0', bgcolor: '#4a5568' }}
                  >
                    <MenuItem value="" sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>Tất cả</MenuItem>
                    {[1, 2, 3, 4, 5].map(rating => (
                      <MenuItem key={rating} value={rating} sx={{ bgcolor: '#2d3748', color: '#e2e8f0' }}>{rating} Sao</MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  size="small"
                  label="ID Sản phẩm"
                  name="productId"
                  value={filters.productId || ''}
                  onChange={handleFilterChange}
                  type="number"
                  InputLabelProps={{ style: { color: '#a0aec0' } }}
                  InputProps={{ style: { color: '#e2e8f0' }, sx: { '& fieldset': { borderColor: '#4a5568' }, '&:hover fieldset': { borderColor: '#63b3ed' } } }}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  size="small"
                  label="ID Người dùng"
                  name="userId"
                  value={filters.userId || ''}
                  onChange={handleFilterChange}
                  type="number"
                  InputLabelProps={{ style: { color: '#a0aec0' } }}
                  InputProps={{ style: { color: '#e2e8f0' }, sx: { '& fieldset': { borderColor: '#4a5568' }, '&:hover fieldset': { borderColor: '#63b3ed' } } }}
                />
              </Grid>
              <Grid item xs={12} sm={6} md={6}>
                <TextField
                  fullWidth
                  size="small"
                  label="Tìm kiếm bình luận"
                  name="searchComment"
                  value={filters.searchComment}
                  onChange={handleFilterChange}
                  InputLabelProps={{ style: { color: '#a0aec0' } }}
                  InputProps={{ style: { color: '#e2e8f0' }, sx: { '& fieldset': { borderColor: '#4a5568' }, '&:hover fieldset': { borderColor: '#63b3ed' } } }}
                />
              </Grid>
            </Grid>
          </Paper>
        </motion.div>

        {/* Reviews Table */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 0.4 }}
        >
          <Paper elevation={0} sx={{ borderRadius: 2, overflow: 'hidden', bgcolor: '#2d3748' }}>
            <TableContainer>
              <Table>
                <TableHead sx={{ bgcolor: '#4a5568' }}>
                  <TableRow>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>ID</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Sản phẩm</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Người dùng</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Điểm</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Bình luận</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Ngày tạo</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Trạng thái</TableCell>
                    <TableCell sx={{ fontWeight: 'bold', color: '#e2e8f0' }}>Hành động</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {safeAllReviews.length > 0 ? (
                    safeAllReviews.map((review) => (
                      <TableRow key={review.id} sx={{ '&:nth-of-type(odd)': { bgcolor: '#2d3748' }, '&:nth-of-type(even)': { bgcolor: '#1a202c' } }}>
                        <TableCell sx={{ color: '#e2e8f0' }}>{review.id}</TableCell>
                        <TableCell sx={{ color: '#e2e8f0' }}>{review.productName || review.productId}</TableCell> {/* Display product name or ID as fallback */}
                        <TableCell sx={{ color: '#e2e8f0' }}>{review.userName}</TableCell>
                        <TableCell><Rating value={review.rating} readOnly size="small" sx={{ color: '#ecc94b' }} /></TableCell>
                        <TableCell sx={{ maxWidth: 300, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', color: '#e2e8f0' }}>{review.comment}</TableCell>
                        <TableCell sx={{ color: '#e2e8f0' }}>{new Date(review.createdAt).toLocaleDateString('vi-VN')}</TableCell>
                        <TableCell>
                          <Chip
                            label={review.isApproved ? "Đã duyệt" : "Chờ duyệt"}
                            color={review.isApproved ? "success" : "warning"}
                            size="small"
                            icon={review.isApproved ? <CheckCircleOutline /> : <PendingActions />}
                          />
                        </TableCell>
                        <TableCell>
                          {!review.isApproved && (
                            <Button 
                              variant="contained" 
                              color="success" 
                              size="small" 
                              onClick={() => handleApprove(review.id)} 
                              disabled={moderationLoading}
                              startIcon={<CheckCircleOutline />}
                              sx={{ mr: 1 }}
                            >
                              Duyệt
                            </Button>
                          )}
                          {review.isApproved && (
                            <Button 
                              variant="outlined" 
                              color="warning" 
                              size="small" 
                              onClick={() => handleReject(review.id)} 
                              disabled={moderationLoading}
                              startIcon={<HighlightOff />}
                            >
                              Từ chối
                            </Button>
                          )}
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={8} sx={{ textAlign: 'center', py: 4, color: '#e2e8f0' }}>
                        Không có đánh giá nào để hiển thị.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </motion.div>

        <Snackbar
          open={snackbar.open}
          autoHideDuration={4000}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert severity={snackbar.severity} variant="filled" sx={{ width: '100%' }}>
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
};

export default ReviewManagementPage;

```

### ClientApp\src\pages\Admin\SalesPage.jsx
```jsx
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import Header from "@/components/Admin/common/Header";
import StatCard from "@/components/Admin/common/StatCard";
import {
  CreditCard,
  DollarSign,
  ShoppingCart,
  TrendingUp,
  CheckCircle,
  Clock,
} from "lucide-react";
import SalesOverviewChart from "@/components/Admin/sales/SalesOverviewChart";
import SalesByCategoryChart from "@/components/Admin/sales/SalesByCategoryChart";
import DailySalesTrend from "@/components/Admin/sales/DailySalesTrend";

const SalesPage = () => {
  const [stats, setStats] = useState({
    totalRevenue: 0,
    totalOrders: 0,
    completedOrders: 0,
    pendingOrders: 0,
    averageOrderValue: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/orders/stats`
        );
        if (!response.ok) {
          throw new Error("Failed to fetch stats");
        }
        const data = await response.json();

        // Calculate average order value
        const avgOrderValue = data.totalRevenue / (data.completedOrders || 1);

        setStats({
          totalRevenue: data.totalRevenue,
          totalOrders: data.totalOrders,
          completedOrders: data.completedOrders,
          pendingOrders: data.pendingOrders,
          averageOrderValue: avgOrderValue,
        });
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  // Format currency
  const formatCurrency = (value) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(value);
  };

  if (loading) return <div className="text-center py-8">Loading...</div>;
  if (error)
    return <div className="text-center py-8 text-red-500">Error: {error}</div>;

  return (
    <div className="flex-1 overflow-auto relative z-10">
      <Header title="Bán Hàng" />

      <main className="max-w-7xl mx-auto py-6 px-4 lg:px-8">
        {/* SALES STATS */}
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard
            name="Tổng doanh thu"
            icon={DollarSign}
            value={formatCurrency(stats.totalRevenue)}
            color="#6366F1"
          />
          <StatCard
            name="Giá trị đơn trung bình"
            icon={ShoppingCart}
            value={formatCurrency(stats.averageOrderValue)}
            color="#10B981"
          />
          <StatCard
            name="Đơn hoàn thành"
            icon={CheckCircle}
            value={`${stats.completedOrders}/${stats.totalOrders}`}
            color="#F59E0B"
          />
          <StatCard
            name="Đơn đang chờ"
            icon={Clock}
            value={stats.pendingOrders.toString()}
            color="#EF4444"
          />
        </motion.div>

        <SalesOverviewChart />

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <SalesByCategoryChart />
          <DailySalesTrend />
        </div>
      </main>
    </div>
  );
};

export default SalesPage;

```

### ClientApp\src\pages\Admin\SettingsPage.jsx
```jsx
import Header from "@/components/Admin/common/Header";
import ConnectedAccounts from "@/components/Admin/settings/ConnectedAccounts";
import DangerZone from "@/components/Admin/settings/DangerZone";
import Notifications from "@/components/Admin/settings/Notifications";
import Profile from "@/components/Admin/settings/Profile";
import Security from "@/components/Admin/settings/Security";

const SettingsPage = () => {
  return (
    <div className="flex-1 overflow-auto relative z-10 bg-gray-900">
      <Header title="Settings" />
      <main className="max-w-4xl mx-auto py-6 px-4 lg:px-8">
        <Profile />
        <Notifications />
        <Security />
        <ConnectedAccounts />
        <DangerZone />
      </main>
    </div>
  );
};
export default SettingsPage;

```

### ClientApp\src\pages\Admin\UsersPage.jsx
```jsx
import { useState, useEffect } from "react";
import { UserCheck, UserPlus, UsersIcon } from "lucide-react";
import { motion } from "framer-motion";
import axios from "axios";

import Header from "@/components/Admin/common/Header";
import StatCard from "@/components/Admin/common/StatCard";
import UsersTable from "@/components/Admin/users/UsersTable";
import UserGrowthChart from "@/components/Admin/users/UserGrowthChart";
import UserActivityHeatmap from "@/components/Admin/users/UserActivityHeatmap";
import UserDemographicsChart from "@/components/Admin/users/UserDemographicsChart";

const UsersPage = () => {
  const [userStats, setUserStats] = useState({
    totalUsers: 0,
    newUsersToday: 0,
    activeUsers: 0,
    retentionRate: "0%", // Thay churnRate thành retentionRate
  });

  useEffect(() => {
    const fetchUserStats = async () => {
      try {
        const response = await axios.get(
          `${process.env.REACT_APP_API_BASE_URL}/api/users/statistics`
        );
        setUserStats(response.data);
      } catch (error) {
        console.error("Lỗi khi lấy dữ liệu người dùng:", error);
      }
    };

    fetchUserStats();
  }, []);

  return (
    <div className="flex-1 overflow-auto relative z-10">
      <Header title="Người dùng" />

      <main className="max-w-7xl mx-auto py-6 px-4 lg:px-8">
        {/* STATS */}
        <motion.div
          className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
        >
          <StatCard
            name="Tổng người dùng"
            icon={UsersIcon}
            value={userStats.totalUsers.toLocaleString()}
            color="#6366F1"
          />
          <StatCard
            name="Người dùng mới tạo"
            icon={UserPlus}
            value={userStats.newUsersToday.toLocaleString()}
            color="#10B981"
          />
          <StatCard
            name="Trạng thái đã kích hoạt"
            icon={UserCheck}
            value={userStats.activeUsers.toLocaleString()}
            color="#F59E0B"
          />
          <StatCard
            name="Tỉ lệ giữ chân người dùng" // Cập nhật tên
            icon={UserCheck} // Có thể giữ UserCheck hoặc đổi icon phù hợp
            value={userStats.retentionRate}
            color="#34D399" // Màu xanh lá thể hiện mức độ giữ chân tốt hơn
          />
        </motion.div>

        <UsersTable />

        {/* USER CHARTS */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8">
          <UserGrowthChart />
          <UserActivityHeatmap />
          <UserDemographicsChart />
        </div>
      </main>
    </div>
  );
};

export default UsersPage;

```

### ClientApp\src\pages\blog\BlogList.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const BlogList = () => {
    const [blogPosts, setBlogPosts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchBlogPosts = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/BlogPosts`);
                setBlogPosts(response.data);
            } catch (err) {
                setError('Failed to fetch blog posts.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchBlogPosts();
    }, []);

    if (loading) return <div>Loading blog posts...</div>;
    if (error) return <div>Error: {error}</div>;

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-3xl font-bold mb-6">Blog Posts</h1>
            <Link to="/admin/blog/new" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mb-4 inline-block">
                Create New Post
            </Link>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {blogPosts.map((post) => (
                    <div key={post.id} className="bg-white rounded-lg shadow-md p-6">
                        <h2 className="text-xl font-semibold mb-2">{post.title}</h2>
                        <p className="text-gray-600 text-sm mb-2">By {post.authorName} on {new Date(post.createdAt).toLocaleDateString()}</p>
                        <div className="text-gray-800 mb-4" dangerouslySetInnerHTML={{ __html: post.content.substring(0, 150) + '...' }}></div>
                        <Link to={`/blog/${post.id}`} className="text-blue-500 hover:underline">
                            Read More
                        </Link>
                        <Link to={`/admin/blog/edit/${post.id}`} className="ml-4 text-green-500 hover:underline">
                            Edit
                        </Link>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default BlogList;

```

### ClientApp\src\pages\blog\BlogPostDetail.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';

const BlogPostDetail = () => {
    const { id } = useParams();
    const [blogPost, setBlogPost] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchBlogPost = async () => {
            try {
                const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/BlogPosts/${id}`);
                setBlogPost(response.data);
            } catch (err) {
                setError('Failed to fetch blog post.');
                console.error(err);
            } finally {
                setLoading(false);
            }
        };

        fetchBlogPost();
    }, [id]);

    if (loading) return <div>Loading blog post...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!blogPost) return <div>Blog post not found.</div>;

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-4xl font-bold mb-4">{blogPost.title}</h1>
            <p className="text-gray-600 text-sm mb-4">By {blogPost.authorName} on {new Date(blogPost.createdAt).toLocaleDateString()}</p>
            <div className="prose lg:prose-xl" dangerouslySetInnerHTML={{ __html: blogPost.content }}></div>
        </div>
    );
};

export default BlogPostDetail;

```

### ClientApp\src\pages\blog\BlogPostEditor.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css'; // Import Quill styles

const BlogPostEditor = () => {
    const { id } = useParams(); // For editing existing posts
    const navigate = useNavigate();
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [isPublished, setIsPublished] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const isEditing = id !== undefined;

    useEffect(() => {
        if (isEditing) {
            setLoading(true);
            axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/BlogPosts/${id}`)
                .then(response => {
                    setTitle(response.data.title);
                    setContent(response.data.content);
                    setIsPublished(response.data.isPublished);
                })
                .catch(err => {
                    setError('Failed to load blog post for editing.');
                    console.error(err);
                })
                .finally(() => setLoading(false));
        }
    }, [id, isEditing]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        const blogPostData = { title, content, isPublished };
        const token = localStorage.getItem('token'); // Assuming you store JWT token in localStorage

        try {
            if (isEditing) {
                await axios.put(`/api/BlogPosts/${id}`, blogPostData, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
            } else {
                await axios.post('/api/BlogPosts', blogPostData, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
            }
            navigate('/admin/blog'); // Redirect to blog list after save
        } catch (err) {
            setError('Failed to save blog post. Make sure you are logged in as an Admin.');
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    if (loading && isEditing) return <div>Loading blog post for editing...</div>;

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-3xl font-bold mb-6">{isEditing ? 'Edit Blog Post' : 'Create New Blog Post'}</h1>
            {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
                    <input
                        type="text"
                        id="title"
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        required
                    />
                </div>
                <div>
                    <label htmlFor="content" className="block text-sm font-medium text-gray-700">Content</label>
                    <ReactQuill
                        theme="snow"
                        value={content}
                        onChange={setContent}
                        className="mt-1"
                        modules={BlogPostEditor.modules}
                        formats={BlogPostEditor.formats}
                    />
                </div>
                <div className="flex items-center">
                    <input
                        id="isPublished"
                        name="isPublished"
                        type="checkbox"
                        className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded"
                        checked={isPublished}
                        onChange={(e) => setIsPublished(e.target.checked)}
                    />
                    <label htmlFor="isPublished" className="ml-2 block text-sm text-gray-900">
                        Publish Post
                    </label>
                </div>
                <button
                    type="submit"
                    className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    disabled={loading}
                >
                    {loading ? 'Saving...' : (isEditing ? 'Update Post' : 'Create Post')}
                </button>
            </form>
        </div>
    );
};

BlogPostEditor.modules = {
    toolbar: [
        [{ 'header': '1' }, { 'header': '2' }, { 'font': [] }],
        [{ size: [] }],
        ['bold', 'italic', 'underline', 'strike', 'blockquote'],
        [{ 'list': 'ordered' }, { 'list': 'bullet' },
        { 'indent': '-1' }, { 'indent': '+1' }],
        ['link', 'image', 'video'],
        ['clean']
    ],
    clipboard: {
        // toggle to add extra newline when pasting HTML: https://quilljs.com/docs/modules/clipboard/
        matchVisual: false,
    },
};

BlogPostEditor.formats = [
    'header',
    'font',
    'size',
    'bold',
    'italic',
    'underline',
    'strike',
    'blockquote',
    'list',
    'bullet',
    'indent',
    'link',
    'image',
    'video',
];

export default BlogPostEditor;

```

### ClientApp\src\pages\Home\HomePage.js
```js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Placeholder components for each section
import HeroBanner from '@/components/HeroBanner/HeroBanner';
import FeaturedCategories from '@/components/FeaturedCategories/FeaturedCategories';
import BestSellerSection from '@/components/BestSellers/BestSellers';
import FlashSale from '@/components/FlashSale/FlashSale';
import Commitment from '@/components/Commitment/Commitment';
import BannerSlider from '@/components/Homepage/BannerSlider'; // New import

const componentMap = {
  hero: HeroBanner,
  categories: FeaturedCategories,
  featured_products: BestSellerSection, // Changed to BestSellerSection
  special_offer: FlashSale,
  best_seller: BestSellerSection, // New mapping for best_seller
  brand_trust: Commitment,
  banner_slider: BannerSlider, // New component mapping
};

const HomePage = () => {
  const [config, setConfig] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchConfig = async () => {
      try {
        const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/homepage-config`);
        setConfig(response.data);
      } catch (err) {
        setError('Failed to load homepage configuration.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchConfig();
  }, []);

  if (loading) {
    return <div className="flex items-center justify-center h-screen">Loading...</div>;
  }

  if (error) {
    return <div className="flex items-center justify-center h-screen text-red-500">{error}</div>;
  }

  if (!config) {
    return null;
  }

  return (
    <main>
      {config.layout.map((sectionName) => {
        const Component = componentMap[sectionName];
        const sectionData = config.components[sectionName];

        if (Component && sectionData && sectionData.enabled) {
          if (sectionName === 'categories') {
            return <Component key={sectionName} />;
          } else if (sectionName === 'banner_slider') { // Handle banner_slider separately
            return <Component key={sectionName} />;
          } else {
            return <Component key={sectionName} data={sectionData} />;
          }
        }

        return null;
      })}
    </main>
  );
};

export default HomePage;
```

### ClientApp\src\pages\OrderLookupPage\OrderLookupPage.jsx
```jsx
import React from "react";
import Navbar from "@/components/Navbar/Navbar";
import OrderLookup from "@/components/Order/OrderLookup";
import Footer from "@/components/Footer/Footer";

const OrderLookupPage = () => {
  return (
    <>
      <Navbar />
      <main style={{
        minHeight: "70vh",
        background: "#f5f5f5",
        paddingTop: 48,
        paddingBottom: 48,
        display: "flex",
        flexDirection: "column",
        alignItems: "center"
      }}>
        <div style={{ width: "100%", maxWidth: 1200 }}>
          <OrderLookup />
        </div>
      </main>
      <Footer />
    </>
  );
};

export default OrderLookupPage;

```

### ClientApp\src\pages\ProductList\ProductList.jsx
```jsx
import React, { useState } from "react";
import { useLocation } from "react-router-dom";
import {
  Box,
  Container,
  Paper,
  Typography,
  Breadcrumbs,
  Link,
  Button,
  InputBase,
  IconButton,
  Fade,
  useScrollTrigger,
  Zoom,
  Fab,
} from "@mui/material";
import {
  Home,
  ChevronRight,
  Search,
  ArrowUp,
  GridIcon,
  ListIcon,
} from "lucide-react";
import { motion } from "framer-motion";
import Navbar from "@/components/Navbar/Navbar";
import CategoryMenu from "@/components/List/CategoryMenu";
import FilterSection from "@/components/List/FilterSection";
import ProductGrid from "@/components/List/ProductGrid";
import Commitment from "@/components/Commitment/Commitment";
import Footer from "@/components/Footer/Footer";

const container = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
};

const item = {
  hidden: { opacity: 0, y: 20 },
  show: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.5,
      ease: [0.43, 0.13, 0.23, 0.96],
    },
  },
};

const ProductList = () => {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const categoryId = queryParams.get("categoryId");
  const searchQuery = queryParams.get("search");

  const [selectedPriceRange, setSelectedPriceRange] = useState("all");
  const [selectedBrand, setSelectedBrand] = useState(null);
  const [viewMode, setViewMode] = useState("grid");
  const [searchValue, setSearchValue] = useState(searchQuery || "");
  const [currentPage, setCurrentPage] = useState(1); // Thêm state cho current page

  // Reset trang khi filter thay đổi
  const handleFilterChange = (filterType, value) => {
    setCurrentPage(1); // Reset về trang 1

    switch (filterType) {
      case "priceRange":
        setSelectedPriceRange(value);
        break;
      case "brand":
        setSelectedBrand(value);
        break;
      default:
        break;
    }
  };

  const trigger = useScrollTrigger({
    disableHysteresis: true,
    threshold: 100,
  });

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  return (
    <motion.div initial="hidden" animate="show" variants={container}>
      <Box
        sx={{
          minHeight: "100vh",
          bgcolor: "#f8fafc",
          background: "linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)",
        }}
      >
        <Navbar />

        <Container
          maxWidth="xl"
          sx={{
            pt: { xs: 3, sm: 4 },
            pb: { xs: 6, sm: 8 },
            position: "relative",
          }}
        >
          <motion.div variants={item}>
            {/* Breadcrumb Navigation */}
            <Breadcrumbs
              separator={<ChevronRight size={16} />}
              sx={{
                mb: 4,
                px: 2,
                py: 1.5,
                bgcolor: "background.paper",
                borderRadius: 2,
                backdropFilter: "blur(10px)",
                border: "1px solid rgba(230, 232, 236, 0.8)",
                "& .MuiBreadcrumbs-li": {
                  display: "flex",
                  alignItems: "center",
                },
              }}
            >
              <Link
                href="/"
                sx={{
                  display: "flex",
                  alignItems: "center",
                  gap: 0.5,
                  color: "text.secondary",
                  textDecoration: "none",
                  fontSize: "0.875rem",
                  transition: "color 0.2s ease",
                  "&:hover": { color: "primary.main" },
                }}
              >
                <Home size={16} />
                Trang chủ
              </Link>
              <Typography
                color="text.primary"
                sx={{
                  display: "flex",
                  alignItems: "center",
                  fontSize: "0.875rem",
                  fontWeight: 500,
                }}
              >
                {searchQuery ? "Tìm kiếm" : "Danh mục sản phẩm"}
              </Typography>
            </Breadcrumbs>
          </motion.div>

          <motion.div variants={item}>
            {/* Page Header */}
            <Box sx={{ mb: 6, textAlign: "center" }}>
              <Typography
                variant="h3"
                component="h1"
                sx={{
                  fontWeight: 800,
                  background:
                    "linear-gradient(45deg, #1e293b 30%, #334155 90%)",
                  WebkitBackgroundClip: "text",
                  WebkitTextFillColor: "transparent",
                  mb: 2,
                  letterSpacing: "-0.02em",
                  position: "relative",
                  "&::after": {
                    content: '""',
                    position: "absolute",
                    bottom: -8,
                    left: "50%",
                    transform: "translateX(-50%)",
                    width: 60,
                    height: 4,
                    borderRadius: 2,
                    background:
                      "linear-gradient(45deg, #6366F1 30%, #818CF8 90%)",
                  },
                }}
              >
                {searchQuery
                  ? `Kết quả tìm kiếm cho "${searchQuery}"`
                  : "Khám phá sản phẩm"}
              </Typography>
              <Typography
                variant="subtitle1"
                sx={{
                  color: "text.secondary",
                  maxWidth: 600,
                  mx: "auto",
                  mb: 4,
                  lineHeight: 1.6,
                }}
              >
                Khám phá bộ sưu tập sản phẩm công nghệ đa dạng với chất lượng
                đảm bảo
              </Typography>
            </Box>
          </motion.div>

          <motion.div variants={item}>
            {/* Category Menu */}
            <Paper
              elevation={0}
              sx={{
                mb: 4,
                borderRadius: 3,
                overflow: "hidden",
                border: "1px solid",
                borderColor: "divider",
                backdropFilter: "blur(20px)",
                backgroundColor: "rgba(255, 255, 255, 0.9)",
                transition: "all 0.3s ease-in-out",
                "&:hover": {
                  transform: "translateY(-4px)",
                  boxShadow: "0 12px 24px -8px rgba(0,0,0,0.1)",
                },
              }}
            >
              <CategoryMenu />
            </Paper>
          </motion.div>

          <motion.div variants={item}>
            {/* View Mode Toggle */}{" "}
            <Box
              sx={{
                display: "flex",
                justifyContent: "flex-end",
                alignItems: "center",
                mb: 3,
                gap: 2,
              }}
            >
              {/* View Mode Buttons */}
              <Box sx={{ display: "flex", gap: 1 }}>
                <Button
                  size="small"
                  startIcon={<GridIcon size={18} />}
                  variant={viewMode === "grid" ? "contained" : "outlined"}
                  onClick={() => setViewMode("grid")}
                  sx={{
                    borderRadius: 2,
                    textTransform: "none",
                    boxShadow: "none",
                    transition: "all 0.3s ease",
                    "&:hover": {
                      transform: "translateY(-2px)",
                      boxShadow: "0 4px 8px -4px rgba(0,0,0,0.1)",
                    },
                  }}
                >
                  Grid
                </Button>
                <Button
                  size="small"
                  startIcon={<ListIcon size={18} />}
                  variant={viewMode === "list" ? "contained" : "outlined"}
                  onClick={() => setViewMode("list")}
                  sx={{
                    borderRadius: 2,
                    textTransform: "none",
                    boxShadow: "none",
                    transition: "all 0.3s ease",
                    "&:hover": {
                      transform: "translateY(-2px)",
                      boxShadow: "0 4px 8px -4px rgba(0,0,0,0.1)",
                    },
                  }}
                >
                  List
                </Button>
              </Box>
            </Box>
          </motion.div>

          <motion.div variants={item}>
            {/* Main Content */}
            <Box
              sx={{
                display: "grid",
                gridTemplateColumns: { xs: "1fr", lg: "280px 1fr" },
                gap: 4,
              }}
            >
              {/* Filter Section */}
              <motion.div variants={item}>
                <Paper
                  elevation={0}
                  sx={{
                    p: 3,
                    borderRadius: 3,
                    border: "1px solid",
                    borderColor: "divider",
                    height: "fit-content",
                    position: { lg: "sticky" },
                    top: { lg: 24 },
                    backdropFilter: "blur(20px)",
                    backgroundColor: "rgba(255, 255, 255, 0.9)",
                    transition: "all 0.3s ease-in-out",
                    "&:hover": {
                      boxShadow: "0 8px 16px -4px rgba(0,0,0,0.1)",
                      transform: "translateY(-4px)",
                    },
                  }}
                >
                  {" "}
                  <FilterSection
                    onPriceChange={(value) =>
                      handleFilterChange("priceRange", value)
                    }
                    onBrandChange={(value) =>
                      handleFilterChange("brand", value)
                    }
                    viewMode={viewMode}
                    onViewModeChange={setViewMode}
                  />
                </Paper>
              </motion.div>

              {/* Product Grid */}
              <motion.div variants={item} style={{ width: "100%" }}>
                <ProductGrid
                  selectedCategory={categoryId ? parseInt(categoryId) : null}
                  selectedPriceRange={selectedPriceRange}
                  selectedBrand={selectedBrand}
                  viewMode={viewMode}
                  currentPage={currentPage} // Truyền currentPage vào đây
                  onPageChange={setCurrentPage} // Hàm để thay đổi trang
                />
              </motion.div>
            </Box>
          </motion.div>
        </Container>

        <motion.div variants={item}>
          <Box sx={{ bgcolor: "background.paper" }}>
            <Container maxWidth="xl" sx={{ py: 6 }}>
              <Commitment />
            </Container>
          </Box>
        </motion.div>

        <motion.div variants={item}>
          <Footer />
        </motion.div>
      </Box>

      {/* Scroll to Top Button */}
      <Zoom in={trigger}>
        <Box
          onClick={scrollToTop}
          role="presentation"
          sx={{
            position: "fixed",
            bottom: 32,
            right: 32,
            zIndex: 1000,
          }}
        >
          <Fab
            color="primary"
            size="small"
            aria-label="scroll back to top"
            sx={{
              boxShadow: "0 8px 16px -4px rgba(99, 102, 241, 0.5)",
              transition: "all 0.3s ease",
              "&:hover": {
                transform: "translateY(-2px)",
                boxShadow: "0 12px 20px -4px rgba(99, 102, 241, 0.6)",
              },
            }}
          >
            <ArrowUp size={20} />
          </Fab>
        </Box>
      </Zoom>
    </motion.div>
  );
};

export default ProductList;

```

### ClientApp\src\pages\ProductPage\ProductPage.jsx
```jsx
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Container, Grid, Box, Alert, CircularProgress } from "@mui/material";
import Navbar from "@/components/Navbar/Navbar";
import ProductImage from "@/components/ProductInfoPage/ProductImage";
import ProductInfo from "@/components/ProductInfoPage/ProductInfo";
import ProductVariants from "@/components/ProductInfoPage/ProductVariants";
import Footer from "@/components/Footer/Footer";
import ProductReviews from "@/components/ProductInfoPage/ProductReviews";
import RelatedProducts from "@/components/ProductInfoPage/RelatedProducts";
import SpecificationDisplay from "@/components/ProductInfoPage/ProductSpecifications";
import Commitment from "@/components/Commitment/Commitment";

const ProductPage = () => {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/Products/${id}`
        );
        if (!response.ok) {
          throw new Error("Không thể tải dữ liệu sản phẩm.");
        }
        const data = await response.json();
        setProduct(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchProduct();
  }, [id]);

  const getProductType = () => {
    if (!product?.category?.name) return null;

    const categoryName = product.category.name.toLowerCase();
    if (categoryName.includes("phone") || categoryName.includes("điện thoại")) {
      return "phone";
    } else if (
      categoryName.includes("laptop") ||
      categoryName.includes("máy tính")
    ) {
      return "laptop";
    } else if (
      categoryName.includes("headphone") ||
      categoryName.includes("tai nghe")
    ) {
      return "headphone";
    }
    return null;
  };

  if (loading) {
    return (
      <Box className="min-h-screen flex items-center justify-center">
        <CircularProgress size={60} thickness={4} />
      </Box>
    );
  }

  if (error) {
    return (
      <Box className="min-h-screen flex items-center justify-center p-4">
        <Alert severity="error" variant="filled">
          {error}
        </Alert>
      </Box>
    );
  }

  if (!product) {
    return (
      <Box className="min-h-screen flex items-center justify-center p-4">
        <Alert severity="warning" variant="filled">
          Không tìm thấy sản phẩm
        </Alert>
      </Box>
    );
  }


  return (
    <Box className="min-h-screen bg-gray-50">
      <Navbar />

      <Container maxWidth="xl" sx={{ pt: { xs: 8, sm: 12 }, pb: 8 }}>
        <Grid container spacing={4}>
          {/* Product Image Section */}
          <Grid item xs={12} md={6} lg={5}>
            <Box
              sx={{
                position: "sticky",
                top: 100,
                backgroundColor: "white",
                borderRadius: 2,
                overflow: "hidden",
                boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
                p: 2, // Added padding
              }}
            >
              <ProductImage images={product.images || []} name={product.name} />
            </Box>
          </Grid>
          {/* Product Info Section */}
          <Grid item xs={12} md={6} lg={7}>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
              <ProductInfo product={product} />
              <ProductVariants
                variants={product.variants || []}
                onAddToCart={() => {}}
              />
            </Box>
          </Grid>
          {/* Product Specifications Section */}
   
            <Grid item xs={12}>
              <Box
                sx={{
                  backgroundColor: "white",
                  borderRadius: 2,
                  overflow: "hidden",
                  boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
                  p: 3, // Added padding
                }}
              >
                <SpecificationDisplay
                  productId={product.id}
                />
              </Box>
            </Grid>
          {/* Product Reviews Section */}
          <Grid item xs={12}>
            <Box
              sx={{
                backgroundColor: "white",
                borderRadius: 2,
                p: 3,
                boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
              }}
            >
              <ProductReviews productId={product.id} />
            </Box>
          </Grid>
          {/* Related Products Section */}
          {/* <Grid item xs={12}>
            <Box sx={{ mt: 4 }}>
              <RelatedProducts
                productId={product.id}
                brandId={product.brandId}
                categoryId={product.categoryId}
              />
            </Box>
          </Grid> */}
        </Grid>
      </Container>
    </Box>
  );
};

export default ProductPage;

```

### ClientApp\src\pages\ProfilePage\ProfilePage.jsx
```jsx
import React from "react";
import { NavLink, Outlet, useLocation } from "react-router-dom";
import Navbar from "../../components/Navbar/Navbar";
import Footer from "../../components/Footer/Footer";

const ProfilePage = () => {
  const location = useLocation();
  const activeTab = location.pathname.split("/profile/")[1] || "profile";

  const tabs = [
    { id: "info", label: "Thông tin cá nhân", icon: "👤" },
    { id: "address", label: "Sổ địa chỉ", icon: "🏠" },
    { id: "orders", label: "Đơn hàng", icon: "📦" },
    { id: "loyalty", label: "Tích điểm", icon: "⭐" },
  ];

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar />
      
      <div className="flex flex-1 container mx-auto px-4 py-8 gap-6">
        {/* Sidebar Navigation */}
        <div className="w-64 flex-shrink-0">
          <div className="bg-white rounded-lg shadow-sm p-4 sticky top-24">
            <h2 className="text-xl font-bold mb-6 text-gray-800 border-b pb-2">Tài khoản của tôi</h2>
            <nav className="space-y-1">
              {tabs.map((tab) => (
                <NavLink
                  key={tab.id}
                  to={`/profile/${tab.id}`}
                  className={({ isActive }) =>
                    `flex items-center px-4 py-3 rounded-lg transition-colors ${
                      isActive
                        ? "bg-blue-50 text-blue-600 font-medium"
                        : "text-gray-600 hover:bg-gray-100"
                    }`
                  }
                >
                  <span className="mr-3 text-lg">{tab.icon}</span>
                  {tab.label}
                </NavLink>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          <div className="bg-white rounded-lg shadow-sm p-6 min-h-[calc(100vh-180px)]">
            <Outlet />
          </div>
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default ProfilePage;
```

### ClientApp\src\pages\shoppingcart\shoppingcart.jsx
```jsx
import React, { useState, useEffect } from "react";
import Navbar from "@/components/Navbar/Navbar";
import CartItem from "@/components/shoppingcart/CartItem";
import OrderSummary from "@/components/shoppingcart/OrderSummary";
import Commitment from "@/components/Commitment/Commitment";
import Footer from "@/components/Footer/Footer";

const Shoppingcart = () => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [total, setTotal] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [payable, setPayable] = useState(0);
  const [rewardPoints, setRewardPoints] = useState(0);

  useEffect(() => {
    const fetchCart = async () => {
      try {
        const response = await fetch(
          `${process.env.REACT_APP_API_BASE_URL}/api/cart`,
          {
            method: "GET",
            credentials: "include",
          }
        );

        if (!response.ok) {
          throw new Error("Không thể lấy dữ liệu giỏ hàng");
        }

        const data = await response.json();
        setCartItems(data.items);
        setTotal(data.total);
        setDiscount(data.discount);
        setPayable(data.payable);
        setRewardPoints(data.rewardPoints);
      } catch (error) {
        console.error("Lỗi khi tải giỏ hàng:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, []);

  return (
    <div className="shoppingcart-container mt-14">
      <Navbar />

      <div className="flex gap-6 p-6">
        <div className="w-2/3">
          {loading ? (
            <p className="text-center text-gray-500">Đang tải giỏ hàng...</p>
          ) : cartItems.length > 0 ? (
            cartItems.map((item) => <CartItem key={item.id} item={item} />)
          ) : (
            <div className="text-center text-gray-500 font-semibold p-4">
              🛒 Giỏ hàng của bạn đang trống
            </div>
          )}
        </div>

        <div className="w-1/3">
          <OrderSummary
            total={total}
            discount={discount}
            payable={payable}
            rewardPoints={rewardPoints}
          />
        </div>
      </div>

      <Commitment />
      <Footer />
    </div>
  );
};

export default Shoppingcart;

```

### ClientApp\src\pages\Unauthorized\Unauthorized.jsx
```jsx
import { useNavigate } from 'react-router-dom';
import { 
  Container,
  Typography,
  Paper,
  Button,
  Divider
} from '@mui/material';
import { 
  Lock as LockIcon,
  Home as HomeIcon
} from '@mui/icons-material';

const Unauthorized = () => {
  const navigate = useNavigate();

  const handleGoHome = () => {
    navigate("/");
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>
        <LockIcon color="error" sx={{ fontSize: 80, mb: 2 }} />
        
        <Typography variant="h4" component="h1" gutterBottom color="error">
          Truy Cập Bị Từ Chối
        </Typography>
        
        <Typography variant="body1" sx={{ mb: 3 }}>
          Bạn không có quyền truy cập trang này. Vui lòng liên hệ quản trị viên nếu bạn cho rằng đây là lỗi.
        </Typography>
        
        <Divider sx={{ my: 3 }} />
        
        <Button
          variant="contained"
          size="large"
          startIcon={<HomeIcon />}
          onClick={handleGoHome}
        >
          Quay Về Trang Chủ
        </Button>
      </Paper>
    </Container>
  );
};

export default Unauthorized;
```

### ClientApp\src\services\ChatSignalRService.js
```js
import { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';

class ChatSignalRService {
    constructor() {
        this.connection = null;
        this.isConnected = false;
        this.connectionId = null;
        this.eventHandlers = {};
    }

    async connect(userId = null, sessionId = null) {
        try {
            // Build connection
            this.connection = new HubConnectionBuilder()
                .withUrl(`${process.env.REACT_APP_API_BASE_URL || 'https://localhost:7157'}/chatHub`, {
                    withCredentials: true,
                    headers: userId ? { 'X-User-Id': userId } : {}
                })
                .withAutomaticReconnect([0, 2000, 10000, 30000])
                .configureLogging(LogLevel.Information)
                .build();

            // Setup event handlers
            this.setupEventHandlers();

            // Start connection
            await this.connection.start();
            this.isConnected = true;
            this.connectionId = this.connection.connectionId;

            console.log('✅ SignalR Connected:', this.connectionId);

            // Join session if provided
            if (sessionId) {
                await this.joinSession(sessionId);
            }

            return this.connectionId;
        } catch (error) {
            console.error('❌ SignalR Connection failed:', error);
            throw error;
        }
    }

    setupEventHandlers() {
        // Receive messages
        this.connection.on('ReceiveMessage', (message) => {
            console.log('📨 Message received:', message);
            this.emit('messageReceived', message);
        });

        // AI response
        this.connection.on('ReceiveAIResponse', (response) => {
            console.log('🤖 AI Response:', response);
            this.emit('aiResponse', response);
        });

        // Session updates
        this.connection.on('SessionUpdated', (session) => {
            console.log('🔄 Session updated:', session);
            this.emit('sessionUpdated', session);
        });

        // Admin joined
        this.connection.on('AdminJoined', (adminInfo) => {
            console.log('👨‍💼 Admin joined:', adminInfo);
            this.emit('adminJoined', adminInfo);
        });

        // Typing indicators
        this.connection.on('UserTyping', (info) => {
            this.emit('userTyping', info);
        });

        // Connection state changes
        this.connection.onreconnecting(() => {
            console.log('🔄 SignalR Reconnecting...');
            this.isConnected = false;
            this.emit('reconnecting');
        });

        this.connection.onreconnected(() => {
            console.log('✅ SignalR Reconnected');
            this.isConnected = true;
            this.emit('reconnected');
        });

        this.connection.onclose(() => {
            console.log('❌ SignalR Disconnected');
            this.isConnected = false;
            this.emit('disconnected');
        });
    }

    // Send message
    async sendMessage(sessionId, message, messageType = 'Text') {
        if (!this.isConnected) {
            throw new Error('SignalR not connected');
        }

        try {
            await this.connection.invoke('SendMessage', sessionId, message, messageType);
        } catch (error) {
            console.error('❌ Failed to send message:', error);
            throw error;
        }
    }

    // Join session
    async joinSession(sessionId) {
        if (!this.isConnected) {
            throw new Error('SignalR not connected');
        }

        try {
            await this.connection.invoke('JoinSession', sessionId);
            console.log(`📨 Joined session: ${sessionId}`);
        } catch (error) {
            console.error('❌ Failed to join session:', error);
            throw error;
        }
    }

    // Leave session
    async leaveSession(sessionId) {
        if (!this.isConnected) {
            return;
        }

        try {
            await this.connection.invoke('LeaveSession', sessionId);
            console.log(`👋 Left session: ${sessionId}`);
        } catch (error) {
            console.error('❌ Failed to leave session:', error);
        }
    }

    // Send typing indicator
    async sendTyping(sessionId, isTyping) {
        if (!this.isConnected) {
            return;
        }

        try {
            await this.connection.invoke('SendTyping', sessionId, isTyping);
        } catch (error) {
            console.error('❌ Failed to send typing indicator:', error);
        }
    }

    // Event system
    on(event, callback) {
        if (!this.eventHandlers[event]) {
            this.eventHandlers[event] = [];
        }
        this.eventHandlers[event].push(callback);
    }

    off(event, callback) {
        if (this.eventHandlers[event]) {
            this.eventHandlers[event] = this.eventHandlers[event].filter(cb => cb !== callback);
        }
    }

    emit(event, data) {
        if (this.eventHandlers[event]) {
            this.eventHandlers[event].forEach(callback => callback(data));
        }
    }

    // Disconnect
    async disconnect() {
        if (this.connection) {
            await this.connection.stop();
            this.isConnected = false;
            this.connectionId = null;
            console.log('👋 SignalR Disconnected');
        }
    }

    // Get connection state
    getConnectionState() {
        return {
            isConnected: this.isConnected,
            connectionId: this.connectionId,
            state: this.connection?.state
        };
    }
}

// Export singleton instance
export const chatSignalR = new ChatSignalRService();
export default chatSignalR;

```

### ClientApp\src\utils\ChatTestRunner.js
```js
import { chatSignalR } from '../services/ChatSignalRService';

class ChatTestRunner {
    constructor() {
        this.testResults = [];
        this.currentTestSession = null;
    }

    // Test suite runner
    async runAllTests() {
        console.log('🧪 Starting AI Chat System Tests...');
        
        const testSuites = [
            this.testBasicConnection,
            this.testAIResponses,
            this.testContextTracking,
            this.testProductSearch,
            this.testOrderInquiry,
            this.testEscalation,
            this.testMultiSession,
            this.testErrorHandling
        ];

        for (const testSuite of testSuites) {
            try {
                await testSuite.call(this);
            } catch (error) {
                console.error(`❌ Test suite failed: ${testSuite.name}`, error);
                this.testResults.push({
                    suite: testSuite.name,
                    status: 'FAILED',
                    error: error.message
                });
            }
        }

        this.printTestReport();
        return this.testResults;
    }

    // Test 1: Basic Connection
    async testBasicConnection() {
        console.log('🔗 Testing SignalR Connection...');
        
        try {
            await chatSignalR.connect();
            this.assert(chatSignalR.isConnected, 'SignalR should be connected');
            
            this.testResults.push({
                suite: 'Basic Connection',
                status: 'PASSED',
                message: 'SignalR connection established successfully'
            });
        } catch (error) {
            throw new Error(`Connection failed: ${error.message}`);
        }
    }

    // Test 2: AI Responses
    async testAIResponses() {
        console.log('🤖 Testing AI Response System...');
        
        const testMessages = [
            { input: "Xin chào", expectedIntent: "greeting", minConfidence: 0.8 },
            { input: "Tôi muốn mua iPhone", expectedIntent: "product_search", minConfidence: 0.7 },
            { input: "Giá điện thoại bao nhiêu", expectedIntent: "price_inquiry", minConfidence: 0.7 },
            { input: "Đơn hàng của tôi ở đâu", expectedIntent: "order_status", minConfidence: 0.8 },
            { input: "Cảm ơn bạn", expectedIntent: "thanks", minConfidence: 0.9 }
        ];

        const session = await this.createTestSession();
        let passedTests = 0;

        for (const test of testMessages) {
            const response = await this.sendTestMessage(session.sessionId, test.input);
            
            if (response.intent === test.expectedIntent && response.confidenceScore >= test.minConfidence) {
                passedTests++;
                console.log(`✅ "${test.input}" -> ${response.intent} (${response.confidenceScore})`);
            } else {
                console.log(`❌ "${test.input}" -> Expected: ${test.expectedIntent}, Got: ${response.intent}`);
            }
        }

        this.testResults.push({
            suite: 'AI Responses',
            status: passedTests === testMessages.length ? 'PASSED' : 'PARTIAL',
            message: `${passedTests}/${testMessages.length} tests passed`
        });
    }

    // Test 3: Context Tracking
    async testContextTracking() {
        console.log('🧠 Testing Context Tracking...');
        
        const session = await this.createTestSession();
        
        // Conversation sequence
        const conversation = [
            "Tôi muốn mua iPhone",
            "Giá bao nhiêu?", // Should understand "giá iPhone"
            "Có màu đỏ không?", // Should understand "iPhone màu đỏ"
            "Tôi mua luôn" // Should understand purchase intent for iPhone
        ];

        let contextMaintained = true;
        
        for (let i = 0; i < conversation.length; i++) {
            const response = await this.sendTestMessage(session.sessionId, conversation[i]);
            
            if (i > 0 && !response.context?.includes('iPhone')) {
                contextMaintained = false;
                break;
            }
        }

        this.testResults.push({
            suite: 'Context Tracking',
            status: contextMaintained ? 'PASSED' : 'FAILED',
            message: contextMaintained ? 'Context maintained throughout conversation' : 'Context lost during conversation'
        });
    }

    // Test 4: Product Search
    async testProductSearch() {
        console.log('🔍 Testing Product Search...');
        
        const session = await this.createTestSession();
        const searchQueries = [
            "Tìm iPhone 15",
            "Laptop Dell gaming",
            "Tai nghe Sony",
            "Điện thoại Samsung dưới 10 triệu"
        ];

        let successfulSearches = 0;

        for (const query of searchQueries) {
            const response = await this.sendTestMessage(session.sessionId, query);
            
            if (response.productRecommendations && response.productRecommendations.length > 0) {
                successfulSearches++;
            }
        }

        this.testResults.push({
            suite: 'Product Search',
            status: successfulSearches === searchQueries.length ? 'PASSED' : 'PARTIAL',
            message: `${successfulSearches}/${searchQueries.length} searches returned products`
        });
    }

    // Test 5: Order Inquiry
    async testOrderInquiry() {
        console.log('📦 Testing Order Inquiry...');
        
        const session = await this.createTestSession('user123'); // Mock user ID
        const response = await this.sendTestMessage(session.sessionId, "Đơn hàng của tôi ở đâu?");
        
        const hasOrderInfo = response.intent === 'order_status' && 
                           (response.message.includes('đơn hàng') || response.message.includes('order'));

        this.testResults.push({
            suite: 'Order Inquiry',
            status: hasOrderInfo ? 'PASSED' : 'FAILED',
            message: hasOrderInfo ? 'Order status inquiry handled correctly' : 'Order inquiry not recognized'
        });
    }

    // Test 6: Escalation
    async testEscalation() {
        console.log('🚨 Testing Escalation Logic...');
        
        const session = await this.createTestSession();
        
        // Send complex query that should trigger escalation
        const complexQuery = "Tôi có vấn đề phức tạp với sản phẩm xyz123 không có trong danh sách";
        const response = await this.sendTestMessage(session.sessionId, complexQuery);
        
        const shouldEscalate = response.confidenceScore < 0.4 || response.requiresEscalation;

        this.testResults.push({
            suite: 'Escalation Logic',
            status: shouldEscalate ? 'PASSED' : 'FAILED',
            message: shouldEscalate ? 'Low confidence query triggered escalation' : 'Escalation not triggered when expected'
        });
    }

    // Test 7: Multi-Session
    async testMultiSession() {
        console.log('👥 Testing Multi-Session Support...');
        
        const sessions = await Promise.all([
            this.createTestSession('user1'),
            this.createTestSession('user2'),
            this.createTestSession('user3')
        ]);

        const responses = await Promise.all(
            sessions.map(session => 
                this.sendTestMessage(session.sessionId, "Xin chào")
            )
        );

        const allResponded = responses.every(response => response && response.message);

        this.testResults.push({
            suite: 'Multi-Session Support',
            status: allResponded ? 'PASSED' : 'FAILED',
            message: allResponded ? 'All sessions handled concurrently' : 'Some sessions failed to respond'
        });
    }

    // Test 8: Error Handling
    async testErrorHandling() {
        console.log('⚠️ Testing Error Handling...');
        
        const session = await this.createTestSession();
        
        try {
            // Test with empty message
            await this.sendTestMessage(session.sessionId, "");
            
            // Test with very long message
            const longMessage = "a".repeat(10000);
            await this.sendTestMessage(session.sessionId, longMessage);
            
            // Test with special characters
            await this.sendTestMessage(session.sessionId, "!@#$%^&*()_+{}|:<>?");
            
            this.testResults.push({
                suite: 'Error Handling',
                status: 'PASSED',
                message: 'System handled edge cases gracefully'
            });
        } catch (error) {
            this.testResults.push({
                suite: 'Error Handling',
                status: 'FAILED',
                message: `Error handling failed: ${error.message}`
            });
        }
    }

    // Helper Methods
    async createTestSession(userId = null) {
        const response = await fetch('/api/chat/sessions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId: userId,
                type: 'AI',
                isTest: true
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to create test session');
        }
        
        return await response.json();
    }

    async sendTestMessage(sessionId, message) {
        const response = await fetch('/api/chat/message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                sessionId: sessionId,
                message: message,
                type: 'Text'
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to send test message');
        }
        
        return await response.json();
    }

    assert(condition, message) {
        if (!condition) {
            throw new Error(`Assertion failed: ${message}`);
        }
    }

    printTestReport() {
        console.log('\n📊 TEST REPORT');
        console.log('='.repeat(50));
        
        const passed = this.testResults.filter(r => r.status === 'PASSED').length;
        const failed = this.testResults.filter(r => r.status === 'FAILED').length;
        const partial = this.testResults.filter(r => r.status === 'PARTIAL').length;
        
        console.log(`✅ Passed: ${passed}`);
        console.log(`❌ Failed: ${failed}`);
        console.log(`⚠️ Partial: ${partial}`);
        console.log(`📈 Success Rate: ${Math.round((passed / this.testResults.length) * 100)}%`);
        
        console.log('\nDetailed Results:');
        this.testResults.forEach(result => {
            const icon = result.status === 'PASSED' ? '✅' : result.status === 'FAILED' ? '❌' : '⚠️';
            console.log(`${icon} ${result.suite}: ${result.message}`);
        });
    }
}

// Export for use in development
export const runChatTests = async () => {
    const tester = new ChatTestRunner();
    return await tester.runAllTests();
};

export default ChatTestRunner;

```

### ClientApp\src\utils\formatCurrency.js
```js
export const formatCurrency = (amount) => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(amount);
};
```

### ClientApp\src\utils\FormatInfo.js
```js
import { Chip } from '@mui/material'; // Import Chip nếu cần sử dụng trong các component khác

// Hàm định dạng tiền tệ
const formatCurrency = (amount) => {
  if (typeof amount !== 'number') return 'N/A';
  return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
};

// Hàm định dạng ngày tháng
const formatDate = (dateString) => {
  if (!dateString) return 'N/A';
  try {
    const date = new Date(dateString);
    if (isNaN(date)) throw new Error('Invalid date');
    return date.toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  } catch {
    return 'Ngày không hợp lệ';
  }
};

// Hàm định dạng địa chỉ
const formatAddress = (address) => {
  if (!address || typeof address !== 'object') return 'Chưa có thông tin địa chỉ';
  const parts = [
    address.addressLine1,
    address.addressLine2,
    address.city,
    address.state,
    address.zipCode,
    address.country,
  ].filter(Boolean); // Lọc bỏ các phần tử rỗng hoặc null/undefined
  return parts.join(', ');
};

// Hàm lấy màu cho trạng thái
const getStatusColor = (status) => {
  switch (status?.toLowerCase()) {
    case 'delivered': return 'success';
    case 'processing': return 'info';
    case 'shipped': return 'primary';
    case 'cancelled': return 'error';
    case 'pending': return 'warning';
    default: return 'default'; // Màu mặc định
  }
};

// Hàm lấy tên hiển thị của trạng thái
const getStatusDisplayName = (status) => {
  switch (status) {
      case "Pending": return "Chờ xác nhận";
      case "Processing": return "Đã xác nhận";
      case "Shipped": return "Đang vận chuyển";
      case "Delivered": return "Đã xong";
      case "Cancelled": return "Đã hủy";
      case "WaitingForPayment": return "Chờ thanh toán";
      case "Paid": return "Đã thanh toán";
      case "ShippedPayment": return "Đang vận chuyển (đã thanh toán)";
      default: return status;
  }
};

// Mapping ID phương thức thanh toán sang tên
const paymentMethodMap = {
  1: 'Tiền mặt',
  2: 'MoMo',
  3: 'PayPal',
  // Thêm các phương thức khác nếu cần
};

const getPaymentMethodName = (id) => paymentMethodMap[id] || 'Không xác định';

// Component hiển thị Chip trạng thái
const StatusChip = ({ status }) => (
  <Chip
    label={status || 'Unknown'}
    color={getStatusColor(status)}
    size="small"
  />
);
// Hàm xác định các trạng thái được phép chuyển đổi
const getAllowedStatuses = (currentStatus) => {
  switch (currentStatus) {
      case "Pending": return ["Processing", "Cancelled"];
      case "Processing": return ["Shipped", "Cancelled"];
      case "Shipped": return ["Delivered"];
      case "WaitingForPayment": return ["Paid", "Cancelled"];
      case "Paid": return ["ShippedPayment"];
      case "ShippedPayment": return ["Delivered"];
      default: return [];
  }
};
// Hàm lấy màu trạng thái cho chip (ví dụ)
const getStatusChipClass = (status) => {
  switch (status) {
    case "Delivered": return "bg-green-100 text-green-800 hover:bg-green-200";
    case "Processing": return "bg-blue-100 text-blue-800 hover:bg-blue-200"; // Thay Processing sang Blue
    case "Shipped": return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200"; // Thay Shipped sang Yellow
    case "ShippedPayment": return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200";
    case "Paid": return "bg-purple-100 text-purple-800 hover:bg-purple-200"; // Thêm màu Paid
    case "WaitingForPayment": return "bg-orange-100 text-orange-800 hover:bg-orange-200"; // Thêm màu chờ thanh toán
    case "Pending": return "bg-gray-100 text-gray-800 hover:bg-gray-200"; // Thêm màu Pending
    case "Cancelled": return "bg-red-100 text-red-800 hover:bg-red-200";
    default: return "bg-gray-100 text-gray-800 hover:bg-gray-200";
  }
};

// (Có thể đặt ở ngoài component hoặc trong file utils.js)
const getFormattedDateString = (date) => {
  return date.toISOString().split("T")[0];
};

const getDateNDaysAgo = (daysAgo) => {
  const date = new Date(); // Lấy ngày giờ hiện tại theo múi giờ của client
  date.setDate(date.getDate() - daysAgo);
  return getFormattedDateString(date);
};

const getToday = () => {
  return getFormattedDateString(new Date());
};
export {
  formatCurrency,
  formatDate,
  formatAddress,
  getStatusColor,
  getPaymentMethodName,
  StatusChip,
  getStatusChipClass,
  getStatusDisplayName,
  getAllowedStatuses,
  getDateNDaysAgo,
  getToday,
};
```

### ClientApp\src\utils\timezoneTest.js
```js
// Timezone Test Utility
// This file helps debug and verify timezone formatting

// Test current time formatting
export const testTimezoneFormatting = () => {
  const now = new Date();
  const utcTime = new Date().toISOString();

  console.log("=== TIMEZONE FORMATTING TEST ===");
  console.log("Current local time:", now.toString());
  console.log("UTC time (ISO):", utcTime);

  // Test Vietnam timezone formatting
  const vietnamTime = now.toLocaleTimeString("vi-VN", {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
  });

  const vietnamDate = now.toLocaleDateString("vi-VN", {
    month: "2-digit",
    day: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
  });

  console.log("Vietnam time (UTC+7):", vietnamTime);
  console.log("Vietnam date (UTC+7):", vietnamDate);

  // Test with a sample UTC timestamp like what would come from backend
  const sampleBackendTime = "2025-07-02T10:30:00.000Z"; // Sample UTC time
  const parsedTime = new Date(sampleBackendTime);

  const formattedSampleTime = parsedTime.toLocaleTimeString("vi-VN", {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
  });

  console.log("Sample backend timestamp:", sampleBackendTime);
  console.log("Formatted to Vietnam time:", formattedSampleTime);
  console.log("==================================");

  return {
    utcTime,
    vietnamTime,
    vietnamDate,
    sampleBackendTime,
    formattedSampleTime,
  };
};

// Utility functions matching AdminChatDashboard.jsx
export const formatVietnamTime = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      timeZone: "Asia/Ho_Chi_Minh",
      hour12: false,
    });
  } catch (error) {
    console.error("Error formatting time:", error);
    return "";
  }
};

export const formatVietnamDate = (dateString) => {
  if (!dateString) return "";
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString("vi-VN", {
      month: "2-digit",
      day: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      timeZone: "Asia/Ho_Chi_Minh",
      hour12: false,
    });
  } catch (error) {
    console.error("Error formatting date:", error);
    return "";
  }
};

// Test function to verify the current time vs a UTC timestamp
export const compareTimezones = (utcTimestamp) => {
  const utcDate = new Date(utcTimestamp);
  const localTime = utcDate.toLocaleString();
  const vietnamTime = formatVietnamTime(utcTimestamp);
  const vietnamDate = formatVietnamDate(utcTimestamp);

  console.log("UTC Timestamp:", utcTimestamp);
  console.log("Local time:", localTime);
  console.log("Vietnam time (UTC+7):", vietnamTime);
  console.log("Vietnam date (UTC+7):", vietnamDate);

  return { localTime, vietnamTime, vietnamDate };
};

```

### ClientApp\src\utils\useDebounce.js
```js
// useDebounce.js
import { useState, useEffect } from 'react';

function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    // Thiết lập một timeout để cập nhật giá trị đã debounce sau khoảng thời gian delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Hủy timeout nếu value hoặc delay thay đổi, hoặc khi component unmount
    // Điều này quan trọng để tránh cập nhật state trên một component đã unmount
    // hoặc khi giá trị thay đổi nhanh chóng.
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]); // Chỉ chạy lại effect nếu value hoặc delay thay đổi

  return debouncedValue;
}

export default useDebounce;
```

### Configuration\CorsConfiguration.cs
```cs
using Microsoft.AspNetCore.Cors.Infrastructure;

namespace SHN_Gear.Configuration
{
    public static class CorsConfiguration
    {
        public static void ConfigureCors(this IServiceCollection services, IWebHostEnvironment environment)
        {
            services.AddCors(options =>
            {
                options.AddPolicy("AllowFrontend", policy =>
                {
                    var allowedOrigins = new[]
                    {
                        "https://localhost:44479",
                        "http://localhost:3000", 
                        "https://localhost:3001",
                        "https://localhost:7107",
                        "http://localhost:5067"
                    };

                    policy.WithOrigins(allowedOrigins)
                          .AllowAnyHeader()
                          .AllowAnyMethod()
                          .AllowCredentials()
                          .SetPreflightMaxAge(TimeSpan.FromSeconds(2520)); // Cache preflight for 42 minutes
                });

                // Policy riêng cho SignalR với cấu hình tối ưu
                options.AddPolicy("SignalRPolicy", policy =>
                {
                    var allowedOrigins = new[]
                    {
                        "https://localhost:44479",
                        "http://localhost:3000", 
                        "https://localhost:3001",
                        "https://localhost:7107",
                        "http://localhost:5067"
                    };

                    policy.WithOrigins(allowedOrigins)
                          .WithHeaders("Content-Type", "Authorization", "x-requested-with", "x-signalr-user-agent", 
                                     "Cache-Control", "X-Requested-With", "Accept", "Origin", "User-Agent", "DNT", "Keep-Alive")
                          .WithMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH")
                          .AllowCredentials()
                          .SetPreflightMaxAge(TimeSpan.FromSeconds(2520));
                });
            });
        }

        public static void UseCorsConfiguration(this WebApplication app)
        {
            // Custom CORS middleware để xử lý SignalR headers
            app.Use(async (context, next) =>
            {
                var origin = context.Request.Headers["Origin"].ToString();
                var isSignalRRequest = context.Request.Path.StartsWithSegments("/chatHub");
                
                if (!string.IsNullOrEmpty(origin))
                {
                    // Kiểm tra nếu origin được phép
                    var allowedOrigins = new[]
                    {
                        "https://localhost:44479",
                        "http://localhost:3000", 
                        "https://localhost:3001",
                        "https://localhost:7107",
                        "http://localhost:5067"
                    };

                    if (allowedOrigins.Contains(origin))
                    {
                        context.Response.Headers["Access-Control-Allow-Origin"] = origin;
                        context.Response.Headers["Access-Control-Allow-Credentials"] = "true";
                        
                        // Đặc biệt xử lý headers cho SignalR
                        if (isSignalRRequest)
                        {
                            context.Response.Headers["Access-Control-Allow-Headers"] = 
                                "Content-Type, Authorization, x-requested-with, x-signalr-user-agent, Cache-Control";
                        }
                        else
                        {
                            context.Response.Headers["Access-Control-Allow-Headers"] = "*";
                        }
                        
                        context.Response.Headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS";
                        context.Response.Headers["Access-Control-Max-Age"] = "2520";
                    }
                }

                // Xử lý preflight requests
                if (context.Request.Method == "OPTIONS")
                {
                    context.Response.StatusCode = 200;
                    return;
                }

                await next();
            });

            app.UseCors("AllowFrontend");

            // CORS logging cho debugging
            if (app.Environment.IsDevelopment())
            {
                app.Use(async (context, next) =>
                {
                    var origin = context.Request.Headers["Origin"].ToString();
                    var method = context.Request.Method;
                    var path = context.Request.Path;
                    var headers = string.Join(", ", context.Request.Headers.Keys);
                    
                    Console.WriteLine($"[CORS] {method} {path} from {origin}");
                    Console.WriteLine($"[CORS] Headers: {headers}");
                    
                    await next();
                });
            }
        }
    }
}

```

### Controllers\AddressController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/address")]
    public class AddressController : ControllerBase
    {
        private readonly AppDbContext _context;

        public AddressController(AppDbContext context)
        {
            _context = context;
        }

        // Thêm địa chỉ mới
        [HttpPost("add")]
        public async Task<IActionResult> AddAddress([FromBody] Address address)
        {
            if (address.UserId.HasValue)
            {
                var user = await _context.Users.FindAsync(address.UserId.Value);
                if (user == null)
                {
                    return NotFound("Người dùng không tồn tại.");
                }
            }

            _context.Addresses.Add(address);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Địa chỉ đã được thêm.", AddressId = address.Id });
        }

        // Lấy địa chỉ theo UserId
        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetAddressesByUserId(int userId)
        {
            var addresses = await _context.Addresses
                .Where(a => a.UserId == userId)
                .ToListAsync();

            return Ok(addresses);
        }

        // Lấy địa chỉ theo AddressId
        [HttpGet("{id}")]
        public async Task<IActionResult> GetAddressById(int id)
        {
            var address = await _context.Addresses.FindAsync(id);

            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            return Ok(address);
        }

        // Cập nhật địa chỉ
        [HttpPut("update/{id}")]
        public async Task<IActionResult> UpdateAddress(int id, [FromBody] CreateAddressDTO addressDTO)
        {
            var address = await _context.Addresses.FindAsync(id);
            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            address.FullName = addressDTO.FullName;
            address.PhoneNumber = addressDTO.PhoneNumber;
            address.AddressLine1 = addressDTO.AddressLine1;
            address.AddressLine2 = addressDTO.AddressLine2;
            address.City = addressDTO.City;
            address.State = addressDTO.State;
            address.ZipCode = addressDTO.ZipCode;
            address.Country = addressDTO.Country;

            _context.Addresses.Update(address);
            await _context.SaveChangesAsync();

            return Ok(address);
        }

        // Xóa địa chỉ
        [HttpDelete("delete/{id}")]
        public async Task<IActionResult> DeleteAddress(int id)
        {
            var address = await _context.Addresses.FindAsync(id);
            if (address == null)
            {
                return NotFound("Địa chỉ không tồn tại.");
            }

            _context.Addresses.Remove(address);
            await _context.SaveChangesAsync();

            return Ok("Địa chỉ đã được xóa.");
        }
    }
}

```

### Controllers\AuthController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using SHN_Gear.Services;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Authorization;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [EnableCors("AllowFrontend")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly UserService _userService;
        private readonly EmailService _emailService;
        private readonly IConfiguration _config;

        public AuthController(UserService userService, EmailService emailService, IConfiguration config)
        {
            _userService = userService;
            _emailService = emailService;
            _config = config;
        }

        // Kiểm tra email có tồn tại không
        [HttpPost("check-email")]
        public async Task<IActionResult> CheckEmailExists([FromBody] EmailDto emailDto)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(emailDto.Email))
                return BadRequest(new { message = "Email không hợp lệ" });

            bool exists = await _userService.CheckEmailExistsAsync(emailDto.Email);
            return Ok(new { exists });
        }

        // Đăng ký tài khoản
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto registerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(new { message = "Dữ liệu không hợp lệ" });

            var result = await _userService.RegisterUserAsync(registerDto);
            if (!result)
                return BadRequest(new { message = "Email đã tồn tại" });

            return Ok(new { message = "Đăng ký thành công" });
        }

        // Đăng nhập bằng Email
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDto loginDto)
        {
            if (!ModelState.IsValid)
                return BadRequest(new { message = "Dữ liệu không hợp lệ" });

            var user = await _userService.AuthenticateUserAsync(loginDto);
            if (user == null)
                return Unauthorized(new { message = "Sai email hoặc mật khẩu" });

            var token = GenerateJwtToken(user);
            return Ok(new { token });
        }

        // Gửi OTP qua Email
        [HttpPost("send-otp")]
        public async Task<IActionResult> SendOtp([FromBody] OtpRequestDto otpDto)
        {
            if (!ModelState.IsValid || string.IsNullOrEmpty(otpDto.Email))
                return BadRequest(new { message = "Email không hợp lệ" });

            var success = await _emailService.SendOTPAsync(otpDto.Email);
            if (!success)
                return BadRequest(new { message = "Gửi OTP thất bại" });

            return Ok(new { message = "OTP đã được gửi" });
        }
        // 🔹 API lấy thông tin người dùng đang đăng nhập
        [HttpGet("profile")]
        [Authorize]
        public async Task<IActionResult> GetProfile()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized(new { message = "Không tìm thấy ID trong token" });
            }

            var user = _userService.GetUserById(int.Parse(userId));

            if (user == null)
            {
                return NotFound(new { message = "User không tồn tại" });
            }

            return Ok(new
            {
                user.Id,
                user.FullName,
                user.Email,
                user.PhoneNumber,
                user.Gender,
                DateOfBirth = user.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }
        // 🔹 API chỉnh sửa thông tin cá nhân
        [HttpPut("profile")]
        [Authorize]
        public async Task<IActionResult> UpdateProfile([FromBody] EditProfileDto editDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized();

            var updatedUser = await _userService.UpdateUserProfileAsync(int.Parse(userId), editDto);
            if (updatedUser == null)
                return BadRequest();

            return Ok(new
            {
                updatedUser.Id,
                updatedUser.FullName,
                updatedUser.Email,
                updatedUser.PhoneNumber,
                updatedUser.Gender,
                DateOfBirth = updatedUser.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }

        // 🔹 API chỉnh sửa thông tin cá nhân
        [HttpPut("profile/{id}")]
        [Authorize]
        public async Task<IActionResult> EditProfile([FromBody] EditProfileDto editDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized();

            var updatedUser = await _userService.UpdateUserProfileAsync(int.Parse(userId), editDto);
            if (updatedUser == null)
                return BadRequest();

            return Ok(new
            {
                updatedUser.Id,
                updatedUser.FullName,
                updatedUser.Email,
                updatedUser.PhoneNumber,
                updatedUser.Gender,
                DateOfBirth = updatedUser.DateOfBirth?.ToString("yyyy-MM-dd")
            });
        }



        // Tạo JWT Token
        private string GenerateJwtToken(User user)
        {
            var key = Encoding.UTF8.GetBytes(_config["Jwt:Key"]);
            var roleName = user.Role?.Name ?? "User";

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // Chỉ dùng MỘT trong hai cách sau:
                
                new Claim("roleId", user.RoleId.ToString()), // Quan trọng
                new Claim(ClaimTypes.Role, user.Role?.Name ?? "User"),
                new Claim("http://schemas.microsoft.com/.../role", user.Role?.Name ?? "User"),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            var token = new JwtSecurityToken(
                issuer: _config["Jwt:Issuer"],
                audience: _config["Jwt:Audience"],
                claims: claims,
                expires: DateTime.UtcNow.AddHours(3),
                signingCredentials: new SigningCredentials(
                    new SymmetricSecurityKey(key),
                    SecurityAlgorithms.HmacSha256)
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
```

### Controllers\BlogPostsController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BlogPostsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public BlogPostsController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/BlogPosts
        [HttpGet]
        public async Task<ActionResult<IEnumerable<BlogPostDto>>> GetBlogPosts()
        {
            var blogPosts = await _context.BlogPosts
                .Include(bp => bp.Author)
                .Select(bp => new BlogPostDto
                {
                    Id = bp.Id,
                    Title = bp.Title,
                    Content = bp.Content,
                    AuthorId = bp.AuthorId,
                    AuthorName = bp.Author.FullName, // Using FullName property from User model
                    CreatedAt = bp.CreatedAt,
                    UpdatedAt = bp.UpdatedAt,
                    IsPublished = bp.IsPublished
                })
                .ToListAsync();
            return Ok(blogPosts);
        }

        // GET: api/BlogPosts/5
        [HttpGet("{id}")]
        public async Task<ActionResult<BlogPostDto>> GetBlogPost(int id)
        {
            var blogPost = await _context.BlogPosts
                .Include(bp => bp.Author)
                .Where(bp => bp.Id == id)
                .Select(bp => new BlogPostDto
                {
                    Id = bp.Id,
                    Title = bp.Title,
                    Content = bp.Content,
                    AuthorId = bp.AuthorId,
                    AuthorName = bp.Author.FullName,
                    CreatedAt = bp.CreatedAt,
                    UpdatedAt = bp.UpdatedAt,
                    IsPublished = bp.IsPublished
                })
                .FirstOrDefaultAsync();

            if (blogPost == null)
            {
                return NotFound();
            }

            return Ok(blogPost);
        }

        // POST: api/BlogPosts
        [HttpPost]
        [Authorize(Roles = "Admin")] // Only Admins can create blog posts
        public async Task<ActionResult<BlogPostDto>> CreateBlogPost(CreateBlogPostDto createBlogPostDto)
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (userId == null) return Unauthorized();

            var blogPost = new BlogPost
            {
                Title = createBlogPostDto.Title,
                Content = createBlogPostDto.Content,
                AuthorId = int.Parse(userId),
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                IsPublished = createBlogPostDto.IsPublished
            };

            _context.BlogPosts.Add(blogPost);
            await _context.SaveChangesAsync();

            var createdBlogPost = await _context.BlogPosts
                .Include(bp => bp.Author)
                .Where(bp => bp.Id == blogPost.Id)
                .Select(bp => new BlogPostDto
                {
                    Id = bp.Id,
                    Title = bp.Title,
                    Content = bp.Content,
                    AuthorId = bp.AuthorId,
                    AuthorName = bp.Author.FullName,
                    CreatedAt = bp.CreatedAt,
                    UpdatedAt = bp.UpdatedAt,
                    IsPublished = bp.IsPublished
                })
                .FirstOrDefaultAsync();

            return CreatedAtAction(nameof(GetBlogPost), new { id = createdBlogPost.Id }, createdBlogPost);
        }

        // PUT: api/BlogPosts/5
        [HttpPut("{id}")]
        [Authorize(Roles = "Admin")] // Only Admins can update blog posts
        public async Task<IActionResult> UpdateBlogPost(int id, UpdateBlogPostDto updateBlogPostDto)
        {
            var blogPost = await _context.BlogPosts.FindAsync(id);

            if (blogPost == null)
            {
                return NotFound();
            }

            blogPost.Title = updateBlogPostDto.Title;
            blogPost.Content = updateBlogPostDto.Content;
            blogPost.UpdatedAt = DateTime.UtcNow;
            blogPost.IsPublished = updateBlogPostDto.IsPublished;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!BlogPostExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/BlogPosts/5
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")] // Only Admins can delete blog posts
        public async Task<IActionResult> DeleteBlogPost(int id)
        {
            var blogPost = await _context.BlogPosts.FindAsync(id);
            if (blogPost == null)
            {
                return NotFound();
            }

            _context.BlogPosts.Remove(blogPost);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool BlogPostExists(int id)
        {
            return _context.BlogPosts.Any(e => e.Id == id);
        }
    }
}

```

### Controllers\BrandController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/brands")]
    [ApiController]
    public class BrandController : ControllerBase
    {
        private readonly AppDbContext _context;

        public BrandController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy tất cả thương hiệu
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Brand>>> GetBrands()
        {
            var brands = await _context.Brands.ToListAsync();
            return Ok(brands);
        }

        // Lấy thương hiệu theo Id
        [HttpGet("{id}")]
        public async Task<ActionResult<Brand>> GetBrand(int id)
        {
            var brand = await _context.Brands.FindAsync(id);
            if (brand == null)
            {
                return NotFound();
            }
            return Ok(brand);
        }

        // Thêm thương hiệu mới
        [HttpPost]
        public async Task<ActionResult<Brand>> CreateBrand(Brand brand)
        {
            _context.Brands.Add(brand);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(GetBrand), new { id = brand.Id }, brand);
        }

        // Cập nhật thương hiệu
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateBrand(int id, Brand brand)
        {
            if (id != brand.Id)
            {
                return BadRequest();
            }

            _context.Entry(brand).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!_context.Brands.Any(e => e.Id == id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // Xóa thương hiệu
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteBrand(int id)
        {
            var brand = await _context.Brands.FindAsync(id);
            if (brand == null)
            {
                return NotFound();
            }

            // Kiểm tra xem có sản phẩm nào thuộc thương hiệu này không
            var hasProducts = await _context.Products.AnyAsync(p => p.BrandId == id);
            if (hasProducts)
            {
                return BadRequest("Không thể xóa thương hiệu này vì có sản phẩm thuộc thương hiệu này.");
            }

            _context.Brands.Remove(brand);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
```

### Controllers\CartController.cs
```cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using SHN_Gear.Data;
using SHN_Gear.DTOs;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CartController(AppDbContext context, IHttpContextAccessor httpContextAccessor)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
        }

        // Thêm sản phẩm vào giỏ hàng
        [HttpPost]
        public async Task<IActionResult> AddToCart([FromBody] CartDto request)
        {
            if (request.ProductVariantId <= 0 || request.Quantity <= 0)
            {
                return BadRequest("Thông tin sản phẩm không hợp lệ.");
            }

            if (request.UserId > 0)
            {
                // Người dùng đã đăng nhập
                var cart = await _context.Carts
                    .Include(c => c.Items)
                    .FirstOrDefaultAsync(c => c.UserId == request.UserId);

                if (cart == null)
                {
                    cart = new Cart { UserId = request.UserId, Items = new List<CartItem>() };
                    _context.Carts.Add(cart);
                }

                var existingItem = cart.Items.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (existingItem != null)
                {
                    existingItem.Quantity += request.Quantity;
                    existingItem.UpdatedAt = DateTime.UtcNow;
                }
                else
                {
                    cart.Items.Add(new CartItem
                    {
                        ProductVariantId = request.ProductVariantId,
                        Quantity = request.Quantity,
                        AddedAt = DateTime.UtcNow
                    });
                }

                await _context.SaveChangesAsync();
            }
            else
            {
                // Người dùng chưa đăng nhập - Lưu vào session
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var existingItem = cartItems.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (existingItem != null)
                {
                    existingItem.Quantity += request.Quantity;
                }
                else
                {
                    cartItems.Add(new CartItemSession
                    {
                        ProductVariantId = request.ProductVariantId,
                        Quantity = request.Quantity
                    });
                }

                session.SetString("Cart", JsonSerializer.Serialize(cartItems));
            }

            return Ok("Sản phẩm đã được thêm vào giỏ hàng.");
        }

        // Lấy giỏ hàng
        [HttpGet]
        public async Task<IActionResult> GetCart([FromQuery] int? userId)
        {
            if (userId > 0)
            {
                // Logic cũ cho người dùng đã đăng nhập
                var cart = await _context.Carts
                    .Include(c => c.Items)
                        .ThenInclude(i => i.ProductVariant)
                            .ThenInclude(v => v.Product)
                                .ThenInclude(p => p.Images)
                    .FirstOrDefaultAsync(c => c.UserId == userId);

                if (cart == null || cart.Items.Count == 0)
                {
                    return Ok(new List<object>());
                }

                var cartItems = cart.Items.Select(i => new
                {
                    i.Id,
                    i.Quantity,
                    i.ProductVariantId,
                    ProductName = i.ProductVariant.Product.Name,
                    ProductImage = i.ProductVariant.Product.Images
        .OrderByDescending(img => img.IsPrimary) // Ưu tiên ảnh IsPrimary
        .ThenBy(img => img.Id)                  // Sau đó sắp xếp theo ID
        .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png", // Fallback image
                    VariantColor = i.ProductVariant.Color,
                    VariantStorage = i.ProductVariant.Storage,
                    ProductPrice = i.ProductVariant.Price,
                    ProductDiscountPrice = i.ProductVariant.DiscountPrice
                }).ToList();

                return Ok(cartItems);
            }
            else
            {
                // Xử lý cho người dùng chưa đăng nhập
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                // Lấy thông tin sản phẩm cho từng item trong giỏ hàng session
                var result = new List<object>();
                foreach (var item in cartItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(v => v.Product)
                            .ThenInclude(p => p.Images)
                        .FirstOrDefaultAsync(v => v.Id == item.ProductVariantId);

                    if (variant != null)
                    {
                        result.Add(new
                        {
                            item.ProductVariantId,
                            item.Quantity,
                            ProductName = variant.Product.Name,
                            ProductImage = variant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                            VariantColor = variant.Color,
                            VariantStorage = variant.Storage,
                            ProductPrice = variant.Price,
                            ProductDiscountPrice = variant.DiscountPrice
                        });
                    }
                }

                return Ok(result);
            }
        }

        // Cập nhật số lượng sản phẩm trong giỏ hàng
        [HttpPut("update")]
        public async Task<IActionResult> UpdateCartItem([FromBody] CartDto request)
        {
            if (request.UserId > 0)
            {
                var cartItem = await _context.CartItems
                    .FirstOrDefaultAsync(i => i.Cart.UserId == request.UserId && i.ProductVariantId == request.ProductVariantId);

                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItem.Quantity = request.Quantity;
                cartItem.UpdatedAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var cartItem = cartItems.FirstOrDefault(i => i.ProductVariantId == request.ProductVariantId);
                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItem.Quantity = request.Quantity;
                session.Set("Cart", JsonSerializer.SerializeToUtf8Bytes(cartItems));

            }

            return Ok("Cập nhật số lượng thành công.");
        }

        // Xóa sản phẩm khỏi giỏ hàng
        [HttpDelete("remove/{productVariantId}")]
        public async Task<IActionResult> RemoveFromCart(int productVariantId, [FromQuery] int? userId)
        {
            if (userId > 0)
            {
                var cartItem = await _context.CartItems
                    .FirstOrDefaultAsync(i => i.Cart.UserId == userId && i.ProductVariantId == productVariantId);

                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                _context.CartItems.Remove(cartItem);
                await _context.SaveChangesAsync();
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                var sessionCart = session.GetString("Cart");
                var cartItems = string.IsNullOrEmpty(sessionCart)
                    ? new List<CartItemSession>()
                    : JsonSerializer.Deserialize<List<CartItemSession>>(sessionCart) ?? new List<CartItemSession>();

                var cartItem = cartItems.FirstOrDefault(i => i.ProductVariantId == productVariantId);
                if (cartItem == null)
                {
                    return NotFound("Sản phẩm không có trong giỏ hàng.");
                }

                cartItems.Remove(cartItem);
                session.SetString("Cart", JsonSerializer.Serialize(cartItems));
            }

            return Ok("Sản phẩm đã được xóa khỏi giỏ hàng.");
        }

        // Xóa toàn bộ giỏ hàng
        [HttpDelete("clear")]
        public async Task<IActionResult> ClearCart([FromQuery] int? userId)
        {
            if (userId > 0)
            {
                var cart = await _context.Carts.Include(c => c.Items).FirstOrDefaultAsync(c => c.UserId == userId);
                if (cart != null)
                {
                    _context.CartItems.RemoveRange(cart.Items);
                    await _context.SaveChangesAsync();
                }
            }
            else
            {
                var session = _httpContextAccessor.HttpContext!.Session;
                session.Remove("Cart");
            }

            return Ok("Giỏ hàng đã được làm trống.");
        }

        [HttpDelete("remove-paid-items")]
        public async Task<IActionResult> RemovePaidCartItems([FromQuery] int? userId)
        {
            if (userId == null || userId <= 0)
            {
                return BadRequest("UserId không hợp lệ.");
            }

            // Lấy giỏ hàng của user
            var cart = await _context.Carts.Include(c => c.Items)
                                           .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null || cart.Items == null || !cart.Items.Any())
            {
                return NotFound("Giỏ hàng trống hoặc không tồn tại.");
            }

            // Lấy danh sách các sản phẩm đã đặt hàng (có trong OrderItem)
            var paidProductVariantIds = await _context.OrderItems
                                                      .Select(oi => oi.ProductVariantId)
                                                      .ToListAsync();

            // Lọc các sản phẩm trong giỏ hàng đã được thanh toán
            var paidCartItems = cart.Items
                                    .Where(item => paidProductVariantIds.Contains(item.ProductVariantId))
                                    .ToList();

            if (!paidCartItems.Any())
            {
                return Ok("Không có sản phẩm nào đã thanh toán để xóa.");
            }

            // Xóa các sản phẩm đã thanh toán khỏi giỏ hàng
            _context.CartItems.RemoveRange(paidCartItems);
            await _context.SaveChangesAsync();

            return Ok(new { message = "Đã xóa các sản phẩm đã thanh toán khỏi giỏ hàng.", removedItems = paidCartItems.Count });
        }


        // lấy tên và ảnh product dựa trên productVariantId
        [HttpGet("variant-info/{productVariantId}")]
        public async Task<IActionResult> GetProductVariantInfo(int productVariantId)
        {
            try
            {
                var variant = await _context.ProductVariants
                    .Include(v => v.Product)
                        .ThenInclude(p => p.Images)
                    .FirstOrDefaultAsync(v => v.Id == productVariantId);

                if (variant == null)
                {
                    return NotFound("Biến thể sản phẩm không tồn tại");
                }

                var result = new
                {
                    ProductName = variant.Product.Name,
                    ProductImage = variant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    VariantColor = variant.Color,
                    VariantStorage = variant.Storage,
                    Price = variant.Price,
                    DiscountPrice = variant.DiscountPrice
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi lấy thông tin biến thể: {ex.Message}");
            }
        }
    }
}

```

### Controllers\CategoriesController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CategoriesController : ControllerBase
    {
        private readonly AppDbContext _context;

        public CategoriesController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<CategoryDto>>> GetCategories()
        {
            var categories = await _context.Categories
                                           .Select(c => new CategoryDto
                                           {
                                               Id = c.Id,
                                               Name = c.Name,
                                               Description = c.Description,
                                               Image = c.Image
                                           })
                                           .ToListAsync();
            return Ok(categories);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<CategoryDto>> GetCategory(int id)
        {
            var category = await _context.Categories.FindAsync(id);

            if (category == null)
            {
                return NotFound();
            }

            return Ok(new CategoryDto
            {
                Id = category.Id,
                Name = category.Name,
                Description = category.Description,
                Image = category.Image
            });
        }

        [HttpPost]
        public async Task<ActionResult<CategoryDto>> PostCategory(CreateCategoryDto categoryDto)
        {
            var category = new Category
            {
                Name = categoryDto.Name,
                Description = categoryDto.Description,
                Image = categoryDto.Image
            };

            _context.Categories.Add(category);
            await _context.SaveChangesAsync();

            var categoryResult = new CategoryDto
            {
                Id = category.Id,
                Name = category.Name,
                Description = category.Description,
                Image = category.Image
            };

            return CreatedAtAction(nameof(GetCategory), new { id = category.Id }, categoryResult);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutCategory(int id, CreateCategoryDto categoryDto) // Using CreateCategoryDto for update as well
        {
            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }

            category.Name = categoryDto.Name;
            category.Description = categoryDto.Description;
            category.Image = categoryDto.Image;

            await _context.SaveChangesAsync();

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCategory(int id)
        {
            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }

            _context.Categories.Remove(category);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool CategoryExists(int id)
        {
            return _context.Categories.Any(e => e.Id == id);
        }
    }
}
```

### Controllers\ChatController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Cors;
using SHN_Gear.Services;
using SHN_Gear.DTOs;
using SHN_Gear.Hubs;
using System.Security.Claims;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [EnableCors("AllowFrontend")]
    public class ChatController : ControllerBase
    {
        private readonly ChatService _chatService;
        private readonly IHubContext<ChatHub> _hubContext;
        private readonly ILogger<ChatController> _logger;

        public ChatController(ChatService chatService, IHubContext<ChatHub> hubContext, ILogger<ChatController> logger)
        {
            _chatService = chatService;
            _hubContext = hubContext;
            _logger = logger;
        }

        /// <summary>
        /// Tạo hoặc lấy session chat hiện tại
        /// </summary>
        [HttpPost("session")]
        public async Task<IActionResult> CreateOrGetSession([FromBody] CreateSessionDto dto)
        {
            try
            {
                var userId = GetCurrentUserId();
                _logger.LogInformation("Creating/getting session for userId: {UserId}, guestName: {GuestName}, guestEmail: {GuestEmail}",
                    userId, dto.GuestName, dto.GuestEmail);

                var session = await _chatService.CreateOrGetSessionAsync(
                    userId,
                    dto.GuestName,
                    dto.GuestEmail,
                    dto.SessionId
                );

                return Ok(session);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating/getting chat session");
                return StatusCode(500, new { message = "Lỗi khi tạo phiên chat" });
            }
        }

        /// <summary>
        /// Gửi tin nhắn từ user
        /// </summary>
        [HttpPost("message")]
        public async Task<IActionResult> SendMessage([FromBody] SendMessageDto dto)
        {
            try
            {
                var userId = GetCurrentUserId();
                var message = await _chatService.SendMessageAsync(dto, userId);

                // SignalR notification is handled by ChatService.NotifyNewMessage
                return Ok(message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending message: {Message}", dto.Content);
                return StatusCode(500, new { message = "Lỗi khi gửi tin nhắn" });
            }
        }

        /// <summary>
        /// Escalate chat to admin
        /// </summary>
        [HttpPost("{sessionId}/escalate")]
        public async Task<IActionResult> EscalateToAdmin(int sessionId, [FromBody] EscalateChatDto dto)
        {
            try
            {
                var session = await _chatService.EscalateToAdminAsync(sessionId, dto.Reason, dto.PreferredAdminId);

                // Notify admins via SignalR
                await _hubContext.Clients.Group("admins")
                    .SendAsync("ChatEscalated", session);

                return Ok(session);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error escalating chat session {SessionId}", sessionId);
                return StatusCode(500, new { message = "Lỗi khi chuyển chat sang admin" });
            }
        }

        /// <summary>
        /// Get chat session by session ID
        /// </summary>
        [HttpGet("session/{sessionId}")]
        public async Task<IActionResult> GetSession(string sessionId)
        {
            try
            {
                var session = await _chatService.GetSessionAsync(sessionId);
                if (session == null)
                    return NotFound(new { message = "Không tìm thấy phiên chat" });

                return Ok(session);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting chat session {SessionId}", sessionId);
                return StatusCode(500, new { message = "Lỗi khi lấy thông tin chat" });
            }
        }

        /// <summary>
        /// Admin: Get all active chat sessions
        /// </summary>
        [HttpGet("admin/sessions")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetActiveSessions()
        {
            try
            {
                var adminId = GetCurrentUserId();
                var sessions = await _chatService.GetActiveChatSessionsAsync(adminId);
                return Ok(sessions);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting active chat sessions");
                return StatusCode(500, new { message = "Lỗi khi lấy danh sách chat" });
            }
        }

        /// <summary>
        /// Admin: Send message as admin
        /// </summary>
        [HttpPost("{sessionId}/admin-message")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> SendAdminMessage(string sessionId, [FromBody] AdminMessageDto dto)
        {
            try
            {
                var adminId = GetCurrentUserId();
                if (!adminId.HasValue)
                    return Unauthorized();

                var message = await _chatService.SendAdminMessageAsync(sessionId, dto.Content, adminId.Value);

                return Ok(message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending admin message to session {SessionId}", sessionId);
                return StatusCode(500, new { message = "Lỗi khi gửi tin nhắn admin" });
            }
        }

        /// <summary>
        /// Test AI response (for development)
        /// </summary>
        [HttpPost("test-ai")]
        public async Task<IActionResult> TestAI([FromBody] TestAIDto dto)
        {
            try
            {
                var aiService = HttpContext.RequestServices.GetRequiredService<AIService>();
                var response = await aiService.ProcessMessageAsync(dto.Message, dto.Context, dto.UserId);
                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error testing AI: {Message}", dto.Message);
                return StatusCode(500, new { message = "Lỗi khi test AI" });
            }
        }

        private int? GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            return int.TryParse(userIdClaim, out var userId) ? userId : null;
        }
    }

    // Additional DTOs
    public class CreateSessionDto
    {
        public string? SessionId { get; set; }
        public string? GuestName { get; set; }
        public string? GuestEmail { get; set; }
    }

    public class AdminMessageDto
    {
        public string Content { get; set; } = null!;
    }

    public class TestAIDto
    {
        public string Message { get; set; } = null!;
        public string? Context { get; set; }
        public int? UserId { get; set; }
    }
}
```

### Controllers\CorsTestController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Cors;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [EnableCors("AllowFrontend")]
    public class CorsTestController : ControllerBase
    {
        private readonly ILogger<CorsTestController> _logger;

        public CorsTestController(ILogger<CorsTestController> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// Simple endpoint to test CORS configuration
        /// </summary>
        [HttpGet("test")]
        public IActionResult TestCors()
        {
            _logger.LogInformation("CORS test endpoint called");
            return Ok(new { 
                message = "CORS is working!", 
                timestamp = DateTime.UtcNow,
                origin = Request.Headers["Origin"].ToString(),
                userAgent = Request.Headers["User-Agent"].ToString()
            });
        }

        /// <summary>
        /// Test OPTIONS preflight request
        /// </summary>
        [HttpOptions("test")]
        public IActionResult TestCorsOptions()
        {
            _logger.LogInformation("CORS OPTIONS test endpoint called");
            return Ok();
        }

        /// <summary>
        /// Test POST request with CORS
        /// </summary>
        [HttpPost("test")]
        public IActionResult TestCorsPost([FromBody] dynamic data)
        {
            _logger.LogInformation("CORS POST test endpoint called");
            return Ok(new { 
                message = "CORS POST is working!", 
                receivedData = data,
                timestamp = DateTime.UtcNow
            });
        }
    }
}

```

### Controllers\HomepageConfigController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using SHN_Gear.DTOs; // Add this line

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/homepage-config")]
    public class HomepageConfigController : ControllerBase
    {
        private readonly AppDbContext _context;

        public HomepageConfigController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> GetHomepageConfig()
        {
            var config = await _context.HomepageConfigurations.FirstOrDefaultAsync();

            if (config == null)
            {
                // Create a default configuration if none exists using DTOs
                var defaultHomepageConfig = new HomepageConfigDto
                {
                    Layout = new List<string> { "hero", "categories", "featured_products", "special_offer", "best_seller", "brand_trust" },
                    Components = new HomepageComponentsDto
                    {
                        Hero = new HeroSectionDto
                        {
                            Enabled = true,
                            Background_type = "video",
                            Background_url = "/videos/hero-background.mp4",
                            Headline = "GEAR FOR THE NEXT GENERATION",
                            Slogan = "Unleash Your Potential.",
                            Cta_text = "Explore Now",
                            Cta_link = "/products"
                        },
                        Categories = new CategoriesSectionDto
                        {
                            Enabled = true,
                            Items = new List<HomepageCategoryItemDto>
                            {
                                new HomepageCategoryItemDto { CategoryId = 1, DisplayOrder = 1, Name = "Laptops", Image_url = "/images/categories/laptops.png", Link = "/products/laptops" },
                                new HomepageCategoryItemDto { CategoryId = 2, DisplayOrder = 2, Name = "Keyboards", Image_url = "/images/categories/keyboards.png", Link = "/products/keyboards" },
                                new HomepageCategoryItemDto { CategoryId = 3, DisplayOrder = 3, Name = "Mice", Image_url = "/images/categories/mice.png", Link = "/products/mice" },
                                new HomepageCategoryItemDto { CategoryId = 4, DisplayOrder = 4, Name = "Headsets", Image_url = "/images/categories/headsets.png", Link = "/products/headsets" }
                            }
                        },
                        Featured_products = new FeaturedProductsSectionDto
                        {
                            Enabled = true,
                            Title = "Best Sellers",
                            Collection_id = "best-sellers"
                        },
                        Special_offer = new SpecialOfferSectionDto
                        {
                            Enabled = true,
                            Image_url = "/images/banners/special-offer.png",
                            Headline = "LIMITED TIME OFFER",
                            Sub_text = "Get 20% off on all gaming mice.",
                            Cta_text = "Shop Now",
                            Cta_link = "/products/mice",
                            Countdown_enabled = true,
                            Countdown_end_date = "2025-07-31T23:59:59"
                        },
                        Best_seller = new BestSellerSectionDto
                        {
                            Enabled = true,
                            Title = "Best Sellers",
                            Items = new List<BestSellerItemDto> { new BestSellerItemDto { ProductId = 1 }, new BestSellerItemDto { ProductId = 2 }, new BestSellerItemDto { ProductId = 3 } } // Example product IDs
                        },
                        Brand_trust = new BrandTrustSectionDto
                        {
                            Enabled = true,
                            Logos = new List<BrandLogoDto>
                            {
                                new BrandLogoDto { Id = 1, Name = "Brand A", Logo_url = "/images/brands/logo-a.svg" },
                                new BrandLogoDto { Id = 2, Name = "Brand B", Logo_url = "/images/brands/logo-b.svg" },
                                new BrandLogoDto { Id = 3, Name = "Brand C", Logo_url = "/images/brands/logo-c.svg" },
                                new BrandLogoDto { Id = 4, Name = "Brand D", Logo_url = "/images/brands/logo-d.svg" }
                            },
                            Commitments = new List<CommitmentDto>
                            {
                                new CommitmentDto { Id = 1, Icon = "shipping", Title = "Fast Shipping", Description = "Nationwide delivery." },
                                new CommitmentDto { Id = 2, Icon = "warranty", Title = "24-Month Warranty", Description = "On all products." },
                                new CommitmentDto { Id = 3, Icon = "support", Title = "24/7 Support", Description = "Always here to help." }
                            }
                        }
                    }
                };

                config = new HomepageConfig
                {
                    ConfigJson = JsonConvert.SerializeObject(defaultHomepageConfig, Formatting.Indented),
                    LastUpdated = DateTime.UtcNow,
                    UpdatedBy = "System"
                };
                _context.HomepageConfigurations.Add(config);
                await _context.SaveChangesAsync();
            }

            var settings = new JsonSerializerSettings
            {
                MissingMemberHandling = MissingMemberHandling.Ignore
            };
            var homepageConfigDto = JsonConvert.DeserializeObject<HomepageConfigDto>(config.ConfigJson, settings);
            return Ok(homepageConfigDto);
        }

        [HttpPut]
        public async Task<IActionResult> UpdateHomepageConfig([FromBody] HomepageConfigDto newConfigDto)
        {
            if (newConfigDto == null)
            {
                return BadRequest("Configuration data is required.");
            }

            var config = await _context.HomepageConfigurations.FirstOrDefaultAsync();

            if (config == null)
            {
                // If no config exists, create one (should ideally be handled by Get on first load)
                config = new HomepageConfig();
                _context.HomepageConfigurations.Add(config);
            }

            config.ConfigJson = JsonConvert.SerializeObject(newConfigDto, Formatting.Indented);
            config.LastUpdated = DateTime.UtcNow;
            // You might want to get the current user's name here for UpdatedBy
            config.UpdatedBy = User.Identity?.Name ?? "Admin"; 

            await _context.SaveChangesAsync();

            return Ok();
        }
    }
}

```

### Controllers\LoyaltyController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using System;
using System.Threading.Tasks;
using System.Linq;

[Route("api/loyalty")]
[ApiController]
public class LoyaltyController : ControllerBase
{
    private readonly AppDbContext _context;
    private readonly Random _random = new Random();

    public LoyaltyController(AppDbContext context)
    {
        _context = context;
    }

    [HttpGet("my-status")]
    public async Task<IActionResult> GetMyLoyaltyStatus([FromQuery] int userId)
    {
        if (userId <= 0)
        {
            return BadRequest("Invalid user ID");
        }

        var user = await _context.Users
            .Include(u => u.Role)
            .FirstOrDefaultAsync(u => u.Id == userId);

        if (user == null)
        {
            return NotFound("User not found");
        }

        if (!user.IsActive)
        {
            return BadRequest("User account is not active");
        }

        string currentRank = user.Role.Name == "Admin" ? "Admin" : DetermineRank(user.Points);

        // Cập nhật Role nếu không phải Admin
        if (user.Role.Name != "Admin" && user.Role.Name != currentRank)
        {
            var newRole = await _context.Roles
                .FirstOrDefaultAsync(r => r.Name == currentRank);
            if (newRole == null)
            {
                return StatusCode(500, $"Role '{currentRank}' not found in database");
            }
            user.RoleId = newRole.Id;
            user.Role = newRole;
            _context.Users.Update(user);
            await _context.SaveChangesAsync();
        }

        string nextRank = currentRank == "Admin" ? null : DetermineNextRank(currentRank);
        int pointsNeeded = currentRank == "Admin" ? 0 : CalculatePointsNeededForNextRank(user.Points, currentRank, nextRank);
        int spinCost = CalculateSpinCost(currentRank);

        return Ok(new
        {
            CurrentRank = currentRank,
            CurrentPoints = user.Points,
            PointsNeededForNextRank = pointsNeeded,
            CanSpin = user.Points >= spinCost, // Chỉ Admin quay với 0 điểm, còn lại cần đủ điểm
            SpinCost = spinCost
        });
    }

    [HttpPost("spin-wheel")]
    public async Task<IActionResult> SpinWheel([FromQuery] int userId)
    {
        if (userId <= 0)
        {
            return BadRequest("Invalid user ID");
        }

        var user = await _context.Users
            .Include(u => u.Role)
            .FirstOrDefaultAsync(u => u.Id == userId);

        if (user == null)
        {
            return NotFound("User not found");
        }

        if (!user.IsActive)
        {
            return BadRequest("User account is not active");
        }

        string currentRank = user.Role.Name == "Admin" ? "Admin" : DetermineRank(user.Points);
        int spinCost = CalculateSpinCost(currentRank);

        // Kiểm tra đủ điểm để quay (Admin miễn phí, các rank khác cần đủ điểm)
        if (currentRank != "Admin" && user.Points < spinCost)
        {
            return BadRequest("Not enough points to spin the wheel.");
        }

        // Trừ điểm khi quay (Admin không bị trừ, các rank khác bị trừ)
        if (currentRank != "Admin")
        {
            user.Points -= spinCost;
        }

        // Tạo phần thưởng ngẫu nhiên
        var (voucherValue, prizeType) = GenerateRandomPrize(currentRank);
        object responseData;

        if (prizeType == "Voucher")
        {
            var voucher = new Voucher
            {
                Code = $"SPIN-{currentRank}-{Guid.NewGuid().ToString().Substring(0, 8)}",
                DiscountAmount = voucherValue,
                ExpiryDate = DateTime.UtcNow.AddDays(30),
                IsActive = true
            };

            _context.Vouchers.Add(voucher);
            await _context.SaveChangesAsync();

            var userVoucher = new UserVoucher
            {
                UserId = user.Id,
                VoucherId = voucher.Id,
                UsedAt = DateTime.UtcNow,
                IsUsed = false // Trạng thái sử dụng mặc định là false khi nhận từ vòng quay
            };

            _context.UserVouchers.Add(userVoucher);

            responseData = new
            {
                PrizeType = prizeType,
                Voucher = new VoucherDto
                {
                    Id = voucher.Id,
                    Code = voucher.Code,
                    DiscountAmount = voucher.DiscountAmount,
                    ExpiryDate = voucher.ExpiryDate,
                    IsActive = voucher.IsActive
                },
                RemainingPoints = user.Points
            };
        }
        else
        {
            responseData = new
            {
                PrizeType = prizeType,
                Voucher = (object)null,
                RemainingPoints = user.Points
            };
        }

        // Cập nhật điểm người dùng vào cơ sở dữ liệu
        _context.Users.Update(user);
        await _context.SaveChangesAsync();

        return Ok(responseData);
    }

    private string DetermineRank(int points)
    {
        if (points >= 225000) return "VIP 3";
        if (points >= 125000) return "VIP 2";
        if (points >= 50000) return "VIP 1";
        return "VIP 0";
    }

    private string DetermineNextRank(string currentRank)
    {
        return currentRank switch
        {
            "VIP 0" => "VIP 1",
            "VIP 1" => "VIP 2",
            "VIP 2" => "VIP 3",
            "VIP 3" => null,
            _ => "VIP 1"
        };
    }

    private int CalculatePointsNeededForNextRank(int currentPoints, string currentRank, string nextRank)
    {
        if (nextRank == null) return 0;
        return nextRank switch
        {
            "VIP 1" => 50000 - currentPoints,
            "VIP 2" => 125000 - currentPoints,
            "VIP 3" => 225000 - currentPoints,
            _ => 50000 - currentPoints
        };
    }

    private int CalculateSpinCost(string currentRank)
    {
        return currentRank switch
        {
            "Admin" => 0,     // 
            "VIP 0" => 500, // 
            "VIP 1" => 5000,
            "VIP 2" => 5000,
            "VIP 3" => 5000,  // 
            _ => 10000
        };
    }

    private (decimal voucherValue, string prizeType) GenerateRandomPrize(string currentRank)
    {
        int chance = _random.Next(1, 101);
        switch (currentRank)
        {
            case "Admin":
                if (chance <= 50) return (500000, "Voucher"); // 50% nhận 500k
                else if (chance <= 80) return (350000, "Voucher"); // 30% nhận 350k
                else return (200000, "Voucher"); // 20% nhận 200k
            case "VIP 0":
                if (chance <= 50) return (50000, "Voucher"); // 50% nhận 50k
                else if (chance <= 80) return (20000, "Voucher"); // 30% nhận 20k
                else return (0, "No Prize"); // 20% không trúng
            case "VIP 1":
                if (chance <= 40) return (100000, "Voucher"); // 40% nhận 100k
                else if (chance <= 70) return (50000, "Voucher"); // 30% nhận 50k
                else return (20000, "Voucher"); // 30% nhận 20k
            case "VIP 2":
                if (chance <= 30) return (200000, "Voucher"); // 30% nhận 200k
                else if (chance <= 60) return (100000, "Voucher"); // 30% nhận 100k
                else return (50000, "Voucher"); // 40% nhận 50k
            case "VIP 3":
                if (chance <= 20) return (350000, "Voucher"); // 20% nhận 350k
                else if (chance <= 50) return (200000, "Voucher"); // 30% nhận 200k
                else return (100000, "Voucher"); // 50% nhận 100k
            default:
                return (0, "No Prize");
        }
    }
}
```

### Controllers\OrderController.cs
```cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using SHN_Gear.Services;
using System.Security.Claims;
using System.Linq;
using System.Threading.Tasks;
using System;
using Newtonsoft.Json;
using System.IO;
using OfficeOpenXml;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;
using System.Globalization; // Cho hàm ConvertToUnsigned
using System.Text;         // Cho NormalizationForm
using System.Text.RegularExpressions; // For Regex
using OfficeOpenXml.Style;
using Microsoft.AspNetCore.JsonPatch;
namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/orders")]
    public class OrderController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly MoMoPaymentService _momoService;
        private readonly IConfiguration _configuration;

        public OrderController(
            AppDbContext context,
            MoMoPaymentService momoService,
            IConfiguration configuration)
        {
            _context = context;
            _momoService = momoService;
            _configuration = configuration;
        }




        // Lấy thông tin đơn hàng
        [HttpGet("confirm/{orderId}")]
        public async Task<IActionResult> GetOrderConfirmationDetails(int orderId)
        {
            try
            {
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                        .ThenInclude(oi => oi.ProductVariant)
                            .ThenInclude(pv => pv.Product)
                                .ThenInclude(p => p.Images)
                    .Include(o => o.Address)
                    .Include(o => o.PaymentMethod)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound(new { Message = "Không tìm thấy đơn hàng" });
                }

                var result = new
                {
                    OrderId = order.Id,
                    OrderDate = order.OrderDate.ToString("dd/MM/yyyy HH:mm"),
                    TotalAmount = order.TotalAmount,
                    FormattedTotal = order.TotalAmount.ToString("N0") + " VNĐ",
                    PaymentMethod = order.PaymentMethod?.Name ?? "Tiền mặt",
                    OrderStatus = order.OrderStatus,
                    ShippingInfo = new
                    {
                        FullName = order.Address?.FullName ?? "N/A",
                        Phone = order.Address?.PhoneNumber ?? "N/A",
                        Address = $"{order.Address?.AddressLine1}, {order.Address?.City}, {order.Address?.State}",
                        Email = order.User?.Email ?? "N/A"
                    },
                    Products = order.OrderItems.Select(oi => new
                    {
                        Id = oi.ProductVariant.Product.Id,
                        Name = oi.ProductVariant.Product.Name,
                        Image = oi.ProductVariant.Product.Images.FirstOrDefault(i => i.IsPrimary)?.ImageUrl
                               ?? "/images/default-product.png",
                        Variant = $"{oi.ProductVariant.Color} - {oi.ProductVariant.Storage}",
                        Quantity = oi.Quantity,
                        Price = oi.Price,
                        Total = oi.Price * oi.Quantity
                    }),
                    EstimatedDelivery = order.OrderDate.AddDays(3).ToString("dd/MM/yyyy")
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thông tin đơn hàng", Error = ex.Message });
            }
        }
        // Lấy danh sách đơn hàng
        [HttpGet]
        public async Task<IActionResult> GetOrders()
        {
            var orders = await _context.Orders
                .Include(o => o.OrderItems)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            var orderDtos = orders.Select(order => new OrderDto
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                {
                    ProductVariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(orderDtos);
        }
        [HttpPut("{id}")]
        [Authorize]
        public async Task<IActionResult> UpdateOrder(int id, [FromBody] UpdateOrderDto updateOrderDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Lấy đơn hàng hiện tại
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Đơn hàng không tồn tại.");
                }

                // Kiểm tra trạng thái đơn hàng - chỉ cho phép chỉnh sửa khi ở trạng thái Pending
                if (order.OrderStatus != "Pending")
                {
                    return BadRequest("Chỉ có thể chỉnh sửa đơn hàng khi ở trạng thái 'Chờ xử lý'");
                }

                // Cập nhật địa chỉ nếu có
                if (updateOrderDto.AddressId.HasValue)
                {
                    var address = await _context.Addresses.FindAsync(updateOrderDto.AddressId.Value);
                    if (address == null)
                    {
                        return BadRequest("Địa chỉ không tồn tại");
                    }
                    order.AddressId = updateOrderDto.AddressId.Value;
                }

                // Xử lý voucher
                Voucher? voucher = null;
                if (updateOrderDto.VoucherId.HasValue)
                {
                    voucher = await _context.Vouchers.FindAsync(updateOrderDto.VoucherId.Value);
                    if (voucher == null || !voucher.IsActive || voucher.ExpiryDate < DateTime.UtcNow)
                    {
                        return BadRequest("Voucher không hợp lệ.");
                    }
                    order.VoucherId = updateOrderDto.VoucherId;
                }
                else
                {
                    order.VoucherId = null;
                }

                // Xử lý các sản phẩm trong đơn hàng
                if (updateOrderDto.OrderItems != null && updateOrderDto.OrderItems.Count > 0)
                {
                    // Xóa các items cũ
                    _context.OrderItems.RemoveRange(order.OrderItems);

                    // Thêm các items mới
                    foreach (var itemDto in updateOrderDto.OrderItems)
                    {
                        var variant = await _context.ProductVariants
                            .Include(pv => pv.Product)
                            .FirstOrDefaultAsync(pv => pv.Id == itemDto.ProductVariantId);

                        if (variant == null)
                        {
                            return BadRequest($"Không tìm thấy biến thể sản phẩm với ID {itemDto.ProductVariantId}");
                        }

                        if (variant.StockQuantity < itemDto.Quantity)
                        {
                            return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm {variant.Product.Name}");
                        }

                        order.OrderItems.Add(new OrderItem
                        {
                            ProductVariantId = itemDto.ProductVariantId,
                            Quantity = itemDto.Quantity,
                            Price = variant.DiscountPrice ?? variant.Price
                        });
                    }
                }

                // Tính toán lại tổng tiền
                order.TotalAmount = order.OrderItems.Sum(oi => oi.Quantity * oi.Price);

                // Áp dụng voucher nếu có
                if (voucher != null)
                {
                    order.TotalAmount -= voucher.DiscountAmount;
                    if (order.TotalAmount < 0) order.TotalAmount = 0;
                }
                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new { Message = "Đơn hàng đã được cập nhật thành công." });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        //cập nhật một phần đơn
        [HttpPatch("{id}")]
        [Authorize]
        public async Task<IActionResult> PartialUpdateOrder(int id, [FromBody] JsonPatchDocument<Order> patchDoc)
        {
            if (patchDoc == null)
            {
                return BadRequest("Dữ liệu cập nhật không hợp lệ");
            }

            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại");
            }

            // Kiểm tra trạng thái đơn hàng
            if (order.OrderStatus != "Pending")
            {
                return BadRequest("Chỉ có thể chỉnh sửa đơn hàng khi ở trạng thái 'Chờ xử lý'");
            }

            // Áp dụng các thay đổi
            patchDoc.ApplyTo(order);

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            // Kiểm tra số lượng tồn kho nếu có thay đổi về sản phẩm
            if (patchDoc.Operations.Any(op => op.path.Contains("OrderItems")))
            {
                var orderWithItems = await _context.Orders
                    .Include(o => o.OrderItems)
                    .FirstOrDefaultAsync(o => o.Id == id);

                foreach (var item in orderWithItems.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    if (variant.StockQuantity < item.Quantity)
                    {
                        return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm ID {item.ProductVariantId}");
                    }
                }
            }
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Đơn hàng đã được cập nhật thành công." });
        }
        // Tạo đơn hàng
        [HttpPost]
        public async Task<IActionResult> CreateOrder([FromBody] OrderDto orderDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Validate user
                User? user = null;
                if (orderDto.UserId.HasValue && orderDto.UserId.Value != 0)
                {
                    user = await _context.Users.FindAsync(orderDto.UserId.Value);
                    if (user == null) return NotFound("Người dùng không tồn tại.");
                }

                // Validate voucher
                Voucher? voucher = null;
                UserVoucher? userVoucher = null;
                if (orderDto.VoucherId.HasValue)
                {
                    voucher = await _context.Vouchers.FindAsync(orderDto.VoucherId.Value);
                    if (voucher == null || !voucher.IsActive || voucher.ExpiryDate < DateTime.UtcNow)
                    {
                        return BadRequest("Voucher không hợp lệ hoặc đã hết hạn.");
                    }

                    // Kiểm tra xem voucher đã được gán cho người dùng chưa
                    userVoucher = await _context.UserVouchers
                        .FirstOrDefaultAsync(uv => uv.VoucherId == voucher.Id && uv.UserId == orderDto.UserId.Value);
                    if (userVoucher == null)
                    {
                        return BadRequest("Bạn chưa sở hữu voucher này.");
                    }

                    // Kiểm tra trạng thái IsUsed
                    if (userVoucher.IsUsed)
                    {
                        return BadRequest("Voucher đã được sử dụng.");
                    }
                }

                // Kiểm tra số lượng tồn kho
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(pv => pv.Product)
                        .FirstOrDefaultAsync(pv => pv.Id == item.ProductVariantId);

                    if (variant == null) return BadRequest($"Không tìm thấy biến thể sản phẩm với ID {item.ProductVariantId}");
                    if (variant.StockQuantity < item.Quantity)
                        return BadRequest($"Số lượng tồn kho không đủ cho sản phẩm {variant.Product.Name}");
                }

                // Create order
                var order = new Order
                {
                    UserId = orderDto.UserId,
                    OrderDate = DateTime.UtcNow,
                    TotalAmount = orderDto.TotalAmount,
                    OrderStatus = orderDto.PaymentMethodId == 1 ? "Pending" : "WaitingForPayment",
                    AddressId = orderDto.AddressId,
                    PaymentMethodId = orderDto.PaymentMethodId,
                    VoucherId = orderDto.VoucherId,
                    OrderItems = orderDto.OrderItems.Select(oi => new OrderItem
                    {
                        ProductVariantId = oi.ProductVariantId,
                        Quantity = oi.Quantity,
                        Price = oi.Price
                    }).ToList()
                };

                // Apply voucher discount
                if (voucher != null)
                {
                    order.TotalAmount -= voucher.DiscountAmount;
                    if (order.TotalAmount < 0) order.TotalAmount = 0;
                }

                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // Trừ số lượng tồn kho
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    variant.StockQuantity -= item.Quantity;
                }

                // Thanh toán với MoMo (cả QR và thẻ)
                if (orderDto.PaymentMethodId == 2)
                {
                    try
                    {
                        var momoOrderId = $"SHN{order.Id}";
                        bool isCardPayment = Request.Headers["Payment-Type"].ToString() == "card";

                        var payUrl = await _momoService.CreatePaymentAsync(
                            momoOrderId,
                            $"Thanh toán đơn hàng SHN#{order.Id}",
                            (long)order.TotalAmount,
                            isCardPayment);

                        await transaction.CommitAsync();

                        return Ok(new
                        {
                            Success = true,
                            OrderId = order.Id,
                            PaymentUrl = payUrl,
                            Message = isCardPayment
                                ? "Vui lòng thanh toán bằng thẻ Visa/MasterCard"
                                : "Vui lòng thanh toán qua QR MoMo"
                        });
                    }
                    catch (Exception ex)
                    {
                        await transaction.RollbackAsync();
                        return BadRequest(new
                        {
                            Success = false,
                            Message = "Lỗi khi khởi tạo thanh toán MoMo: " + ex.Message
                        });
                    }
                }

                // Process voucher and mark as used
                if (voucher != null && userVoucher != null)
                {
                    userVoucher.IsUsed = true;
                    _context.UserVouchers.Update(userVoucher);
                }

                // Remove purchased items from cart
                if (orderDto.UserId.HasValue)
                {
                    var productVariantIds = orderDto.OrderItems.Select(oi => oi.ProductVariantId).ToList();

                    var cartItemsToRemove = await _context.CartItems
                        .Where(ci => ci.Cart.UserId == orderDto.UserId.Value &&
                                     productVariantIds.Contains(ci.ProductVariantId))
                        .ToListAsync();

                    if (cartItemsToRemove.Any())
                    {
                        _context.CartItems.RemoveRange(cartItemsToRemove);
                    }
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new
                {
                    Message = "Đơn hàng đã được tạo.",
                    OrderId = order.Id,
                    CartItemsRemoved = orderDto.UserId.HasValue // Indicate if cart items were removed
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        // MoMo payment callback
        [HttpPost("momo/callback")]
        public async Task<IActionResult> MoMoCallback([FromBody] MoMoCallbackModel callback)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // Verify signature
                var rawData = $"accessKey={_configuration["MoMoConfig:AccessKey"]}" +
                             $"&amount={callback.Amount}" +
                             $"&extraData=" +
                             $"&ipnUrl={_configuration["MoMoConfig:NotifyUrl"]}" +
                             $"&orderId={callback.OrderId}" +
                             $"&orderInfo={callback.OrderInfo}" +
                             $"&partnerCode={callback.PartnerCode}" +
                             $"&redirectUrl={_configuration["MoMoConfig:ReturnUrl"]}" +
                             $"&requestId={callback.RequestId}" +
                             $"&requestType={_configuration["MoMoConfig:RequestType"]}";

                if (!_momoService.VerifySignature(callback.Signature, rawData))
                {
                    return BadRequest("Invalid signature");
                }

                // Find order
                var orderIdStr = callback.OrderId.Replace("SHN", "");
                if (!int.TryParse(orderIdStr, out int orderId))
                {
                    return BadRequest("Invalid order ID");
                }

                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .Include(o => o.User)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound("Order not found");
                }

                // Update payment info
                order.MoMoTransId = callback.TransId;
                order.MoMoResponse = JsonConvert.SerializeObject(callback);

                // Process payment result
                if (callback.ResultCode == 0) // Success
                {
                    order.OrderStatus = "Paid";

                    // Trừ số lượng tồn kho (nếu chưa trừ)
                    foreach (var item in order.OrderItems)
                    {
                        var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                        if (variant != null)
                        {
                            variant.StockQuantity -= item.Quantity;
                        }
                    }

                    // Mark voucher as used if exists
                    if (order.VoucherId.HasValue && order.UserId.HasValue)
                    {
                        var userVoucher = new UserVoucher
                        {
                            UserId = order.UserId.Value,
                            VoucherId = order.VoucherId.Value,
                            UsedAt = DateTime.UtcNow
                        };
                        _context.UserVouchers.Add(userVoucher);
                    }

                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();

                    // Trả về URL xác nhận
                    return Ok(new
                    {
                        Success = true,
                        RedirectUrl = $"/order-confirmation/{orderId}",
                        OrderId = orderId
                    });
                }
                else // Failed
                {
                    order.OrderStatus = "PaymentFailed";
                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();

                    return Ok(new
                    {
                        Success = false,
                        RedirectUrl = $"/checkout?payment=failed&orderId={orderId}",
                        Message = callback.Message
                    });
                }


            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // Lấy thông tin đơn hàng theo Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetOrderById(int id)
        {
            var order = await _context.Orders
                .Include(o => o.OrderItems)
                .FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            var orderDto = new OrderDto
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                OrderItems = order.OrderItems.Select(oi => new OrderItemDto
                {
                    ProductVariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            };

            return Ok(orderDto);
        }

        // Xóa đơn hàng
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteOrder(int id)
        {
            var order = await _context.Orders.FindAsync(id);
            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            _context.Orders.Remove(order);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Đơn hàng đã được xóa." });
        }

        // Cập nhật trạng thái đơn hàng
        [HttpPut("{id}/status")]
        public async Task<IActionResult> UpdateOrderStatus(int id, [FromBody] UpdateStatusDto updateStatusDto)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                var order = await _context.Orders
                    .Include(o => o.User)
                    .FirstOrDefaultAsync(o => o.Id == id);

                if (order == null)
                {
                    return NotFound("Đơn hàng không tồn tại.");
                }

                // Lưu trạng thái cũ để kiểm tra
                var oldStatus = order.OrderStatus;
                order.OrderStatus = updateStatusDto.NewStatus;

                // Nếu chuyển sang trạng thái "Delivered" và trước đó chưa phải là "Delivered"
                if (updateStatusDto.NewStatus == "Delivered" && oldStatus != "Delivered")
                {
                    // Cộng 500 điểm cho user
                    if (order.UserId.HasValue && order.User != null)
                    {
                        order.User.Points += 500;
                    }
                }

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                return Ok(new { Message = "Trạng thái đơn hàng đã được cập nhật." });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                return StatusCode(500, $"Lỗi hệ thống: {ex.Message}");
            }
        }

        // Lấy danh sách đơn hàng theo userId
        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetOrdersByUserId(int userId)
        {
            var orders = await _context.Orders
                .Where(o => o.UserId == userId)
                .Include(o => o.OrderItems)
                .ThenInclude(oi => oi.ProductVariant)
                .ThenInclude(pv => pv.Product)
                .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                .ToListAsync();

            if (orders == null || orders.Count == 0)
            {
                return NotFound("Không tìm thấy đơn hàng nào cho người dùng này.");
            }

            var orderDtos = orders.Select(order => new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    ProductName = oi.ProductVariant.Product.Name,
                    ProductDescription = oi.ProductVariant.Product.Description,
                    ProductImage = oi.ProductVariant.Product.Images.FirstOrDefault(img => img.IsPrimary)?.ImageUrl,
                    VariantColor = oi.ProductVariant.Color,
                    VariantStorage = oi.ProductVariant.Storage,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(orderDtos);
        }

        [HttpGet("user/{userId}/paged")]
        public async Task<IActionResult> GetPagedOrdersByUserId(int userId, int page = 1, int pageSize = 10)
        {
            var query = _context.Orders
                .Where(o => o.UserId == userId)
                .Include(o => o.OrderItems)
                .ThenInclude(oi => oi.ProductVariant)
                .ThenInclude(pv => pv.Product)
                .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                .OrderByDescending(o => o.OrderDate);

            var totalOrders = await query.CountAsync();
            var orders = await query
                .Skip((page - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();

            var orderDtos = orders.Select(order => new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    ProductId = oi.ProductVariant.Product.Id, // Thêm ProductId
                    ProductVariantId = oi.ProductVariantId,
                    ProductName = oi.ProductVariant.Product.Name,
                    ProductDescription = oi.ProductVariant.Product.Description,
                    ProductImage = oi.ProductVariant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    VariantColor = oi.ProductVariant.Color,
                    VariantStorage = oi.ProductVariant.Storage,
                    Quantity = oi.Quantity,
                    Price = oi.Price
                }).ToList()
            }).ToList();

            return Ok(new
            {
                TotalOrders = totalOrders,
                Page = page,
                PageSize = pageSize,
                Orders = orderDtos
            });
        }
        // Tổng doanh thu theo ngày
        [HttpGet("revenue/day")]
        public async Task<IActionResult> GetDailyRevenue()
        {
            var today = DateTime.UtcNow.Date;
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date == today && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo tuần
        [HttpGet("revenue/week")]
        public async Task<IActionResult> GetWeeklyRevenue()
        {
            var startOfWeek = DateTime.UtcNow.Date.AddDays(-(int)DateTime.UtcNow.DayOfWeek);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfWeek && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo tháng
        [HttpGet("revenue/month")]
        public async Task<IActionResult> GetMonthlyRevenue()
        {
            var startOfMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfMonth && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Tổng doanh thu theo năm
        [HttpGet("revenue/year")]
        public async Task<IActionResult> GetYearlyRevenue()
        {
            var startOfYear = new DateTime(DateTime.UtcNow.Year, 1, 1);
            var revenue = await _context.Orders
                .Where(o => o.OrderDate.Date >= startOfYear && o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { Revenue = revenue });
        }

        // Số lượng đơn hàng đã hoàn thành
        [HttpGet("completed-orders")]
        public async Task<IActionResult> GetCompletedOrdersCount()
        {
            var count = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .CountAsync();

            return Ok(new { CompletedOrders = count });
        }

        // Số lượng đơn hàng chờ xác nhận
        [HttpGet("pending-orders")]
        public async Task<IActionResult> GetPendingOrdersCount()
        {
            var count = await _context.Orders
                .Where(o => o.OrderStatus == "Pending")
                .CountAsync();

            return Ok(new { PendingOrders = count });
        }

        // Tổng tiền đơn hàng đã hoàn thành
        [HttpGet("completed-orders-total")]
        public async Task<IActionResult> GetCompletedOrdersTotal()
        {
            var total = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { CompletedOrdersTotal = total });
        }

        // Tổng doanh thu
        [HttpGet("total-revenue")]
        public async Task<IActionResult> GetTotalRevenue()
        {
            var totalRevenue = await _context.Orders
                .Where(o => o.OrderStatus == "Delivered")
                .SumAsync(o => o.TotalAmount);

            return Ok(new { TotalRevenue = totalRevenue });
        }

        [HttpGet("{id}/details")]
        public async Task<IActionResult> GetOrderDetails(int id)
        {
            var order = await _context.Orders
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                        .ThenInclude(pv => pv.Product) // Thêm ThenInclude để lấy Product
                                        .ThenInclude(p => p.Images) // QUAN TRỌNG: Include cả Images

                .Include(o => o.Address)
                .FirstOrDefaultAsync(o => o.Id == id);

            if (order == null)
            {
                return NotFound("Đơn hàng không tồn tại.");
            }

            Console.WriteLine($"Order {id} has {order.OrderItems.Count} items");

            var orderDetails = new
            {
                Id = order.Id,
                UserId = order.UserId,
                OrderDate = order.OrderDate,
                TotalAmount = order.TotalAmount,
                OrderStatus = order.OrderStatus,
                AddressId = order.AddressId,
                Address = order.Address != null ? new
                {
                    Id = order.Address.Id,
                    FullName = order.Address.FullName,
                    PhoneNumber = order.Address.PhoneNumber,
                    AddressLine1 = order.Address.AddressLine1,
                    AddressLine2 = order.Address.AddressLine2,
                    City = order.Address.City,
                    State = order.Address.State,
                    ZipCode = order.Address.ZipCode,
                    Country = order.Address.Country
                } : null,
                PaymentMethodId = order.PaymentMethodId,
                Items = order.OrderItems.Select(oi => new
                {
                    VariantId = oi.ProductVariantId,
                    Quantity = oi.Quantity,
                    Price = oi.Price,
                    // ProductImage = oi.ProductVariant?.Product?.Images, // Lấy ảnh từ Product
                    ProductImage = oi.ProductVariant.Product.Images
                                .OrderByDescending(img => img.IsPrimary)
                                .ThenBy(img => img.Id)
                                .FirstOrDefault()?.ImageUrl ?? "/images/default-product.png",
                    ProductName = oi.ProductVariant?.Product?.Name // Có thể thêm tên sản phẩm nếu cần
                }).ToList()
            };

            return Ok(orderDetails);
        }
        [HttpGet("{orderId}/export/excel")]
        public async Task<IActionResult> ExportOrderToExcel(int orderId)
        {
            try
            {
                // Lấy thông tin đơn hàng từ database
                var order = await _context.Orders
                    .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                    .ThenInclude(pv => pv.Product)
                    .Include(o => o.Address)
                    .FirstOrDefaultAsync(o => o.Id == orderId);

                if (order == null)
                {
                    return NotFound(new { Message = $"Không tìm thấy đơn hàng với ID {orderId}" });
                }

                // Tạo file Excel với EPPlus
                using (var excelPackage = new ExcelPackage())
                {
                    // Tạo worksheet
                    var worksheet = excelPackage.Workbook.Worksheets.Add("Hóa đơn");

                    // Định dạng tiêu đề
                    worksheet.Cells["A1"].Value = "HÓA ĐƠN BÁN HÀNG";
                    worksheet.Cells["A1:E1"].Merge = true;
                    worksheet.Cells["A1"].Style.Font.Bold = true;
                    worksheet.Cells["A1"].Style.Font.Size = 16;
                    worksheet.Cells["A1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    // Thông tin đơn hàng
                    worksheet.Cells["A3"].Value = "Mã đơn hàng:";
                    worksheet.Cells["B3"].Value = order.Id;
                    worksheet.Cells["A4"].Value = "Ngày tạo:";
                    worksheet.Cells["B4"].Value = order.OrderDate.ToString("dd/MM/yyyy HH:mm");
                    worksheet.Cells["A5"].Value = "Khách hàng:";
                    worksheet.Cells["B5"].Value = order.Address?.FullName ?? "N/A";

                    // Tiêu đề bảng
                    var headerRow = 7;
                    worksheet.Cells[headerRow, 1].Value = "STT";
                    worksheet.Cells[headerRow, 2].Value = "Tên sản phẩm";
                    worksheet.Cells[headerRow, 3].Value = "Số lượng";
                    worksheet.Cells[headerRow, 4].Value = "Đơn giá";
                    worksheet.Cells[headerRow, 5].Value = "Thành tiền";

                    // Định dạng tiêu đề bảng
                    using (var range = worksheet.Cells[headerRow, 1, headerRow, 5])
                    {
                        range.Style.Font.Bold = true;
                        range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        range.Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                    }

                    // Đổ dữ liệu sản phẩm
                    int row = 8;
                    foreach (var item in order.OrderItems)
                    {
                        worksheet.Cells[row, 1].Value = row - headerRow;
                        worksheet.Cells[row, 2].Value = item.ProductVariant.Product.Name;
                        worksheet.Cells[row, 3].Value = item.Quantity;
                        worksheet.Cells[row, 4].Value = item.Price;
                        worksheet.Cells[row, 4].Style.Numberformat.Format = "#,##0";
                        worksheet.Cells[row, 5].Value = item.Quantity * item.Price;
                        worksheet.Cells[row, 5].Style.Numberformat.Format = "#,##0";
                        row++;
                    }

                    // Tổng cộng
                    worksheet.Cells[row, 4].Value = "Tổng cộng:";
                    worksheet.Cells[row, 4].Style.Font.Bold = true;
                    worksheet.Cells[row, 5].Value = order.TotalAmount;
                    worksheet.Cells[row, 5].Style.Font.Bold = true;
                    worksheet.Cells[row, 5].Style.Numberformat.Format = "#,##0";

                    // Tự động điều chỉnh độ rộng cột
                    worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                    // Xuất file
                    var stream = new MemoryStream();
                    excelPackage.SaveAs(stream);
                    stream.Position = 0;

                    return File(
                        fileContents: stream.ToArray(),
                        contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        fileDownloadName: $"HoaDon_{orderId}.xlsx");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi xuất file Excel" });
            }
        }

        // Hàm chuyển đổi số thành chữ tiếng Việt (CẦN TRIỂN KHAI HOẶC DÙNG THƯ VIỆN)
        private string ConvertNumberToWords_VI(decimal number)
        {
            if (number == 0) return "Không đồng";
            // Hàm NumberToTextVN.DocSo chịu trách nhiệm chính cho việc chuyển đổi.
            // Thêm "(... đồng chẵn./.)" là một quy ước thường thấy trên hóa đơn.
            return $"({NumberToTextVN.DocSo((long)Math.Round(number))} đồng chẵn./.)";
        }


        private async Task<OrderInvoiceViewModel> PrepareInvoiceViewModel(int orderId)
        {
            var order = await _context.Orders
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.ProductVariant)
                        .ThenInclude(pv => pv.Product)
                .Include(o => o.Address)
                .Include(o => o.PaymentMethod)
                // .Include(o => o.User) // Không còn cần User nếu chỉ lấy TaxCode từ đó
                .FirstOrDefaultAsync(o => o.Id == orderId);

            if (order == null)
            {
                return null;
            }

            var sellerInfo = new SellerInfo();

            decimal subtotal = order.OrderItems.Sum(oi => oi.Quantity * oi.Price);
            decimal vatRate = 0.1m;
            decimal vatAmount = subtotal * vatRate;
            decimal finalTotal = subtotal + vatAmount;

            // Không còn lấy BuyerTaxCode nữa
            // string buyerTaxCode = order.User?.TaxCode; 
            // if (string.IsNullOrEmpty(buyerTaxCode) && order.Address is ExtendedAddress extAddr)
            // {
            //     buyerTaxCode = extAddr.TaxCode;
            // }

            var viewModel = new OrderInvoiceViewModel
            {
                OrderId = order.Id,
                OrderDate = order.OrderDate,
                Seller = sellerInfo,
                BuyerFullName = order.Address?.FullName ?? "N/A",
                BuyerAddress = order.Address?.AddressLine1 ?? "N/A",
                // BuyerTaxCode = buyerTaxCode ?? "N/A", // <<<< LOẠI BỎ DÒNG NÀY
                PaymentMethodName = order.PaymentMethod?.Name ?? "Tiền mặt",
                Items = order.OrderItems.Select((item, index) => new InvoiceItemViewModel
                {
                    Index = index + 1,
                    ProductName = item.ProductVariant?.Product?.Name ?? "N/A",
                    Quantity = item.Quantity,
                    Price = item.Price
                }).ToList(),
                SubtotalAmount = subtotal,
                VatRate = vatRate,
                VatAmount = vatAmount,
                FinalTotalAmount = finalTotal,
                TotalAmountInWords = ConvertNumberToWords_VI(finalTotal)
            };

            return viewModel;
        }

        [HttpGet("{id}/export/image")]
        public async Task<IActionResult> ExportOrderToImage(int id)
        {
            try
            {
                var invoiceData = await PrepareInvoiceViewModel(id);
                if (invoiceData == null)
                {
                    return NotFound("Không tìm thấy đơn hàng hoặc không thể chuẩn bị dữ liệu hóa đơn.");
                }

                int width = 800;
                float currentY = 10f;
                float lineSpacing = 5f;
                float sectionSpacing = 15f;
                float leftMargin = 20f;
                float rightMarginContent = width - 20f;

                var titleFont = new System.Drawing.Font("Arial", 16, System.Drawing.FontStyle.Bold);
                var headerFont = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);
                var normalFont = new System.Drawing.Font("Arial", 9, System.Drawing.FontStyle.Regular);
                var smallFont = new System.Drawing.Font("Arial", 8, System.Drawing.FontStyle.Regular);
                var blackBrush = Brushes.Black;
                var grayBrush = Brushes.Gray;

                var sfCenter = new StringFormat { Alignment = StringAlignment.Center };
                var sfRight = new StringFormat { Alignment = StringAlignment.Far };
                var sfLeft = new StringFormat { Alignment = StringAlignment.Near };

                int baseHeight = 430; // Giảm nhẹ baseHeight do bỏ BuyerTaxCode
                int itemRowHeight = 20;
                int calculatedHeight = baseHeight + (invoiceData.Items.Count * itemRowHeight) + (invoiceData.Items.Count > 0 ? 20 : 0);
                int height = Math.Max(580, calculatedHeight); // Giảm chiều cao tối thiểu nếu cần

                using (var bitmap = new Bitmap(width, height))
                using (var graphics = Graphics.FromImage(bitmap))
                {
                    graphics.Clear(Color.White);
                    graphics.SmoothingMode = SmoothingMode.AntiAlias;
                    graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAliasGridFit;

                    var sellerInfo = invoiceData.Seller;

                    // Vẽ Thông tin người bán
                    graphics.DrawString(sellerInfo.CompanyName, headerFont, blackBrush, leftMargin, currentY);
                    currentY += headerFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString(sellerInfo.Address, normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString(sellerInfo.TaxCode, normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString(sellerInfo.PhoneNumber, normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + sectionSpacing;

                    // Vẽ Thông tin hóa đơn (Mẫu số, Ký hiệu, Số)
                    float initialYForInvoiceMeta = 10f;
                    graphics.DrawString($"Mẫu số: {invoiceData.InvoiceTemplateNo}", normalFont, blackBrush, width - 200, initialYForInvoiceMeta, sfLeft);
                    initialYForInvoiceMeta += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString($"Ký hiệu: {invoiceData.InvoiceSeries}", normalFont, blackBrush, width - 200, initialYForInvoiceMeta, sfLeft);
                    initialYForInvoiceMeta += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString($"Số: {invoiceData.InvoiceNumberFormatted}", normalFont, blackBrush, width - 200, initialYForInvoiceMeta, sfLeft);

                    // Vẽ Tiêu đề hóa đơn
                    string invoiceTitle = "HÓA ĐƠN BÁN HÀNG";
                    SizeF titleSize = graphics.MeasureString(invoiceTitle, titleFont);
                    graphics.DrawString(invoiceTitle, titleFont, blackBrush, (width - titleSize.Width) / 2, currentY);
                    currentY += titleSize.Height + lineSpacing;
                    SizeF dateSize = graphics.MeasureString(invoiceData.FormattedOrderDate, normalFont);
                    graphics.DrawString(invoiceData.FormattedOrderDate, normalFont, blackBrush, (width - dateSize.Width) / 2, currentY);
                    currentY += dateSize.Height + sectionSpacing;

                    // Vẽ Thông tin người mua (đã bỏ Mã số thuế)
                    graphics.DrawString($"Đơn vị mua hàng (Họ tên người mua): {invoiceData.BuyerFullName}", normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString($"Địa chỉ: {invoiceData.BuyerAddress}", normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawString($"Hình thức thanh toán: {invoiceData.PaymentMethodName}", normalFont, blackBrush, leftMargin, currentY);
                    currentY += normalFont.GetHeight(graphics) + sectionSpacing;

                    // Vẽ Bảng chi tiết sản phẩm (đã bỏ cột ĐVT)
                    float tableHeaderY = currentY;
                    float colSttX = leftMargin;
                    float colProductNameX = colSttX + 40;
                    float colQuantityX = colProductNameX + 380; // Tăng chiều rộng cột Tên sản phẩm thêm
                    float colUnitPriceX = colQuantityX + 100;  // Dịch chuyển cột Số lượng
                    float colAmountX = colUnitPriceX + 100;    // Dịch chuyển cột Đơn giá

                    graphics.DrawLine(Pens.Black, leftMargin, tableHeaderY, rightMarginContent, tableHeaderY);
                    tableHeaderY += lineSpacing;
                    graphics.DrawString("STT", headerFont, blackBrush, colSttX, tableHeaderY);
                    graphics.DrawString("Tên hàng hóa, dịch vụ", headerFont, blackBrush, colProductNameX, tableHeaderY);
                    graphics.DrawString("Số lượng", headerFont, blackBrush, colQuantityX, tableHeaderY, sfRight);
                    graphics.DrawString("Đơn giá", headerFont, blackBrush, colUnitPriceX, tableHeaderY, sfRight);
                    graphics.DrawString("Thành tiền", headerFont, blackBrush, colAmountX, tableHeaderY, sfRight);

                    tableHeaderY += headerFont.GetHeight(graphics) + lineSpacing;
                    graphics.DrawLine(Pens.Black, leftMargin, tableHeaderY, rightMarginContent, tableHeaderY);
                    currentY = tableHeaderY;

                    if (invoiceData.Items.Any())
                    {
                        foreach (var item in invoiceData.Items)
                        {
                            currentY += lineSpacing;
                            graphics.DrawString(item.Index.ToString(), normalFont, blackBrush, colSttX + 5, currentY);
                            graphics.DrawString(item.ProductName, normalFont, blackBrush, colProductNameX, currentY, new StringFormat { Trimming = StringTrimming.EllipsisCharacter });
                            graphics.DrawString(item.Quantity.ToString(), normalFont, blackBrush, colQuantityX, currentY, sfRight);
                            graphics.DrawString(item.Price.ToString("N0"), normalFont, blackBrush, colUnitPriceX, currentY, sfRight);
                            graphics.DrawString(item.Amount.ToString("N0"), normalFont, blackBrush, colAmountX, currentY, sfRight);
                            currentY += itemRowHeight;
                            graphics.DrawLine(Pens.LightGray, leftMargin, currentY, rightMarginContent, currentY);
                        }
                    }
                    else
                    {
                        currentY += itemRowHeight;
                        graphics.DrawString("Không có sản phẩm/dịch vụ.", normalFont, grayBrush, (width - graphics.MeasureString("Không có sản phẩm/dịch vụ.", normalFont).Width) / 2, currentY);
                        currentY += itemRowHeight;
                        graphics.DrawLine(Pens.LightGray, leftMargin, currentY, rightMarginContent, currentY);
                    }

                    // Vẽ Phần tổng cộng
                    currentY += lineSpacing;
                    float summaryLabelX = colUnitPriceX - 120; // Điều chỉnh cho phù hợp với cột mới
                    float summaryValueX = colAmountX;

                    graphics.DrawString("Cộng tiền hàng:", normalFont, blackBrush, summaryLabelX, currentY, sfRight);
                    graphics.DrawString(invoiceData.SubtotalAmount.ToString("N0"), normalFont, blackBrush, summaryValueX, currentY, sfRight);
                    currentY += normalFont.GetHeight(graphics) + lineSpacing;

                    if (invoiceData.VatAmount > 0)
                    {
                        graphics.DrawString($"Thuế GTGT ({invoiceData.VatRateFormatted}):", normalFont, blackBrush, summaryLabelX, currentY, sfRight);
                        graphics.DrawString(invoiceData.VatAmount.ToString("N0"), normalFont, blackBrush, summaryValueX, currentY, sfRight);
                        currentY += normalFont.GetHeight(graphics) + lineSpacing;
                    }

                    graphics.DrawLine(Pens.Black, summaryLabelX - 70, currentY, rightMarginContent, currentY);
                    currentY += lineSpacing;

                    graphics.DrawString("TỔNG CỘNG THANH TOÁN:", headerFont, blackBrush, summaryLabelX, currentY, sfRight);
                    graphics.DrawString(invoiceData.FinalTotalAmount.ToString("N0"), headerFont, blackBrush, summaryValueX, currentY, sfRight);
                    currentY += headerFont.GetHeight(graphics) + lineSpacing;

                    RectangleF wordsRect = new RectangleF(leftMargin, currentY, width - leftMargin - leftMargin, 40);
                    graphics.DrawString($"Số tiền viết bằng chữ: {invoiceData.TotalAmountInWords}", normalFont, blackBrush, wordsRect, sfLeft);
                    currentY += 40 + sectionSpacing;

                    // Vẽ Chữ ký
                    float signatureY = Math.Max(currentY, height - 100);
                    float buyerSignatureX = leftMargin + 100; // Điều chỉnh vị trí chữ ký
                    float sellerSignatureX = width - 100 - graphics.MeasureString("Người bán hàng", headerFont).Width / 2 - 50; // Điều chỉnh

                    graphics.DrawString("Người mua hàng", headerFont, blackBrush, buyerSignatureX, signatureY, sfCenter);
                    graphics.DrawString("(Ký, ghi rõ họ tên)", smallFont, blackBrush, buyerSignatureX, signatureY + headerFont.GetHeight(graphics) + 2, sfCenter);

                    graphics.DrawString("Người bán hàng", headerFont, blackBrush, sellerSignatureX, signatureY, sfCenter);
                    graphics.DrawString("(Ký, ghi rõ họ tên, đóng dấu)", smallFont, blackBrush, sellerSignatureX, signatureY + headerFont.GetHeight(graphics) + 2, sfCenter);

                    // Vẽ Footer
                    string footerMessage = "Xin cảm ơn Quý khách!";
                    SizeF footerSize = graphics.MeasureString(footerMessage, normalFont);
                    graphics.DrawString(footerMessage, normalFont, grayBrush, (width - footerSize.Width) / 2, height - footerSize.Height - 10);

                    using (var stream = new MemoryStream())
                    {
                        bitmap.Save(stream, ImageFormat.Png);
                        stream.Position = 0;
                        return File(stream.ToArray(), "image/png", $"HoaDon_{invoiceData.OrderId}_{DateTime.Now:yyyyMMddHHmmss}.png");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Lỗi khi xuất hóa đơn ảnh cho Order ID {id}: {ex.ToString()}");
                return StatusCode(500, $"Lỗi máy chủ nội bộ khi xuất hóa đơn ảnh: {ex.Message}");
            }
        }

        // --- HÀM XUẤT HÓA ĐƠN RA PDF ---
        [HttpGet("{id}/export/template")]
        public async Task<IActionResult> ExportOrderToPdf(int id)
        {
            try
            {
                var invoiceData = await PrepareInvoiceViewModel(id);
                if (invoiceData == null)
                {
                    return NotFound("Không tìm thấy đơn hàng hoặc không thể chuẩn bị dữ liệu hóa đơn.");
                }

                using (var stream = new MemoryStream())
                {
                    var document = new Document(PageSize.A4, 30, 30, 30, 30);
                    PdfWriter writer = PdfWriter.GetInstance(document, stream);
                    document.Open();

                    BaseFont bfBase;
                    try
                    {
                        string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
                        string fontFileName = "times.ttf"; // HOẶC "arial.ttf" - ĐẢM BẢO FILE NÀY TỒN TẠI
                        string fontPath = Path.Combine(baseDirectory, "Fonts", fontFileName);
                        if (!System.IO.File.Exists(fontPath))
                        {
                            // Thử tìm trong thư mục font hệ thống như một giải pháp dự phòng cuối cùng
                            string systemFontPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), fontFileName);
                            if (System.IO.File.Exists(systemFontPath))
                            {
                                fontPath = systemFontPath;
                            }
                            else
                            {
                                throw new FileNotFoundException($"File font '{fontFileName}' không được tìm thấy tại '{Path.Combine(baseDirectory, "Fonts")}' hoặc trong thư mục font hệ thống.");
                            }
                        }
                        bfBase = BaseFont.CreateFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                    }
                    catch (Exception fontEx)
                    {
                        Console.Error.WriteLine($"LỖI nghiêm trọng khi tải font: {fontEx.ToString()}. PDF có thể không hiển thị đúng tiếng Việt. Sử dụng font mặc định.");
                        bfBase = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.EMBEDDED);
                    }

                    iTextSharp.text.Font fontTitle = new iTextSharp.text.Font(bfBase, 18, iTextSharp.text.Font.BOLD);
                    iTextSharp.text.Font fontHeader = new iTextSharp.text.Font(bfBase, 11, iTextSharp.text.Font.BOLD);
                    iTextSharp.text.Font fontNormal = new iTextSharp.text.Font(bfBase, 10, iTextSharp.text.Font.NORMAL);
                    iTextSharp.text.Font fontNormalBold = new iTextSharp.text.Font(bfBase, 10, iTextSharp.text.Font.BOLD);
                    iTextSharp.text.Font fontSmall = new iTextSharp.text.Font(bfBase, 9, iTextSharp.text.Font.NORMAL);

                    // Vẽ Header (Thông tin người bán & Thông tin hóa đơn)
                    PdfPTable headerTable = new PdfPTable(2) { WidthPercentage = 100 };
                    headerTable.SetWidths(new float[] { 60f, 40f });
                    PdfPCell sellerCell = new PdfPCell { Border = PdfPCell.NO_BORDER, Padding = 5f };
                    sellerCell.AddElement(new Paragraph(invoiceData.Seller.CompanyName, fontHeader));
                    sellerCell.AddElement(new Paragraph(invoiceData.Seller.Address, fontNormal));
                    sellerCell.AddElement(new Paragraph(invoiceData.Seller.TaxCode, fontNormal));
                    sellerCell.AddElement(new Paragraph(invoiceData.Seller.PhoneNumber, fontNormal));
                    headerTable.AddCell(sellerCell);
                    PdfPCell invoiceMetaCell = new PdfPCell { Border = PdfPCell.NO_BORDER, Padding = 5f };
                    invoiceMetaCell.AddElement(new Paragraph($"Mẫu số: {invoiceData.InvoiceTemplateNo}", fontNormal) { Alignment = Element.ALIGN_RIGHT });
                    invoiceMetaCell.AddElement(new Paragraph($"Ký hiệu: {invoiceData.InvoiceSeries}", fontNormal) { Alignment = Element.ALIGN_RIGHT });
                    invoiceMetaCell.AddElement(new Paragraph($"Số: {invoiceData.InvoiceNumberFormatted}", fontNormal) { Alignment = Element.ALIGN_RIGHT });
                    document.Add(headerTable);

                    // Vẽ Tiêu đề hóa đơn
                    Paragraph title = new Paragraph("HÓA ĐƠN BÁN HÀNG", fontTitle)
                    { Alignment = Element.ALIGN_CENTER, SpacingBefore = 10f, SpacingAfter = 5f };
                    document.Add(title);
                    Paragraph invoiceDate = new Paragraph(invoiceData.FormattedOrderDate, fontNormal)
                    { Alignment = Element.ALIGN_CENTER, SpacingAfter = 20f };
                    document.Add(invoiceDate);

                    // Vẽ Thông tin người mua (đã bỏ Mã số thuế)
                    document.Add(new Paragraph($"Đơn vị mua hàng (Họ tên người mua): {invoiceData.BuyerFullName}", fontNormal));
                    document.Add(new Paragraph($"Địa chỉ: {invoiceData.BuyerAddress}", fontNormal));
                    document.Add(new Paragraph($"Hình thức thanh toán: {invoiceData.PaymentMethodName}", fontNormal));
                    document.Add(new Paragraph(" ") { SpacingAfter = 5f });

                    // Vẽ Bảng chi tiết sản phẩm (đã bỏ cột ĐVT)
                    PdfPTable itemsTable = new PdfPTable(5); // 5 cột
                    itemsTable.WidthPercentage = 100;
                    itemsTable.SetWidths(new float[] { 5f, 50f, 10f, 15f, 20f }); // STT, Tên, SL, Đơn giá, Thành tiền
                    itemsTable.SpacingBefore = 10f;

                    string[] tableHeaders = { "STT", "Tên hàng hóa, dịch vụ", "Số lượng", "Đơn giá (VNĐ)", "Thành tiền (VNĐ)" };
                    foreach (string headerText in tableHeaders)
                    {
                        PdfPCell headerCell = new PdfPCell(new Phrase(headerText, fontNormalBold))
                        { HorizontalAlignment = Element.ALIGN_CENTER, VerticalAlignment = Element.ALIGN_MIDDLE, BackgroundColor = new BaseColor(217, 217, 217), Padding = 5f };
                        itemsTable.AddCell(headerCell);
                    }

                    foreach (var item in invoiceData.Items)
                    {
                        itemsTable.AddCell(new PdfPCell(new Phrase(item.Index.ToString(), fontNormal)) { Padding = 5f, HorizontalAlignment = Element.ALIGN_CENTER });
                        itemsTable.AddCell(new PdfPCell(new Phrase(item.ProductName, fontNormal)) { Padding = 5f });
                        itemsTable.AddCell(new PdfPCell(new Phrase(item.Quantity.ToString(), fontNormal)) { Padding = 5f, HorizontalAlignment = Element.ALIGN_RIGHT });
                        itemsTable.AddCell(new PdfPCell(new Phrase(item.Price.ToString("N0"), fontNormal)) { Padding = 5f, HorizontalAlignment = Element.ALIGN_RIGHT });
                        itemsTable.AddCell(new PdfPCell(new Phrase(item.Amount.ToString("N0"), fontNormal)) { Padding = 5f, HorizontalAlignment = Element.ALIGN_RIGHT });
                    }
                    document.Add(itemsTable);

                    // Vẽ Phần tổng kết
                    PdfPTable summaryTable = new PdfPTable(2) { WidthPercentage = 100, SpacingBefore = 10f };
                    summaryTable.SetWidths(new float[] { 75f, 25f });
                    summaryTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    summaryTable.DefaultCell.Padding = 3f;
                    summaryTable.AddCell(new Phrase("Cộng tiền hàng:", fontNormal));
                    var subtotalCell = new PdfPCell(new Phrase(invoiceData.SubtotalAmount.ToString("N0") + " VNĐ", fontNormal));
                    subtotalCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    summaryTable.AddCell(subtotalCell);
                    summaryTable.AddCell(new Phrase($"Tiền thuế GTGT ({invoiceData.VatRateFormatted}):", fontNormal));
                    var vatAmountCell = new PdfPCell(new Phrase(invoiceData.VatAmount.ToString("N0") + " VNĐ", fontNormal));
                    vatAmountCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    summaryTable.AddCell(vatAmountCell);
                    summaryTable.AddCell(new Phrase("Tổng cộng tiền thanh toán:", fontNormalBold));
                    var finalTotalCell = new PdfPCell(new Phrase(invoiceData.FinalTotalAmount.ToString("N0") + " VNĐ", fontNormalBold));
                    finalTotalCell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    summaryTable.AddCell(finalTotalCell);
                    document.Add(summaryTable);

                    Paragraph amountInWords = new Paragraph($"Số tiền viết bằng chữ: {invoiceData.TotalAmountInWords}", fontNormal)
                    { SpacingBefore = 5f, SpacingAfter = 20f };
                    document.Add(amountInWords);

                    // Vẽ Chữ ký
                    PdfPTable signatureTable = new PdfPTable(2) { WidthPercentage = 100, SpacingBefore = 30f };
                    signatureTable.SetWidths(new float[] { 50f, 50f });
                    signatureTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    PdfPCell buyerSignCellPdf = new PdfPCell { Border = PdfPCell.NO_BORDER, HorizontalAlignment = Element.ALIGN_CENTER };
                    buyerSignCellPdf.AddElement(new Paragraph("Người mua hàng", fontNormalBold) { Alignment = Element.ALIGN_CENTER });
                    buyerSignCellPdf.AddElement(new Paragraph("(Ký, ghi rõ họ tên)", fontSmall) { Alignment = Element.ALIGN_CENTER });
                    signatureTable.AddCell(buyerSignCellPdf);
                    PdfPCell sellerSignCellPdf = new PdfPCell { Border = PdfPCell.NO_BORDER, HorizontalAlignment = Element.ALIGN_CENTER };
                    sellerSignCellPdf.AddElement(new Paragraph("Người bán hàng", fontNormalBold) { Alignment = Element.ALIGN_CENTER });
                    sellerSignCellPdf.AddElement(new Paragraph("(Ký, ghi rõ họ tên, đóng dấu)", fontSmall) { Alignment = Element.ALIGN_CENTER });
                    signatureTable.AddCell(sellerSignCellPdf);
                    document.Add(signatureTable);

                    document.Close();
                    writer.Close();

                    return File(stream.ToArray(), "application/pdf", $"HoaDon_{invoiceData.OrderId}_{DateTime.Now:yyyyMMddHHmmss}.pdf");
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Lỗi khi xuất hóa đơn PDF cho Order ID {id}: {ex.ToString()}");
                return StatusCode(500, $"Lỗi máy chủ nội bộ khi xuất hóa đơn PDF: {ex.Message}");
            }
        }
        // Lấy địa chỉ theo đơn
        [HttpGet("by-phone/{phoneNumber}")]
        public async Task<IActionResult> GetOrdersByPhoneNumber(string phoneNumber)
        {
            try
            {
                // Tìm các địa chỉ có số điện thoại trùng khớp
                var addresses = await _context.Addresses
                    .Where(a => a.PhoneNumber == phoneNumber)
                    .Select(a => a.Id) // Chỉ lấy ID
                    .ToListAsync();

                if (!addresses.Any())
                {
                    return NotFound(new { Message = "Không tìm thấy đơn hàng nào với số điện thoại này" });
                }

                // Lấy các đơn hàng
                var orders = await _context.Orders
                    .Where(o => addresses.Contains(o.AddressId ?? 0))
                    .Include(o => o.OrderItems)
                        .ThenInclude(oi => oi.ProductVariant)
                            .ThenInclude(pv => pv.Product)
                            .ThenInclude(p => p.Images) // Lấy hình ảnh sản phẩm
                    .Include(o => o.Address)
                    .Include(o => o.PaymentMethod)
                    .OrderByDescending(o => o.OrderDate)
                    .ToListAsync();

                var result = orders.Select(order => new
                {
                    OrderId = order.Id,
                    OrderDate = order.OrderDate.ToString("dd/MM/yyyy HH:mm"),
                    TotalAmount = order.TotalAmount,
                    FormattedTotal = order.TotalAmount.ToString("N0") + " VNĐ",
                    PaymentMethod = order.PaymentMethod != null ? order.PaymentMethod.Name : "Tiền mặt",
                    OrderStatus = order.OrderStatus,
                    ShippingInfo = new
                    {
                        FullName = order.Address != null ? order.Address.FullName : "N/A",
                        Phone = order.Address != null ? order.Address.PhoneNumber : "N/A",
                        Address = order.Address != null
                            ? $"{order.Address.AddressLine1}, {order.Address.City}, {order.Address.State}"
                            : "N/A",
                        Email = order.User != null ? order.User.Email : "N/A"
                    },
                    Products = order.OrderItems.Select(oi => new
                    {
                        Id = oi.ProductVariant.Product.Id,
                        Name = oi.ProductVariant.Product.Name,
                        Image = oi.ProductVariant.Product.Images
        .OrderByDescending(i => i.IsPrimary) // Ưu tiên ảnh IsPrimary
        .ThenBy(i => i.Id)                  // Sắp xếp thứ tự
        .FirstOrDefault()?                  // Lấy ảnh đầu tiên
        .ImageUrl ?? "/images/default-product.png", // Fallback nếu null
                        Variant = $"{oi.ProductVariant.Color} - {oi.ProductVariant.Storage}",
                        Quantity = oi.Quantity,
                        Price = oi.Price,
                        Total = oi.Price * oi.Quantity
                    }),
                    EstimatedDelivery = order.OrderDate.AddDays(3).ToString("dd/MM/yyyy")
                });

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thông tin đơn hàng", Error = ex.Message });
            }
        }
        [HttpGet("dashboard/sales-overview")]
        public async Task<IActionResult> GetSalesOverview([FromQuery] string range = "month")
        {
            try
            {
                DateTime startDate;
                Func<DateTime, string> groupByFormat;
                Func<string, string> formatPeriodLabel;
                string xAxisKey;

                switch (range.ToLower())
                {
                    case "week":
                        startDate = DateTime.UtcNow.Date.AddDays(-7);
                        groupByFormat = date => ((int)date.DayOfWeek).ToString();
                        formatPeriodLabel = periodNum =>
                        {
                            var daysOfWeek = new[] { "Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy" };
                            int dayIndex;
                            return int.TryParse(periodNum, out dayIndex) && dayIndex >= 0 && dayIndex < 7
                                ? daysOfWeek[dayIndex]
                                : periodNum;
                        };
                        xAxisKey = "day";
                        break;

                    case "year":
                        startDate = DateTime.UtcNow.Date.AddYears(0);
                        groupByFormat = date => date.Month.ToString();
                        formatPeriodLabel = period => $"Tháng {period}";
                        xAxisKey = "month";
                        break;

                    default: // month
                        startDate = DateTime.UtcNow.Date.AddMonths(-1);
                        groupByFormat = date => date.Day.ToString();
                        formatPeriodLabel = period => $"Ngày {period}";
                        xAxisKey = "day";
                        break;
                }

                // Get data from database
                var orders = await _context.Orders
                    .Where(o => o.OrderDate >= startDate && o.OrderStatus == "Delivered")
                    .Select(o => new { o.OrderDate, o.TotalAmount })
                    .ToListAsync();

                // Group and format data
                var salesData = orders
                    .GroupBy(o => groupByFormat(o.OrderDate))
                    .Select(g => new
                    {
                        Period = g.Key,
                        FormattedPeriod = formatPeriodLabel(g.Key),
                        ShortPeriod = range switch
                        {
                            "week" => formatPeriodLabel(g.Key).Replace("Chủ Nhật", "CN").Replace("Thứ ", ""),
                            "year" => $"T{g.Key}",
                            _ => g.Key
                        },
                        Sales = g.Sum(o => o.TotalAmount),
                        OrderCount = g.Count()
                    })
                    .OrderBy(x => int.Parse(x.Period))
                    .ToList();

                // Fill missing periods
                var allPeriods = range switch
                {
                    "week" => Enumerable.Range(0, 7).Select(i => i.ToString()),
                    "year" => Enumerable.Range(1, 12).Select(i => i.ToString()),
                    _ => Enumerable.Range(1, DateTime.DaysInMonth(DateTime.UtcNow.Year, DateTime.UtcNow.Month))
                        .Select(i => i.ToString())
                };

                salesData = allPeriods
                    .GroupJoin(salesData,
                        period => period,
                        data => data.Period,
                        (period, data) => new
                        {
                            Period = period,
                            FormattedPeriod = formatPeriodLabel(period),
                            ShortPeriod = range switch
                            {
                                "week" => formatPeriodLabel(period).Replace("Chủ Nhật", "CN").Replace("Thứ ", ""),
                                "year" => $"T{period}",
                                _ => period
                            },
                            Sales = data.FirstOrDefault()?.Sales ?? 0,
                            OrderCount = data.FirstOrDefault()?.OrderCount ?? 0
                        })
                    .OrderBy(x => int.Parse(x.Period))
                    .ToList();

                // Create summary object based on range
                object summary;
                switch (range.ToLower())
                {
                    case "week":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageDailySales = salesData.Average(x => x.Sales)
                        };
                        break;
                    case "month":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageDailySales = salesData.Average(x => x.Sales)
                        };
                        break;
                    case "year":
                        summary = new
                        {
                            TotalSales = salesData.Sum(x => x.Sales),
                            AverageMonthlySales = salesData.Average(x => x.Sales),
                            BestMonth = salesData.OrderByDescending(x => x.Sales).FirstOrDefault()?.FormattedPeriod,
                            WorstMonth = salesData.OrderBy(x => x.Sales).FirstOrDefault()?.FormattedPeriod
                        };
                        break;
                    default:
                        summary = new { };
                        break;
                }

                return Ok(new
                {
                    Data = salesData,
                    XAxisKey = xAxisKey,
                    TimeRange = range,
                    Currency = "VND",
                    Summary = summary
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu tổng quan bán hàng", Error = ex.Message });
            }
        }
        // Đếm tổng số đơn hàng
        [HttpGet("total-count")]
        public async Task<IActionResult> GetTotalOrderCount()
        {
            try
            {
                var totalOrders = await _context.Orders.CountAsync();
                return Ok(new { TotalOrders = totalOrders });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi đếm số lượng đơn hàng", Error = ex.Message });
            }
        }

        // Thêm vào OrderController
        [HttpGet("stats")]
        public async Task<IActionResult> GetOrderStats()
        {
            try
            {
                var totalOrders = await _context.Orders.CountAsync();
                var completedOrders = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered")
                    .CountAsync();
                var pendingOrders = await _context.Orders
                    .Where(o => o.OrderStatus == "Pending")
                    .CountAsync();
                var totalRevenue = await _context.Orders
                    .Where(o => o.OrderStatus == "Delivered")
                    .SumAsync(o => o.TotalAmount);

                return Ok(new
                {
                    TotalOrders = totalOrders,
                    CompletedOrders = completedOrders,
                    PendingOrders = pendingOrders,
                    TotalRevenue = totalRevenue
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy thống kê", Error = ex.Message });
            }
        }

        [HttpGet("user/{userId}/has-purchased/{productId}")]
        public async Task<ActionResult<bool>> HasUserPurchasedProduct(int userId, int productId)
        {
            var hasPurchased = await _context.OrderItems
                .Include(oi => oi.Order)
                .Include(oi => oi.ProductVariant)
                .AnyAsync(oi => oi.Order.UserId == userId &&
                                oi.ProductVariant.ProductId == productId &&
                                oi.Order.OrderStatus == "Delivered");

            return Ok(hasPurchased);
        }
        [HttpGet("revenue-year")]
        public async Task<IActionResult> GetRevenueDataYear([FromQuery] string range = "year")
        {
            try
            {
                DateTime startDate = DateTime.UtcNow.AddYears(-1); // Luôn lấy 1 năm gần nhất
                var currentDate = DateTime.UtcNow;

                var revenueData = await _context.Orders
                    .Where(o => o.OrderDate >= startDate &&
                               o.OrderDate <= currentDate &&
                               o.OrderStatus == "Delivered")
                    .GroupBy(o => new { o.OrderDate.Month, o.OrderDate.Year })
                    .Select(g => new
                    {
                        Month = g.Key.Month,
                        Year = g.Key.Year,
                        Revenue = g.Sum(o => o.TotalAmount)
                    })
                    .OrderBy(x => x.Year)
                    .ThenBy(x => x.Month)
                    .ToListAsync();

                // Đảm bảo luôn có đủ 12 tháng
                var fullYearData = Enumerable.Range(0, 12)
                    .Select(i => new
                    {
                        Date = startDate.AddMonths(i),
                        Month = startDate.AddMonths(i).Month,
                        Year = startDate.AddMonths(i).Year,
                        Revenue = revenueData
                            .FirstOrDefault(d => d.Month == startDate.AddMonths(i).Month &&
                                               d.Year == startDate.AddMonths(i).Year)?.Revenue ?? 0
                    })
                    .ToList();

                return Ok(fullYearData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu doanh thu", Error = ex.Message });
            }
        }

        [HttpGet("revenue")]
        public async Task<IActionResult> GetRevenueData([FromQuery] string range = "month")
        {
            try
            {
                DateTime startDate = range switch
                {
                    "week" => DateTime.UtcNow.AddDays(-7),
                    "year" => DateTime.UtcNow.AddYears(-1),
                    _ => DateTime.UtcNow.AddMonths(-1)
                };

                var revenueData = await _context.Orders
                    .Where(o => o.OrderDate >= startDate && o.OrderStatus == "Delivered")
                    .GroupBy(o => new { o.OrderDate.Date })
                    .Select(g => new
                    {
                        Date = g.Key.Date,
                        Revenue = g.Sum(o => o.TotalAmount)
                    })
                    .OrderBy(x => x.Date)
                    .ToListAsync();

                return Ok(revenueData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi lấy dữ liệu doanh thu", Error = ex.Message });
            }
        }

    }


    public static class NumberToTextVN
    {
        private static readonly string[] ChuSo = { "không", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín" };
        private static readonly string[] DonVi = { "", "nghìn", "triệu", "tỷ" }; // Mở rộng nếu cần (nghìn tỷ, triệu tỷ,...)

        private static string DocNhomBaChuSo(int baChuSo)
        {
            string tram, chuc, donViStr; // Đổi tên 'donVi' để tránh trùng với mảng 'DonVi'
            string ketQua = "";

            if (baChuSo < 0 || baChuSo > 999) return ""; // Chỉ xử lý số có 3 chữ số

            tram = ChuSo[baChuSo / 100];
            chuc = ChuSo[(baChuSo % 100) / 10];
            donViStr = ChuSo[baChuSo % 10];

            if (baChuSo == 0) return ""; // Nhóm ba số là 000 thì không đọc gì

            // Đọc hàng trăm
            if (baChuSo / 100 > 0)
            {
                ketQua += tram + " trăm ";
                if ((baChuSo % 100) == 0) return ketQua.Trim(); // Nếu là xxx00 (ví dụ: một trăm)
            }

            // Đọc hàng chục và đơn vị
            int phanDuTram = baChuSo % 100;
            if (phanDuTram / 10 > 0) // Có hàng chục (từ 10-99)
            {
                if (chuc == "một") ketQua += "mười "; // 1x -> mười
                else ketQua += chuc + " mươi ";    // 2x-9x -> hai mươi, ba mươi...

                if (phanDuTram % 10 == 0) return ketQua.Trim(); // Nếu là xx0 (ví dụ: hai mươi)

                if (phanDuTram % 10 == 5 && chuc != "không") ketQua += "lăm"; // x5 (trừ 05) -> lăm
                else if (phanDuTram % 10 == 1 && chuc != "không" && chuc != "một") ketQua += "mốt"; // x1 (trừ 01, 11) -> mốt
                else if (phanDuTram % 10 > 0) ketQua += donViStr;
            }
            else // Hàng chục là 0 (số dạng x0x)
            {
                // Nếu có hàng trăm và hàng đơn vị > 0 (ví dụ 101, 205) thì thêm "linh"
                if (baChuSo / 100 > 0 && (phanDuTram % 10) > 0) ketQua += "linh ";

                if ((phanDuTram % 10) > 0) ketQua += donViStr; // Đọc hàng đơn vị (ví dụ "một" trong "một trăm linh một", hoặc "một" nếu số là 1)
            }
            return ketQua.Trim();
        }

        public static string DocSo(long soTien)
        {
            if (soTien == 0) return ChuSo[0]; // "không"
            if (soTien < 0) return "Âm " + DocSo(Math.Abs(soTien)); // Viết hoa "Âm"

            string chuoiSo = "";
            int i = 0; // Index cho mảng DonVi (đơn vị nghìn, triệu, tỷ)

            if (soTien == 0) return ChuSo[0]; // Xử lý trường hợp 0

            while (soTien > 0)
            {
                long soDu = soTien % 1000; // Lấy 3 số cuối (nhóm ba chữ số)
                soTien /= 1000;      // Loại bỏ 3 số cuối đã xử lý

                if (soDu > 0) // Chỉ đọc nhóm này nếu nó khác 000
                {
                    string strNhomBa = DocNhomBaChuSo((int)soDu);
                    // Thêm đơn vị (nghìn, triệu, tỷ) nếu có và không phải là nhóm đơn vị cuối cùng (i > 0)
                    // Hoặc nếu là nhóm đơn vị cuối cùng nhưng strNhomBa không rỗng (tức là đọc số từ 1-999)
                    chuoiSo = strNhomBa + (i > 0 ? (" " + DonVi[i]) : "") + (string.IsNullOrEmpty(chuoiSo) ? "" : " ") + chuoiSo;
                }


                i++;
                if (i >= DonVi.Length && soTien > 0) // Nếu vượt quá đơn vị tỷ và vẫn còn số
                {
                    // Cần mở rộng mảng DonVi hoặc xử lý đặc biệt cho số quá lớn
                    // Hiện tại sẽ dừng ở "tỷ"
                    Console.Error.WriteLine("Số tiền quá lớn, vượt quá khả năng đọc của đơn vị 'tỷ'.");
                    break;
                }
            }

            chuoiSo = chuoiSo.Trim();

            // Dọn dẹp khoảng trắng thừa và các cụm từ không mong muốn
            chuoiSo = Regex.Replace(chuoiSo, @"\s+", " "); // Chuẩn hóa khoảng trắng
            // Các lệnh Regex sau có thể không cần thiết nếu DocNhomBaChuSo và logic vòng lặp đã chuẩn
            // Ví dụ: "không trăm linh" -> "linh" (nếu là đầu chuỗi)
            if (chuoiSo.StartsWith("không trăm linh ")) chuoiSo = chuoiSo.Substring("không trăm linh ".Length);
            else if (chuoiSo.StartsWith("không trăm ")) chuoiSo = chuoiSo.Substring("không trăm ".Length);
            // "mươi không" -> "mươi"
            chuoiSo = chuoiSo.Replace(" mươi không ", " mươi ");
            if (chuoiSo.EndsWith(" mươi không")) chuoiSo = chuoiSo.Substring(0, chuoiSo.Length - " không".Length);


            // Viết hoa chữ cái đầu tiên của chuỗi kết quả
            if (!string.IsNullOrEmpty(chuoiSo))
            {
                chuoiSo = char.ToUpper(chuoiSo[0]) + chuoiSo.Substring(1);
            }

            return chuoiSo;
        }
    }

    // Đặt các lớp ViewModel này trong namespace DTOs của bạn hoặc trong cùng file controller nếu tiện
    public class OrderInvoiceViewModel
    {
        public int OrderId { get; set; }
        public DateTime OrderDate { get; set; }
        public string FormattedOrderDate => $"Ngày {OrderDate:dd} tháng {OrderDate:MM} năm {OrderDate:yyyy}";

        public SellerInfo Seller { get; set; }

        public string BuyerFullName { get; set; }
        public string BuyerAddress { get; set; }
        // public string BuyerTaxCode { get; set; } // <<<< LOẠI BỎ DÒNG NÀY
        public string PaymentMethodName { get; set; }

        public List<InvoiceItemViewModel> Items { get; set; }

        public decimal SubtotalAmount { get; set; }
        public decimal VatRate { get; set; }
        public string VatRateFormatted => $"{VatRate * 100:N0}%";
        public decimal VatAmount { get; set; }
        public decimal FinalTotalAmount { get; set; }
        public string TotalAmountInWords { get; set; }

        public string InvoiceTemplateNo => Seller.InvoiceTemplateNo;
        public string InvoiceSeries => Seller.InvoiceSeries;
        public string InvoiceNumberFormatted => OrderId.ToString("D7");
    }

    // InvoiceItemViewModel giữ nguyên như lần cập nhật trước (đã bỏ Unit)
    public class InvoiceItemViewModel
    {
        public int Index { get; set; }
        public string ProductName { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
        public decimal Amount => Quantity * Price;
    }

    public class SellerInfo
    {
        public string CompanyName { get; set; } = "CÔNG TY TNHH SHN GEAR";
        public string Address { get; set; } = "117 Đường Nguyễn Thông, Quận 3, TP.HCM";
        public string TaxCode { get; set; } = "0123456789";
        public string PhoneNumber { get; set; } = "0778 706 084";
        public string InvoiceTemplateNo { get; set; } = "01GTKT0/001";
        public string InvoiceSeries { get; set; } = "AA/22E";
    }

    public class MoMoCallbackModel
    {
        public string PartnerCode { get; set; }
        public string OrderId { get; set; }
        public string RequestId { get; set; }
        public long Amount { get; set; }
        public string OrderInfo { get; set; }
        public string OrderType { get; set; }
        public string TransId { get; set; }
        public int ResultCode { get; set; }
        public string Message { get; set; }
        public string PayType { get; set; }
        public string Signature { get; set; }
    }
}
```

### Controllers\PaymentMethodController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PaymentMethodController : ControllerBase
    {
        private readonly AppDbContext _context;

        public PaymentMethodController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/PaymentMethod
        [HttpGet]
        public async Task<ActionResult<IEnumerable<PaymentMethod>>> GetPaymentMethods()
        {
            return await _context.PaymentMethods.ToListAsync();
        }

        // GET: api/PaymentMethod/5
        [HttpGet("{id}")]
        public async Task<ActionResult<PaymentMethod>> GetPaymentMethod(int id)
        {
            var paymentMethod = await _context.PaymentMethods.FindAsync(id);

            if (paymentMethod == null)
            {
                return NotFound();
            }

            return paymentMethod;
        }

        // POST: api/PaymentMethod
        [HttpPost]
        public async Task<ActionResult<PaymentMethod>> PostPaymentMethod(PaymentMethod paymentMethod)
        {
            _context.PaymentMethods.Add(paymentMethod);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetPaymentMethod", new { id = paymentMethod.Id }, paymentMethod);
        }

        // PUT: api/PaymentMethod/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutPaymentMethod(int id, PaymentMethod paymentMethod)
        {
            if (id != paymentMethod.Id)
            {
                return BadRequest();
            }

            _context.Entry(paymentMethod).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!PaymentMethodExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/PaymentMethod/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeletePaymentMethod(int id)
        {
            var paymentMethod = await _context.PaymentMethods.FindAsync(id);
            if (paymentMethod == null)
            {
                return NotFound();
            }

            _context.PaymentMethods.Remove(paymentMethod);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool PaymentMethodExists(int id)
        {
            return _context.PaymentMethods.Any(e => e.Id == id);
        }

        // Thêm endpoint để seed dữ liệu phương thức thanh toán mẫu
        [HttpPost("seed")]
        public async Task<IActionResult> SeedPaymentMethods()
        {
            if (await _context.PaymentMethods.AnyAsync())
            {
                return Conflict("Payment methods already exist in database");
            }

            var paymentMethods = new List<PaymentMethod>
            {
                new PaymentMethod
                {
                    Id = 1,
                    Name = "Tiền mặt khi nhận hàng",
                    Description = "Thanh toán bằng tiền mặt khi nhận hàng"
                },
                new PaymentMethod
                {
                    Id = 2,
                    Name = "Ví điện tử MoMo",
                    Description = "Thanh toán qua ứng dụng MoMo"
                }
            };

            await _context.PaymentMethods.AddRangeAsync(paymentMethods);
            await _context.SaveChangesAsync();

            return Ok("Payment methods seeded successfully");
        }
    }
}
```

### Controllers\PayPalController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using PayPalCheckoutSdk.Core;
using PayPalCheckoutSdk.Orders;
using Microsoft.Extensions.Logging;
using SHN_Gear.Data;
using SHN_Gear.Services;
using System.Globalization;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class PayPalController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly PayPalService _payPalService;
        private readonly ILogger<PayPalController> _logger;
        private const decimal VND_TO_USD_RATE = 25000m;
        private const string CLIENT_URL = "https://localhost:44479";

        public PayPalController(
            AppDbContext context,
            PayPalService payPalService,
            ILogger<PayPalController> logger)
        {
            _context = context;
            _payPalService = payPalService;
            _logger = logger;
        }
        // tạo đơn hàng PayPal
        [HttpPost("create-order")]
        public async Task<ActionResult<PayPalOrderResponse>> CreatePayPalOrder([FromBody] OrderDto orderDto)
        {
            if (orderDto.PaymentMethodId != 3)
            {
                return BadRequest(new { Message = "Invalid payment method. Only PayPal is accepted." });
            }

            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // Validate and create order in database
                var order = await CreateDatabaseOrder(orderDto);
                if (order is null)
                {
                    return BadRequest(new { Message = "Could not create order. Please check your request." });
                }

                // Convert VND to USD (minimum $0.01 USD)
                decimal amountInUSD = Math.Max(order.TotalAmount / VND_TO_USD_RATE, 0.01m);
                amountInUSD = Math.Round(amountInUSD, 2);

                // Create PayPal order
                var payPalOrderId = await _payPalService.CreateOrder(
                    amountInUSD,
                    "USD",
                    $"SHN{order.Id}",
                    $"https://localhost:7107/api/paypal/capture-order?orderId={order.Id}",
                    $"{CLIENT_URL}/payment-canceled?orderId={order.Id}"
                );

                if (string.IsNullOrEmpty(payPalOrderId))
                {
                    throw new Exception("Failed to create PayPal order");
                }

                // Update order with PayPal information
                order.PayPalOrderId = payPalOrderId;
                order.PayPalPaymentUrl = $"https://www.sandbox.paypal.com/checkoutnow?token={payPalOrderId}";
                await _context.SaveChangesAsync();

                // Remove purchased items from cart (if user is authenticated)
                if (orderDto.UserId.HasValue)
                {
                    var productVariantIds = orderDto.OrderItems.Select(oi => oi.ProductVariantId).ToList();

                    var cartItemsToRemove = await _context.CartItems
                        .Where(ci => ci.Cart.UserId == orderDto.UserId.Value &&
                                    productVariantIds.Contains(ci.ProductVariantId))
                        .ToListAsync();

                    if (cartItemsToRemove.Any())
                    {
                        _context.CartItems.RemoveRange(cartItemsToRemove);
                        await _context.SaveChangesAsync();
                    }
                }

                await transaction.CommitAsync();

                return Ok(new PayPalOrderResponse
                {
                    OrderId = order.Id,
                    PayPalOrderId = payPalOrderId,
                    ApprovalUrl = order.PayPalPaymentUrl,
                    TotalAmount = amountInUSD,
                    Currency = "USD",
                    CartItemsRemoved = orderDto.UserId.HasValue
                });
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "Failed to create PayPal order");
                return StatusCode(500, new
                {
                    Error = "Payment processing failed",
                    Details = ex.Message
                });
            }
        }

        private async Task<Models.Order?> CreateDatabaseOrder(OrderDto orderDto)
        {
            try
            {
                // Validate user
                if (orderDto.UserId.HasValue &&
                    !await _context.Users.AnyAsync(u => u.Id == orderDto.UserId.Value))
                {
                    return null;
                }

                // Validate product variants
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants
                        .Include(pv => pv.Product)
                        .FirstOrDefaultAsync(pv => pv.Id == item.ProductVariantId);

                    if (variant is null || variant.StockQuantity < item.Quantity)
                    {
                        return null;
                    }
                }

                // Create order
                var order = new Models.Order
                {
                    UserId = orderDto.UserId,
                    OrderDate = DateTime.UtcNow,
                    TotalAmount = orderDto.TotalAmount,
                    OrderStatus = "WaitingForPayment",
                    AddressId = orderDto.AddressId,
                    PaymentMethodId = 3, // PayPal
                    VoucherId = orderDto.VoucherId,
                    OrderItems = orderDto.OrderItems.Select(oi => new OrderItem
                    {
                        ProductVariantId = oi.ProductVariantId,
                        Quantity = oi.Quantity,
                        Price = oi.Price
                    }).ToList()
                };

                _context.Orders.Add(order);
                await _context.SaveChangesAsync();

                // Update stock
                foreach (var item in orderDto.OrderItems)
                {
                    var variant = await _context.ProductVariants.FindAsync(item.ProductVariantId);
                    if (variant is not null)
                    {
                        variant.StockQuantity -= item.Quantity;
                    }
                }
                await _context.SaveChangesAsync();

                return order;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create order in database");
                return null;
            }
        }

        [HttpGet("capture-order")]
        public async Task<IActionResult> CaptureOrder([FromQuery] string token, [FromQuery] int orderId)
        {
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                var order = await _context.Orders.FindAsync(orderId);
                if (order is null || order.PayPalOrderId != token)
                {
                    return BadRequest(new { Message = "Order not found or invalid PayPal token" });
                }

                var captureResult = await _payPalService.CaptureOrder(token);

                if (!captureResult.Success)
                {
                    order.OrderStatus = "PaymentFailed";
                    await _context.SaveChangesAsync();
                    await transaction.CommitAsync();
                    return new RedirectResult($"{CLIENT_URL}/payment-failed?orderId={order.Id}", true);
                }

                // Update order status
                order.OrderStatus = "Paid";
                order.PayPalTransactionId = captureResult.TransactionId;
                order.PayPalResponse = captureResult.RawResponse;

                await _context.SaveChangesAsync();
                await transaction.CommitAsync();

                // Redirect to payment success page
                var redirectUrl = $"{CLIENT_URL}/payment-success?orderId={order.Id}";
                return new RedirectResult(redirectUrl, true);
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, $"Failed to capture PayPal payment for order {orderId}");
                return Redirect($"{CLIENT_URL}/payment-error?message={Uri.EscapeDataString(ex.Message)}");
            }
        }
    }

    public class PayPalOrderResponse
    {
        public int OrderId { get; set; }
        public string PayPalOrderId { get; set; } = null!;
        public string ApprovalUrl { get; set; } = null!;
        public decimal TotalAmount { get; set; }
        public string Currency { get; set; } = null!;
        public bool CartItemsRemoved { get; set; }
    }
}
```

### Controllers\ProductsController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public ProductsController(AppDbContext context)
        {
            _context = context;
        }

        // Helper method to map Product to ProductDto
        private ProductDto MapProductToDto(Product product)
        {
            var now = DateTime.UtcNow;
            bool isInFlashSale = product.IsFlashSale &&
                                 product.FlashSaleStartDate.HasValue && product.FlashSaleStartDate.Value <= now &&
                                 product.FlashSaleEndDate.HasValue && product.FlashSaleEndDate.Value >= now;

            return new ProductDto
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                CategoryId = product.CategoryId,
                BrandId = product.BrandId,
                Images = product.Images.Select(img => new ProductImageDto
                {
                    ImageUrl = img.ImageUrl,
                    IsPrimary = img.IsPrimary
                }).ToList(),
                Variants = product.Variants.Select(v => new ProductVariantDto
                {
                    Color = v.Color,
                    Storage = v.Storage,
                    Price = v.Price, // Always show original price
                    DiscountPrice = isInFlashSale && product.FlashSalePrice.HasValue
                                    ? product.FlashSalePrice.Value // Flash sale price overrides discount price
                                    : v.DiscountPrice,
                    StockQuantity = v.StockQuantity
                }).ToList(),
                IsFlashSale = isInFlashSale, // Reflect actual flash sale status
                FlashSalePrice = product.FlashSalePrice,
                FlashSaleStartDate = product.FlashSaleStartDate,
                FlashSaleEndDate = product.FlashSaleEndDate
            };
        }

        // Lấy danh sách sản phẩm (có hỗ trợ lọc theo danh mục)
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetProducts([FromQuery] int? categoryId = null)
        {
            var query = _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Category)
                .Include(p => p.Brand)
                .AsQueryable();

            if (categoryId.HasValue)
            {
                query = query.Where(p => p.CategoryId == categoryId.Value);
            }

            var products = await query.ToListAsync();
            return Ok(products.Select(p => MapProductToDto(p)));
        }

        // Lấy thông tin chi tiết sản phẩm theo ID
        [HttpGet("{id}")]
        public async Task<ActionResult<ProductDto>> GetProduct(int id)
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Category)
                .Include(p => p.Brand)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null)
            {
                return NotFound();
            }

            return Ok(MapProductToDto(product));
        }

        // Thêm sản phẩm mới
        [HttpPost]
        public async Task<ActionResult<ProductDto>> PostProduct([FromBody] ProductDto productDto)
        {
            if (productDto == null)
                return BadRequest("Dữ liệu sản phẩm không hợp lệ.");

            if (string.IsNullOrWhiteSpace(productDto.Name) || productDto.CategoryId <= 0 || productDto.BrandId <= 0)
                return BadRequest("Tên, danh mục hoặc thương hiệu không hợp lệ.");

            var product = new Product
            {
                Name = productDto.Name,
                Description = productDto.Description,
                CategoryId = productDto.CategoryId,
                BrandId = productDto.BrandId,
                Images = productDto.Images?.Select(img => new ProductImage
                {
                    ImageUrl = img.ImageUrl,
                    IsPrimary = img.IsPrimary
                }).ToList() ?? new List<ProductImage>(),
                Variants = productDto.Variants?.Select(v => new ProductVariant
                {
                    Color = v.Color,
                    Storage = v.Storage,
                    Price = v.Price,
                    DiscountPrice = v.DiscountPrice,
                    StockQuantity = v.StockQuantity
                }).ToList() ?? new List<ProductVariant>(),
                IsFlashSale = productDto.IsFlashSale,
                FlashSalePrice = productDto.FlashSalePrice,
                FlashSaleStartDate = productDto.FlashSaleStartDate,
                FlashSaleEndDate = productDto.FlashSaleEndDate
            };

            _context.Products.Add(product);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetProduct), new { id = product.Id }, MapProductToDto(product));
        }

        // Cập nhật sản phẩm
        [HttpPut("{id}")]
        public async Task<IActionResult> PutProduct(int id, [FromBody] ProductDto productDto)
        {
            if (productDto == null || id <= 0)
                return BadRequest("Dữ liệu sản phẩm không hợp lệ.");

            var existingProduct = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (existingProduct == null)
                return NotFound("Sản phẩm không tồn tại.");

            existingProduct.Name = productDto.Name;
            existingProduct.Description = productDto.Description;
            existingProduct.CategoryId = productDto.CategoryId;
            existingProduct.BrandId = productDto.BrandId;

            // Update images (consider more robust handling for image updates)
            existingProduct.Images.Clear();
            foreach (var imgDto in productDto.Images)
            {
                existingProduct.Images.Add(new ProductImage { ImageUrl = imgDto.ImageUrl, IsPrimary = imgDto.IsPrimary });
            }

            // Update variants (consider more robust handling for variant updates)
            existingProduct.Variants.Clear();
            foreach (var variantDto in productDto.Variants)
            {
                existingProduct.Variants.Add(new ProductVariant
                {
                    Color = variantDto.Color,
                    Storage = variantDto.Storage,
                    Price = variantDto.Price,
                    DiscountPrice = variantDto.DiscountPrice,
                    StockQuantity = variantDto.StockQuantity
                });
            }

            existingProduct.IsFlashSale = productDto.IsFlashSale;
            existingProduct.FlashSalePrice = productDto.FlashSalePrice;
            existingProduct.FlashSaleStartDate = productDto.FlashSaleStartDate;
            existingProduct.FlashSaleEndDate = productDto.FlashSaleEndDate;

            _context.Products.Update(existingProduct);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // Xóa sản phẩm
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteProduct(int id)
        {
            var product = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null)
            {
                return NotFound();
            }

            _context.Products.Remove(product);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // Lấy danh sách sản phẩm liên quan theo thương hiệu (brand)
        [HttpGet("related-by-brand/{brandId}/{currentProductId}")]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetRelatedProductsByBrand(int brandId, int currentProductId)
        {
            var relatedProducts = await _context.Products
                .Where(p => p.BrandId == brandId && p.Id != currentProductId)
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .ToListAsync();

            return Ok(relatedProducts.Select(p => MapProductToDto(p)));
        }

        // API lấy danh sách biến thể (màu sắc + dung lượng + số lượng tồn) của sản phẩm
        [HttpGet("{id}/variants")]
        public async Task<ActionResult<IEnumerable<object>>> GetProductVariants(int id)
        {
            var product = await _context.Products
                .Include(p => p.Variants)
                .FirstOrDefaultAsync(p => p.Id == id);

            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var variants = product.Variants
                .Select(v => new
                {
                    v.Color,
                    v.Storage,
                    v.StockQuantity,
                    v.Price,
                    v.DiscountPrice
                })
                .ToList();

            return Ok(variants);
        }

        // Lấy tổng số sản phẩm
        [HttpGet("count")]
        public async Task<ActionResult<int>> GetProductCount()
        {
            int totalProducts = await _context.Products.CountAsync();
            return Ok(totalProducts);
        }

        [HttpGet("search")]
        public async Task<ActionResult<IEnumerable<ProductDto>>> SearchProducts([FromQuery] string keyword)
        {
            if (string.IsNullOrWhiteSpace(keyword))
            {
                return BadRequest("Vui lòng nhập từ khóa tìm kiếm.");
            }

            var products = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Category)
                .Include(p => p.Brand)
                .Include(p => p.Variants)
                .Where(p =>
                    p.Name.Contains(keyword) ||
                    p.Description.Contains(keyword) ||
                    (p.Category != null && p.Category.Name.Contains(keyword)) ||
                    (p.Brand != null && p.Brand.Name.Contains(keyword))
                )
                .ToListAsync();

            if (products.Count == 0)
            {
                return NotFound("Không tìm thấy sản phẩm nào phù hợp.");
            }

            return Ok(products.Select(p => MapProductToDto(p)));
        }

        [HttpGet("low-stock")]
        public async Task<ActionResult<int>> GetLowStockProducts()
        {
            int lowStockThreshold = 20;

            var lowStockProducts = await _context.Products
                .Where(p => p.Variants.Sum(v => v.StockQuantity) <= lowStockThreshold) // Sửa logic ở đây
                .CountAsync();

            return Ok(lowStockProducts);
        }

        [HttpGet("by-category")]
        public async Task<ActionResult> GetProductCountByCategory()
        {
            var categoryCounts = await _context.Products
                .GroupBy(p => p.Category.Name)
                .Select(g => new { Category = g.Key, Count = g.Count() })
                .ToListAsync();

            return Ok(categoryCounts);
        }

        // Lấy brand có số lượng sản phẩm nhiều nhất
        [HttpGet("by-brand")]
        public async Task<ActionResult> GetProductCountByBrand()
        {
            var topBrand = await _context.Products
            .GroupBy(p => p.Brand.Name)
            .Select(g => new { Brand = g.Key, Count = g.Count() })
            .OrderByDescending(g => g.Count) // Sắp xếp giảm dần theo số lượng
            .FirstOrDefaultAsync(); // Lấy thương hiệu có số lượng cao nhất

            return Ok(topBrand);
        }

        // GET: api/Products/lowest-price
        [HttpGet("lowest-price")]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetProductsWithLowestPrice()
        {
            var now = DateTime.UtcNow;

            var products = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Brand)
                .Include(p => p.Category)
                .Where(p => p.Variants.Any()) // Chỉ lấy sản phẩm có ít nhất 1 variant
                .Select(p => new
                {
                    Product = p,
                    // Lấy giá thấp nhất (ưu tiên giá khuyến mãi nếu có)
                    MinPrice = p.IsFlashSale && p.FlashSaleStartDate <= now && now <= p.FlashSaleEndDate
                        ? p.FlashSalePrice ?? p.Variants.Min(v => v.Price)
                        : p.Variants.Min(v => v.Price)
                })
                .OrderBy(x => x.MinPrice) // Sắp xếp theo giá thấp nhất
                .Take(10) // Lấy 10 sản phẩm
                .Select(x => x.Product) // Chỉ lấy thông tin Product
                .ToListAsync();

            return Ok(products.Select(p => MapProductToDto(p)));
        }

        // Lấy thông tin sản phẩm và hình ảnh dựa trên variantId
        [HttpGet("by-variant/{variantId}")]
        public async Task<ActionResult<object>> GetProductByVariantId(int variantId)
        {
            // Tìm variant theo variantId và bao gồm thông tin sản phẩm và hình ảnh
            var variant = await _context.ProductVariants
                .Include(v => v.Product)
                    .ThenInclude(p => p.Images)
                .Include(v => v.Product)
                    .ThenInclude(p => p.Category)
                .Include(v => v.Product)
                    .ThenInclude(p => p.Brand)
                .FirstOrDefaultAsync(v => v.Id == variantId);

            if (variant == null)
            {
                return NotFound("Không tìm thấy biến thể sản phẩm.");
            }

            // Tạo đối tượng trả về với thông tin sản phẩm và hình ảnh
            var result = new
            {
                Product = new
                {
                    variant.Product.Id,
                    variant.Product.Name,
                    variant.Product.Description,
                    Category = variant.Product.Category?.Name,
                    Brand = variant.Product.Brand?.Name,
                    variant.Product.IsFlashSale,
                    variant.Product.FlashSalePrice,
                    variant.Product.FlashSaleStartDate,
                    variant.Product.FlashSaleEndDate
                },
                Variant = new
                {
                    variant.Id,
                    variant.Color,
                    variant.Storage,
                    variant.Price,
                    variant.DiscountPrice,
                    variant.StockQuantity
                },
                Images = variant.Product.Images.Select(img => new
                {
                    img.Id,
                    img.ImageUrl,
                    img.IsPrimary
                }).ToList()
            };

            return Ok(result);
        }

        [HttpPost("compare")]
        public async Task<IActionResult> CompareProducts([FromBody] List<int> productIds)
        {
            if (productIds == null || productIds.Count < 1)
            {
                return BadRequest("Vui lòng thêm sản phẩm để so sánh.");
            }

            var products = await _context.Products
                .Where(p => productIds.Contains(p.Id))
                .Include(p => p.Images)
                .Include(p => p.Brand)
                .Include(p => p.Category)
                .Include(p => p.Variants)
                .ToListAsync();

            if (products.Count < 1)
            {
                return NotFound("Không tìm thấy sản phẩm để so sánh.");
            }

            var result = new List<object>();

            foreach (var product in products)
            {
                object specifications = null;

                // Fetch specifications based on category
                var categoryName = product.Category?.Name?.ToLower();

                // Debug logging
                System.Console.WriteLine($"Product: {product.Name}, Category: {categoryName}");

                // Get unified product specifications
                var productSpecs = await _context.ProductSpecifications
                    .Where(s => s.ProductId == product.Id)
                    .OrderBy(s => s.DisplayOrder)
                    .ThenBy(s => s.Name)
                    .ToListAsync();

                if (productSpecs.Any())
                {
                    // Convert to a dynamic object with Name-Value pairs
                    var specDict = productSpecs.ToDictionary(s => s.Name, s => new ProductSpecificationDetailDto { Value = s.Value, Unit = s.Unit });

                    specifications = new
                    {
                        Type = "unified",
                        Specifications = specDict,
                        Count = productSpecs.Count
                    };
                }

                result.Add(new
                {
                    product.Id,
                    product.Name,
                    product.Description,
                    Brand = product.Brand?.Name,
                    Category = product.Category?.Name,
                    Images = product.Images.Select(img => new
                    {
                        img.Id,
                        img.ImageUrl,
                        img.IsPrimary
                    }).ToList(),
                    Variants = product.Variants.Select(v => new
                    {
                        v.Color,
                        v.Storage,
                        v.Price,
                        v.DiscountPrice,
                        v.StockQuantity
                    }).ToList(),
                    Specifications = specifications,
                    product.IsFlashSale,
                    product.FlashSalePrice,
                    product.FlashSaleStartDate,
                    product.FlashSaleEndDate
                });
            }

            return Ok(result);
        }

        // New: Get products by a list of IDs
        [HttpGet("by-ids")]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetProductsByIds([FromQuery] string ids)
        {
            if (string.IsNullOrWhiteSpace(ids))
            {
                return BadRequest("Product IDs are required.");
            }

            var productIds = ids.Split(',').Select(int.Parse).ToList();

            var products = await _context.Products
                .Where(p => productIds.Contains(p.Id))
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Include(p => p.Category)
                .Include(p => p.Brand)
                .ToListAsync();

            if (!products.Any())
            {
                return NotFound("No products found for the given IDs.");
            }

            return Ok(products.Select(p => MapProductToDto(p)));
        }

        // New: Get products currently on Flash Sale
        [HttpGet("flash-sale")]
        public async Task<ActionResult<IEnumerable<ProductDto>>> GetFlashSaleProducts()
        {
            var now = DateTime.UtcNow;
            var flashSaleProducts = await _context.Products
                .Include(p => p.Images)
                .Include(p => p.Variants)
                .Where(p => p.IsFlashSale && p.FlashSaleStartDate <= now && now <= p.FlashSaleEndDate)
                .ToListAsync();

            return Ok(flashSaleProducts.Select(p => MapProductToDto(p)));
        }

        // New: Set a product to Flash Sale
        [HttpPut("{id}/set-flash-sale")]
        public async Task<IActionResult> SetFlashSale(int id, [FromBody] FlashSaleUpdateDto flashSaleDto)
        {
            var product = await _context.Products.FindAsync(id);
            if (product == null)
            {
                return NotFound();
            }

            product.IsFlashSale = true;
            product.FlashSalePrice = flashSaleDto.FlashSalePrice;
            product.FlashSaleStartDate = flashSaleDto.FlashSaleStartDate;
            product.FlashSaleEndDate = flashSaleDto.FlashSaleEndDate;

            await _context.SaveChangesAsync();
            return NoContent();
        }

        // New: Clear Flash Sale from a product
        [HttpPut("{id}/clear-flash-sale")]
        public async Task<IActionResult> ClearFlashSale(int id)
        {
            var product = await _context.Products.FindAsync(id);
            if (product == null)
            {
                return NotFound();
            }

            product.IsFlashSale = false;
            product.FlashSalePrice = null;
            product.FlashSaleStartDate = null;
            product.FlashSaleEndDate = null;

            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
```

### Controllers\ReviewsController.cs
```cs
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System.Security.Claims;

[Route("api/[controller]")]
[ApiController]
public class ReviewController : ControllerBase
{
    private readonly AppDbContext _context;
    public ReviewController(AppDbContext context) => _context = context;

    [HttpGet("product/{productId}")]
    public async Task<ActionResult<IEnumerable<ReviewDto>>> GetReviewsByProduct(int productId)
    {
        var reviews = await _context.Reviews
            .Where(r => r.ProductId == productId && r.IsApproved)
            .Include(r => r.User)
            .Include(r => r.Product)
            .OrderByDescending(r => r.CreatedAt)
            .Select(r => new ReviewDto
            {
                Id = r.Id,
                ProductId = r.ProductId,
                ProductName = r.Product.Name,
                UserId = r.UserId,
                UserName = r.User.FullName,
                Rating = r.Rating,
                Comment = r.Comment,
                CreatedAt = r.CreatedAt,
                IsApproved = r.IsApproved,
                HasPurchased = _context.OrderItems
                                .Include(oi => oi.Order)
                                .Include(oi => oi.ProductVariant)
                                .Any(oi => oi.Order.UserId == r.UserId && oi.ProductVariant.ProductId == r.ProductId && oi.Order.OrderStatus == "Delivered")
            })
            .ToListAsync();

        return Ok(reviews);
    }

    [HttpGet("product/{productId}/average-rating")]
    public async Task<ActionResult<double>> GetAverageRating(int productId)
    {
        var avg = await _context.Reviews
            .Where(r => r.ProductId == productId && r.IsApproved)
            .AverageAsync(r => (double?)r.Rating) ?? 0;

        return Ok(avg);
    }

    [Authorize]
    [HttpPost]
    public async Task<ActionResult> CreateReview([FromBody] CreateReviewDto dto)
    {
        var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        if (!await _context.Products.AnyAsync(p => p.Id == dto.ProductId))
            return NotFound("Sản phẩm không tồn tại");

        bool purchased = await _context.OrderItems
            .Include(oi => oi.Order)
            .Include(oi => oi.ProductVariant)
            .AnyAsync(oi => oi.Order.UserId == userId && oi.ProductVariant.ProductId == dto.ProductId && oi.Order.OrderStatus == "Delivered");

        if (!purchased)
            return BadRequest("Bạn cần mua và nhận hàng để đánh giá");

        bool reviewed = await _context.Reviews.AnyAsync(r => r.UserId == userId && r.ProductId == dto.ProductId);

        if (reviewed)
            return BadRequest("Bạn đã đánh giá sản phẩm này rồi");

        var review = new Review
        {
            ProductId = dto.ProductId,
            UserId = userId,
            Rating = dto.Rating,
            Comment = dto.Comment,
            CreatedAt = DateTime.UtcNow,
            IsApproved = false // Mặc định là false, cần admin duyệt
        };

        _context.Reviews.Add(review);
        await _context.SaveChangesAsync();

        return Ok("Đánh giá thành công, đang chờ duyệt");
    }

    [Authorize]
    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateReview(int id, [FromBody] UpdateReviewDto dto)
    {
        var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        var review = await _context.Reviews.FindAsync(id);

        if (review == null) return NotFound("Không tìm thấy đánh giá");
        if (review.UserId != userId) return Forbid("Không có quyền");

        review.Rating = dto.Rating;
        review.Comment = dto.Comment;
        await _context.SaveChangesAsync();

        return NoContent();
    }

    [Authorize]
    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteReview(int id)
    {
        var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        var review = await _context.Reviews.FindAsync(id);

        if (review == null) return NotFound("Không tìm thấy đánh giá");
        if (review.UserId != userId) return Forbid("Không có quyền");

        _context.Reviews.Remove(review);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    [Authorize(Roles = "Admin")]
    [HttpPut("{id}/approve")]
    public async Task<IActionResult> ApproveReview(int id)
    {
        var review = await _context.Reviews.FindAsync(id);
        if (review == null) return NotFound("Không tìm thấy đánh giá");

        review.IsApproved = true;
        await _context.SaveChangesAsync();
        return Ok("Đánh giá đã được duyệt.");
    }

    [Authorize(Roles = "Admin")]
    [HttpPut("{id}/reject")]
    public async Task<IActionResult> RejectReview(int id)
    {
        var review = await _context.Reviews.FindAsync(id);
        if (review == null) return NotFound("Không tìm thấy đánh giá");

        review.IsApproved = false;
        await _context.SaveChangesAsync();
        return Ok("Đánh giá đã bị từ chối.");
    }

    [Authorize]
    [HttpGet("user/{userId}/product/{productId}")]
    public async Task<ActionResult<ReviewDto>> GetUserReviewForProduct(int userId, int productId)
    {
        var review = await _context.Reviews
            .Where(r => r.UserId == userId && r.ProductId == productId)
            .Include(r => r.User)
            .Include(r => r.Product)
            .Select(r => new ReviewDto
            {
                Id = r.Id,
                ProductId = r.ProductId,
                ProductName = r.Product.Name,
                UserId = r.UserId,
                UserName = r.User.FullName,
                Rating = r.Rating,
                Comment = r.Comment,
                CreatedAt = r.CreatedAt,
                IsApproved = r.IsApproved,
                HasPurchased = _context.OrderItems
                                .Include(oi => oi.Order)
                                .Include(oi => oi.ProductVariant)
                                .Any(oi => oi.Order.UserId == r.UserId && oi.ProductVariant.ProductId == r.ProductId && oi.Order.OrderStatus == "Delivered")
            })
            .FirstOrDefaultAsync();

        if (review == null) return NotFound("Không tìm thấy đánh giá của người dùng cho sản phẩm này.");

        return Ok(review);
    }

    [Authorize(Roles = "Admin")]
    [HttpGet("analytics")]
    public async Task<ActionResult> GetReviewAnalytics()
    {
        var totalReviews = await _context.Reviews.CountAsync();
        var approvedReviews = await _context.Reviews.CountAsync(r => r.IsApproved);
        var pendingReviews = await _context.Reviews.CountAsync(r => !r.IsApproved);
        var averageRating = await _context.Reviews.AverageAsync(r => (double?)r.Rating) ?? 0;

        var ratingDistribution = await _context.Reviews
            .GroupBy(r => r.Rating)
            .Select(g => new { Rating = g.Key, Count = g.Count() })
            .OrderBy(x => x.Rating)
            .ToListAsync();

        return Ok(new
        {
            TotalReviews = totalReviews,
            ApprovedReviews = approvedReviews,
            PendingReviews = pendingReviews,
            AverageRating = averageRating,
            RatingDistribution = ratingDistribution
        });
    }

    [Authorize(Roles = "Admin")]
    [HttpGet("all")]
    public async Task<ActionResult<IEnumerable<ReviewDto>>> GetAllReviews(
        [FromQuery] bool? isApproved = null,
        [FromQuery] int? minRating = null,
        [FromQuery] int? maxRating = null,
        [FromQuery] int? productId = null,
        [FromQuery] int? userId = null,
        [FromQuery] string? searchComment = null)
    {
        var query = _context.Reviews.AsQueryable();

        if (isApproved.HasValue)
        {
            query = query.Where(r => r.IsApproved == isApproved.Value);
        }

        if (minRating.HasValue)
        {
            query = query.Where(r => r.Rating >= minRating.Value);
        }

        if (maxRating.HasValue)
        {
            query = query.Where(r => r.Rating <= maxRating.Value);
        }

        if (productId.HasValue)
        {
            query = query.Where(r => r.ProductId == productId.Value);
        }

        if (userId.HasValue)
        {
            query = query.Where(r => r.UserId == userId.Value);
        }

        if (!string.IsNullOrEmpty(searchComment))
        {
            query = query.Where(r => r.Comment.Contains(searchComment));
        }

        var reviews = await query
            .Include(r => r.User)
            .Include(r => r.Product)
            .OrderByDescending(r => r.CreatedAt)
            .Select(r => new ReviewDto
            {
                Id = r.Id,
                ProductId = r.ProductId,
                ProductName = r.Product.Name,
                UserId = r.UserId,
                UserName = r.User.FullName,
                Rating = r.Rating,
                Comment = r.Comment,
                CreatedAt = r.CreatedAt,
                IsApproved = r.IsApproved,
                HasPurchased = _context.OrderItems
                                .Include(oi => oi.Order)
                                .Include(oi => oi.ProductVariant)
                                .Any(oi => oi.Order.UserId == r.UserId && oi.ProductVariant.ProductId == r.ProductId && oi.Order.OrderStatus == "Delivered")
            })
            .ToListAsync();

        return Ok(reviews);
    }
}
```

### Controllers\RoleController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/roles")]
    public class RoleController : ControllerBase
    {
        private readonly AppDbContext _context;

        public RoleController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách vai trò
        [HttpGet]
        public async Task<IActionResult> GetRoles()
        {
            var roles = await _context.Roles.ToListAsync();
            return Ok(roles);
        }

        // Thêm vai trò mới
        [HttpPost]
        public async Task<IActionResult> AddRole([FromBody] Role role)
        {
            if (string.IsNullOrWhiteSpace(role.Name))
            {
                return BadRequest("Tên vai trò không được để trống.");
            }

            _context.Roles.Add(role);
            await _context.SaveChangesAsync();
            return Ok(role);
        }

        // Chỉnh sửa vai trò
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateRole(int id, [FromBody] Role updatedRole)
        {
            if (string.IsNullOrWhiteSpace(updatedRole.Name))
            {
                return BadRequest("Tên vai trò không được để trống.");
            }

            var existingRole = await _context.Roles.FirstOrDefaultAsync(r => r.Id == id);
            if (existingRole == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            existingRole.Name = updatedRole.Name;
            await _context.SaveChangesAsync();

            return Ok(existingRole);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRole(int id)
        {
            // Tìm vai trò theo Id
            var role = await _context.Roles.Include(r => r.Users).FirstOrDefaultAsync(r => r.Id == id);
            if (role == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            // Kiểm tra nếu vai trò đang được sử dụng bởi bất kỳ người dùng nào
            if (role.Users.Any())
            {
                return BadRequest("Không thể xóa vai trò vì đang được sử dụng bởi người dùng.");
            }

            // Xóa vai trò
            _context.Roles.Remove(role);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Vai trò đã được xóa thành công." });
        }
    }
}
```

### Controllers\SearchController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models.DTOs;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SearchController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly ILogger<SearchController> _logger;

        public SearchController(AppDbContext context, ILogger<SearchController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// Tìm kiếm tổng hợp sản phẩm, danh mục và thương hiệu
        /// </summary>
        /// <param name="query">Từ khóa tìm kiếm</param>
        /// <param name="limit">Số lượng kết quả tối đa cho mỗi loại (mặc định: 3)</param>
        /// <returns>Kết quả tìm kiếm gồm sản phẩm, danh mục và thương hiệu</returns>
        [HttpGet]
        public async Task<ActionResult<SearchResultDto>> Search(
            [FromQuery] string query,
            [FromQuery] int limit = 3)
        {
            try
            {
                _logger.LogInformation("Search endpoint called with query: {Query}, limit: {Limit}", query, limit);

                if (string.IsNullOrWhiteSpace(query))
                {
                    _logger.LogInformation("Empty query provided, returning empty result");
                    return Ok(new SearchResultDto()); // Trả về kết quả rỗng nếu query trống
                }

                var normalizedQuery = query.Trim().ToLower();
                var result = new SearchResultDto();

                _logger.LogInformation("Searching for products with normalized query: {NormalizedQuery}", normalizedQuery);

                // Tìm kiếm sản phẩm
                try
                {
                    result.Products = await SearchProducts(normalizedQuery, limit);
                    _logger.LogInformation("Found {Count} products", result.Products.Count);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error searching products");
                    result.Products = new List<SearchProductDto>();
                }

                // Tìm kiếm danh mục
                try
                {
                    result.Categories = await SearchCategories(normalizedQuery, limit);
                    _logger.LogInformation("Found {Count} categories", result.Categories.Count);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error searching categories");
                    result.Categories = new List<SearchCategoryDto>();
                }

                // Tìm kiếm thương hiệu
                try
                {
                    result.Brands = await SearchBrands(normalizedQuery, limit);
                    _logger.LogInformation("Found {Count} brands", result.Brands.Count);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error searching brands");
                    result.Brands = new List<SearchBrandDto>();
                }

                result.TotalResults = result.Products.Count + result.Categories.Count + result.Brands.Count;

                _logger.LogInformation("Search completed with {TotalResults} total results", result.TotalResults);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi thực hiện tìm kiếm");
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi tìm kiếm", Error = ex.Message });
            }
        }

        private async Task<List<SearchProductDto>> SearchProducts(string query, int limit)
        {
            try
            {
                _logger.LogInformation("Starting product search with query: {Query}, limit: {Limit}", query, limit);
                
                var products = await _context.Products
                    .Include(p => p.Images)
                    .Include(p => p.Variants)
                    .Where(p => p.Name.ToLower().Contains(query) ||
                               (p.Description != null && p.Description.ToLower().Contains(query)))
                    .OrderBy(p => p.Name)
                    .Take(limit)
                    .Select(p => new SearchProductDto
                    {
                        Id = p.Id,
                        Name = p.Name,
                        ImageUrl = p.Images.Any(i => i.IsPrimary) 
                                 ? p.Images.FirstOrDefault(i => i.IsPrimary).ImageUrl
                                 : p.Images.Any() 
                                   ? p.Images.FirstOrDefault().ImageUrl
                                   : "/images/default-product.png",
                        Price = p.Variants.Any() ? p.Variants.Min(v => v.Price) : 0
                    })
                    .ToListAsync();

                _logger.LogInformation("Product search completed, found {Count} products", products.Count);
                return products;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in SearchProducts method");
                throw;
            }
        }

        private async Task<List<SearchCategoryDto>> SearchCategories(string query, int limit)
        {
            try
            {
                _logger.LogInformation("Starting category search with query: {Query}, limit: {Limit}", query, limit);
                
                var categories = await _context.Categories
                    .Where(c => c.Name.ToLower().Contains(query))
                    .OrderBy(c => c.Name)
                    .Take(limit)
                    .Select(c => new SearchCategoryDto
                    {
                        Id = c.Id,
                        Name = c.Name
                    })
                    .ToListAsync();

                _logger.LogInformation("Category search completed, found {Count} categories", categories.Count);
                return categories;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in SearchCategories method");
                throw;
            }
        }

        private async Task<List<SearchBrandDto>> SearchBrands(string query, int limit)
        {
            try
            {
                _logger.LogInformation("Starting brand search with query: {Query}, limit: {Limit}", query, limit);
                
                var brands = await _context.Brands
                    .Where(b => b.Name.ToLower().Contains(query))
                    .OrderBy(b => b.Name)
                    .Take(limit)
                    .Select(b => new SearchBrandDto
                    {
                        Id = b.Id,
                        Name = b.Name,
                        LogoUrl = b.Logo ?? "/images/default-brand.png"
                    })
                    .ToListAsync();

                _logger.LogInformation("Brand search completed, found {Count} brands", brands.Count);
                return brands;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in SearchBrands method");
                throw;
            }
        }

        /// <summary>
        /// API tìm kiếm nâng cao với phân trang
        /// </summary>
        [HttpGet("advanced")]
        public async Task<ActionResult<SearchResultDto>> AdvancedSearch(
            [FromQuery] string query,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(query))
                {
                    return Ok(new SearchResultDto());
                }

                var normalizedQuery = query.Trim().ToLower();
                var result = new SearchResultDto
                {
                    Page = page,
                    PageSize = pageSize
                };

                // Tìm kiếm sản phẩm với phân trang
                var productQuery = _context.Products
                    .Include(p => p.Images)
                    .Include(p => p.Variants)
                    .Where(p => p.Name.ToLower().Contains(normalizedQuery) ||
                               (p.Description != null && p.Description.ToLower().Contains(normalizedQuery)));

                result.Products = await productQuery
                    .OrderBy(p => p.Name)
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .Select(p => new SearchProductDto
                    {
                        Id = p.Id,
                        Name = p.Name,
                        ImageUrl = p.Images.Any() 
                                 ? p.Images.FirstOrDefault().ImageUrl 
                                 : "/images/default-product.png",
                        Price = p.Variants.Any() ? p.Variants.Min(v => v.Price) : 0
                    })
                    .ToListAsync();

                // Đếm tổng số sản phẩm
                var totalProducts = await productQuery.CountAsync();
                result.TotalResults = totalProducts;

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Lỗi khi thực hiện tìm kiếm nâng cao");
                return StatusCode(500, new { Message = "Đã xảy ra lỗi khi tìm kiếm" });
            }
        }

        /// <summary>
        /// Health check endpoint to test database connectivity
        /// </summary>
        [HttpGet("health")]
        public async Task<ActionResult> HealthCheck()
        {
            try
            {
                var productCount = await _context.Products.CountAsync();
                var categoryCount = await _context.Categories.CountAsync();
                var brandCount = await _context.Brands.CountAsync();

                return Ok(new
                {
                    Status = "Healthy",
                    ProductCount = productCount,
                    CategoryCount = categoryCount,
                    BrandCount = brandCount,
                    Timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Health check failed");
                return StatusCode(500, new
                {
                    Status = "Unhealthy",
                    Error = ex.Message,
                    Timestamp = DateTime.UtcNow
                });
            }
        }
    }
}
```

### Controllers\SpecificationsController.cs
```cs

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;

namespace SHN_Gear.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SpecificationsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public SpecificationsController(AppDbContext context)
        {
            _context = context;
        }

        // GET: api/Specifications
        [HttpGet]
        public async Task<ActionResult<IEnumerable<ProductSpecificationDto>>> GetAllSpecifications()
        {
            var specifications = await _context.ProductSpecifications
                .OrderBy(s => s.ProductId)
                .ThenBy(s => s.DisplayOrder)
                .ThenBy(s => s.Name)
                .Select(s => new ProductSpecificationDto
                {
                    Id = s.Id,
                    ProductId = s.ProductId,
                    Name = s.Name,
                    Value = s.Value,
                    Unit = s.Unit,
                    DisplayOrder = s.DisplayOrder,
                    CreatedAt = s.CreatedAt
                })
                .ToListAsync();

            return Ok(specifications);
        }
        // GET: api/Specifications/by-product/{productId}
        [HttpGet("by-product/{productId}")]
        public async Task<ActionResult<IEnumerable<ProductSpecificationDto>>> GetSpecificationsByProductId(int productId)
        {
            var product = await _context.Products.FindAsync(productId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var specifications = await _context.ProductSpecifications
                .Where(s => s.ProductId == productId)
                .OrderBy(s => s.DisplayOrder)
                .ThenBy(s => s.Name)
                .Select(s => new ProductSpecificationDto
                {
                    Id = s.Id,
                    ProductId = s.ProductId,
                    Name = s.Name,
                    Value = s.Value,
                    Unit = s.Unit,
                    DisplayOrder = s.DisplayOrder,
                    CreatedAt = s.CreatedAt
                })
                .ToListAsync();

            return Ok(specifications);
        }
        // GET: api/Specifications/{id}
        [HttpGet("{id}")]
        public async Task<ActionResult<ProductSpecificationDto>> GetSpecification(int id)
        {
            var specification = await _context.ProductSpecifications
                .Where(s => s.Id == id)
                .Select(s => new ProductSpecificationDto
                {
                    Id = s.Id,
                    ProductId = s.ProductId,
                    Name = s.Name,
                    Value = s.Value,
                    Unit = s.Unit,
                    DisplayOrder = s.DisplayOrder,
                    CreatedAt = s.CreatedAt
                })
                .FirstOrDefaultAsync();

            if (specification == null)
            {
                return NotFound("Thông số kỹ thuật không tồn tại.");
            }

            return Ok(specification);
        }

        // GET: api/Specifications/product/{productId}
        [HttpGet("product/{productId}")]
        public async Task<ActionResult<IEnumerable<ProductSpecificationDto>>> GetSpecificationsByProduct(int productId)
        {
            var product = await _context.Products.FindAsync(productId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var specifications = await _context.ProductSpecifications
                .Where(s => s.ProductId == productId)
                .OrderBy(s => s.DisplayOrder)
                .ThenBy(s => s.Name)
                .Select(s => new ProductSpecificationDto
                {
                    Id = s.Id,
                    ProductId = s.ProductId,
                    Name = s.Name,
                    Value = s.Value,
                    Unit = s.Unit,
                    DisplayOrder = s.DisplayOrder,
                    CreatedAt = s.CreatedAt
                })
                .ToListAsync();

            return Ok(specifications);
        }

        // POST: api/Specifications
        [HttpPost]
        public async Task<ActionResult<ProductSpecificationDto>> CreateSpecification([FromBody] CreateProductSpecificationDto createDto)
        {
            var product = await _context.Products.FindAsync(createDto.ProductId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var specification = new ProductSpecification
            {
                ProductId = createDto.ProductId,
                Name = createDto.Name,
                Value = createDto.Value,
                Unit = createDto.Unit,
                DisplayOrder = createDto.DisplayOrder,
                CreatedAt = DateTime.UtcNow
            };

            _context.ProductSpecifications.Add(specification);
            await _context.SaveChangesAsync();

            var result = new ProductSpecificationDto
            {
                Id = specification.Id,
                ProductId = specification.ProductId,
                Name = specification.Name,
                Value = specification.Value,
                Unit = specification.Unit,
                DisplayOrder = specification.DisplayOrder,
                CreatedAt = specification.CreatedAt
            };

            return CreatedAtAction(nameof(GetSpecification), new { id = specification.Id }, result);
        }

        // PUT: api/Specifications/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateSpecification(int id, [FromBody] UpdateProductSpecificationDto updateDto)
        {
            var specification = await _context.ProductSpecifications.FindAsync(id);
            if (specification == null)
            {
                return NotFound("Thông số kỹ thuật không tồn tại.");
            }

            specification.Name = updateDto.Name;
            specification.Value = updateDto.Value;
            specification.Unit = updateDto.Unit;
            specification.DisplayOrder = updateDto.DisplayOrder;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!SpecificationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Specifications/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteSpecification(int id)
        {
            var specification = await _context.ProductSpecifications.FindAsync(id);
            if (specification == null)
            {
                return NotFound("Thông số kỹ thuật không tồn tại.");
            }

            _context.ProductSpecifications.Remove(specification);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // POST: api/Specifications/bulk
        [HttpPost("bulk")]
        public async Task<ActionResult> CreateBulkSpecifications([FromBody] IEnumerable<CreateProductSpecificationDto> specifications)
        {
            var productIds = specifications.Select(s => s.ProductId).Distinct().ToList();
            var existingProducts = await _context.Products
                .Where(p => productIds.Contains(p.Id))
                .Select(p => p.Id)
                .ToListAsync();

            var invalidProductIds = productIds.Except(existingProducts).ToList();
            if (invalidProductIds.Any())
            {
                return BadRequest($"Các sản phẩm không tồn tại: {string.Join(", ", invalidProductIds)}");
            }

            var specificationEntities = specifications.Select(s => new ProductSpecification
            {
                ProductId = s.ProductId,
                Name = s.Name,
                Value = s.Value,
                Unit = s.Unit,
                DisplayOrder = s.DisplayOrder,
                CreatedAt = DateTime.UtcNow
            }).ToList();

            _context.ProductSpecifications.AddRange(specificationEntities);
            await _context.SaveChangesAsync();

            return Ok($"Đã tạo {specificationEntities.Count} thông số kỹ thuật.");
        }

        // DELETE: api/Specifications/product/{productId}
        [HttpDelete("product/{productId}")]
        public async Task<IActionResult> DeleteSpecificationsByProduct(int productId)
        {
            var product = await _context.Products.FindAsync(productId);
            if (product == null)
            {
                return NotFound("Sản phẩm không tồn tại.");
            }

            var specifications = await _context.ProductSpecifications
                .Where(s => s.ProductId == productId)
                .ToListAsync();

            if (specifications.Any())
            {
                _context.ProductSpecifications.RemoveRange(specifications);
                await _context.SaveChangesAsync();
            }

            return Ok($"Đã xóa {specifications.Count} thông số kỹ thuật của sản phẩm {productId}.");
        }

        private bool SpecificationExists(int id)
        {
            return _context.ProductSpecifications.Any(e => e.Id == id);
        }
    }
}
```

### Controllers\UploadController.cs
```cs
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.IO;
using System.Threading.Tasks;

[Route("api/upload")]
[ApiController]
public class UploadController : ControllerBase
{
    private readonly string _uploadFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");


    [HttpPost]
    public async Task<IActionResult> UploadImage(IFormFile file)
    {
        if (file == null || file.Length == 0)
        {
            return BadRequest(new { message = "Không có file nào được tải lên!" });
        }

        string uniqueFileName = $"{DateTime.Now.Ticks}_{file.FileName}";
        string filePath = Path.Combine(_uploadFolder, uniqueFileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.CopyToAsync(stream);
        }

        string imageUrl = $"/{uniqueFileName}";
        return Ok(new { imageUrl });
    }
    /// <summary>
    /// Lấy danh sách tất cả ảnh đã tải lên
    /// </summary>
    [HttpGet]
    public IActionResult GetAllImages()
    {
        if (!Directory.Exists(_uploadFolder))
        {
            return NotFound(new { message = "Thư mục ảnh trống!" });
        }

        var files = Directory.GetFiles(_uploadFolder)
            .Select(Path.GetFileName)
.Select(fileName => new { imageUrl = $"/{fileName}" })
            .ToList();

        return Ok(files);
    }

    /// Xóa ảnh theo tên file
    [HttpDelete("{fileName}")]
    public IActionResult DeleteImage(string fileName)
    {
        string filePath = Path.Combine(_uploadFolder, fileName);

        if (!System.IO.File.Exists(filePath))
        {
            return NotFound(new { message = "Ảnh không tồn tại!" });
        }

        System.IO.File.Delete(filePath);
        return Ok(new { message = "Ảnh đã được xóa!" });
    }
    [HttpGet("get-image/{fileName}")]
    public IActionResult GetImage(string fileName)
    {
        var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", fileName);
        if (!System.IO.File.Exists(imagePath))
        {
            return NotFound();
        }
        return PhysicalFile(imagePath, "image/png");
    }
}

```

### Controllers\UserController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using System.Threading.Tasks;
using System.Collections.Generic;
using SHN_Gear.DTOs;
using SHN_Gear.Services;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/users")]
    public class UserController : ControllerBase
    {
        private readonly AppDbContext _context;

        public UserController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách người dùng
        [HttpGet]
        public async Task<IActionResult> GetUsers()
        {
            var users = await _context.Users.Include(u => u.Role).ToListAsync();
            return Ok(users);
        }

        // Lấy thông tin người dùng theo Id
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUserById(int id)
        {
            var user = await _context.Users.Include(u => u.Role).FirstOrDefaultAsync(u => u.Id == id);

            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            return Ok(user);
        }

        [HttpPost]
        public async Task<IActionResult> AddUser([FromBody] UserDto userDto, [FromServices] UserService userService)
        {
            // Kiểm tra RoleId có tồn tại trong bảng Roles không
            var role = await _context.Roles.FindAsync(userDto.RoleId);
            if (role == null)
            {
                return BadRequest("Vai trò không tồn tại.");
            }

            // Kiểm tra email đã tồn tại chưa
            if (await _context.Users.AnyAsync(u => u.Email == userDto.Email))
            {
                return BadRequest("Email đã được sử dụng.");
            }

            // Mã hóa mật khẩu
            string hashedPassword = userService.HashPassword(userDto.Password);

            // Tạo đối tượng User từ UserDto
            var user = new User
            {
                FullName = userDto.FullName,
                Email = userDto.Email,
                PhoneNumber = userDto.PhoneNumber,
                Password = hashedPassword, // Lưu mật khẩu đã mã hóa
                RoleId = userDto.RoleId,
                CreatedAt = DateTime.UtcNow,
                IsActive = true

            };

            // Thêm người dùng mới vào cơ sở dữ liệu
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return Ok(user);
        }
        // Cập nhật thông tin người dùng (Admin)
        [HttpPut("{id}")]
        public async Task<IActionResult> AdminUpdateUser(int id, [FromBody] AdminUserUpdateDto userUpdateDto)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var role = await _context.Roles.FindAsync(userUpdateDto.RoleId);
            if (role == null)
            {
                return BadRequest("Vai trò không hợp lệ.");
            }

            user.FullName = userUpdateDto.FullName;
            user.Gender = userUpdateDto.Gender;
            user.PhoneNumber = userUpdateDto.PhoneNumber;
            user.Email = userUpdateDto.Email;
            user.DateOfBirth = userUpdateDto.DateOfBirth;
            user.RoleId = userUpdateDto.RoleId;
            user.IsActive = userUpdateDto.IsActive;

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Cập nhật thông tin người dùng thành công." });
        }

        [HttpPut("profile")]
        public async Task<IActionResult> UpdateProfile([FromBody] EditProfileDto dto)
        {
            // Lấy ID người dùng từ token
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
                return Unauthorized(new { Message = "Không xác thực được người dùng" });

            // Tìm người dùng trong database
            var user = await _context.Users.FindAsync(int.Parse(userId));
            if (user == null)
                return NotFound(new { Message = "Người dùng không tồn tại" });

            // Cập nhật thông tin
            user.FullName = dto.FullName;
            user.Email = dto.Email;
            user.PhoneNumber = dto.PhoneNumber;
            user.Gender = dto.Gender;
            user.DateOfBirth = dto.DateOfBirth;

            try
            {
                await _context.SaveChangesAsync();
                return Ok(new
                {
                    Message = "Cập nhật thông tin thành công",
                    User = new
                    {
                        user.FullName,
                        user.Email,
                        user.PhoneNumber,
                        user.Gender,
                        DateOfBirth = user.DateOfBirth?.ToString("yyyy-MM-dd")
                    }
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { Message = "Lỗi khi cập nhật", Error = ex.Message });
            }
        }

        // Cập nhật vai trò của người dùng
        [HttpPut("{id}/role")]
        public async Task<IActionResult> UpdateUserRole(int id, [FromBody] RoleUpdateDto roleUpdateDto)
        {
            if (roleUpdateDto == null || roleUpdateDto.RoleId <= 0)
            {
                return BadRequest("Dữ liệu vai trò không hợp lệ.");
            }

            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var role = await _context.Roles.FindAsync(roleUpdateDto.RoleId);
            if (role == null)
            {
                return NotFound("Vai trò không tồn tại.");
            }

            user.RoleId = roleUpdateDto.RoleId;
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Vai trò người dùng đã được cập nhật thành công." });
        }

        [HttpGet("statistics")]
        public async Task<IActionResult> GetUserStatistics()
        {
            var totalUsers = await _context.Users.CountAsync(); // Tổng số người dùng

            var today = DateTime.UtcNow.Date;
            var newUsersToday = await _context.Users.CountAsync(u => u.CreatedAt.Date == today); // Người dùng mới hôm nay

            var activeUsers = await _context.Users.CountAsync(u => u.IsActive); // Người dùng đang hoạt động

            var oneMonthAgo = DateTime.UtcNow.AddMonths(-1);
            var usersLastMonth = await _context.Users.CountAsync(u => u.CreatedAt <= oneMonthAgo); // Người dùng từ tháng trước
                                                                                                   // Tính tỷ lệ duy trì
            double retentionRate = usersLastMonth > 0 ? (double)activeUsers / usersLastMonth * 100 : 0;


            return Ok(new
            {
                TotalUsers = totalUsers,
                NewUsersToday = newUsersToday,
                ActiveUsers = activeUsers,
                RetentionRate = retentionRate.ToString("0.00") + "%"
            });
        }
        [HttpGet("growth")]
        public async Task<IActionResult> GetUserGrowth()
        {
            var userGrowth = await _context.Users
                .GroupBy(u => new { u.CreatedAt.Year, u.CreatedAt.Month })
                .Select(g => new
                {
                    Month = g.Key.Month,
                    Year = g.Key.Year,
                    Users = g.Count()
                })
                .OrderBy(g => g.Year)
                .ThenBy(g => g.Month)
                .ToListAsync();

            // Chuyển đổi dữ liệu thành format cần thiết
            var formattedData = userGrowth.Select(g => new
            {
                Month = new DateTime(g.Year, g.Month, 1).ToString("MMM"), // "Jan", "Feb", ...
                Users = g.Users
            });

            return Ok(formattedData);
        }
        //api lấy role của người dùng hiện tại
        // [HttpGet("current/role")]
        // [Authorize]
        // public async Task<IActionResult> GetCurrentUserRole()
        // {
        //     try
        //     {
        //         // Lấy UserId từ claims trong token
        //         var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);

        //         if (userIdClaim == null || !int.TryParse(userIdClaim.Value, out int userId))
        //         {
        //             return Unauthorized(new { Message = "Token không hợp lệ - Không xác định được người dùng" });
        //         }

        //         // Lấy thông tin user và role từ database
        //         var userWithRole = await _context.Users
        //             .Where(u => u.Id == userId)
        //             .Select(u => new
        //             {
        //                 UserId = u.Id,
        //                 RoleId = u.Role.Id,
        //                 RoleName = u.Role.Name,
        //                 // Thêm các thông tin cần thiết khác
        //                 Email = u.Email,
        //                 IsActive = u.IsActive
        //             })
        //             .FirstOrDefaultAsync();

        //         if (userWithRole == null)
        //         {
        //             return NotFound(new { Message = "Không tìm thấy thông tin người dùng" });
        //         }

        //         // Tạo response object
        //         var response = new
        //         {
        //             userWithRole.UserId,
        //             userWithRole.Email,
        //             userWithRole.IsActive,
        //             Role = new
        //             {
        //                 userWithRole.RoleId,
        //                 userWithRole.RoleName
        //             },
        //             // Thêm thông tin từ token nếu cần
        //             Claims = new
        //             {
        //                 // Lấy trực tiếp từ claims hiện tại
        //                 RoleClaim = User.FindFirst(ClaimTypes.Role)?.Value,
        //                 MicrosoftRoleClaim = User.FindFirst("http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value
        //             }
        //         };

        //         return Ok(response);
        //     }
        //     catch (Exception ex)
        //     {
        //         return StatusCode(500, new
        //         {
        //             Message = "Lỗi server khi lấy thông tin role",
        //             Error = ex.Message
        //         });
        //     }
        // }
    }
}
```

### Controllers\VoucherController.cs
```cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;
using System.Linq;
using System.Threading.Tasks;

namespace SHN_Gear.Controllers
{
    [ApiController]
    [Route("api/vouchers")]
    public class VoucherController : ControllerBase
    {
        private readonly AppDbContext _context;

        public VoucherController(AppDbContext context)
        {
            _context = context;
        }

        // Lấy danh sách tất cả các voucher
        [HttpGet]
        public async Task<IActionResult> GetAllVouchers()
        {
            var vouchers = await _context.Vouchers
                .Select(v => new VoucherDto
                {
                    Id = v.Id,
                    Code = v.Code,
                    DiscountAmount = v.DiscountAmount,
                    ExpiryDate = v.ExpiryDate,
                    IsActive = v.IsActive
                })
                .ToListAsync();

            return Ok(vouchers);
        }

        // Lấy thông tin chi tiết của một voucher
        [HttpGet("{id}")]
        public async Task<IActionResult> GetVoucherById(int id)
        {
            var voucher = await _context.Vouchers
                .Where(v => v.Id == id)
                .Select(v => new VoucherDto
                {
                    Id = v.Id,
                    Code = v.Code,
                    DiscountAmount = v.DiscountAmount,
                    ExpiryDate = v.ExpiryDate,
                    IsActive = v.IsActive
                })
                .FirstOrDefaultAsync();

            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            return Ok(voucher);
        }

        [HttpGet("code/{code}")]
        public async Task<IActionResult> GetVoucherByCode(string code)
        {
            var voucher = await _context.Vouchers.FirstOrDefaultAsync(v => v.Code == code);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            return Ok(new { id = voucher.Id });
        }

        // Thêm mới một voucher
        [HttpPost]
        public async Task<IActionResult> AddVoucher([FromBody] VoucherDto dto)
        {
            var voucher = new Voucher
            {
                Code = dto.Code,
                DiscountAmount = dto.DiscountAmount,
                ExpiryDate = dto.ExpiryDate,
                IsActive = dto.IsActive
            };

            _context.Vouchers.Add(voucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được thêm.", VoucherId = voucher.Id });
        }

        // Cập nhật thông tin của một voucher
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateVoucher(int id, [FromBody] VoucherDto dto)
        {
            var voucher = await _context.Vouchers.FindAsync(id);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            voucher.Code = dto.Code;
            voucher.DiscountAmount = dto.DiscountAmount;
            voucher.ExpiryDate = dto.ExpiryDate;
            voucher.IsActive = dto.IsActive;

            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được cập nhật." });
        }

        // Xóa một voucher
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteVoucher(int id)
        {
            var voucher = await _context.Vouchers.FindAsync(id);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            _context.Vouchers.Remove(voucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được xóa." });
        }

        // Gán voucher cho người dùng
        [HttpPost("assign")]
        public async Task<IActionResult> AssignVoucherToUser([FromBody] UserVoucherDto dto)
        {
            var user = await _context.Users.FindAsync(dto.UserId);
            if (user == null)
            {
                return NotFound("Người dùng không tồn tại.");
            }

            var voucher = await _context.Vouchers.FindAsync(dto.VoucherId);
            if (voucher == null)
            {
                return NotFound("Voucher không tồn tại.");
            }

            var userVoucher = new UserVoucher
            {
                UserId = dto.UserId,
                VoucherId = dto.VoucherId,
                UsedAt = dto.UsedAt
            };

            _context.UserVouchers.Add(userVoucher);
            await _context.SaveChangesAsync();

            return Ok(new { Message = "Voucher đã được gán cho người dùng." });
        }

        [HttpPost("apply")]
        public async Task<IActionResult> ApplyVoucher([FromBody] ApplyVoucherDto dto)
        {
            // Kiểm tra voucher hợp lệ
            var voucher = await _context.Vouchers
                .FirstOrDefaultAsync(v => v.Code == dto.Code && v.IsActive && v.ExpiryDate >= DateTime.UtcNow);
            if (voucher == null)
            {
                return BadRequest("Voucher không hợp lệ hoặc đã hết hạn.");
            }

            // Kiểm tra xem voucher đã được gán cho người dùng nào chưa
            var userVoucher = await _context.UserVouchers
                .FirstOrDefaultAsync(uv => uv.VoucherId == voucher.Id);

            // Nếu voucher chưa được gán cho bất kỳ ai
            if (userVoucher == null)
            {
                return BadRequest("Voucher này chưa được gán cho người dùng nào.");
            }

            // Nếu voucher đã được gán, kiểm tra xem người dùng hiện tại có phải là chủ sở hữu không
            if (userVoucher.UserId != dto.UserId)
            {
                return BadRequest("Voucher này chỉ có thể được sử dụng bởi người dùng đã được gán.");
            }

            // Kiểm tra trạng thái IsUsed
            if (userVoucher.IsUsed)
            {
                return BadRequest("Voucher đã được sử dụng.");
            }

            // Nếu IsUsed = false và UserId khớp, cho phép áp dụng
            return Ok(new { discountAmount = voucher.DiscountAmount });
        }
    }
}
```

### Controllers\WeatherForecastController.cs
```cs
﻿using Microsoft.AspNetCore.Mvc;

namespace SHN_Gear.Controllers;

[ApiController]
[Route("[controller]")]
public class WeatherForecastController : ControllerBase
{
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private readonly ILogger<WeatherForecastController> _logger;

    public WeatherForecastController(ILogger<WeatherForecastController> logger)
    {
        _logger = logger;
    }

    [HttpGet]
    public IEnumerable<WeatherForecast> Get()
    {
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
        })
        .ToArray();
    }
}

```

### Data\AppDbContext.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Models;

namespace SHN_Gear.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // Định nghĩa các bảng
        public DbSet<User> Users { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductSpecification> ProductSpecifications { get; set; }
        public DbSet<ProductImage> ProductImages { get; set; }
        public DbSet<Cart> Carts { get; set; }
        public DbSet<CartItem> CartItems { get; set; }
        public DbSet<ProductVariant> ProductVariants { get; set; } // Thêm DbSet cho ProductVariant
        public DbSet<Category> Categories { get; set; } // Thêm DbSet cho Category
        public DbSet<Brand> Brands { get; set; } // Thêm DbSet cho Brand
        public DbSet<Order> Orders { get; set; } // Thêm DbSet cho Order
        public DbSet<OrderItem> OrderItems { get; set; } // Thêm DbSet cho OrderItem
        public DbSet<Address> Addresses { get; set; } // Thêm DbSet cho Address
        public DbSet<PaymentMethod> PaymentMethods { get; set; } // Thêm DbSet cho PaymentMethod
        public DbSet<Review> Reviews { get; set; } // Thêm DbSet cho Review
        public DbSet<Delivery> Deliveries { get; set; } // Thêm DbSet cho Delivery
        public DbSet<Voucher> Vouchers { get; set; }
        public DbSet<UserVoucher> UserVouchers { get; set; } // Thêm DbSet cho UserVoucher
        public DbSet<HomepageConfig> HomepageConfigurations { get; set; }

        // Chat System DbSets
        public DbSet<ChatSession> ChatSessions { get; set; }
        public DbSet<ChatMessage> ChatMessages { get; set; }
        public DbSet<AIKnowledgeBase> AIKnowledgeBases { get; set; }
        public DbSet<BlogPost> BlogPosts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Seed dữ liệu mặc định cho Role
            modelBuilder.Entity<Role>().HasData(
                new Role { Id = 1, Name = "Admin" },
                new Role { Id = 2, Name = "VIP 1" },
                new Role { Id = 3, Name = "VIP 2" },
                new Role { Id = 4, Name = "VIP 3" }
            );
            // ✅ Seed dữ liệu mặc định cho PaymentMethod
            modelBuilder.Entity<PaymentMethod>().HasData(
                new PaymentMethod { Id = 1, Name = "Tiền Mặt", Description = "Thanh toán bằng tiền mặt" },
                new PaymentMethod { Id = 2, Name = "MoMo", Description = "Thanh toán bằng Momo" },
                new PaymentMethod { Id = 3, Name = "Paypal", Description = "Thanh toán bằng ví Paypal" }
            );
            // ✅ Thiết lập quan hệ Category - Product (1-N)
            modelBuilder.Entity<Product>()
                .HasOne(p => p.Category)
                .WithMany(c => c.Products)
                .HasForeignKey(p => p.CategoryId);

            // Thiết lập duy nhất cho số điện thoại (Không cho phép số trùng)
            modelBuilder.Entity<User>()
                .HasIndex(u => u.PhoneNumber)
                .IsUnique();

            // Specify the SQL Server column type for the Price property in ProductVariant
            modelBuilder.Entity<ProductVariant>()
                .Property(pv => pv.Price)
                .HasColumnType("decimal(18,2)");

            // Specify the SQL Server column type for the DiscountPrice property in ProductVariant
            modelBuilder.Entity<ProductVariant>()
                .Property(pv => pv.DiscountPrice)
                .HasPrecision(18, 2);

            // Specify the SQL Server column type for FlashSalePrice in Product
            modelBuilder.Entity<Product>()
                .Property(p => p.FlashSalePrice)
                .HasColumnType("decimal(18,2)");

            modelBuilder.Entity<OrderItem>()
                .HasOne(oi => oi.Order)
                .WithMany(o => o.OrderItems)
                .OnDelete(DeleteBehavior.Cascade); // Xóa đơn hàng thì xóa cả các mặt hàng trong đơn hàng.

            // Thiết lập khóa chính cho bảng UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasKey(uv => new { uv.UserId, uv.VoucherId });

            // Thiết lập quan hệ giữa User và UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasOne(uv => uv.User)
                .WithMany(u => u.UserVouchers)
                .HasForeignKey(uv => uv.UserId);

            // Thiết lập quan hệ giữa Voucher và UserVoucher
            modelBuilder.Entity<UserVoucher>()
                .HasOne(uv => uv.Voucher)
                .WithMany(v => v.UserVouchers)
                .HasForeignKey(uv => uv.VoucherId);

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasKey(r => r.Id);

                entity.Property(r => r.Comment).IsRequired();
                entity.Property(r => r.Rating);
                entity.Property(r => r.CreatedAt);
                entity.Property(r => r.IsApproved);

                entity.HasOne(r => r.User)
                    .WithMany(u => u.Reviews)
                    .HasForeignKey(r => r.UserId);

                entity.HasOne(r => r.Product) // ✅ mới
                    .WithMany()
                    .HasForeignKey(r => r.ProductId); // ✅ mới
            });

            modelBuilder.Entity<Delivery>(entity =>
    {
        // Giả định Delivery có thuộc tính ShippingCost
        entity.Property(d => d.ShippingCost).HasColumnType("decimal(18, 2)");
    });

            modelBuilder.Entity<Order>(entity =>
            {
                // Giả định Order có thuộc tính TotalAmount
                entity.Property(o => o.TotalAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<OrderItem>(entity =>
            {
                // Giả định OrderItem có thuộc tính Price (ngoài giá gốc từ ProductVariant)
                // Nếu OrderItem không có cột Price riêng mà dùng giá từ ProductVariant thì không cần dòng này
                entity.Property(oi => oi.Price).HasColumnType("decimal(18, 2)");
            });
            modelBuilder.Entity<Voucher>(entity =>
    {
        // Giả định Voucher có thuộc tính DiscountAmount
        entity.Property(v => v.DiscountAmount).HasColumnType("decimal(18, 2)");
    });

            // ✅ Chat System decimal configurations
            modelBuilder.Entity<AIKnowledgeBase>(entity =>
            {
                entity.Property(a => a.EscalationThreshold).HasPrecision(5, 3); // 0.000 to 99.999
                entity.Property(a => a.MinConfidenceScore).HasPrecision(5, 3); // 0.000 to 99.999
            });

            modelBuilder.Entity<ChatMessage>(entity =>
            {
                entity.Property(cm => cm.AIConfidenceScore).HasPrecision(5, 3); // 0.000 to 99.999

                // Configure relationship with SenderUser
                entity.HasOne(cm => cm.SenderUser)
                      .WithMany()
                      .HasForeignKey(cm => cm.SenderId)
                      .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity<ChatSession>(entity =>
            {
                entity.Property(cs => cs.ConfidenceScore).HasPrecision(5, 3); // 0.000 to 99.999
            });

            // Thêm các quan hệ khác tương tự ở đây.

            // Add indexes for query optimization
            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasIndex(p => p.CategoryId).HasDatabaseName("IX_Products_CategoryId");
                entity.HasIndex(p => p.BrandId).HasDatabaseName("IX_Products_BrandId");
                entity.HasIndex(p => p.IsFlashSale).HasDatabaseName("IX_Products_IsFlashSale");
            });

            modelBuilder.Entity<ProductVariant>(entity =>
            {
                entity.HasIndex(pv => pv.ProductId).HasDatabaseName("IX_ProductVariants_ProductId");
                entity.HasIndex(pv => pv.Price).HasDatabaseName("IX_ProductVariants_Price");
            });
        }
    }
}

```

### DTOs\AccountDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class EmailDto
    {
        public string Email { get; set; } = string.Empty;
    }

    public class LoginDto
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class RegisterDto
    {
        public string FullName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }


    public class OtpRequestDto
    {
        public string Email { get; set; } = string.Empty;
    }


    public class EditProfileDto
    {

        public string FullName { get; set; } = string.Empty;


        public string Email { get; set; } = string.Empty;

        public string? PhoneNumber { get; set; }

        public string? Gender { get; set; }

        public DateTime? DateOfBirth { get; set; }
    }

}
```

### DTOs\AddressDTO.cs
```cs
namespace SHN_Gear.DTOs
{
    public class AddressDTO
    {
        public int Id { get; set; }
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string? AddressLine2 { get; set; }
        public string City { get; set; } = null!;
        public string? State { get; set; }
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }

    public class CreateAddressDTO
    {
        public int UserId { get; set; } // ✅ Đã sửa thành kiểu int
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string? AddressLine2 { get; set; }
        public string City { get; set; } = null!;
        public string? State { get; set; }
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }
}

```

### DTOs\AdminMessageDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class AdminMessageDto
    {
        public string Content { get; set; } = null!;
    }
}

```

### DTOs\AdminUserUpdateDto.cs
```cs
public class AdminUserUpdateDto
{
    public string FullName { get; set; } = string.Empty;
    public string? Gender { get; set; }
    public DateTime? DateOfBirth { get; set; }
    public int RoleId { get; set; }
    public string PhoneNumber { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;

    public bool IsActive { get; set; } = true;
}

```

### DTOs\BlogPostDto.cs
```cs
using System;
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class BlogPostDto
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public int AuthorId { get; set; }
        public string AuthorName { get; set; } // To display author's name
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public bool IsPublished { get; set; }
    }
}

```

### DTOs\CartDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class CartDto
    {
        public int UserId { get; set; }
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }
    }

    public class CartItemSession
    {
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }

    }

}
```

### DTOs\CategoryDto.cs
```cs
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class CategoryDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Image { get; set; } = null!;
    }

    public class CreateCategoryDto
    {
        [Required]
        [StringLength(100)]
        public string Name { get; set; } = null!;

        [Required]
        public string Description { get; set; } = null!;

        [Required]
        public string Image { get; set; } = null!;
    }
}
```

### DTOs\ChatDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class ChatSessionDto
    {
        public int Id { get; set; }
        public string SessionId { get; set; } = null!;
        public string? GuestName { get; set; }
        public string? GuestEmail { get; set; }
        public UserDto? User { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime LastActivityAt { get; set; }
        public string Status { get; set; } = null!;
        public string Type { get; set; } = null!;
        public UserDto? AssignedAdmin { get; set; }
        public bool RequiresHumanSupport { get; set; }
        public List<ChatMessageDto> Messages { get; set; } = new();
    }

    public class ChatMessageDto
    {
        public int Id { get; set; }
        public int ChatSessionId { get; set; } // Add this field for frontend filtering
        public string Content { get; set; } = null!;
        public string Type { get; set; } = null!;
        public string Sender { get; set; } = null!;
        public UserDto? SenderUser { get; set; }
        public DateTime SentAt { get; set; }
        public bool IsRead { get; set; }
        public decimal? AIConfidenceScore { get; set; }
        public string? AIIntent { get; set; }
        public bool RequiresEscalation { get; set; }
        public List<object>? Attachments { get; set; }
        public List<SuggestedActionDto>? SuggestedActions { get; set; }
        public object? Metadata { get; set; }
    }

    public class SuggestedActionDto
    {
        public string Text { get; set; } = null!;
        public string Action { get; set; } = null!; // "quick_reply", "view_product", "contact_admin"
        public object? Data { get; set; } // Additional data cho action
    }

    public class SendMessageDto
    {
        public string Content { get; set; } = null!;
        public string? SessionId { get; set; } // Null để tạo session mới
        public string? GuestName { get; set; } // Cho guest users
        public string? GuestEmail { get; set; }
        public object? Context { get; set; } // Context về user preferences, current product, etc.
    }

    public class AIResponseDto
    {
        public string Response { get; set; } = null!;
        public decimal ConfidenceScore { get; set; }
        public string Intent { get; set; } = null!;
        public bool RequiresEscalation { get; set; }
        public List<SuggestedActionDto>? SuggestedActions { get; set; }
        public List<ProductRecommendationDto>? ProductRecommendations { get; set; }
        public object? Context { get; set; }
    }

    public class ProductRecommendationDto
    {
        public int ProductId { get; set; }
        public string Name { get; set; } = null!;
        public string ImageUrl { get; set; } = null!;
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public string Brand { get; set; } = null!;
        public string Category { get; set; } = null!;
        public string Reason { get; set; } = null!; // Lý do recommend
    }

    public class EscalateChatDto
    {
        public int SessionId { get; set; }
        public string Reason { get; set; } = null!;
        public int? PreferredAdminId { get; set; }
    }
}

```

### DTOs\CreateBlogPostDto.cs
```cs
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class CreateBlogPostDto
    {
        [Required]
        [MaxLength(250)]
        public string Title { get; set; }

        [Required]
        public string Content { get; set; }

        public bool IsPublished { get; set; } = false;
    }
}

```

### DTOs\CreateProductDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class CreateProductDto
    {
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public int CategoryId { get; set; }
        public int BrandId { get; set; }
        public List<IFormFile> Images { get; set; } = new();
    }
}

```

### DTOs\FlashSaleUpdateDto.cs
```cs
using System;
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class FlashSaleUpdateDto
    {
        [Required]
        public decimal FlashSalePrice { get; set; }

        [Required]
        public DateTime FlashSaleStartDate { get; set; }

        [Required]
        public DateTime FlashSaleEndDate { get; set; }
    }
}

```

### DTOs\HeadphoneSpecificationDto.cs
```cs
namespace SHN_Gear
{
    public class HeadphoneSpecificationDto
    {
        public int ProductId { get; set; }
        public string Weight { get; set; } = null!;

        public string Type { get; set; } = null!; // Không dây, Chụp tai
        public string ConnectionType { get; set; } = null!;
        public string Port { get; set; } = null!;
    }

}
```

### DTOs\HomepageDtos.cs
```cs
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class HomepageConfigDto
    {
        public List<string> Layout { get; set; } = new List<string>();
        public HomepageComponentsDto Components { get; set; } = new HomepageComponentsDto();
    }

    public class HomepageComponentsDto
    {
        public HeroSectionDto Hero { get; set; } = new HeroSectionDto();
        public CategoriesSectionDto Categories { get; set; } = new CategoriesSectionDto();
        public FeaturedProductsSectionDto Featured_products { get; set; } = new FeaturedProductsSectionDto();
        public SpecialOfferSectionDto Special_offer { get; set; } = new SpecialOfferSectionDto();
        public BestSellerSectionDto Best_seller { get; set; } = new BestSellerSectionDto(); // New Best Seller Section
        public BrandTrustSectionDto Brand_trust { get; set; } = new BrandTrustSectionDto();
    }

    // New DTO for Categories Section
    public class CategoriesSectionDto
    {
        public bool Enabled { get; set; }
        public List<HomepageCategoryItemDto> Items { get; set; } = new List<HomepageCategoryItemDto>(); // Changed to HomepageCategoryItemDto
    }

    public class HomepageCategoryItemDto
    {
        public int CategoryId { get; set; }
        public int DisplayOrder { get; set; }
        // These will be populated on the fly for GET requests
        public string? Name { get; set; }
        public string? Image_url { get; set; }
        public string? Link { get; set; }
    }

    public class HeroSectionDto
    {
        public bool Enabled { get; set; }
        public string Background_type { get; set; } = "";
        public string Background_url { get; set; } = "";
        public string Headline { get; set; } = "";
        public string Slogan { get; set; } = "";
        public string Cta_text { get; set; } = "";
        public string Cta_link { get; set; } = "";
    }

    public class FeaturedProductsSectionDto
    {
        public bool Enabled { get; set; }
        public string Title { get; set; } = "";
        public string Collection_id { get; set; } = "";
    }

    public class SpecialOfferSectionDto
    {
        public bool Enabled { get; set; }
        public string Image_url { get; set; } = "";
        public string Headline { get; set; } = "";
        public string Sub_text { get; set; } = "";
        public string Cta_text { get; set; } = "";
        public string Cta_link { get; set; } = "";
        public bool Countdown_enabled { get; set; }
        public string Countdown_end_date { get; set; } = "";
        public decimal? OriginalPrice { get; set; }
        public decimal? DiscountPrice { get; set; }
    }

    public class BestSellerSectionDto
    {
        public bool Enabled { get; set; }
        public string Title { get; set; } = "";
        public List<BestSellerItemDto> Items { get; set; } = new List<BestSellerItemDto>();
    }

    public class BestSellerItemDto
    {
        public int ProductId { get; set; }
        public decimal? OverridePrice { get; set; }
    }

    public class BrandTrustSectionDto
    {
        public bool Enabled { get; set; }
        public List<BrandLogoDto> Logos { get; set; } = new List<BrandLogoDto>();
        public List<CommitmentDto> Commitments { get; set; } = new List<CommitmentDto>();
    }

    public class BrandLogoDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Logo_url { get; set; } = "";
    }

    public class CommitmentDto
    {
        public int Id { get; set; }
        public string Icon { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }
}
```

### DTOs\LaptopSpecificationDto.cs
```cs
namespace SHN_Gear{
     public class LaptopSpecificationDto
{
    public int ProductId { get; set; }
    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUType { get; set; } = null!;
    public int CPUNumberOfCores { get; set; }
    public string RAM { get; set; } = null!;
    public string MaxRAMSupport { get; set; } = null!;
    public string SSDStorage { get; set; } = null!;
    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string RefreshRate { get; set; } = null!;
    public bool SupportsTouch { get; set; }
}

}
```

### DTOs\LoyaltyStatusDto.cs
```cs
namespace SHN_Gear.DTOs
{
    // DTO cho thông tin trạng thái loyalty
    public class LoyaltyStatusDto
    {
        public string CurrentRank { get; set; } = string.Empty;
        public int CurrentPoints { get; set; }
        public int PointsNeededForNextRank { get; set; }
        public bool CanClaimVoucher { get; set; }
        public decimal VoucherValue { get; set; }
    }

    // DTO cho phản hồi khi claim voucher
    public class VoucherClaimResponseDto
    {
        public VoucherDto Voucher { get; set; } = new VoucherDto();
        public string Message { get; set; } = string.Empty;
    }

    // DTO mở rộng từ VoucherDto để bao gồm thông tin sử dụng
    public class UserVoucherDetailDto : VoucherDto
    {
        public DateTime UsedAt { get; set; }
        public bool IsUsed => UsedAt != DateTime.MinValue;
    }

    // DTO cho thông tin người dùng trong chương trình loyalty
    public class LoyaltyUserDto
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Points { get; set; }
        public string RoleName { get; set; } = string.Empty;
        public DateTime MemberSince { get; set; }
    }
}
```

### DTOs\OrderDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class OrderDto
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public DateTime OrderDate { get; set; } = DateTime.UtcNow;
        public decimal TotalAmount { get; set; }
        public string OrderStatus { get; set; } = "Pending";
        public int? AddressId { get; set; }
        public int PaymentMethodId { get; set; }
        public List<OrderItemDto> OrderItems { get; set; } = new List<OrderItemDto>();
        public int? VoucherId { get; set; }
    }

    public class OrderItemDto
    {
        public int ProductVariantId { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
    public class UpdateStatusDto
    {
        public string NewStatus { get; set; }
    }
    public class UpdateOrderDto
    {
        public int? AddressId { get; set; }
        public List<OrderItemDto> OrderItems { get; set; } = new List<OrderItemDto>();
        public int? VoucherId { get; set; }
    }

}

```

### DTOs\PhoneSpecificationDto.cs
```cs
namespace SHN_Gear{
    public class PhoneSpecificationDto
{
    public int ProductId { get; set; }
    public string ScreenSize { get; set; } = null!;
    public string Resolution { get; set; } = null!;
    public string ScreenType { get; set; } = null!;
    public string Weight { get; set; } = null!;
    public string Material { get; set; } = null!;
    public string CPUModel { get; set; } = null!;
    public int CPUCores { get; set; }
    public string RAM { get; set; } = null!;
    public string InternalStorage { get; set; } = null!;
    public string FrontCamera { get; set; } = null!;
    public string RearCamera { get; set; } = null!;
    public string BatteryCapacity { get; set; } = null!;
    public bool SupportsNFC { get; set; }
}

}
```

### DTOs\ProductDto.cs
```cs
public class ProductDto
{
    public int Id { get; set; }
    public string Name { get; set; } = null!;
    public string Description { get; set; } = null!;
    public int CategoryId { get; set; }
    public int BrandId { get; set; }
    public List<ProductImageDto> Images { get; set; } = new();
    public List<ProductVariantDto> Variants { get; set; } = new();
    public bool IsFlashSale { get; set; }
    public decimal? FlashSalePrice { get; set; }
    public DateTime? FlashSaleStartDate { get; set; }
    public DateTime? FlashSaleEndDate { get; set; }
}

public class ProductImageDto
{
    public string ImageUrl { get; set; } = null!;
    public bool IsPrimary { get; set; }
}

public class ProductVariantDto
{
    public string Color { get; set; } = null!;
    public string Storage { get; set; } = null!;
    public decimal Price { get; set; }
    public decimal? DiscountPrice { get; set; }
    public int StockQuantity { get; set; }
}

```

### DTOs\ProductSpecificationDetailDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class ProductSpecificationDetailDto
    {
        public string Value { get; set; }
        public string? Unit { get; set; }
    }
}
```

### DTOs\ProductSpecificationDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class ProductSpecificationDto
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
        public string? Unit { get; set; }
        public int DisplayOrder { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class CreateProductSpecificationDto
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
        public string? Unit { get; set; }
        public int DisplayOrder { get; set; } = 0;
    }

    public class UpdateProductSpecificationDto
    {
        public string Name { get; set; }
        public string Value { get; set; }
        public string? Unit { get; set; }
        public int DisplayOrder { get; set; }
    }
}

```

### DTOs\ReviewDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class ReviewDto
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public int UserId { get; set; }
        public string UserName { get; set; } = string.Empty;
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public bool IsApproved { get; set; }
        public bool HasPurchased { get; set; }
        public string ProductName { get; set; } = string.Empty;
    }

    public class CreateReviewDto
    {
        public int ProductId { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
    }

    public class UpdateReviewDto
    {
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
    }
}

```

### DTOs\SearchDto.cs
```cs
// Models/DTOs/SearchDto.cs
namespace SHN_Gear.Models.DTOs
{
    public class SearchResultDto
    {
        public List<SearchProductDto> Products { get; set; } = new List<SearchProductDto>();
        public List<SearchCategoryDto> Categories { get; set; } = new List<SearchCategoryDto>();
        public List<SearchBrandDto> Brands { get; set; } = new List<SearchBrandDto>();
        public int TotalResults { get; set; }
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 10;
    }

    public class SearchProductDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string ImageUrl { get; set; } = null!;
        public decimal Price { get; set; }
    }

    public class SearchCategoryDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
    }

    public class SearchBrandDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string LogoUrl { get; set; } = null!;
    }
}
```

### DTOs\UpdateBlogPostDto.cs
```cs
using System.ComponentModel.DataAnnotations;

namespace SHN_Gear.DTOs
{
    public class UpdateBlogPostDto
    {
        [Required]
        [MaxLength(250)]
        public string Title { get; set; }

        [Required]
        public string Content { get; set; }

        public bool IsPublished { get; set; }
    }
}

```

### DTOs\UploadResponseDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class UploadResponseDto
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public string Url { get; set; }
        public string PublicId { get; set; }
    }
}
```

### DTOs\UserDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class UserDto
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public int RoleId { get; set; }
    }
    public class RoleUpdateDto
    {
        public int RoleId { get; set; }
    }
    public class UserRoleDto
    {
        public int RoleId { get; set; }
        public string RoleName { get; set; } = string.Empty;
    }
}
```

### DTOs\VoucherDto.cs
```cs
namespace SHN_Gear.DTOs
{
    public class VoucherDto
    {
        public int Id { get; set; }
        public string Code { get; set; } = null!; // Mã voucher
        public decimal DiscountAmount { get; set; } // Số tiền giảm giá
        public DateTime ExpiryDate { get; set; } // Ngày hết hạn
        public bool IsActive { get; set; } = true; // Trạng thái hoạt động của voucher
    }
    public class UserVoucherDto
    {
        public int UserId { get; set; }
        public int VoucherId { get; set; }
        public DateTime UsedAt { get; set; } // Thời gian sử dụng voucher
    }
    public class ApplyVoucherDto
    {
        public string Code { get; set; } = null!;
        public int UserId { get; set; }
    }
}
```

### Hubs\ChatHub.cs
```cs
using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using SHN_Gear.Services;
using System.Security.Claims;

namespace SHN_Gear.Hubs
{
    [EnableCors("SignalRPolicy")]
    public class ChatHub : Hub
    {
        private readonly ChatService _chatService;
        private readonly ILogger<ChatHub> _logger;

        public ChatHub(ChatService chatService, ILogger<ChatHub> logger)
        {
            _chatService = chatService;
            _logger = logger;
        }

        /// <summary>
        /// User joins a chat session
        /// </summary>
        public async Task JoinSession(string sessionId)
        {
            try
            {
                await Groups.AddToGroupAsync(Context.ConnectionId, $"session_{sessionId}");
                _logger.LogInformation("User {ConnectionId} joined session {SessionId}", Context.ConnectionId, sessionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error joining session {SessionId}", sessionId);
            }
        }

        /// <summary>
        /// User leaves a chat session
        /// </summary>
        public async Task LeaveSession(string sessionId)
        {
            try
            {
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, $"session_{sessionId}");
                _logger.LogInformation("User {ConnectionId} left session {SessionId}", Context.ConnectionId, sessionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error leaving session {SessionId}", sessionId);
            }
        }

        /// <summary>
        /// Admin joins admin group to receive escalation notifications
        /// </summary>
        public async Task JoinAdminGroup()
        {
            try
            {
                var userId = GetCurrentUserId();
                var userName = GetCurrentUserName();
                var isAuthenticated = Context.User?.Identity?.IsAuthenticated == true;

                // Log the attempt with more details
                _logger.LogInformation("Admin join attempt: UserId={UserId}, UserName={UserName}, IsAuthenticated={IsAuthenticated}, ConnectionId={ConnectionId}",
                    userId, userName, isAuthenticated, Context.ConnectionId);

                // Check if user is admin (more flexible than [Authorize])
                var isAdmin = Context.User?.IsInRole("Admin") == true ||
                             Context.User?.FindFirst("role")?.Value == "Admin" ||
                             Context.User?.FindFirst(ClaimTypes.Role)?.Value == "Admin";

                _logger.LogInformation("Admin role check: IsAdmin={IsAdmin} for UserId={UserId}", isAdmin, userId);

                if (isAdmin || (isAuthenticated && userId.HasValue)) // Allow if admin or any authenticated user for now
                {
                    await Groups.AddToGroupAsync(Context.ConnectionId, "admins");
                    _logger.LogInformation("Admin {UserId} ({UserName}) joined admin group with connection {ConnectionId}",
                        userId, userName, Context.ConnectionId);
                }
                else
                {
                    _logger.LogWarning("Non-admin user attempted to join admin group: IsAuthenticated={IsAuthenticated}, UserId={UserId}, ConnectionId={ConnectionId}",
                        isAuthenticated, userId, Context.ConnectionId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error joining admin group for connection {ConnectionId}", Context.ConnectionId);
            }
        }

        /// <summary>
        /// Admin leaves admin group
        /// </summary>
        public async Task LeaveAdminGroup()
        {
            try
            {
                await Groups.RemoveFromGroupAsync(Context.ConnectionId, "admins");
                var userId = GetCurrentUserId();
                var userName = GetCurrentUserName();
                _logger.LogInformation("Admin {UserId} ({UserName}) left admin group with connection {ConnectionId}",
                    userId, userName, Context.ConnectionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error leaving admin group for connection {ConnectionId}", Context.ConnectionId);
            }
        }

        /// <summary>
        /// Send typing indicator
        /// </summary>
        public async Task SendTypingIndicator(string sessionId, bool isTyping)
        {
            try
            {
                var userId = GetCurrentUserId();
                var userName = GetCurrentUserName();

                await Clients.GroupExcept($"session_{sessionId}", Context.ConnectionId)
                    .SendAsync("TypingIndicator", new
                    {
                        SessionId = sessionId,
                        UserId = userId,
                        UserName = userName,
                        IsTyping = isTyping,
                        Timestamp = DateTime.UtcNow
                    });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending typing indicator for session {SessionId}", sessionId);
            }
        }

        /// <summary>
        /// Mark messages as read
        /// </summary>
        public async Task MarkMessagesAsRead(string sessionId, int lastMessageId)
        {
            try
            {
                // Here you could update message read status in database
                await Clients.Group($"session_{sessionId}")
                    .SendAsync("MessagesRead", new
                    {
                        SessionId = sessionId,
                        LastMessageId = lastMessageId,
                        ReadBy = GetCurrentUserId(),
                        ReadAt = DateTime.UtcNow
                    });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error marking messages as read for session {SessionId}", sessionId);
            }
        }

        /// <summary>
        /// Quick action from suggested actions
        /// </summary>
        public async Task ExecuteQuickAction(string sessionId, string action, object? data = null)
        {
            try
            {
                var userId = GetCurrentUserId();

                await Clients.Group($"session_{sessionId}")
                    .SendAsync("QuickActionExecuted", new
                    {
                        SessionId = sessionId,
                        Action = action,
                        Data = data,
                        ExecutedBy = userId,
                        ExecutedAt = DateTime.UtcNow
                    });

                _logger.LogInformation("Quick action {Action} executed in session {SessionId}", action, sessionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error executing quick action {Action} for session {SessionId}", action, sessionId);
            }
        }

        public override async Task OnConnectedAsync()
        {
            try
            {
                var userId = GetCurrentUserId();
                var userName = GetCurrentUserName();
                var isAdmin = Context.User?.IsInRole("Admin") == true;
                var isAuthenticated = Context.User?.Identity?.IsAuthenticated == true;

                _logger.LogInformation("User connected: UserId={UserId}, UserName={UserName}, IsAdmin={IsAdmin}, IsAuthenticated={IsAuthenticated}, ConnectionId={ConnectionId}",
                    userId, userName, isAdmin, isAuthenticated, Context.ConnectionId);

                // Auto-join user to their personal group for receiving messages
                if (userId.HasValue)
                {
                    await Groups.AddToGroupAsync(Context.ConnectionId, $"user_{userId.Value}");
                    _logger.LogInformation("User {UserId} auto-joined to user_{UserId} group", userId.Value, userId.Value);
                }

                // Auto-join admins to admin group if they are authenticated as admin
                if (isAdmin && isAuthenticated)
                {
                    await Groups.AddToGroupAsync(Context.ConnectionId, "admins");
                    _logger.LogInformation("Admin {UserId} ({UserName}) auto-joined admin group with connection {ConnectionId}",
                        userId, userName, Context.ConnectionId);
                }

                await base.OnConnectedAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in OnConnectedAsync for connection {ConnectionId}", Context.ConnectionId);
            }
        }

        public override async Task OnDisconnectedAsync(Exception? exception)
        {
            try
            {
                var userId = GetCurrentUserId();
                var isAdmin = Context.User?.IsInRole("Admin") == true;

                _logger.LogInformation("User {UserId} disconnected from connection {ConnectionId}", userId, Context.ConnectionId);

                // Auto-cleanup: remove from user group
                if (userId.HasValue)
                {
                    await Groups.RemoveFromGroupAsync(Context.ConnectionId, $"user_{userId.Value}");
                    _logger.LogInformation("User {UserId} removed from user_{UserId} group on disconnect", userId.Value, userId.Value);
                }

                // Auto-cleanup: remove from admin group if was admin
                if (isAdmin)
                {
                    await Groups.RemoveFromGroupAsync(Context.ConnectionId, "admins");
                    _logger.LogInformation("Admin {UserId} removed from admin group on disconnect", userId);
                }

                if (exception != null)
                {
                    _logger.LogError(exception, "User disconnected with error");
                }

                await base.OnDisconnectedAsync(exception);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error in OnDisconnectedAsync");
            }
        }

        private int? GetCurrentUserId()
        {
            var userIdClaim = Context.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            return int.TryParse(userIdClaim, out var userId) ? userId : null;
        }

        private string? GetCurrentUserName()
        {
            return Context.User?.FindFirst(ClaimTypes.Name)?.Value ??
                   Context.User?.FindFirst("fullName")?.Value;
        }
    }
}
```

### Middleware\CorsDebugMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class CorsDebugMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<CorsDebugMiddleware> _logger;

        public CorsDebugMiddleware(RequestDelegate next, ILogger<CorsDebugMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Log detailed information about CORS requests
            if (context.Request.Headers.ContainsKey("Origin"))
            {
                var origin = context.Request.Headers["Origin"].ToString();
                var method = context.Request.Method;
                var path = context.Request.Path;
                var userAgent = context.Request.Headers["User-Agent"].ToString();
                
                _logger.LogInformation($"[CORS DEBUG] {method} {path} from origin: {origin}");
                _logger.LogInformation($"[CORS DEBUG] User-Agent: {userAgent}");
                
                // Log all headers for debugging
                var headers = string.Join(", ", context.Request.Headers.Keys);
                _logger.LogInformation($"[CORS DEBUG] All headers: {headers}");
                
                // Check for specific problematic headers
                if (context.Request.Headers.ContainsKey("x-requested-with"))
                {
                    var xRequestedWith = context.Request.Headers["x-requested-with"].ToString();
                    _logger.LogWarning($"[CORS DEBUG] x-requested-with header found: {xRequestedWith}");
                }
            }

            await _next(context);

            // Log response headers
            if (context.Request.Headers.ContainsKey("Origin"))
            {
                var responseHeaders = string.Join(", ", context.Response.Headers.Keys);
                _logger.LogInformation($"[CORS DEBUG] Response headers: {responseHeaders}");
                
                if (context.Response.Headers.ContainsKey("Access-Control-Allow-Origin"))
                {
                    var allowOrigin = context.Response.Headers["Access-Control-Allow-Origin"].ToString();
                    _logger.LogInformation($"[CORS DEBUG] Access-Control-Allow-Origin: {allowOrigin}");
                }
            }
        }
    }
}

```

### Middleware\GlobalCorsMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class GlobalCorsMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<GlobalCorsMiddleware> _logger;

        private readonly string[] _allowedOrigins = {
            "https://localhost:44479",
            "http://localhost:3000",
            "https://localhost:3001", 
            "https://localhost:7107",
            "http://localhost:5067"
        };

        public GlobalCorsMiddleware(RequestDelegate next, ILogger<GlobalCorsMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var origin = context.Request.Headers["Origin"].ToString();
            var isApiRequest = context.Request.Path.StartsWithSegments("/api");
            var isSignalRRequest = context.Request.Path.StartsWithSegments("/chatHub");
            
            // Log for debugging
            _logger.LogInformation($"[Global CORS] Processing: {context.Request.Method} {context.Request.Path} from {origin}");

            if (!string.IsNullOrEmpty(origin) && _allowedOrigins.Contains(origin))
            {
                // Set CORS headers for all requests
                context.Response.Headers["Access-Control-Allow-Origin"] = origin;
                context.Response.Headers["Access-Control-Allow-Credentials"] = "true";
                
                // Đặt headers khác nhau cho SignalR và API thông thường
                if (isSignalRRequest)
                {
                    context.Response.Headers["Access-Control-Allow-Headers"] = 
                        "Content-Type, Authorization, x-requested-with, x-signalr-user-agent, Cache-Control, X-Requested-With, Accept, Origin, User-Agent, DNT, Keep-Alive";
                }
                else
                {
                    context.Response.Headers["Access-Control-Allow-Headers"] = 
                        "Content-Type, Authorization, x-requested-with, Accept, Origin, X-Requested-With";
                }
                
                context.Response.Headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD";
                context.Response.Headers["Access-Control-Max-Age"] = "86400"; // 24 hours
                
                _logger.LogInformation($"[Global CORS] Set headers for origin: {origin}");
            }

            // Handle preflight requests
            if (context.Request.Method == "OPTIONS")
            {
                _logger.LogInformation("[Global CORS] Handling OPTIONS preflight request");
                context.Response.StatusCode = 200;
                return;
            }

            await _next(context);
        }
    }
}

```

### Middleware\HeaderLoggingMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class HeaderLoggingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<HeaderLoggingMiddleware> _logger;

        public HeaderLoggingMiddleware(RequestDelegate next, ILogger<HeaderLoggingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Only log SignalR related requests for debugging
            if (context.Request.Path.StartsWithSegments("/chatHub"))
            {
                _logger.LogInformation($"[Header Logging] Request: {context.Request.Method} {context.Request.Path}");
                _logger.LogInformation($"[Header Logging] Query: {context.Request.QueryString}");
                
                // Log all request headers
                foreach (var header in context.Request.Headers)
                {
                    _logger.LogInformation($"[Header Logging] Request Header: {header.Key} = {header.Value}");
                }
            }

            await _next(context);

            // Log response headers for SignalR requests
            if (context.Request.Path.StartsWithSegments("/chatHub"))
            {
                _logger.LogInformation($"[Header Logging] Response Status: {context.Response.StatusCode}");
                
                foreach (var header in context.Response.Headers)
                {
                    _logger.LogInformation($"[Header Logging] Response Header: {header.Key} = {header.Value}");
                }
            }
        }
    }
}

```

### Middleware\SignalRCorsMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class SignalRCorsMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<SignalRCorsMiddleware> _logger;

        private readonly string[] _allowedOrigins = {
            "https://localhost:44479",
            "http://localhost:3000",
            "https://localhost:3001", 
            "https://localhost:7107",
            "http://localhost:5067"
        };

        public SignalRCorsMiddleware(RequestDelegate next, ILogger<SignalRCorsMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Chỉ xử lý requests đến SignalR Hub
            if (context.Request.Path.StartsWithSegments("/chatHub"))
            {
                var origin = context.Request.Headers["Origin"].ToString();
                
                _logger.LogInformation($"[SignalR CORS] Processing request: {context.Request.Method} {context.Request.Path} from {origin}");

                if (!string.IsNullOrEmpty(origin) && _allowedOrigins.Contains(origin))
                {
                    // Đặt headers CORS cho SignalR với tất cả headers cần thiết
                    context.Response.Headers["Access-Control-Allow-Origin"] = origin;
                    context.Response.Headers["Access-Control-Allow-Credentials"] = "true";
                    context.Response.Headers["Access-Control-Allow-Headers"] = 
                        "Content-Type, Authorization, x-requested-with, x-signalr-user-agent, Cache-Control, X-Requested-With, Accept, Origin, User-Agent, DNT, Keep-Alive, X-Mx-ReqToken, X-CSRF-Token";
                    context.Response.Headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH";
                    context.Response.Headers["Access-Control-Max-Age"] = "86400"; // 24 hours
                    
                    _logger.LogInformation($"[SignalR CORS] Headers set for origin: {origin}");
                }
                else if (!string.IsNullOrEmpty(origin))
                {
                    _logger.LogWarning($"[SignalR CORS] Origin not allowed: {origin}");
                }

                // Xử lý preflight requests
                if (context.Request.Method == "OPTIONS")
                {
                    _logger.LogInformation("[SignalR CORS] Handling OPTIONS preflight request");
                    context.Response.StatusCode = 200;
                    return;
                }
            }

            await _next(context);
        }
    }
}

```

### Middleware\SignalRNegotiationCorsMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class SignalRNegotiationCorsMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<SignalRNegotiationCorsMiddleware> _logger;

        private readonly string[] _allowedOrigins = {
            "https://localhost:44479",
            "http://localhost:3000",
            "https://localhost:3001", 
            "https://localhost:7107",
            "http://localhost:5067"
        };

        public SignalRNegotiationCorsMiddleware(RequestDelegate next, ILogger<SignalRNegotiationCorsMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // Chỉ xử lý SignalR negotiation requests
            if (context.Request.Path.StartsWithSegments("/chatHub/negotiate") || 
                context.Request.Path.StartsWithSegments("/chatHub"))
            {
                var origin = context.Request.Headers["Origin"].ToString();
                
                _logger.LogInformation($"[SignalR Negotiation CORS] Processing: {context.Request.Method} {context.Request.Path} from {origin}");

                // Always set CORS headers for SignalR requests, regardless of origin validation
                if (!string.IsNullOrEmpty(origin))
                {
                    context.Response.Headers["Access-Control-Allow-Origin"] = origin;
                    context.Response.Headers["Access-Control-Allow-Credentials"] = "true";
                    // Cannot use wildcard (*) with credentials, must explicitly list headers
                    context.Response.Headers["Access-Control-Allow-Headers"] = 
                        "Content-Type, Authorization, x-requested-with, x-signalr-user-agent, Cache-Control, X-Requested-With, Accept, Origin, User-Agent, DNT, Keep-Alive, X-Mx-ReqToken, X-CSRF-Token, x-signalr-connection-id";
                    context.Response.Headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH";
                    context.Response.Headers["Access-Control-Max-Age"] = "86400";
                    
                    _logger.LogInformation($"[SignalR Negotiation CORS] Set explicit headers for origin: {origin}");
                }

                // Handle preflight requests immediately
                if (context.Request.Method == "OPTIONS")
                {
                    _logger.LogInformation("[SignalR Negotiation CORS] Handling OPTIONS preflight - returning 200");
                    context.Response.StatusCode = 200; // OK instead of 204
                    return; // Don't write anything to response body
                }
            }

            await _next(context);
        }
    }
}

```

### Middleware\SimpleRateLimitMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Caching.Memory;
using System;
using System.Threading.Tasks;

namespace SHN_Gear.Middleware
{
    public class SimpleRateLimitMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly IMemoryCache _cache;
        private readonly int _limit;
        private readonly TimeSpan _period;

        public SimpleRateLimitMiddleware(RequestDelegate next, IMemoryCache cache, int limit = 10, int seconds = 60)
        {
            _next = next;
            _cache = cache;
            _limit = limit;
            _period = TimeSpan.FromSeconds(seconds);
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var path = context.Request.Path.Value?.ToLower() ?? "";
            if (path.Contains("/api/chat") || path.Contains("/api/gemini"))
            {
                var ip = context.Connection.RemoteIpAddress?.ToString() ?? "unknown";
                var key = $"rl:{ip}";
                var count = _cache.GetOrCreate(key, entry =>
                {
                    entry.AbsoluteExpirationRelativeToNow = _period;
                    return 0;
                });
                if (count >= _limit)
                {
                    context.Response.StatusCode = 429;
                    await context.Response.WriteAsync("Rate limit exceeded. Please try again later.");
                    return;
                }
                _cache.Set(key, count + 1, _period);
            }
            await _next(context);
        }
    }
}

```

### Middleware\UnifiedCorsMiddleware.cs
```cs
using Microsoft.AspNetCore.Http;

namespace SHN_Gear.Middleware
{
    public class UnifiedCorsMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<UnifiedCorsMiddleware> _logger;

        private readonly string[] _allowedOrigins = {
            "https://localhost:44479",
            "http://localhost:3000",
            "https://localhost:3001", 
            "https://localhost:7107",
            "http://localhost:5067"
        };

        // Comprehensive headers list for all scenarios
        private readonly string _allHeaders = 
            "Content-Type, Authorization, x-requested-with, x-signalr-user-agent, Cache-Control, " +
            "X-Requested-With, Accept, Origin, User-Agent, DNT, Keep-Alive, X-Mx-ReqToken, " +
            "X-CSRF-Token, x-signalr-connection-id, x-signalr-negotiateversion";

        public UnifiedCorsMiddleware(RequestDelegate next, ILogger<UnifiedCorsMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var origin = context.Request.Headers["Origin"].ToString();
            
            // Only process if there's an origin header
            if (!string.IsNullOrEmpty(origin))
            {
                _logger.LogInformation($"[Unified CORS] Processing: {context.Request.Method} {context.Request.Path} from {origin}");

                // Check if origin is allowed
                if (_allowedOrigins.Contains(origin))
                {
                    // Set comprehensive CORS headers
                    context.Response.Headers["Access-Control-Allow-Origin"] = origin;
                    context.Response.Headers["Access-Control-Allow-Credentials"] = "true";
                    context.Response.Headers["Access-Control-Allow-Headers"] = _allHeaders;
                    context.Response.Headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH";
                    context.Response.Headers["Access-Control-Max-Age"] = "86400";
                    
                    _logger.LogInformation($"[Unified CORS] Set headers for origin: {origin}");
                }
                else
                {
                    _logger.LogWarning($"[Unified CORS] Origin not allowed: {origin}");
                }

                // Handle preflight requests
                if (context.Request.Method == "OPTIONS")
                {
                    _logger.LogInformation("[Unified CORS] Handling OPTIONS preflight request");
                    context.Response.StatusCode = 200;
                    return;
                }
            }

            await _next(context);
        }
    }
}

```

### Migrations\AppDbContextModelSnapshot.cs
```cs
﻿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SHN_Gear.Data;

#nullable disable

namespace SHN_Gear.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SHN_Gear.Models.AIKnowledgeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EscalationThreshold")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinConfidenceScore")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AIKnowledgeBases");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SHN_Gear.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SHN_Gear.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AIConfidenceScore")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("AIContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIIntent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChatSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresEscalation")
                        .HasColumnType("bit");

                    b.Property<int>("Sender")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuggestedActionsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ChatSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedAdminId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresHumanSupport")
                        .HasColumnType("bit");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAdminId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("SHN_Gear.Models.HomepageConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomepageConfigurations");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("MoMoOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoPayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoMoTransId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalPaymentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Thanh toán bằng tiền mặt",
                            Name = "Tiền Mặt"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thanh toán bằng Momo",
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Thanh toán bằng ví Paypal",
                            Name = "Paypal"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FlashSaleEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FlashSalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBestSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFlashSale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("IX_Products_BrandId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Products_CategoryId");

                    b.HasIndex("IsFlashSale")
                        .HasDatabaseName("IX_Products_IsFlashSale");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpecifications");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FlashSaleEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FlashSaleStart")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Price")
                        .HasDatabaseName("IX_ProductVariants_Price");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductVariants_ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VIP 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "VIP 2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "VIP 3"
                        });
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OtpExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "VoucherId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Address", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.BlogPost", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SHN_Gear.Models.CartItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.ChatMessage", b =>
                {
                    b.HasOne("SHN_Gear.Models.ChatSession", "ChatSession")
                        .WithMany("Messages")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChatSession");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("SHN_Gear.Models.ChatSession", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "AssignedAdmin")
                        .WithMany()
                        .HasForeignKey("AssignedAdminId");

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AssignedAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.Delivery", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.HasOne("SHN_Gear.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SHN_Gear.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("Address");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.OrderItem", b =>
                {
                    b.HasOne("SHN_Gear.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.HasOne("SHN_Gear.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductImage", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductSpecification", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.ProductVariant", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SHN_Gear.Models.Review", b =>
                {
                    b.HasOne("SHN_Gear.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.HasOne("SHN_Gear.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SHN_Gear.Models.UserVoucher", b =>
                {
                    b.HasOne("SHN_Gear.Models.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SHN_Gear.Models.Voucher", "Voucher")
                        .WithMany("UserVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SHN_Gear.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SHN_Gear.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SHN_Gear.Models.ChatSession", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SHN_Gear.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SHN_Gear.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SHN_Gear.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SHN_Gear.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserVouchers");
                });

            modelBuilder.Entity("SHN_Gear.Models.Voucher", b =>
                {
                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

```

### Models\Address.cs
```cs
namespace SHN_Gear.Models
{
    public class Address
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public User? User { get; set; } = null!;
        public string FullName { get; set; } = null!;
        public string PhoneNumber { get; set; } = null!;
        public string AddressLine1 { get; set; } = null!;
        public string AddressLine2 { get; set; } = null!;
        public string City { get; set; } = null!;
        public string State { get; set; } = null!;
        public string ZipCode { get; set; } = null!;
        public string Country { get; set; } = null!;
    }

}

```

### Models\AIKnowledgeBase.cs
```cs
namespace SHN_Gear.Models
{
    public class AIKnowledgeBase
    {
        public int Id { get; set; }
        public string Topic { get; set; } = null!; // Chủ đề: product_info, policy, shipping, etc.
        public string Question { get; set; } = null!; // Câu hỏi mẫu
        public string Answer { get; set; } = null!; // Câu trả lời
        public string[] Keywords { get; set; } = []; // Keywords để match
        public KnowledgeCategory Category { get; set; }
        public int Priority { get; set; } = 1; // Độ ưu tiên (1-10)
        public bool IsActive { get; set; } = true;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // Context conditions
        public string? ProductCategoryIds { get; set; } // JSON array of category IDs
        public string? BrandIds { get; set; } // JSON array of brand IDs
        public bool RequiresLogin { get; set; } = false; // Cần đăng nhập mới trả lời

        // Confidence thresholds
        public decimal MinConfidenceScore { get; set; } = 0.7m; // Threshold để AI trả lời
        public decimal EscalationThreshold { get; set; } = 0.4m; // Dưới ngưỡng này sẽ escalate
    }

    public enum KnowledgeCategory
    {
        ProductInfo,        // Thông tin sản phẩm
        Pricing,           // Giá cả, khuyến mãi
        Shipping,          // Vận chuyển
        Returns,           // Đổi trả
        Account,           // Tài khoản
        Payment,           // Thanh toán
        Technical,         // Hỗ trợ kỹ thuật
        General,           // Chung
        Policy             // Chính sách
    }
}

```

### Models\BlogPost.cs
```cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace SHN_Gear.Models
{
    public class BlogPost
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [MaxLength(250)]
        public string Title { get; set; }

        [Required]
        public string Content { get; set; } // Store HTML or Markdown content

        public int AuthorId { get; set; } // Assuming a User model exists
        [ForeignKey("AuthorId")]
        public User Author { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public bool IsPublished { get; set; } = false;
    }
}

```

### Models\Brand.cs
```cs
namespace SHN_Gear.Models
{
    public class Brand
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Logo { get; set; } = null!;

        // Danh sách sản phẩm thuộc Brand này
        public List<Product> Products { get; set; } = new();
    }
}

```

### Models\Cart.cs
```cs
namespace SHN_Gear.Models
{
    public class Cart
    {
        public int Id { get; set; }
        public int UserId { get; set; } // Id của người dùng hoặc khách vãng lai
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow; // Thời gian tạo giỏ hàng
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow; // Thời gian cập nhật giỏ hàng

        public ICollection<CartItem> Items { get; set; } = new List<CartItem>(); // Danh sách sản phẩm trong giỏ hàng
    }
}
```

### Models\CartItem.cs
```cs
namespace SHN_Gear.Models
{
    public class CartItem
{
    public int Id { get; set; }
    public int CartId { get; set; }
    public Cart Cart { get; set; } = null!;

    public int ProductVariantId { get; set; }  // 🔹 Thay đổi từ ProductId sang ProductVariantId
    public ProductVariant ProductVariant { get; set; } = null!;  // 🔹 Liên kết đến ProductVariant

    public int Quantity { get; set; }
    public DateTime AddedAt { get; set; } = DateTime.UtcNow;
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
}

}
```

### Models\Category.cs
```cs
namespace SHN_Gear.Models
{
    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Image { get; set; } = null!;

        // ✅ Thêm danh sách sản phẩm
        public List<Product> Products { get; set; } = new();
    }
}

```

### Models\ChatMessage.cs
```cs
namespace SHN_Gear.Models
{
    public class ChatMessage
    {
        public int Id { get; set; }
        public int ChatSessionId { get; set; }
        public ChatSession ChatSession { get; set; } = null!;
        public string Content { get; set; } = null!;
        public MessageType Type { get; set; }
        public MessageSender Sender { get; set; }
        public int? SenderId { get; set; } // UserId nếu từ user hoặc admin
        public User? SenderUser { get; set; }
        public DateTime SentAt { get; set; } = DateTime.UtcNow;
        public bool IsRead { get; set; } = false;

        // AI specific fields
        public decimal? AIConfidenceScore { get; set; } // Độ tin cậy của câu trả lời AI
        public string? AIIntent { get; set; } // Intent mà AI detect được
        public string? AIContext { get; set; } // Context mà AI sử dụng
        public bool RequiresEscalation { get; set; } = false; // AI không trả lời được

        // Rich content support
        public string? AttachmentsJson { get; set; } // JSON cho attachments, images, product links
        public string? SuggestedActionsJson { get; set; } // JSON cho quick replies, buttons

        // Metadata
        public string? MetadataJson { get; set; } // Additional data (product IDs, order IDs, etc.)
    }

    public enum MessageType
    {
        Text,
        Image,
        ProductRecommendation,
        OrderInfo,
        QuickReply,
        SystemMessage,
        EscalationNotice
    }

    public enum MessageSender
    {
        User,
        AI,
        Admin,
        System
    }
}

```

### Models\ChatSession.cs
```cs
namespace SHN_Gear.Models
{
    public class ChatSession
    {
        public int Id { get; set; }
        public int? UserId { get; set; } // Null cho guest users
        public User? User { get; set; }
        public string SessionId { get; set; } = Guid.NewGuid().ToString(); // Unique session ID
        public string? GuestName { get; set; } // Tên khách nếu không đăng nhập
        public string? GuestEmail { get; set; } // Email khách nếu có

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime LastActivityAt { get; set; } = DateTime.UtcNow;
        public ChatSessionStatus Status { get; set; } = ChatSessionStatus.Active;
        public ChatType Type { get; set; } = ChatType.AI; // AI hoặc Admin
        public int? AssignedAdminId { get; set; } // Admin được gán
        public User? AssignedAdmin { get; set; }

        // Context để AI hiểu về user
        public string? UserContext { get; set; } // JSON context về user preferences, cart, etc.
        public decimal? ConfidenceScore { get; set; } // Độ tin cậy của AI
        public bool RequiresHumanSupport { get; set; } = false; // Cần chuyển sang admin

        public ICollection<ChatMessage> Messages { get; set; } = new List<ChatMessage>();
    }

    public enum ChatSessionStatus
    {
        Active,
        Resolved,
        Escalated, // Chuyển lên admin
        Closed
    }

    public enum ChatType
    {
        AI,
        Admin,
        Mixed // Cả AI và Admin
    }
}

```

### Models\Delivery.cs
```cs
namespace SHN_Gear.Models
{
    public class Delivery
    {
        public int Id { get; set; }
        public int OrderId { get; set; }
        public Order Order { get; set; } = null!;
        public string ShippingMethod { get; set; } = null!;
        public decimal ShippingCost { get; set; }
        public DateTime? DeliveryDate { get; set; }
        public string TrackingNumber { get; set; } = null!;
    }
}

```

### Models\HomepageConfig.cs
```cs
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace SHN_Gear.Models
{
    public class HomepageConfig
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required]
        public string ConfigJson { get; set; }

        public DateTime LastUpdated { get; set; }

        public string? UpdatedBy { get; set; }
    }
}

```

### Models\Order.cs
```cs
namespace SHN_Gear.Models
{
    public class Order
    {
        public int Id { get; set; }
        public int? UserId { get; set; }
        public User? User { get; set; }
        public DateTime OrderDate { get; set; } = DateTime.UtcNow;
        public decimal TotalAmount { get; set; }
        public string OrderStatus { get; set; } = "Pending";
        public int? AddressId { get; set; }
        public Address? Address { get; set; }
        public int PaymentMethodId { get; set; }
        public PaymentMethod PaymentMethod { get; set; } = null!;
        public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
        public int? VoucherId { get; set; }
        public Voucher? Voucher { get; set; }

        // Thêm các trường mới cho MoMo
        public string? MoMoRequestId { get; set; } // Mã request từ MoMo
        public string? MoMoOrderId { get; set; } // Mã đơn hàng gửi sang MoMo
        public string? MoMoTransId { get; set; } // Mã giao dịch từ MoMo
        public string? MoMoPayUrl { get; set; } // URL thanh toán MoMo
        public string? MoMoResponse { get; set; } // Raw response từ MoMo
        // paypal
        public string? PayPalOrderId { get; set; }
        public string? PayPalPaymentUrl { get; set; }
        public string? PayPalTransactionId { get; set; }
        public string? PayPalResponse { get; set; }
    }
}
```

### Models\OrderItem.cs
```cs
namespace SHN_Gear.Models
{
    public class OrderItem
    {
        public int Id { get; set; }
        public int OrderId { get; set; } // Khóa ngoại tới Order
        public Order Order { get; set; } = null!;
        public int ProductVariantId { get; set; } // Khóa ngoại tới ProductVariant
        public ProductVariant ProductVariant { get; set; } = null!;
        public int Quantity { get; set; }
        public decimal Price { get; set; } // Giá sản phẩm tại thời điểm đặt hàng (có thể khác với giá hiện tại)
    }
}

```

### Models\PaymentMethod.cs
```cs
namespace SHN_Gear.Models
{
    public class PaymentMethod
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!; // Ví dụ: "Cash on Delivery", "Momo"
        public string Description { get; set; } = null!; // Mô tả ngắn gọn về phương thức thanh toán
    }
}

```

### Models\ProductImages.cs
```cs
namespace SHN_Gear.Models
{
    public class ProductImage
    {
        public int Id { get; set; }
        public int ProductId { get; set; } // Khóa ngoại liên kết với sản phẩm
        public string ImageUrl { get; set; } = null!;
        public bool IsPrimary { get; set; } // Ảnh chính hay không

        // Khóa ngoại
        public Product Product { get; set; } = null!;
    }
}

```

### Models\Products.cs
```cs
namespace SHN_Gear.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null!;
        public List<ProductImage> Images { get; set; } = new();
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public int CategoryId { get; set; }
        public Category Category { get; set; } = null!;
        public int BrandId { get; set; } // ✅ Thêm BrandId vào model
        public Brand Brand { get; set; } = null!; // ✅ Thiết lập quan hệ với Brand
        public List<ProductVariant> Variants { get; set; } = new();

        // Flash Sale Properties
        public bool IsFlashSale { get; set; } = false;
        public decimal? FlashSalePrice { get; set; } // Nullable decimal
        public DateTime? FlashSaleStartDate { get; set; } // Nullable DateTime
        public DateTime? FlashSaleEndDate { get; set; } // Nullable DateTime

        public bool IsBestSeller { get; set; } = false; // New property for best sellers

        public ICollection<ProductSpecification> ProductSpecifications { get; set; } = new List<ProductSpecification>();

        public bool IsOutOfStock()
        {
            return Variants.Sum(v => v.StockQuantity) <= 0;
        }
    }
}

```

### Models\ProductSpecification.cs
```cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace SHN_Gear.Models
{
    [Table("ProductSpecifications")]
    public class ProductSpecification
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int ProductId { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [StringLength(500)]
        public string Value { get; set; }

        [StringLength(20)]
        public string? Unit { get; set; }

        public int DisplayOrder { get; set; } = 0;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;        // Navigation property
        [ForeignKey("ProductId")]
        public virtual Product Product { get; set; }
    }
}

```

### Models\ProductVariant.cs
```cs
namespace SHN_Gear.Models
{
    public class ProductVariant
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public Product Product { get; set; } = null!;
        public string Color { get; set; } = null!;
        public string Storage { get; set; } = null!;
        public decimal Price { get; set; }
        public decimal? DiscountPrice { get; set; }
        public int StockQuantity { get; set; }

        public DateTime? FlashSaleStart { get; set; }  // ✅ Flash Sale riêng cho từng variant
        public DateTime? FlashSaleEnd { get; set; }
    }
}

```

### Models\Review.cs
```cs
namespace SHN_Gear.Models
{
    public class Review
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public Product Product { get; set; }
        public int UserId { get; set; }
        public User User { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public bool IsApproved { get; set; } = false;
    }
}

```

### Models\Role.cs
```cs
namespace SHN_Gear.Models
{
    public class Role
    {
        public int Id { get; set; }  // Id của vai trò (Admin, VIP 1, VIP 2,...)
        public string Name { get; set; } = string.Empty;  // Tên vai trò (Admin, VIP 1, VIP 2,...)
        
        public ICollection<User> Users { get; set; } = new List<User>(); // Danh sách người dùng có role này
    }
}

```

### Models\User.cs
```cs
namespace SHN_Gear.Models
{
    public class User
    {
        public int Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string? Gender { get; set; }  // Có thể null
        public DateTime? DateOfBirth { get; set; }  // Có thể null
        public string Email { get; set; } = string.Empty;
        public string? AvatarUrl { get; set; }  // Có thể null
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public int Points { get; set; } = 0;
        public string Password { get; set; } = string.Empty;

        public bool IsActive { get; set; } = true;  // Mặc định là kích hoạt

        // OTP Login
        public string? OtpCode { get; set; }  // Có thể null
        public DateTime? OtpExpiry { get; set; }  // Có thể null

        // Quan hệ với Role
        public int RoleId { get; set; }
        public Role Role { get; set; } = null!;

        // Quan hệ với UserVoucher
        public ICollection<UserVoucher> UserVouchers { get; set; } = new List<UserVoucher>();
        public ICollection<Review> Reviews { get; set; } = new List<Review>();

    }

}
```

### Models\UserVoucher.cs
```cs
namespace SHN_Gear.Models
{
    public class UserVoucher
    {
        public int UserId { get; set; }
        public User User { get; set; } = null!;

        public int VoucherId { get; set; }
        public Voucher Voucher { get; set; } = null!;

        public DateTime UsedAt { get; set; } // Thời gian nhận/gán voucher
        public bool IsUsed { get; set; } = true; // Trạng thái sử dụng
    }
}
```

### Models\Voucher.cs
```cs
namespace SHN_Gear.Models
{
    public class Voucher
    {
        public int Id { get; set; }
        public string Code { get; set; } = null!; // Mã voucher
        public decimal DiscountAmount { get; set; } // Số tiền giảm giá
        public DateTime ExpiryDate { get; set; } // Ngày hết hạn
        public bool IsActive { get; set; } = true; // Trạng thái hoạt động của voucher

        public ICollection<UserVoucher> UserVouchers { get; set; } = new List<UserVoucher>(); // Quan hệ với UserVoucher
    }
}
```

### Pages\Error.cshtml.cs
```cs
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace SHN_Gear.Pages;

[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
public class ErrorModel : PageModel
{
    private readonly ILogger<ErrorModel> _logger;

    public ErrorModel(ILogger<ErrorModel> logger)
    {
        _logger = logger;
    }

    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    public void OnGet()
    {
        RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
    }
}

```

### Pages\Admin\Blog.cshtml.cs
```cs
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Authorization;

namespace SHN_Gear.Pages.Admin
{
    [Authorize(Roles = "Admin")]
    public class BlogModel : PageModel
    {
        public void OnGet()
        {
        }
    }
}

```

### Services\AIService.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace SHN_Gear.Services
{
    public class AIService
    {
        private readonly AppDbContext _context;
        private readonly ILogger<AIService> _logger;
        private readonly ContextManager _contextManager;
        private readonly GeminiService _geminiService;
        private readonly IConfiguration _configuration;

        public AIService(AppDbContext context, ILogger<AIService> logger, ContextManager contextManager, GeminiService geminiService, IConfiguration configuration)
        {
            _context = context;
            _logger = logger;
            _contextManager = contextManager;
            _geminiService = geminiService;
            _configuration = configuration;
        }

        public async Task<AIResponseDto> ProcessMessageAsync(string userMessage, string sessionId, int? userId = null)
        {
            string intent = "general"; // Initialize intent early for catch block access

            try
            {
                // Validate input parameters
                if (string.IsNullOrEmpty(userMessage))
                {
                    _logger.LogError("User message cannot be null or empty");
                    throw new ArgumentException("User message cannot be null or empty", nameof(userMessage));
                }

                if (string.IsNullOrEmpty(sessionId))
                {
                    _logger.LogError("SessionId cannot be null or empty");
                    throw new ArgumentException("SessionId cannot be null or empty", nameof(sessionId));
                }

                // 1. Get conversation context
                var context = await _contextManager.GetOrCreateContextAsync(sessionId, userId);

                // 2. Detect intent và extract keywords với context
                intent = DetectIntentWithContext(userMessage, context);
                var keywords = ExtractKeywords(userMessage);
                var entities = ExtractEntities(userMessage, intent);

                // Check if fallback mode is enabled
                var useFallbackMode = _configuration.GetValue<bool>("AIConfig:ChatSettings:FallbackMode", false);
                if (useFallbackMode)
                {
                    _logger.LogInformation("Using fallback mode for AI responses");
                    return CreateIntelligentFallbackResponse(userMessage, intent);
                }

                // 3. Tìm kiếm trong knowledge base
                var knowledgeMatches = await FindKnowledgeMatches(userMessage, keywords, intent);

                // 4. Calculate confidence score
                var confidenceScore = CalculateConfidenceScore(intent, knowledgeMatches, context);

                // 5. Check if should escalate
                if (_contextManager.ShouldEscalate(context, confidenceScore))
                {
                    var escalationResponse = CreateEscalationResponse(context, userMessage);
                    _contextManager.UpdateContextAsync(sessionId, userMessage, intent, entities, escalationResponse.Response);
                    return escalationResponse;
                }

                // 6. Xử lý theo intent với context
                AIResponseDto response;
                switch (intent.ToLower())
                {
                    case "product_search":
                        response = await HandleProductSearchWithContext(userMessage, keywords, context);
                        break;
                    case "product_compare":
                        response = await HandleProductSearch(userMessage, keywords);
                        break;
                    case "price_inquiry":
                        response = HandlePriceInquiry(userMessage, keywords);
                        break;
                    case "order_status":
                        response = await HandleOrderStatus(userMessage, userId);
                        break;
                    case "shipping_info":
                        response = HandleShippingInfo(userMessage);
                        break;
                    case "return_policy":
                        response = HandleReturnPolicy(userMessage);
                        break;
                    case "technical_support":
                        response = HandleTechnicalSupport(userMessage, keywords);
                        break;
                    case "greeting":
                        response = HandleGreetingWithContext(context);
                        break;
                    case "thanks":
                        response = HandleThanks();
                        break;
                    default:
                        // Use Gemini AI for general queries
                        response = await HandleWithGeminiAI(userMessage, intent, context, keywords);
                        break;
                }

                // 7. Update confidence score
                response.ConfidenceScore = (decimal)confidenceScore;

                // 8. Add suggested actions with context
                response.SuggestedActions = GenerateSuggestedActionsWithContext(intent, response, context);

                // 9. Update conversation context
                _contextManager.UpdateContextAsync(sessionId, userMessage, intent, entities, response.Response);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing AI message: {Message}", userMessage);
                // Use intelligent fallback based on detected intent
                return CreateIntelligentFallbackResponse(userMessage, intent);
            }
        }

        private string DetectIntentWithContext(string message, ConversationContext context)
        {
            var basicIntent = DetectIntent(message);

            // Enhance intent detection with context
            if (basicIntent == "general" && context.CurrentState != ConversationState.Discovery)
            {
                // If in middle of conversation, try to infer intent from current state
                return context.CurrentState switch
                {
                    ConversationState.ProductDiscovery => "product_search",
                    ConversationState.PriceNegotiation => "price_inquiry",
                    ConversationState.OrderSupport => "order_status",
                    ConversationState.TechnicalSupport => "technical_support",
                    _ => basicIntent
                };
            }

            return basicIntent;
        }

        private string DetectIntent(string message)
        {
            var lowerMessage = message.ToLower();

            // Product search patterns
            if (Regex.IsMatch(lowerMessage, @"(tìm|kiếm|xem|có|bán).*?(điện thoại|laptop|tai nghe|iphone|samsung|macbook)"))
                return "product_search";

            // Product compare patterns  
            if (Regex.IsMatch(lowerMessage, @"(so sánh|khác nhau|nên chọn|tốt hơn)"))
                return "product_compare";

            // Price patterns
            if (Regex.IsMatch(lowerMessage, @"(giá|bao nhiêu|tiền|cost|price|khuyến mãi|giảm giá)"))
                return "price_inquiry";

            // Order patterns
            if (Regex.IsMatch(lowerMessage, @"(đơn hàng|order|giao hàng|vận chuyển|ship)"))
                return "order_status";

            // Shipping patterns
            if (Regex.IsMatch(lowerMessage, @"(giao hàng|vận chuyển|ship|delivery|khi nào nhận)"))
                return "shipping_info";

            // Return patterns
            if (Regex.IsMatch(lowerMessage, @"(đổi trả|return|hoàn tiền|bảo hành|warranty)"))
                return "return_policy";

            // Technical patterns
            if (Regex.IsMatch(lowerMessage, @"(lỗi|bug|không hoạt động|hỏng|sửa|fix)"))
                return "technical_support";

            // Greeting patterns
            if (Regex.IsMatch(lowerMessage, @"^(xin chào|hello|hi|chào|hế lô)"))
                return "greeting";

            // Thanks patterns
            if (Regex.IsMatch(lowerMessage, @"(cảm ơn|thank|thanks|tks)"))
                return "thanks";

            return "general";
        }

        private List<string> ExtractKeywords(string message)
        {
            var keywords = new List<string>();
            var words = message.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);

            var productKeywords = new[] { "điện thoại", "phone", "smartphone", "laptop", "máy tính", "tai nghe", "headphone" };
            var brandKeywords = new[] { "iphone", "samsung", "xiaomi", "oppo", "vivo", "macbook", "dell", "hp", "asus" };
            var featureKeywords = new[] { "camera", "pin", "màn hình", "bộ nhớ", "ram", "ssd", "gaming", "văn phòng" };

            foreach (var word in words)
            {
                if (productKeywords.Contains(word) || brandKeywords.Contains(word) || featureKeywords.Contains(word))
                {
                    keywords.Add(word);
                }
            }

            return keywords.Distinct().ToList();
        }

        private async Task<List<AIKnowledgeBase>> FindKnowledgeMatches(string message, List<string> keywords, string intent)
        {
            var matches = new List<AIKnowledgeBase>();

            try
            {
                // Tìm kiếm theo keywords
                var knowledgeItems = await _context.AIKnowledgeBases
                    .Where(k => keywords.Any(kw => k.Keywords.Contains(kw)))
                    .ToListAsync();

                foreach (var item in knowledgeItems)
                {
                    var score = CalculateRelevanceScore(message, item);
                    if (score > (double)item.MinConfidenceScore)
                    {
                        matches.Add(item);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error finding knowledge matches");
            }

            return matches.OrderByDescending(m => CalculateRelevanceScore(message, m)).ToList();
        }

        private double CalculateRelevanceScore(string message, AIKnowledgeBase knowledgeItem)
        {
            var score = 0.0;
            var lowerMessage = message.ToLower();
            var keywords = knowledgeItem.Keywords ?? Array.Empty<string>();

            foreach (var keyword in keywords)
            {
                if (lowerMessage.Contains(keyword.Trim().ToLower()))
                {
                    score += 0.2;
                }
            }

            if (!string.IsNullOrEmpty(knowledgeItem.Question) && lowerMessage.Contains(knowledgeItem.Question.ToLower()))
            {
                score += 0.5;
            }

            return Math.Min(score, 1.0);
        }

        private Dictionary<string, object> ExtractEntities(string message, string intent)
        {
            var entities = new Dictionary<string, object>();
            var lowerMessage = message.ToLower();

            // Extract product categories
            if (Regex.IsMatch(lowerMessage, @"(điện thoại|phone|smartphone)"))
                entities["product_category"] = "phone";
            else if (Regex.IsMatch(lowerMessage, @"(laptop|máy tính|computer)"))
                entities["product_category"] = "laptop";
            else if (Regex.IsMatch(lowerMessage, @"(tai nghe|headphone|earphone)"))
                entities["product_category"] = "headphone";

            // Extract brands
            var brands = new[] { "iphone", "samsung", "xiaomi", "oppo", "vivo", "macbook", "dell", "hp", "asus", "sony", "jbl" };
            foreach (var brand in brands)
            {
                if (lowerMessage.Contains(brand))
                {
                    entities["brand"] = brand;
                    break;
                }
            }

            // Extract budget
            var budgetMatch = Regex.Match(lowerMessage, @"(\d+)\s*(triệu|tr|million|k|nghìn)");
            if (budgetMatch.Success)
            {
                var amount = int.Parse(budgetMatch.Groups[1].Value);
                var unit = budgetMatch.Groups[2].Value.ToLower();

                var budget = unit switch
                {
                    "triệu" or "tr" or "million" => amount * 1000000,
                    "k" or "nghìn" => amount * 1000,
                    _ => amount
                };

                entities["budget"] = budget;
            }

            // Extract order ID
            var orderMatch = Regex.Match(message, @"#?(\d{4,})");
            if (orderMatch.Success && intent == "order_status")
            {
                entities["order_id"] = orderMatch.Groups[1].Value;
            }

            return entities;
        }

        private double CalculateConfidenceScore(string intent, List<AIKnowledgeBase> knowledgeMatches, ConversationContext context)
        {
            double baseScore = 0.5;

            // Intent confidence
            if (intent != "general") baseScore += 0.2;

            // Knowledge base matches
            if (knowledgeMatches.Any()) baseScore += 0.2;
            if (knowledgeMatches.Any(k => k.MinConfidenceScore > 0.8m)) baseScore += 0.1;

            // Context continuity
            if (context.Topics.ContainsKey(intent)) baseScore += 0.1;

            // User profile completeness
            if (!string.IsNullOrEmpty(context.UserProfile.Name)) baseScore += 0.05;
            if (context.UserProfile.TotalOrders > 0) baseScore += 0.05;

            return Math.Min(baseScore, 1.0);
        }

        private AIResponseDto CreateEscalationResponse(ConversationContext context, string userMessage)
        {
            return new AIResponseDto
            {
                Response = GetEscalationMessage(context),
                Intent = "escalation",
                ConfidenceScore = 1.0m,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "Chuyển đến chuyên viên", Action = "escalate" },
                    new SuggestedActionDto { Text = "Tiếp tục với AI", Action = "continue" },
                    new SuggestedActionDto { Text = "Gọi hotline", Action = "call", Data = "1900-xxx-xxx" }
                },
                RequiresEscalation = true
            };
        }

        private string GetEscalationMessage(ConversationContext context)
        {
            if (context.UserProfile.IsVIP)
            {
                return "Tôi sẽ kết nối bạn với chuyên viên VIP của chúng tôi ngay lập tức để được hỗ trợ tốt nhất! ⭐";
            }

            return "Để đảm bảo bạn nhận được hỗ trợ chính xác nhất, tôi sẽ chuyển bạn đến chuyên viên tư vấn. Thời gian chờ dự kiến: 2-3 phút. 👨‍💼";
        }

        private AIResponseDto CreateFallbackResponse()
        {
            return new AIResponseDto
            {
                Response = "Xin chào! Tôi là trợ lý AI của SHN-Gear. Hiện tại hệ thống AI đang tạm thời bảo trì, nhưng tôi vẫn có thể hỗ trợ bạn với các thông tin cơ bản về sản phẩm. Bạn có thể hỏi tôi về điện thoại, laptop, tai nghe hoặc liên hệ nhân viên tư vấn để được hỗ trợ chi tiết.",
                Intent = "system_maintenance",
                ConfidenceScore = 0.5m,
                RequiresEscalation = false,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "📱 Xem điện thoại", Action = "search_phones" },
                    new SuggestedActionDto { Text = "💻 Xem laptop", Action = "search_laptops" },
                    new SuggestedActionDto { Text = "🎧 Xem tai nghe", Action = "search_headphones" },
                    new SuggestedActionDto { Text = "👨‍💼 Liên hệ nhân viên", Action = "escalate" }
                }
            };
        }

        private AIResponseDto CreateIntelligentFallbackResponse(string userMessage, string intent)
        {
            var lowerMessage = userMessage.ToLower();
            string response;
            var actions = new List<SuggestedActionDto>();

            // Create intelligent responses based on detected intent
            switch (intent.ToLower())
            {
                case "greeting":
                    response = "Xin chào! Chào mừng bạn đến với SHN-Gear! Tôi là trợ lý AI và có thể giúp bạn tìm hiểu về các sản phẩm điện thoại, laptop và tai nghe. Bạn đang quan tâm đến sản phẩm nào?";
                    actions.AddRange(new[]
                    {
                        new SuggestedActionDto { Text = "📱 Điện thoại", Action = "search_phones" },
                        new SuggestedActionDto { Text = "💻 Laptop", Action = "search_laptops" },
                        new SuggestedActionDto { Text = "🎧 Tai nghe", Action = "search_headphones" }
                    });
                    break;

                case "product_search":
                    if (lowerMessage.Contains("điện thoại") || lowerMessage.Contains("phone"))
                    {
                        response = "Tôi có thể giúp bạn tìm điện thoại phù hợp! SHN-Gear có đầy đủ các dòng iPhone, Samsung, Xiaomi, OPPO với nhiều mức giá khác nhau. Bạn có ngân sách khoảng bao nhiêu và thương hiệu nào yêu thích?";
                        actions.Add(new SuggestedActionDto { Text = "Xem điện thoại", Action = "view_products", Data = new { category = "phones" } });
                    }
                    else if (lowerMessage.Contains("laptop") || lowerMessage.Contains("máy tính"))
                    {
                        response = "Chúng tôi có nhiều laptop từ gaming đến văn phòng, các thương hiệu Dell, HP, Asus, Macbook. Bạn dùng laptop để làm gì chủ yếu: gaming, học tập hay công việc?";
                        actions.Add(new SuggestedActionDto { Text = "Xem laptop", Action = "view_products", Data = new { category = "laptops" } });
                    }
                    else if (lowerMessage.Contains("tai nghe") || lowerMessage.Contains("headphone"))
                    {
                        response = "SHN-Gear có nhiều loại tai nghe: gaming, âm nhạc, không dây, có mic... Bạn cần tai nghe để làm gì và ngân sách khoảng bao nhiêu?";
                        actions.Add(new SuggestedActionDto { Text = "Xem tai nghe", Action = "view_products", Data = new { category = "headphones" } });
                    }
                    else
                    {
                        response = "Tôi có thể giúp bạn tìm sản phẩm phù hợp! Bạn đang quan tâm đến điện thoại, laptop hay tai nghe?";
                        actions.AddRange(new[]
                        {
                            new SuggestedActionDto { Text = "📱 Điện thoại", Action = "search_phones" },
                            new SuggestedActionDto { Text = "💻 Laptop", Action = "search_laptops" },
                            new SuggestedActionDto { Text = "🎧 Tai nghe", Action = "search_headphones" }
                        });
                    }
                    break;

                case "price_inquiry":
                    response = "Về giá cả, chúng tôi luôn có chính sách giá tốt nhất và nhiều chương trình khuyến mãi. Bạn quan tâm đến sản phẩm nào cụ thể để tôi có thể tư vấn giá chính xác?";
                    actions.AddRange(new[]
                    {
                        new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "view_promotions" },
                        new SuggestedActionDto { Text = "So sánh giá", Action = "compare_prices" }
                    });
                    break;

                case "thanks":
                    response = "Cảm ơn bạn! Rất vui được hỗ trợ bạn. Nếu có thêm câu hỏi gì, đừng ngần ngại hỏi tôi nhé!";
                    break;

                default:
                    response = "Tôi hiểu bạn cần hỗ trợ. Mặc dù hệ thống AI đang tạm thời bảo trì, tôi vẫn có thể giúp bạn tìm hiểu về sản phẩm hoặc kết nối với nhân viên tư vấn chuyên nghiệp.";
                    actions.AddRange(new[]
                    {
                        new SuggestedActionDto { Text = "Xem sản phẩm", Action = "browse_products" },
                        new SuggestedActionDto { Text = "Liên hệ nhân viên", Action = "escalate" }
                    });
                    break;
            }

            return new AIResponseDto
            {
                Response = response,
                Intent = intent,
                ConfidenceScore = 0.7m,
                RequiresEscalation = false,
                SuggestedActions = actions
            };
        }

        // Enhanced handlers with context
        private async Task<AIResponseDto> HandleProductSearchWithContext(string message, List<string> keywords, ConversationContext context)
        {
            // Check if user has mentioned preferences before
            var category = context.Entities.GetValueOrDefault("product_category")?.ToString();
            var brand = context.Entities.GetValueOrDefault("brand")?.ToString();
            var budget = context.Entities.GetValueOrDefault("budget");

            // Continue from where we left off
            if (!string.IsNullOrEmpty(category) && context.CurrentState == ConversationState.ProductDiscovery)
            {
                return ContinueProductDiscovery(message, category, brand, budget, context);
            }

            // Fresh product search
            return await HandleProductSearch(message, keywords);
        }

        private AIResponseDto ContinueProductDiscovery(string message, string category, string? brand, object? budget, ConversationContext context)
        {
            var response = new AIResponseDto
            {
                Response = $"Dựa trên cuộc trò chuyện trước, tôi hiểu bạn đang tìm {category}" +
                         (brand != null ? $" {brand}" : "") +
                         (budget != null ? $" trong khoảng {budget}" : "") +
                         ". Hãy cho tôi biết thêm về nhu cầu sử dụng cụ thể?",
                Intent = "product_search",
                ConfidenceScore = 0.8m
            };

            return response;
        }

        private AIResponseDto HandleGreetingWithContext(ConversationContext context)
        {
            string greeting;

            if (!string.IsNullOrEmpty(context.UserProfile.Name))
            {
                if (context.UserProfile.IsVIP)
                {
                    greeting = $"Xin chào {context.UserProfile.Name}! Rất vui được phục vụ thành viên VIP của SHN-Gear. Tôi có thể hỗ trợ gì cho bạn hôm nay? ⭐";
                }
                else
                {
                    greeting = $"Chào {context.UserProfile.Name}! Rất vui được gặp lại bạn tại SHN-Gear. Tôi có thể giúp gì cho bạn? 😊";
                }
            }
            else
            {
                greeting = "Xin chào! Tôi là SHN Assistant, trợ lý AI của SHN-Gear. Tôi có thể hỗ trợ bạn tìm sản phẩm, kiểm tra đơn hàng, hoặc giải đáp thắc mắc. Bạn cần tôi giúp gì? 🤖";
            }

            return new AIResponseDto
            {
                Response = greeting,
                Intent = "greeting",
                ConfidenceScore = 1.0m,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "Tìm sản phẩm", Action = "search_products" },
                    new SuggestedActionDto { Text = "Kiểm tra đơn hàng", Action = "check_order" },
                    new SuggestedActionDto { Text = "Hỏi về chính sách", Action = "policies" },
                    new SuggestedActionDto { Text = "Hỗ trợ kỹ thuật", Action = "technical_support" }
                }
            };
        }

        private List<SuggestedActionDto> GenerateSuggestedActionsWithContext(string intent, AIResponseDto response, ConversationContext context)
        {
            var actions = new List<SuggestedActionDto>();

            switch (intent)
            {
                case "product_search":
                    actions.Add(new SuggestedActionDto { Text = "So sánh sản phẩm", Action = "compare" });
                    actions.Add(new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "promotions" });
                    actions.Add(new SuggestedActionDto { Text = "Đặt mua ngay", Action = "order" });
                    if (context.UserProfile.TotalOrders > 0)
                        actions.Add(new SuggestedActionDto { Text = "Xem lịch sử mua hàng", Action = "order_history" });
                    break;

                case "price_inquiry":
                    actions.Add(new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "promotions" });
                    actions.Add(new SuggestedActionDto { Text = "So sánh giá", Action = "compare_price" });
                    actions.Add(new SuggestedActionDto { Text = "Đặt mua", Action = "order" });
                    if (context.UserProfile.IsVIP)
                        actions.Add(new SuggestedActionDto { Text = "Ưu đãi VIP", Action = "vip_deals" });
                    break;

                case "order_status":
                    actions.Add(new SuggestedActionDto { Text = "Theo dõi vận chuyển", Action = "track_shipping" });
                    actions.Add(new SuggestedActionDto { Text = "Đổi địa chỉ", Action = "change_address" });
                    actions.Add(new SuggestedActionDto { Text = "Hủy đơn hàng", Action = "cancel_order" });
                    break;

                default:
                    actions.Add(new SuggestedActionDto { Text = "Tìm sản phẩm", Action = "search_products" });
                    actions.Add(new SuggestedActionDto { Text = "Liên hệ tư vấn", Action = "contact_advisor" });
                    break;
            }

            return actions;
        }

        // Basic handlers
        private async Task<AIResponseDto> HandleProductSearch(string message, List<string> keywords)
        {
            var products = await SearchProducts(keywords);

            if (products.Any())
            {
                return new AIResponseDto
                {
                    Response = "Tôi tìm thấy một số sản phẩm phù hợp với yêu cầu của bạn:",
                    Intent = "product_search",
                    ConfidenceScore = 0.8m,
                    ProductRecommendations = products.Take(3).ToList()
                };
            }

            return new AIResponseDto
            {
                Response = "Tôi chưa tìm thấy sản phẩm nào phù hợp. Bạn có thể mô tả chi tiết hơn nhu cầu của mình không?",
                Intent = "product_search",
                ConfidenceScore = 0.4m,
                RequiresEscalation = false
            };
        }

        private AIResponseDto HandlePriceInquiry(string message, List<string> keywords)
        {
            return new AIResponseDto
            {
                Response = "Để biết giá chính xác nhất và các chương trình khuyến mãi hiện tại, vui lòng liên hệ với nhân viên tư vấn hoặc xem trực tiếp trên website.",
                Intent = "price_inquiry",
                ConfidenceScore = 0.7m,
                RequiresEscalation = true
            };
        }

        private async Task<AIResponseDto> HandleOrderStatus(string message, int? userId)
        {
            if (userId.HasValue)
            {
                try
                {
                    var recentOrder = await _context.Orders
                        .Where(o => o.UserId == userId)
                        .OrderByDescending(o => o.Id)
                        .FirstOrDefaultAsync();

                    if (recentOrder != null)
                    {
                        return new AIResponseDto
                        {
                            Response = $"Đơn hàng gần nhất #{recentOrder.Id} của bạn đang được xử lý",
                            Intent = "order_status",
                            ConfidenceScore = 0.9m
                        };
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error retrieving order status");
                }
            }

            return new AIResponseDto
            {
                Response = "Để kiểm tra trạng thái đơn hàng, vui lòng cung cấp mã đơn hàng hoặc đăng nhập vào tài khoản.",
                Intent = "order_status",
                ConfidenceScore = 0.6m,
                RequiresEscalation = false
            };
        }

        private AIResponseDto HandleShippingInfo(string message)
        {
            return new AIResponseDto
            {
                Response = "SHN-Gear hỗ trợ giao hàng toàn quốc với nhiều hình thức:\n" +
                          "• Giao hàng tiêu chuẩn: 2-3 ngày làm việc\n" +
                          "• Giao hàng nhanh: 1-2 ngày làm việc\n" +
                          "• Giao hàng siêu tốc: Trong ngày (khu vực nội thành)\n" +
                          "• Miễn phí giao hàng cho đơn từ 500,000đ",
                ConfidenceScore = 0.95m,
                Intent = "shipping_info",
                RequiresEscalation = false
            };
        }

        private AIResponseDto HandleReturnPolicy(string message)
        {
            return new AIResponseDto
            {
                Response = "Chính sách đổi trả của SHN-Gear:\n" +
                          "• Đổi trả trong 7 ngày kể từ ngày mua\n" +
                          "• Sản phẩm còn nguyên seal, chưa sử dụng\n" +
                          "• Giữ nguyên hộp và phụ kiện đi kèm\n" +
                          "• Bảo hành 12-24 tháng tùy sản phẩm\n" +
                          "• Hỗ trợ đổi trả tại cửa hàng hoặc qua ship",
                ConfidenceScore = 0.95m,
                Intent = "return_policy",
                RequiresEscalation = false
            };
        }

        private AIResponseDto HandleTechnicalSupport(string message, List<string> keywords)
        {
            return new AIResponseDto
            {
                Response = "Tôi hiểu bạn đang gặp vấn đề kỹ thuật. Để được hỗ trợ tốt nhất, tôi sẽ kết nối bạn với team kỹ thuật chuyên nghiệp của chúng tôi.",
                ConfidenceScore = 0.7m,
                Intent = "technical_support",
                RequiresEscalation = true
            };
        }

        private AIResponseDto HandleThanks()
        {
            return new AIResponseDto
            {
                Response = "Cảm ơn bạn! Tôi luôn sẵn sàng hỗ trợ bạn. Chúc bạn có trải nghiệm tuyệt vời tại SHN-Gear! 😊",
                Intent = "thanks",
                ConfidenceScore = 1.0m
            };
        }

        private AIResponseDto HandleGeneralQuery(string message, List<AIKnowledgeBase> knowledgeMatches)
        {
            if (knowledgeMatches.Any())
            {
                var bestMatch = knowledgeMatches.First();
                return new AIResponseDto
                {
                    Response = bestMatch.Answer ?? "Tôi chưa có thông tin chi tiết về vấn đề này.",
                    Intent = "general",
                    ConfidenceScore = (decimal)CalculateRelevanceScore(message, bestMatch)
                };
            }

            return new AIResponseDto
            {
                Response = "Tôi chưa hiểu rõ câu hỏi của bạn. Bạn có thể nói rõ hơn hoặc để tôi kết nối với nhân viên tư vấn?",
                Intent = "general",
                ConfidenceScore = 0.3m,
                RequiresEscalation = true
            };
        }

        private async Task<List<ProductRecommendationDto>> SearchProducts(List<string> keywords)
        {
            var products = new List<ProductRecommendationDto>();

            try
            {
                var productQuery = await _context.Products
                    .Include(p => p.Brand)
                    .Include(p => p.Category)
                    .Include(p => p.Variants)
                    .Include(p => p.ProductSpecifications) // Include ProductSpecifications
                    .Where(p => keywords.Any(k => p.Name.ToLower().Contains(k) ||
                                                p.Brand.Name.ToLower().Contains(k) ||
                                                p.Category.Name.ToLower().Contains(k)))
                    .Take(5)
                    .ToListAsync();

                products = productQuery.Select(p => new ProductRecommendationDto
                {
                    ProductId = p.Id,
                    Name = p.Name,
                    ImageUrl = "/images/no-image.jpg", // Default image
                    Price = p.Variants.Any() ? p.Variants.Min(v => v.Price) : 0,
                    DiscountPrice = p.Variants.Any() ? p.Variants.Min(v => v.DiscountPrice) : null,
                    Brand = p.Brand.Name,
                    Category = p.Category.Name,
                    Reason = "Phù hợp với tìm kiếm của bạn"
                }).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error searching products");
            }

            return products;
        }

        // Enhanced handlers with Gemini AI
        private async Task<AIResponseDto> HandleWithGeminiAI(string userMessage, string intent, ConversationContext context, List<string> keywords)
        {
            try
            {
                // Build context for Gemini
                var contextInfo = BuildContextInfo(context, keywords);

                // Generate AI response using Gemini
                var aiResponse = await _geminiService.GenerateResponseAsync(userMessage, contextInfo, intent);

                // Calculate confidence score
                var confidence = await _geminiService.CalculateConfidenceScoreAsync(userMessage, intent);

                return new AIResponseDto
                {
                    Response = aiResponse,
                    Intent = intent,
                    ConfidenceScore = (decimal)confidence,
                    SuggestedActions = GenerateSuggestedActionsWithContext(intent, new AIResponseDto { Response = aiResponse, Intent = intent }, context),
                    RequiresEscalation = confidence < 0.4
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating AI response with Gemini");
                // Return intelligent fallback instead of basic fallback
                var basicIntent = DetectIntent(userMessage);
                return CreateIntelligentFallbackResponse(userMessage, basicIntent);
            }
        }

        private string BuildContextInfo(ConversationContext context, List<string> keywords)
        {
            var contextBuilder = new System.Text.StringBuilder();

            // User profile info
            if (!string.IsNullOrEmpty(context.UserProfile.Name))
            {
                contextBuilder.AppendLine($"Khách hàng: {context.UserProfile.Name}");
                if (context.UserProfile.IsVIP)
                    contextBuilder.AppendLine("Là khách hàng VIP");
            }

            // Previous conversation topics
            if (context.Topics.Any())
            {
                contextBuilder.AppendLine("Các chủ đề đã thảo luận:");
                foreach (var topic in context.Topics.Take(3))
                {
                    contextBuilder.AppendLine($"- {topic.Key}: {topic.Value} lần");
                }
            }

            // Current conversation state
            contextBuilder.AppendLine($"Trạng thái cuộc trò chuyện: {context.CurrentState}");

            // Keywords
            if (keywords.Any())
            {
                contextBuilder.AppendLine($"Từ khóa quan trọng: {string.Join(", ", keywords)}");
            }

            return contextBuilder.ToString();
        }
    }
}

```

### Services\AIService_New.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace SHN_Gear.Services
{
    // Đổi tên class để tránh trùng lặp
    public class AIService_New
    {
        private readonly AppDbContext _context;
        private readonly ILogger<AIService> _logger;
        private readonly ContextManager _contextManager;

        public AIService_New(AppDbContext context, ILogger<AIService> logger, ContextManager contextManager)
        {
            _context = context;
            _logger = logger;
            _contextManager = contextManager;
        }

        public async Task<AIResponseDto> ProcessMessageAsync(string userMessage, string sessionId, int? userId = null)
        {
            try
            {
                // 1. Get conversation context
                var context = await _contextManager.GetOrCreateContextAsync(sessionId, userId);

                // 2. Detect intent và extract keywords với context
                var intent = DetectIntentWithContext(userMessage, context);
                var keywords = ExtractKeywords(userMessage);
                var entities = ExtractEntities(userMessage, intent);

                // 3. Tìm kiếm trong knowledge base
                var knowledgeMatches = await FindKnowledgeMatches(userMessage, keywords, intent);

                // 4. Calculate confidence score
                var confidenceScore = CalculateConfidenceScore(intent, knowledgeMatches, context);

                // 5. Check if should escalate
                if (_contextManager.ShouldEscalate(context, confidenceScore))
                {
                    var escalationResponse = CreateEscalationResponse(context, userMessage);
                    await _contextManager.UpdateContextAsync(sessionId, userMessage, intent, entities, escalationResponse.Response);
                    return escalationResponse;
                }

                // 6. Xử lý theo intent với context
                AIResponseDto response = intent.ToLower() switch
                {
                    "product_search" => await HandleProductSearchWithContext(userMessage, keywords, context),
                    "product_compare" => await HandleProductSearch(userMessage, keywords),
                    "price_inquiry" => await HandlePriceInquiry(userMessage, keywords),
                    "order_status" => await HandleOrderStatus(userMessage, userId),
                    "shipping_info" => await HandleShippingInfo(userMessage),
                    "return_policy" => await HandleReturnPolicy(userMessage),
                    "technical_support" => await HandleTechnicalSupport(userMessage, keywords),
                    "greeting" => await HandleGreetingWithContext(context),
                    "thanks" => await HandleThanks(),
                    _ => await HandleGeneralQuery(userMessage, knowledgeMatches)
                };

                // 7. Update confidence score
                response.ConfidenceScore = (decimal)confidenceScore;

                // 8. Add suggested actions with context
                response.SuggestedActions = GenerateSuggestedActionsWithContext(intent, response, context);

                // 9. Update conversation context
                await _contextManager.UpdateContextAsync(sessionId, userMessage, intent, entities, response.Response);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing AI message: {Message}", userMessage);
                return CreateFallbackResponse();
            }
        }

        private string DetectIntentWithContext(string message, ConversationContext context)
        {
            var basicIntent = DetectIntent(message);

            // Enhance intent detection with context
            if (basicIntent == "general" && context.CurrentState != ConversationState.Discovery)
            {
                // If in middle of conversation, try to infer intent from current state
                return context.CurrentState switch
                {
                    ConversationState.ProductDiscovery => "product_search",
                    ConversationState.PriceNegotiation => "price_inquiry",
                    ConversationState.OrderSupport => "order_status",
                    ConversationState.TechnicalSupport => "technical_support",
                    _ => basicIntent
                };
            }

            return basicIntent;
        }

        private string DetectIntent(string message)
        {
            var lowerMessage = message.ToLower();

            // Product search patterns
            if (Regex.IsMatch(lowerMessage, @"(tìm|kiếm|xem|có|bán).*?(điện thoại|laptop|tai nghe|iphone|samsung|macbook)"))
                return "product_search";

            // Product compare patterns  
            if (Regex.IsMatch(lowerMessage, @"(so sánh|khác nhau|nên chọn|tốt hơn)"))
                return "product_compare";

            // Price patterns
            if (Regex.IsMatch(lowerMessage, @"(giá|bao nhiêu|tiền|cost|price|khuyến mãi|giảm giá)"))
                return "price_inquiry";

            // Order patterns
            if (Regex.IsMatch(lowerMessage, @"(đơn hàng|order|giao hàng|vận chuyển|ship)"))
                return "order_status";

            // Shipping patterns
            if (Regex.IsMatch(lowerMessage, @"(giao hàng|vận chuyển|ship|delivery|khi nào nhận)"))
                return "shipping_info";

            // Return patterns
            if (Regex.IsMatch(lowerMessage, @"(đổi trả|return|hoàn tiền|bảo hành|warranty)"))
                return "return_policy";

            // Technical patterns
            if (Regex.IsMatch(lowerMessage, @"(lỗi|bug|không hoạt động|hỏng|sửa|fix)"))
                return "technical_support";

            // Greeting patterns
            if (Regex.IsMatch(lowerMessage, @"^(xin chào|hello|hi|chào|hế lô)"))
                return "greeting";

            // Thanks patterns
            if (Regex.IsMatch(lowerMessage, @"(cảm ơn|thank|thanks|tks)"))
                return "thanks";

            return "general";
        }

        private List<string> ExtractKeywords(string message)
        {
            var keywords = new List<string>();
            var words = message.ToLower().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

            var productKeywords = new[] { "điện thoại", "phone", "smartphone", "laptop", "máy tính", "tai nghe", "headphone" };
            var brandKeywords = new[] { "iphone", "samsung", "xiaomi", "oppo", "vivo", "macbook", "dell", "hp", "asus" };
            var featureKeywords = new[] { "camera", "pin", "màn hình", "bộ nhớ", "ram", "ssd", "gaming", "văn phòng" };

            foreach (var word in words)
            {
                if (productKeywords.Contains(word) || brandKeywords.Contains(word) || featureKeywords.Contains(word))
                {
                    keywords.Add(word);
                }
            }

            return keywords.Distinct().ToList();
        }

        private async Task<List<AIKnowledgeBase>> FindKnowledgeMatches(string message, List<string> keywords, string intent)
        {
            var matches = new List<AIKnowledgeBase>();

            try
            {
                // Tìm kiếm theo keywords
                var knowledgeItems = await _context.AIKnowledgeBases
                    .Where(k => keywords.Any(kw => k.Keywords.Contains(kw)))
                    .ToListAsync();

                foreach (var item in knowledgeItems)
                {
                    var score = CalculateRelevanceScore(message, item);
                    if (score > (double)item.MinConfidenceScore)
                    {
                        matches.Add(item);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error finding knowledge matches");
            }

            return matches.OrderByDescending(m => CalculateRelevanceScore(message, m)).ToList();
        }

        private double CalculateRelevanceScore(string message, AIKnowledgeBase knowledgeItem)
        {
            var score = 0.0;
            var lowerMessage = message.ToLower();
            var keywords = knowledgeItem.Keywords ?? Array.Empty<string>();

            foreach (var keyword in keywords)
            {
                if (lowerMessage.Contains(keyword.Trim().ToLower()))
                {
                    score += 0.2;
                }
            }

            if (!string.IsNullOrEmpty(knowledgeItem.Question) && lowerMessage.Contains(knowledgeItem.Question.ToLower()))
            {
                score += 0.5;
            }

            return Math.Min(score, 1.0);
        }

        private Dictionary<string, object> ExtractEntities(string message, string intent)
        {
            var entities = new Dictionary<string, object>();
            var lowerMessage = message.ToLower();

            // Extract product categories
            if (Regex.IsMatch(lowerMessage, @"(điện thoại|phone|smartphone)"))
                entities["product_category"] = "phone";
            else if (Regex.IsMatch(lowerMessage, @"(laptop|máy tính|computer)"))
                entities["product_category"] = "laptop";
            else if (Regex.IsMatch(lowerMessage, @"(tai nghe|headphone|earphone)"))
                entities["product_category"] = "headphone";

            // Extract brands
            var brands = new[] { "iphone", "samsung", "xiaomi", "oppo", "vivo", "macbook", "dell", "hp", "asus", "sony", "jbl" };
            foreach (var brand in brands)
            {
                if (lowerMessage.Contains(brand))
                {
                    entities["brand"] = brand;
                    break;
                }
            }

            // Extract budget
            var budgetMatch = Regex.Match(lowerMessage, @"(\d+)\s*(triệu|tr|million|k|nghìn)");
            if (budgetMatch.Success)
            {
                var amount = int.Parse(budgetMatch.Groups[1].Value);
                var unit = budgetMatch.Groups[2].Value.ToLower();

                var budget = unit switch
                {
                    "triệu" or "tr" or "million" => amount * 1000000,
                    "k" or "nghìn" => amount * 1000,
                    _ => amount
                };

                entities["budget"] = budget;
            }

            // Extract order ID
            var orderMatch = Regex.Match(message, @"#?(\d{4,})");
            if (orderMatch.Success && intent == "order_status")
            {
                entities["order_id"] = orderMatch.Groups[1].Value;
            }

            return entities;
        }

        private double CalculateConfidenceScore(string intent, List<AIKnowledgeBase> knowledgeMatches, ConversationContext context)
        {
            double baseScore = 0.5;

            // Intent confidence
            if (intent != "general") baseScore += 0.2;

            // Knowledge base matches
            if (knowledgeMatches.Any()) baseScore += 0.2;
            if (knowledgeMatches.Any(k => k.MinConfidenceScore > 0.8m)) baseScore += 0.1;

            // Context continuity
            if (context.Topics.ContainsKey(intent)) baseScore += 0.1;

            // User profile completeness
            if (!string.IsNullOrEmpty(context.UserProfile.Name)) baseScore += 0.05;
            if (context.UserProfile.TotalOrders > 0) baseScore += 0.05;

            return Math.Min(baseScore, 1.0);
        }

        private AIResponseDto CreateEscalationResponse(ConversationContext context, string userMessage)
        {
            return new AIResponseDto
            {
                Response = GetEscalationMessage(context),
                Intent = "escalation",
                ConfidenceScore = 1.0m,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "Chuyển đến chuyên viên", Action = "escalate" },
                    new SuggestedActionDto { Text = "Tiếp tục với AI", Action = "continue" },
                    new SuggestedActionDto { Text = "Gọi hotline", Action = "call", Data = "1900-xxx-xxx" }
                },
                RequiresEscalation = true
            };
        }

        private string GetEscalationMessage(ConversationContext context)
        {
            if (context.UserProfile.IsVIP)
            {
                return "Tôi sẽ kết nối bạn với chuyên viên VIP của chúng tôi ngay lập tức để được hỗ trợ tốt nhất! ⭐";
            }

            return "Để đảm bảo bạn nhận được hỗ trợ chính xác nhất, tôi sẽ chuyển bạn đến chuyên viên tư vấn. Thời gian chờ dự kiến: 2-3 phút. 👨‍💼";
        }

        private AIResponseDto CreateFallbackResponse()
        {
            return new AIResponseDto
            {
                Response = "Xin lỗi, hiện tại tôi gặp một chút trục trặc. Vui lòng thử lại sau ít phút hoặc liên hệ với nhân viên tư vấn để được hỗ trợ ngay lập tức.",
                Intent = "error",
                ConfidenceScore = 0.0m,
                RequiresEscalation = true,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "Thử lại", Action = "retry" },
                    new SuggestedActionDto { Text = "Liên hệ nhân viên", Action = "escalate" }
                }
            };
        }

        // Enhanced handlers with context
        private async Task<AIResponseDto> HandleProductSearchWithContext(string message, List<string> keywords, ConversationContext context)
        {
            // Check if user has mentioned preferences before
            var category = context.Entities.GetValueOrDefault("product_category")?.ToString();
            var brand = context.Entities.GetValueOrDefault("brand")?.ToString();
            var budget = context.Entities.GetValueOrDefault("budget");

            // Continue from where we left off
            if (!string.IsNullOrEmpty(category) && context.CurrentState == ConversationState.ProductDiscovery)
            {
                return ContinueProductDiscovery(message, category, brand, budget, context);
            }

            // Fresh product search
            return await HandleProductSearch(message, keywords);
        }

        private AIResponseDto ContinueProductDiscovery(string message, string category, string? brand, object? budget, ConversationContext context)
        {
            var response = new AIResponseDto
            {
                Response = $"Dựa trên cuộc trò chuyện trước, tôi hiểu bạn đang tìm {category}" +
                         (brand != null ? $" {brand}" : "") +
                         (budget != null ? $" trong khoảng {budget}" : "") +
                         ". Hãy cho tôi biết thêm về nhu cầu sử dụng cụ thể?",
                Intent = "product_search",
                ConfidenceScore = 0.8m
            };

            return response;
        }

        private Task<AIResponseDto> HandleGreetingWithContext(ConversationContext context)
        {
            string greeting;

            if (!string.IsNullOrEmpty(context.UserProfile.Name))
            {
                if (context.UserProfile.IsVIP)
                {
                    greeting = $"Xin chào {context.UserProfile.Name}! Rất vui được phục vụ thành viên VIP của SHN-Gear. Tôi có thể hỗ trợ gì cho bạn hôm nay? ⭐";
                }
                else
                {
                    greeting = $"Chào {context.UserProfile.Name}! Rất vui được gặp lại bạn tại SHN-Gear. Tôi có thể giúp gì cho bạn? 😊";
                }
            }
            else
            {
                greeting = "Xin chào! Tôi là SHN Assistant, trợ lý AI của SHN-Gear. Tôi có thể hỗ trợ bạn tìm sản phẩm, kiểm tra đơn hàng, hoặc giải đáp thắc mắc. Bạn cần tôi giúp gì? 🤖";
            }

            return Task.FromResult(new AIResponseDto
            {
                Response = greeting,
                Intent = "greeting",
                ConfidenceScore = 1.0m,
                SuggestedActions = new List<SuggestedActionDto>
                {
                    new SuggestedActionDto { Text = "Tìm sản phẩm", Action = "search_products" },
                    new SuggestedActionDto { Text = "Kiểm tra đơn hàng", Action = "check_order" },
                    new SuggestedActionDto { Text = "Hỏi về chính sách", Action = "policies" },
                    new SuggestedActionDto { Text = "Hỗ trợ kỹ thuật", Action = "technical_support" }
                }
            });
        }

        private List<SuggestedActionDto> GenerateSuggestedActionsWithContext(string intent, AIResponseDto response, ConversationContext context)
        {
            var actions = new List<SuggestedActionDto>();

            switch (intent)
            {
                case "product_search":
                    actions.Add(new SuggestedActionDto { Text = "So sánh sản phẩm", Action = "compare" });
                    actions.Add(new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "promotions" });
                    actions.Add(new SuggestedActionDto { Text = "Đặt mua ngay", Action = "order" });
                    if (context.UserProfile.TotalOrders > 0)
                        actions.Add(new SuggestedActionDto { Text = "Xem lịch sử mua hàng", Action = "order_history" });
                    break;

                case "price_inquiry":
                    actions.Add(new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "promotions" });
                    actions.Add(new SuggestedActionDto { Text = "So sánh giá", Action = "compare_price" });
                    actions.Add(new SuggestedActionDto { Text = "Đặt mua", Action = "order" });
                    if (context.UserProfile.IsVIP)
                        actions.Add(new SuggestedActionDto { Text = "Ưu đãi VIP", Action = "vip_deals" });
                    break;

                case "order_status":
                    actions.Add(new SuggestedActionDto { Text = "Theo dõi vận chuyển", Action = "track_shipping" });
                    actions.Add(new SuggestedActionDto { Text = "Đổi địa chỉ", Action = "change_address" });
                    actions.Add(new SuggestedActionDto { Text = "Hủy đơn hàng", Action = "cancel_order" });
                    break;

                default:
                    actions.Add(new SuggestedActionDto { Text = "Tìm sản phẩm", Action = "search_products" });
                    actions.Add(new SuggestedActionDto { Text = "Liên hệ tư vấn", Action = "contact_advisor" });
                    break;
            }

            return actions;
        }

        // Basic handlers
        private async Task<AIResponseDto> HandleProductSearch(string message, List<string> keywords)
        {
            var products = await SearchProducts(keywords);

            if (products.Any())
            {
                return new AIResponseDto
                {
                    Response = "Tôi tìm thấy một số sản phẩm phù hợp với yêu cầu của bạn:",
                    Intent = "product_search",
                    ConfidenceScore = 0.8m,
                    ProductRecommendations = products.Take(3).ToList()
                };
            }

            return new AIResponseDto
            {
                Response = "Tôi chưa tìm thấy sản phẩm nào phù hợp. Bạn có thể mô tả chi tiết hơn nhu cầu của mình không?",
                Intent = "product_search",
                ConfidenceScore = 0.4m,
                RequiresEscalation = false
            };
        }

        private Task<AIResponseDto> HandlePriceInquiry(string message, List<string> keywords)
        {
            return Task.FromResult(new AIResponseDto
            {
                Response = "Để biết giá chính xác nhất và các chương trình khuyến mãi hiện tại, vui lòng liên hệ với nhân viên tư vấn hoặc xem trực tiếp trên website.",
                Intent = "price_inquiry",
                ConfidenceScore = 0.7m,
                RequiresEscalation = true
            });
        }

        private async Task<AIResponseDto> HandleOrderStatus(string message, int? userId)
        {
            if (userId.HasValue)
            {
                try
                {
                    var recentOrder = await _context.Orders
                        .Where(o => o.UserId == userId)
                        .OrderByDescending(o => o.Id)
                        .FirstOrDefaultAsync();

                    if (recentOrder != null)
                    {
                        return new AIResponseDto
                        {
                            Response = $"Đơn hàng gần nhất #{recentOrder.Id} của bạn đang được xử lý",
                            Intent = "order_status",
                            ConfidenceScore = 0.9m
                        };
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error retrieving order status");
                }
            }

            return new AIResponseDto
            {
                Response = "Để kiểm tra trạng thái đơn hàng, vui lòng cung cấp mã đơn hàng hoặc đăng nhập vào tài khoản.",
                Intent = "order_status",
                ConfidenceScore = 0.6m,
                RequiresEscalation = false
            };
        }

        private Task<AIResponseDto> HandleShippingInfo(string message)
        {
            return Task.FromResult(new AIResponseDto
            {
                Response = "SHN-Gear hỗ trợ giao hàng toàn quốc với nhiều hình thức:\n" +
                          "• Giao hàng tiêu chuẩn: 2-3 ngày làm việc\n" +
                          "• Giao hàng nhanh: 1-2 ngày làm việc\n" +
                          "• Giao hàng siêu tốc: Trong ngày (khu vực nội thành)\n" +
                          "• Miễn phí giao hàng cho đơn từ 500,000đ",
                ConfidenceScore = 0.95m,
                Intent = "shipping_info",
                RequiresEscalation = false
            });
        }

        private Task<AIResponseDto> HandleReturnPolicy(string message)
        {
            return Task.FromResult(new AIResponseDto
            {
                Response = "Chính sách đổi trả của SHN-Gear:\n" +
                          "• Đổi trả trong 7 ngày kể từ ngày mua\n" +
                          "• Sản phẩm còn nguyên seal, chưa sử dụng\n" +
                          "• Giữ nguyên hộp và phụ kiện đi kèm\n" +
                          "• Bảo hành 12-24 tháng tùy sản phẩm\n" +
                          "• Hỗ trợ đổi trả tại cửa hàng hoặc qua ship",
                ConfidenceScore = 0.95m,
                Intent = "return_policy",
                RequiresEscalation = false
            });
        }

        private Task<AIResponseDto> HandleTechnicalSupport(string message, List<string> keywords)
        {
            return Task.FromResult(new AIResponseDto
            {
                Response = "Tôi hiểu bạn đang gặp vấn đề kỹ thuật. Để được hỗ trợ tốt nhất, tôi sẽ kết nối bạn với team kỹ thuật chuyên nghiệp của chúng tôi.",
                ConfidenceScore = 0.7m,
                Intent = "technical_support",
                RequiresEscalation = true
            });
        }

        private Task<AIResponseDto> HandleThanks()
        {
            return Task.FromResult(new AIResponseDto
            {
                Response = "Cảm ơn bạn! Tôi luôn sẵn sàng hỗ trợ bạn. Chúc bạn có trải nghiệm tuyệt vời tại SHN-Gear! 😊",
                Intent = "thanks",
                ConfidenceScore = 1.0m
            });
        }

        private async Task<AIResponseDto> HandleGeneralQuery(string message, List<AIKnowledgeBase> knowledgeMatches)
        {
            if (knowledgeMatches.Any())
            {
                var bestMatch = knowledgeMatches.First();
                return new AIResponseDto
                {
                    Response = bestMatch.Answer ?? "Tôi chưa có thông tin chi tiết về vấn đề này.",
                    Intent = "general",
                    ConfidenceScore = (decimal)CalculateRelevanceScore(message, bestMatch)
                };
            }

            return new AIResponseDto
            {
                Response = "Tôi chưa hiểu rõ câu hỏi của bạn. Bạn có thể nói rõ hơn hoặc để tôi kết nối với nhân viên tư vấn?",
                Intent = "general",
                ConfidenceScore = 0.3m,
                RequiresEscalation = true
            };
        }

        private async Task<List<ProductRecommendationDto>> SearchProducts(List<string> keywords)
        {
            var products = new List<ProductRecommendationDto>();

            try
            {
                var productQuery = await _context.Products
                    .Include(p => p.Brand)
                    .Include(p => p.Category)
                    .Include(p => p.ProductSpecifications) // Include ProductSpecifications
                    .Where(p => keywords.Any(k => p.Name.ToLower().Contains(k) ||
                                                p.Brand.Name.ToLower().Contains(k) ||
                                                p.Category.Name.ToLower().Contains(k)))
                    .Take(5)
                    .ToListAsync();

                products = productQuery.Select(p => new ProductRecommendationDto
                {
                    ProductId = p.Id,
                    Name = p.Name,
                    ImageUrl = "/images/no-image.jpg", // Default image
                    Price = 0, // Needs actual price field
                    DiscountPrice = null,
                    Brand = p.Brand.Name,
                    Category = p.Category.Name,
                    Reason = "Phù hợp với tìm kiếm của bạn"
                }).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error searching products");
            }

            return products;
        }
    }
}

```

### Services\ChatService.cs
```cs
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.SignalR;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using SHN_Gear.Hubs;
using System.Text.Json;

namespace SHN_Gear.Services
{
    public class ChatService
    {
        private readonly AppDbContext _context;
        // private readonly AIService _aiService; // Tạm thời bỏ AI
        private readonly ILogger<ChatService> _logger;
        private readonly IHubContext<ChatHub> _hubContext;

        public ChatService(AppDbContext context, ILogger<ChatService> logger, IHubContext<ChatHub> hubContext)
        {
            _context = context;
            // _aiService = aiService; // Tạm thời bỏ AI
            _logger = logger;
            _hubContext = hubContext;
        }

        public async Task<ChatSessionDto> CreateOrGetSessionAsync(int? userId, string? guestName = null, string? guestEmail = null, string? sessionId = null)
        {
            ChatSession? session = null;

            _logger.LogInformation("CreateOrGetSessionAsync called with userId: {UserId}, guestName: {GuestName}, guestEmail: {GuestEmail}, sessionId: {SessionId}",
                userId, guestName, guestEmail, sessionId);

            // Nếu có userId, tìm session hiện tại của user
            if (userId.HasValue)
            {
                _logger.LogInformation("Looking for existing session for userId: {UserId}", userId.Value);
                session = await _context.ChatSessions
                    .Include(s => s.User)
                    .Include(s => s.AssignedAdmin)
                    .Include(s => s.Messages.OrderBy(m => m.SentAt))
                        .ThenInclude(m => m.SenderUser)
                    .FirstOrDefaultAsync(s => s.UserId == userId && s.Status == ChatSessionStatus.Active);

                if (session != null)
                {
                    _logger.LogInformation("Found existing session {SessionId} for user {UserId}", session.SessionId, userId.Value);
                }
                else
                {
                    _logger.LogInformation("No existing session found for user {UserId}", userId.Value);
                }
            }
            // Nếu không có userId nhưng có sessionId, tìm theo sessionId
            else if (!string.IsNullOrEmpty(sessionId))
            {
                session = await _context.ChatSessions
                    .Include(s => s.User)
                    .Include(s => s.AssignedAdmin)
                    .Include(s => s.Messages.OrderBy(m => m.SentAt))
                        .ThenInclude(m => m.SenderUser)
                    .FirstOrDefaultAsync(s => s.SessionId == sessionId && s.Status == ChatSessionStatus.Active);
            }

            if (session != null)
            {
                // Update last activity and guest info if provided
                session.LastActivityAt = DateTime.UtcNow;

                // Update guest info if provided and not already set
                if (!string.IsNullOrEmpty(guestName) && string.IsNullOrEmpty(session.GuestName))
                {
                    session.GuestName = guestName;
                }
                if (!string.IsNullOrEmpty(guestEmail) && string.IsNullOrEmpty(session.GuestEmail))
                {
                    session.GuestEmail = guestEmail;
                }

                await _context.SaveChangesAsync();
                return MapToDto(session);
            }

            // Tạo session mới
            session = new ChatSession
            {
                UserId = userId,
                SessionId = string.IsNullOrEmpty(sessionId) ? Guid.NewGuid().ToString() : sessionId,
                GuestName = guestName,
                GuestEmail = guestEmail,
                CreatedAt = DateTime.UtcNow,
                LastActivityAt = DateTime.UtcNow,
                Status = ChatSessionStatus.Active,
                Type = ChatType.AI
            };

            _context.ChatSessions.Add(session);
            await _context.SaveChangesAsync();

            // Gửi welcome message
            await AddWelcomeMessage(session.Id);

            // Reload session với messages và User
            session = await _context.ChatSessions
                .Include(s => s.User)
                .Include(s => s.AssignedAdmin)
                .Include(s => s.Messages.OrderBy(m => m.SentAt))
                    .ThenInclude(m => m.SenderUser)
                .FirstAsync(s => s.Id == session.Id);

            // Thông báo cho admin dashboard về session mới
            await NotifyAdminsNewSession(session);

            return MapToDto(session);
        }

        public async Task<ChatMessageDto> SendMessageAsync(SendMessageDto messageDto, int? userId = null)
        {
            try
            {
                // Get or create session
                var sessionDto = await CreateOrGetSessionAsync(userId, messageDto.GuestName, messageDto.GuestEmail, messageDto.SessionId);
                var session = await _context.ChatSessions
                    .Include(s => s.User)
                    .FirstOrDefaultAsync(s => s.Id == sessionDto.Id);

                if (session == null)
                    throw new InvalidOperationException("Session not found");

                // Validate that SessionId is not null
                if (string.IsNullOrEmpty(session.SessionId))
                {
                    _logger.LogError("Session {SessionId} has null or empty SessionId", sessionDto.Id);
                    throw new InvalidOperationException("Session has invalid SessionId");
                }

                // Save user message
                var userMessage = new ChatMessage
                {
                    ChatSessionId = session.Id,
                    Content = messageDto.Content,
                    Type = MessageType.Text,
                    Sender = MessageSender.User,
                    SenderId = userId,
                    SentAt = DateTime.UtcNow,
                    MetadataJson = messageDto.Context != null ? JsonSerializer.Serialize(messageDto.Context) : null
                };

                _context.ChatMessages.Add(userMessage);
                await _context.SaveChangesAsync();

                // Reload message with SenderUser information
                var messageWithUser = await _context.ChatMessages
                    .Include(m => m.SenderUser)
                    .FirstOrDefaultAsync(m => m.Id == userMessage.Id);

                // Gửi tin nhắn user real-time
                await NotifyNewMessage(messageWithUser ?? userMessage, session.SessionId);

                // Process with AI (if session type is AI or Mixed)
                // if (session.Type == ChatType.AI || session.Type == ChatType.Mixed)
                // {
                //     await ProcessAIResponse(session, messageDto.Content, userId, messageDto.Context);
                // }

                // Update session activity
                session.LastActivityAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();

                // Return the user message
                return MapMessageToDto(messageWithUser ?? userMessage);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending message: {Message}", messageDto.Content);
                throw;
            }
        }

        private async Task ProcessAIResponse(ChatSession session, string userMessage, int? userId, object? context)
        {
            // Tạm thời bỏ AI xử lý
            // (method intentionally left blank)
        }

        public async Task<ChatMessageDto> SendAdminMessageAsync(string sessionId, string content, int adminId)
        {
            try
            {
                var session = await _context.ChatSessions
                    .FirstOrDefaultAsync(s => s.SessionId == sessionId);

                if (session == null)
                    throw new InvalidOperationException("Session not found");

                var admin = await _context.Users.FirstOrDefaultAsync(u => u.Id == adminId);
                if (admin == null)
                    throw new InvalidOperationException("Admin not found");

                // Create admin message
                var adminMessage = new ChatMessage
                {
                    ChatSessionId = session.Id,
                    Content = content,
                    Type = MessageType.Text,
                    Sender = MessageSender.Admin,
                    SenderId = adminId,
                    SentAt = DateTime.UtcNow
                };

                _context.ChatMessages.Add(adminMessage);

                // Update session to admin mode if not already
                if (session.Type != ChatType.Admin)
                {
                    session.Type = ChatType.Mixed; // Allow both AI and admin
                    session.AssignedAdminId = adminId;
                }

                session.LastActivityAt = DateTime.UtcNow;
                await _context.SaveChangesAsync();

                // Gửi tin nhắn admin real-time
                await NotifyNewMessage(adminMessage, session.SessionId);

                return MapMessageToDto(adminMessage);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending admin message to session {SessionId}", sessionId);
                throw;
            }
        }

        public async Task<ChatSessionDto> EscalateToAdminAsync(int sessionId, string reason, int? preferredAdminId = null)
        {
            var session = await _context.ChatSessions
                .Include(s => s.Messages)
                .FirstOrDefaultAsync(s => s.Id == sessionId);

            if (session == null)
                throw new InvalidOperationException("Session not found");

            // Find available admin
            var admin = preferredAdminId.HasValue
                ? await _context.Users.FirstOrDefaultAsync(u => u.Id == preferredAdminId && u.RoleId == 1)
                : await FindAvailableAdmin();

            session.Type = ChatType.Admin;
            session.Status = ChatSessionStatus.Escalated;
            session.AssignedAdminId = admin?.Id;
            session.RequiresHumanSupport = true;

            // Add escalation message
            var escalationMessage = new ChatMessage
            {
                ChatSessionId = session.Id,
                Content = admin != null
                    ? $"Bạn đã được kết nối với {admin.FullName}. Nhân viên sẽ hỗ trợ bạn trong giây lát."
                    : "Cuộc trò chuyện đã được chuyển đến bộ phận hỗ trợ. Nhân viên sẽ liên hệ với bạn sớm nhất có thể.",
                Type = MessageType.EscalationNotice,
                Sender = MessageSender.System,
                SentAt = DateTime.UtcNow,
                MetadataJson = JsonSerializer.Serialize(new { Reason = reason, AdminId = admin?.Id })
            };

            _context.ChatMessages.Add(escalationMessage);
            await _context.SaveChangesAsync();

            return MapToDto(session);
        }

        public async Task<ChatMessageDto> SendAdminMessageAsync(int sessionId, int adminId, string content)
        {
            var session = await _context.ChatSessions.FindAsync(sessionId);
            if (session == null)
                throw new InvalidOperationException("Session not found");

            var admin = await _context.Users.FindAsync(adminId);
            if (admin == null || admin.RoleId != 1)
                throw new UnauthorizedAccessException("Invalid admin");

            var message = new ChatMessage
            {
                ChatSessionId = sessionId,
                Content = content,
                Type = MessageType.Text,
                Sender = MessageSender.Admin,
                SenderId = adminId,
                SentAt = DateTime.UtcNow
            };

            _context.ChatMessages.Add(message);

            // Update session
            session.LastActivityAt = DateTime.UtcNow;
            session.AssignedAdminId = adminId;
            session.Type = ChatType.Admin;

            await _context.SaveChangesAsync();

            return MapMessageToDto(message);
        }

        public async Task<List<ChatSessionDto>> GetActiveChatSessionsAsync(int? adminId = null)
        {
            _logger.LogInformation("GetActiveChatSessionsAsync called with adminId: {AdminId}", adminId);

            // First, check total sessions count
            var totalSessionsCount = await _context.ChatSessions.CountAsync();
            _logger.LogInformation("Total sessions in database: {Count}", totalSessionsCount);

            var query = _context.ChatSessions
                .Include(s => s.User)
                .Include(s => s.AssignedAdmin)
                .Include(s => s.Messages.OrderByDescending(m => m.SentAt).Take(1))
                    .ThenInclude(m => m.SenderUser)
                .Where(s => s.Status == ChatSessionStatus.Active || s.Status == ChatSessionStatus.Escalated);

            // Check count before applying admin filter
            var activeSessionsCount = await query.CountAsync();
            _logger.LogInformation("Active/Escalated sessions count: {Count}", activeSessionsCount);

            // For now, show all active sessions to all admins
            // Later you can implement admin assignment logic
            if (adminId.HasValue)
            {
                // Show all sessions to admin: 
                // 1. Assigned to them
                // 2. Requiring human support  
                // 3. Unassigned sessions (both guest and logged-in users)
                // 4. All logged-in user sessions (so admin can see all customer conversations)
                query = query.Where(s =>
                    s.AssignedAdminId == adminId ||
                    s.RequiresHumanSupport ||
                    s.AssignedAdminId == null); // All unassigned sessions regardless of guest or logged-in
                var filteredCount = await query.CountAsync();
                _logger.LogInformation("Filtered sessions count for admin {AdminId}: {Count}", adminId, filteredCount);
            }

            var sessions = await query
                .OrderByDescending(s => s.LastActivityAt)
                .ToListAsync();

            _logger.LogInformation("Returning {Count} sessions", sessions.Count);
            return sessions.Select(MapToDto).ToList();
        }

        public async Task<ChatSessionDto?> GetSessionAsync(string sessionId)
        {
            var session = await _context.ChatSessions
                .Include(s => s.User)
                .Include(s => s.AssignedAdmin)
                .Include(s => s.Messages.OrderBy(m => m.SentAt))
                    .ThenInclude(m => m.SenderUser)
                .FirstOrDefaultAsync(s => s.SessionId == sessionId);

            return session != null ? MapToDto(session) : null;
        }

        private async Task AddWelcomeMessage(int sessionId)
        {
            var welcomeMessages = new[]
            {
                "Xin chào! Tôi là trợ lý AI của SHN-Gear. Tôi có thể giúp bạn tìm sản phẩm, kiểm tra giá cả, hoặc trả lời các câu hỏi. Bạn cần hỗ trợ gì?",
                "Chào mừng bạn đến với SHN-Gear! Tôi có thể giúp bạn tìm hiểu về điện thoại, laptop, tai nghe và nhiều sản phẩm khác. Hãy cho tôi biết bạn đang quan tâm gì nhé!",
                "Hi! Tôi là AI assistant của SHN-Gear. Bạn có thể hỏi tôi về sản phẩm, giá cả, chính sách, hoặc bất cứ điều gì. Tôi sẵn sàng hỗ trợ!"
            };

            var welcomeMessage = new ChatMessage
            {
                ChatSessionId = sessionId,
                Content = welcomeMessages[Random.Shared.Next(welcomeMessages.Length)],
                Type = MessageType.Text,
                Sender = MessageSender.AI,
                SentAt = DateTime.UtcNow,
                AIConfidenceScore = 1.0m,
                AIIntent = "greeting",
                SuggestedActionsJson = JsonSerializer.Serialize(new[]
                {
                    new SuggestedActionDto { Text = "Tìm điện thoại", Action = "search_phones" },
                    new SuggestedActionDto { Text = "Tìm laptop", Action = "search_laptops" },
                    new SuggestedActionDto { Text = "Tìm tai nghe", Action = "search_headphones" },
                    new SuggestedActionDto { Text = "Xem khuyến mãi", Action = "view_promotions" }
                })
            };

            _context.ChatMessages.Add(welcomeMessage);
            await _context.SaveChangesAsync();
        }

        private async Task NotifyAdminsNewSession(ChatSession session)
        {
            try
            {
                await _hubContext.Clients.Group("admins").SendAsync("NewChatSession", MapToDto(session));
                _logger.LogInformation("Notified admins about new session {SessionId}", session.SessionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error notifying admins about new session {SessionId}", session.SessionId);
            }
        }

        private async Task NotifyNewMessage(ChatMessage message, string sessionId)
        {
            try
            {
                var messageDto = MapMessageToDto(message);

                // Tìm session để lấy userId
                var session = await _context.ChatSessions
                    .AsNoTracking()
                    .FirstOrDefaultAsync(s => s.SessionId == sessionId);

                // Gửi cho user cụ thể (nếu có userId)
                if (session?.UserId.HasValue == true)
                {
                    await _hubContext.Clients.Group($"user_{session.UserId.Value}").SendAsync("NewMessage", messageDto);
                    _logger.LogInformation("Sent message to user_{UserId} group", session.UserId.Value);
                }

                // Gửi cho tất cả clients trong session (cho guest users và admins trong session)
                await _hubContext.Clients.Group($"session_{sessionId}").SendAsync("NewMessage", messageDto);

                // Gửi cho admin dashboard
                await _hubContext.Clients.Group("admins").SendAsync("NewMessage", messageDto);
                _logger.LogInformation("Sent message to admins group for session {SessionId}", sessionId);

                _logger.LogInformation("Sent real-time message for session {SessionId}", sessionId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending real-time message for session {SessionId}", sessionId);
            }
        }

        private async Task<User?> FindAvailableAdmin()
        {
            // Simple logic: find admin with least active chats
            var adminChatCounts = await _context.ChatSessions
                .Where(s => s.Status == ChatSessionStatus.Active || s.Status == ChatSessionStatus.Escalated)
                .Where(s => s.AssignedAdminId.HasValue)
                .GroupBy(s => s.AssignedAdminId)
                .Select(g => new { AdminId = g.Key, Count = g.Count() })
                .ToListAsync();

            var allAdmins = await _context.Users
                .Where(u => u.RoleId == 1 && u.IsActive)
                .ToListAsync();

            return allAdmins
                .OrderBy(a => adminChatCounts.FirstOrDefault(acc => acc.AdminId == a.Id)?.Count ?? 0)
                .FirstOrDefault();
        }

        private ChatSessionDto MapToDto(ChatSession session)
        {
            return new ChatSessionDto
            {
                Id = session.Id,
                SessionId = session.SessionId,
                GuestName = session.GuestName,
                GuestEmail = session.GuestEmail,
                User = session.User != null ? new UserDto { Id = session.User.Id, FullName = session.User.FullName, Email = session.User.Email } : null,
                CreatedAt = session.CreatedAt,
                LastActivityAt = session.LastActivityAt,
                Status = session.Status.ToString(),
                Type = session.Type.ToString(),
                AssignedAdmin = session.AssignedAdmin != null ? new UserDto { Id = session.AssignedAdmin.Id, FullName = session.AssignedAdmin.FullName } : null,
                RequiresHumanSupport = session.RequiresHumanSupport,
                Messages = session.Messages?.Select(MapMessageToDto).ToList() ?? new List<ChatMessageDto>()
            };
        }

        private ChatMessageDto MapMessageToDto(ChatMessage message)
        {
            return new ChatMessageDto
            {
                Id = message.Id,
                ChatSessionId = message.ChatSessionId, // Add this field
                Content = message.Content,
                Type = message.Type.ToString(),
                Sender = message.Sender.ToString(),
                SenderUser = message.SenderUser != null ? new UserDto { Id = message.SenderUser.Id, FullName = message.SenderUser.FullName } : null,
                SentAt = message.SentAt,
                IsRead = message.IsRead,
                AIConfidenceScore = message.AIConfidenceScore,
                AIIntent = message.AIIntent,
                RequiresEscalation = message.RequiresEscalation,
                SuggestedActions = !string.IsNullOrEmpty(message.SuggestedActionsJson)
                    ? JsonSerializer.Deserialize<List<SuggestedActionDto>>(message.SuggestedActionsJson)
                    : null,
                Metadata = !string.IsNullOrEmpty(message.MetadataJson)
                    ? JsonSerializer.Deserialize<object>(message.MetadataJson)
                    : null
            };
        }
    }
}

```

### Services\CloudinaryService.cs
```cs
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Microsoft.Extensions.Configuration;

public class CloudinaryService : ICloudinaryService
{
    private readonly Cloudinary _cloudinary;

    public CloudinaryService(IConfiguration configuration)
    {
        var cloudName = configuration["Cloudinary:CloudName"];
        var apiKey = configuration["Cloudinary:ApiKey"];
        var apiSecret = configuration["Cloudinary:ApiSecret"];

        var account = new Account(
            cloudName,
            apiKey,
            apiSecret);

        _cloudinary = new Cloudinary(account);
        _cloudinary.Api.Secure = true;
    }

    public async Task<string> UploadImageAsync(IFormFile file)
    {
        if (file == null || file.Length == 0)
            throw new ArgumentException("No file uploaded");

        using var stream = file.OpenReadStream();
        var uploadParams = new ImageUploadParams
        {
            File = new FileDescription(file.FileName, stream),
            Transformation = new Transformation()
                .Width(800)
                .Height(800)
                .Crop("limit")
        };

        var uploadResult = await _cloudinary.UploadAsync(uploadParams);

        if (uploadResult.Error != null)
            throw new Exception(uploadResult.Error.Message);

        return uploadResult.SecureUrl.ToString();
    }

    public async Task DeleteImageAsync(string publicId)
    {
        var deletionParams = new DeletionParams(publicId);
        var result = await _cloudinary.DestroyAsync(deletionParams);

        if (result.Result != "ok")
            throw new Exception($"Failed to delete image with publicId: {publicId}");
    }
}
```

### Services\ContextManager.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.DTOs;
using System.Text.Json;

namespace SHN_Gear.Services
{
    public class ContextManager
    {
        private readonly AppDbContext _context;
        private readonly ILogger<ContextManager> _logger;

        // In-memory cache for active sessions (Redis in production)
        private static readonly Dictionary<string, ConversationContext> _activeContexts = new();
        private static readonly object _lock = new object();

        public ContextManager(AppDbContext context, ILogger<ContextManager> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<ConversationContext> GetOrCreateContextAsync(string sessionId, int? userId = null)
        {
            // Validate sessionId
            if (string.IsNullOrEmpty(sessionId))
            {
                _logger.LogError("SessionId cannot be null or empty");
                throw new ArgumentException("SessionId cannot be null or empty", nameof(sessionId));
            }

            lock (_lock)
            {
                if (_activeContexts.TryGetValue(sessionId, out var existingContext))
                {
                    // Check if context is still valid (not expired)
                    if (existingContext.LastActivity.AddMinutes(30) > DateTime.UtcNow)
                    {
                        return existingContext;
                    }
                    else
                    {
                        // Context expired, remove from cache
                        _activeContexts.Remove(sessionId);
                    }
                }
            }

            // Load from database or create new
            var session = await _context.ChatSessions
                .Include(s => s.Messages.OrderByDescending(m => m.SentAt).Take(50))
                .FirstOrDefaultAsync(s => s.SessionId == sessionId);

            var context = new ConversationContext
            {
                SessionId = sessionId,
                UserId = userId,
                LastActivity = DateTime.UtcNow,
                CurrentState = ConversationState.Discovery,
                MessageHistory = session?.Messages?.Select(m => new ContextMessage
                {
                    Content = m.Content,
                    Sender = m.Sender.ToString(),
                    Timestamp = m.SentAt,
                    Intent = m.AIIntent ?? "",
                    Entities = string.IsNullOrEmpty(m.MetadataJson) ? new() :
                              JsonSerializer.Deserialize<Dictionary<string, object>>(m.MetadataJson) ?? new()
                }).ToList() ?? new(),
                UserProfile = userId.HasValue ? await LoadUserProfile(userId.Value) : new(),
                Topics = new(),
                Entities = new(),
                Preferences = new()
            };

            // Analyze conversation state from history
            AnalyzeConversationState(context);

            lock (_lock)
            {
                _activeContexts[sessionId] = context;
            }

            return context;
        }

        public Task UpdateContextAsync(string sessionId, string message, string intent,
            Dictionary<string, object>? entities = null, string? response = null)
        {
            lock (_lock)
            {
                if (_activeContexts.TryGetValue(sessionId, out var context))
                {
                    // Add new message to history
                    context.MessageHistory.Add(new ContextMessage
                    {
                        Content = message,
                        Sender = "user",
                        Timestamp = DateTime.UtcNow,
                        Intent = intent,
                        Entities = entities ?? new()
                    });

                    if (!string.IsNullOrEmpty(response))
                    {
                        context.MessageHistory.Add(new ContextMessage
                        {
                            Content = response,
                            Sender = "ai",
                            Timestamp = DateTime.UtcNow,
                            Intent = "response",
                            Entities = new()
                        });
                    }

                    // Update entities and topics
                    UpdateEntitiesAndTopics(context, intent, entities);

                    // Update conversation state
                    UpdateConversationState(context, intent);

                    // Keep only last 50 messages
                    if (context.MessageHistory.Count > 50)
                    {
                        context.MessageHistory = context.MessageHistory
                            .OrderByDescending(m => m.Timestamp)
                            .Take(50)
                            .ToList();
                    }

                    context.LastActivity = DateTime.UtcNow;
                }
            }
            return Task.CompletedTask;
        }

        public string BuildContextualPrompt(ConversationContext context, string currentMessage)
        {
            var prompt = new List<string>();

            // System context
            prompt.Add("CONVERSATION CONTEXT:");
            prompt.Add($"- User: {context.UserProfile.Name ?? "Guest"}");
            prompt.Add($"- State: {context.CurrentState}");
            prompt.Add($"- Session Duration: {DateTime.UtcNow - context.MessageHistory.FirstOrDefault()?.Timestamp ?? TimeSpan.Zero}");

            // Current topics and entities
            if (context.Topics.Any())
            {
                prompt.Add($"- Current Topics: {string.Join(", ", context.Topics.Keys)}");
            }

            if (context.Entities.Any())
            {
                prompt.Add("- Mentioned Entities:");
                foreach (var entity in context.Entities.Take(5))
                {
                    prompt.Add($"  * {entity.Key}: {entity.Value}");
                }
            }

            // Recent conversation
            var recentMessages = context.MessageHistory
                .OrderByDescending(m => m.Timestamp)
                .Take(6)
                .Reverse()
                .ToList();

            if (recentMessages.Any())
            {
                prompt.Add("\nRECENT CONVERSATION:");
                foreach (var msg in recentMessages)
                {
                    prompt.Add($"{msg.Sender}: {msg.Content}");
                }
            }

            // User preferences
            if (context.Preferences.Any())
            {
                prompt.Add("\nUSER PREFERENCES:");
                foreach (var pref in context.Preferences)
                {
                    prompt.Add($"- {pref.Key}: {pref.Value}");
                }
            }

            prompt.Add($"\nCURRENT MESSAGE: {currentMessage}");

            return string.Join("\n", prompt);
        }

        public void ResetContext(string sessionId)
        {
            lock (_lock)
            {
                if (_activeContexts.ContainsKey(sessionId))
                {
                    var context = _activeContexts[sessionId];
                    context.CurrentState = ConversationState.Discovery;
                    context.Topics.Clear();
                    context.Entities.Clear();
                    context.LastActivity = DateTime.UtcNow;
                }
            }
        }

        public bool ShouldEscalate(ConversationContext context, double confidenceScore)
        {
            // Escalate if confidence is too low
            if (confidenceScore < 0.5) return true;

            // Escalate if user seems frustrated (multiple failed attempts)
            var recentFailures = context.MessageHistory
                .Where(m => m.Sender == "ai" && m.Timestamp > DateTime.UtcNow.AddMinutes(-10))
                .Count(m => m.Content.Contains("không hiểu") || m.Content.Contains("chuyển chuyên viên"));

            if (recentFailures >= 2) return true;

            // Escalate for complex technical issues
            var complexKeywords = new[] { "lỗi phức tạp", "không khắc phục được", "cần kỹ thuật viên" };
            var hasComplexIssue = context.MessageHistory
                .Where(m => m.Sender == "user" && m.Timestamp > DateTime.UtcNow.AddMinutes(-5))
                .Any(m => complexKeywords.Any(k => m.Content.ToLower().Contains(k)));

            return hasComplexIssue;
        }

        private async Task<UserProfile> LoadUserProfile(int userId)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null) return new UserProfile();

            // Load user order history for context
            var orders = await _context.Orders
                .Where(o => o.UserId == userId)
                .OrderByDescending(o => o.OrderDate)
                .Take(5)
                .Select(o => new { o.Id, o.OrderStatus, o.TotalAmount, o.OrderDate })
                .ToListAsync();

            return new UserProfile
            {
                Name = user.FullName,
                Email = user.Email,
                Phone = user.PhoneNumber,
                IsVIP = false, // Simplified for now
                TotalOrders = orders.Count(),
                RecentOrders = orders.Select(o => $"#{o.Id} - {o.OrderStatus} - {o.TotalAmount:C}").ToList(),
                JoinDate = user.CreatedAt
            };
        }

        private void AnalyzeConversationState(ConversationContext context)
        {
            if (!context.MessageHistory.Any())
            {
                context.CurrentState = ConversationState.Greeting;
                return;
            }

            var recentIntents = context.MessageHistory
                .Where(m => m.Sender == "user")
                .OrderByDescending(m => m.Timestamp)
                .Take(3)
                .Select(m => m.Intent)
                .ToList();

            // Determine state based on recent intents
            if (recentIntents.Any(i => i == "product_search" || i == "product_compare"))
            {
                context.CurrentState = ConversationState.ProductDiscovery;
            }
            else if (recentIntents.Any(i => i == "price_inquiry"))
            {
                context.CurrentState = ConversationState.PriceNegotiation;
            }
            else if (recentIntents.Any(i => i == "order_status"))
            {
                context.CurrentState = ConversationState.OrderSupport;
            }
            else if (recentIntents.Any(i => i == "technical_support"))
            {
                context.CurrentState = ConversationState.TechnicalSupport;
            }
            else
            {
                context.CurrentState = ConversationState.Discovery;
            }
        }

        private void UpdateEntitiesAndTopics(ConversationContext context, string intent,
            Dictionary<string, object>? entities)
        {
            // Update current topic
            context.Topics[intent] = DateTime.UtcNow;

            // Clean old topics (older than 10 minutes)
            var cutoff = DateTime.UtcNow.AddMinutes(-10);
            var oldTopics = context.Topics.Where(t => t.Value < cutoff).Select(t => t.Key).ToList();
            foreach (var topic in oldTopics)
            {
                context.Topics.Remove(topic);
            }

            // Update entities
            if (entities != null)
            {
                foreach (var entity in entities)
                {
                    context.Entities[entity.Key] = entity.Value;
                }
            }
        }

        private void UpdateConversationState(ConversationContext context, string intent)
        {
            context.CurrentState = intent switch
            {
                "greeting" => ConversationState.Greeting,
                "product_search" or "product_compare" => ConversationState.ProductDiscovery,
                "price_inquiry" => ConversationState.PriceNegotiation,
                "order_status" => ConversationState.OrderSupport,
                "technical_support" => ConversationState.TechnicalSupport,
                "thanks" => ConversationState.Closing,
                _ => ConversationState.Discovery
            };
        }

        // Cleanup old contexts periodically
        public void CleanupExpiredContexts()
        {
            lock (_lock)
            {
                var expiredKeys = _activeContexts
                    .Where(kvp => kvp.Value.LastActivity.AddMinutes(30) < DateTime.UtcNow)
                    .Select(kvp => kvp.Key)
                    .ToList();

                foreach (var key in expiredKeys)
                {
                    _activeContexts.Remove(key);
                }
            }
        }
    }

    public class ConversationContext
    {
        public string SessionId { get; set; } = string.Empty;
        public int? UserId { get; set; }
        public DateTime LastActivity { get; set; }
        public ConversationState CurrentState { get; set; }
        public List<ContextMessage> MessageHistory { get; set; } = new();
        public UserProfile UserProfile { get; set; } = new();
        public Dictionary<string, DateTime> Topics { get; set; } = new();
        public Dictionary<string, object> Entities { get; set; } = new();
        public Dictionary<string, string> Preferences { get; set; } = new();
    }

    public class ContextMessage
    {
        public string Content { get; set; } = string.Empty;
        public string Sender { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
        public string Intent { get; set; } = string.Empty;
        public Dictionary<string, object> Entities { get; set; } = new();
    }

    public class UserProfile
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public bool IsVIP { get; set; }
        public int TotalOrders { get; set; }
        public List<string> RecentOrders { get; set; } = new();
        public DateTime? JoinDate { get; set; }
    }

    public enum ConversationState
    {
        Greeting,
        Discovery,
        ProductDiscovery,
        PriceNegotiation,
        OrderSupport,
        TechnicalSupport,
        Closing,
        Escalated
    }
}

```

### Services\DatabaseSeeder.cs
```cs
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;
using SHN_Gear.Services;

namespace SHN_Gear.Services
{
    public class DatabaseSeeder
    {
        private readonly AppDbContext _context;
        private readonly ILogger<DatabaseSeeder> _logger;

        public DatabaseSeeder(AppDbContext context, ILogger<DatabaseSeeder> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task SeedAsync()
        {
            try
            {
                // Seed AI Knowledge Base if empty
                if (!_context.AIKnowledgeBases.Any())
                {
                    _logger.LogInformation("Seeding AI Knowledge Base...");
                    await SeedAIKnowledgeBase();
                }

                // You can add other seeding methods here
                // await SeedDefaultAdminUsers();
                // await SeedProductCategories();

                await _context.SaveChangesAsync();
                _logger.LogInformation("Database seeding completed successfully.");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An error occurred while seeding the database.");
                throw;
            }
        }

        private async Task SeedAIKnowledgeBase()
        {
            var knowledgeEntries = KnowledgeBaseSeeder.GetDefaultKnowledgeBase();

            await _context.AIKnowledgeBases.AddRangeAsync(knowledgeEntries);

            _logger.LogInformation($"Added {knowledgeEntries.Count} AI knowledge base entries.");
        }

        public async Task SeedSpecificProductKnowledge()
        {
            // Seed knowledge về sản phẩm cụ thể từ database
            var products = await _context.Products
                .Include(p => p.Category)
                .Include(p => p.Brand)
                .Include(p => p.Variants)
                .Take(20) // Top 20 sản phẩm phổ biến
                .ToListAsync();

            var productKnowledge = new List<AIKnowledgeBase>();

            foreach (var product in products)
            {
                // Tạo knowledge entry cho từng sản phẩm
                productKnowledge.Add(new AIKnowledgeBase
                {
                    Topic = "product_specific",
                    Question = $"Thông tin về {product.Name}",
                    Answer = $"📱 {product.Name}\n" +
                            $"💰 Giá: {product.Variants.FirstOrDefault()?.Price:C}\n" +
                            $"🏷️ Danh mục: {product.Category?.Name}\n" +
                            $"🏢 Thương hiệu: {product.Brand?.Name}\n" +
                            $"📝 Mô tả: {(product.Description?.Length > 200 ? product.Description.Substring(0, 200) + "..." : product.Description)}\n\n" +
                            $"👉 Xem chi tiết tại: /products/{product.Id}",
                    Keywords = [product.Name.ToLower(), product.Brand?.Name?.ToLower() ?? "", product.Category?.Name?.ToLower() ?? ""],
                    Category = KnowledgeCategory.ProductInfo,
                    Priority = 5,
                    ProductCategoryIds = $"[{product.CategoryId}]",
                    BrandIds = $"[{product.BrandId}]",
                    IsActive = true,
                    MinConfidenceScore = 0.6m,
                    EscalationThreshold = 0.3m
                });
            }

            await _context.AIKnowledgeBases.AddRangeAsync(productKnowledge);
            await _context.SaveChangesAsync();

            _logger.LogInformation($"Added {productKnowledge.Count} product-specific knowledge entries.");
        }
    }
}

```

### Services\EmailService.cs
```cs
using System;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.Extensions.Configuration;
using MimeKit;
namespace SHN_Gear.Services
{
public class EmailService
{
    private readonly IConfiguration _config;

    public EmailService(IConfiguration config)
    {
        _config = config;
    }

    public async Task<bool> SendOTPAsync(string recipientEmail)
    {
        try
        {
            var emailSettings = _config.GetSection("EmailSettings");
            string otpCode = GenerateOTP();

            var message = new MimeMessage();
            message.From.Add(new MailboxAddress("SHN Gear", emailSettings["SenderEmail"]));
            message.To.Add(new MailboxAddress("", recipientEmail));
            message.Subject = "Mã OTP của bạn";
            message.Body = new TextPart("plain") { Text = $"Mã OTP của bạn là: {otpCode}" };

            using var client = new SmtpClient();
            await client.ConnectAsync(emailSettings["SMTPHost"], int.Parse(emailSettings["SMTPPort"]), SecureSocketOptions.StartTls);
            await client.AuthenticateAsync(emailSettings["SenderEmail"], emailSettings["SenderPassword"]);
            await client.SendAsync(message);
            await client.DisconnectAsync(true);

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi gửi email: {ex.Message}");
            return false;
        }
    }

    private string GenerateOTP()
    {
        using var rng = new RNGCryptoServiceProvider();
        var data = new byte[4];
        rng.GetBytes(data);
        int otp = BitConverter.ToUInt16(data, 0) % 1000000;
        return otp.ToString("D6");
    }
}
}
```

### Services\GeminiService.cs
```cs
using System.Text;
using System.Text.Json;
using System.Globalization;
using Microsoft.Extensions.Caching.Memory;
using SHN_Gear.DTOs;

namespace SHN_Gear.Services
{
    public class GeminiService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;
        private readonly ILogger<GeminiService> _logger;
        private readonly IMemoryCache _cache;
        private readonly string _apiKey;
        private readonly string _model;
        private readonly string _baseUrl;

        public GeminiService(HttpClient httpClient, IConfiguration configuration, ILogger<GeminiService> logger, IMemoryCache cache)
        {
            _httpClient = httpClient;
            _configuration = configuration;
            _logger = logger;
            _cache = cache;

            _apiKey = _configuration["AIConfig:Gemini:ApiKey"] ?? throw new ArgumentNullException("Gemini API Key not configured");
            _model = _configuration["AIConfig:Gemini:Model"] ?? "gemini-1.5-flash";
            _baseUrl = _configuration["AIConfig:Gemini:BaseUrl"] ?? "https://generativelanguage.googleapis.com/v1beta/models";
        }

        // Đọc tri thức website từ file JSON (cache trong memory)
        private static string? _websiteKnowledgeCache = null;
        private static DateTime _websiteKnowledgeCacheTime = DateTime.MinValue;
        private static readonly object _knowledgeLock = new();

        private string GetWebsiteKnowledge()
        {
            lock (_knowledgeLock)
            {
                if (_websiteKnowledgeCache != null && (DateTime.Now - _websiteKnowledgeCacheTime).TotalMinutes < 10)
                    return _websiteKnowledgeCache;
                try
                {
                    var path = Path.Combine(AppContext.BaseDirectory, "Data", "WebsiteKnowledgeBase.json");
                    if (File.Exists(path))
                    {
                        var json = File.ReadAllText(path);
                        using var doc = JsonDocument.Parse(json);
                        var root = doc.RootElement;
                        var sb = new StringBuilder();
                        if (root.TryGetProperty("websiteName", out var websiteName))
                            sb.AppendLine($"Tên website: {websiteName.GetString()}");
                        if (root.TryGetProperty("description", out var description))
                            sb.AppendLine($"Mô tả: {description.GetString()}");
                        if (root.TryGetProperty("contact", out var contact))
                        {
                            sb.AppendLine("Thông tin liên hệ:");
                            if (contact.TryGetProperty("hotline", out var hotline))
                                sb.AppendLine($"- Hotline: {hotline.GetString()}");
                            if (contact.TryGetProperty("email", out var email))
                                sb.AppendLine($"- Email: {email.GetString()}");
                            if (contact.TryGetProperty("address", out var address))
                                sb.AppendLine($"- Địa chỉ: {address.GetString()}");
                        }
                        if (root.TryGetProperty("policies", out var policies))
                        {
                            sb.AppendLine("\nChính sách:");
                            if (policies.TryGetProperty("shipping", out var shipping) && !string.IsNullOrWhiteSpace(shipping.GetString()))
                                sb.AppendLine($"- Vận chuyển: {shipping.GetString()}");
                            if (policies.TryGetProperty("return", out var returns) && !string.IsNullOrWhiteSpace(returns.GetString()))
                                sb.AppendLine($"- Đổi trả: {returns.GetString()}");
                            if (policies.TryGetProperty("warranty", out var warranty) && !string.IsNullOrWhiteSpace(warranty.GetString()))
                                sb.AppendLine($"- Bảo hành: {warranty.GetString()}");
                        }
                        if (root.TryGetProperty("faq", out var faq) && faq.ValueKind == JsonValueKind.Array && faq.GetArrayLength() > 0)
                        {
                            sb.AppendLine("\nCác câu hỏi thường gặp:");
                            foreach (var item in faq.EnumerateArray())
                            {
                                var q = item.TryGetProperty("question", out var qv) ? qv.GetString() : null;
                                var a = item.TryGetProperty("answer", out var av) ? av.GetString() : null;
                                if (!string.IsNullOrWhiteSpace(q) && !string.IsNullOrWhiteSpace(a))
                                {
                                    sb.AppendLine($"- Q: {q}");
                                    sb.AppendLine($"  A: {a}");
                                }
                            }
                        }
                        if (root.TryGetProperty("products", out var products) && products.ValueKind == JsonValueKind.Array && products.GetArrayLength() > 0)
                        {
                            sb.AppendLine("\nMột số sản phẩm tiêu biểu:");
                            int count = 0;
                            foreach (var item in products.EnumerateArray())
                            {
                                if (count++ >= 10) break; // chỉ lấy 10 sản phẩm đầu
                                var name = item.TryGetProperty("name", out var nv) ? nv.GetString() : null;
                                var cat = item.TryGetProperty("category", out var cv) ? cv.GetString() : null;
                                var brand = item.TryGetProperty("brand", out var bv) ? bv.GetString() : null;
                                var price = item.TryGetProperty("price", out var pv) ? pv.GetString() : null;
                                if (!string.IsNullOrWhiteSpace(name))
                                {
                                    sb.Append("- ");
                                    sb.Append(name);
                                    if (!string.IsNullOrWhiteSpace(cat)) sb.Append($" ({cat}");
                                    if (!string.IsNullOrWhiteSpace(brand)) sb.Append($", {brand}");
                                    if (!string.IsNullOrWhiteSpace(cat) || !string.IsNullOrWhiteSpace(brand)) sb.Append(")");
                                    if (!string.IsNullOrWhiteSpace(price)) sb.Append($": {price}");
                                    sb.AppendLine();
                                }
                            }
                        }
                        _websiteKnowledgeCache = sb.ToString();
                        _websiteKnowledgeCacheTime = DateTime.Now;
                        return _websiteKnowledgeCache;
                    }
                }
                catch { }
                return string.Empty;
            }
        }

        public async Task<string> GenerateResponseAsync(string userMessage, string context = "", string intent = "general")
        {
            try
            {
                // Đưa tri thức website vào context cho Gemini
                var websiteKnowledge = GetWebsiteKnowledge();
                var fullContext = string.IsNullOrEmpty(context) ? websiteKnowledge : (websiteKnowledge + "\n" + context);
                var prompt = BuildPrompt(userMessage, fullContext, intent);
                string cacheKey = $"Gemini:{intent}:{prompt.GetHashCode()}";
                if (_cache.TryGetValue(cacheKey, out string? cachedResponse) && cachedResponse != null)
                {
                    _logger.LogInformation($"[GeminiService] Cache hit for key: {cacheKey}");
                    return cachedResponse;
                }

                // Parse and validate temperature
                var tempValue = double.Parse(_configuration["AIConfig:Gemini:Temperature"] ?? "0.7", CultureInfo.InvariantCulture);
                if (tempValue < 0.0 || tempValue > 2.0)
                {
                    _logger.LogWarning("Temperature value {Temperature} is out of range [0.0, 2.0]. Using default 0.7", tempValue);
                    tempValue = 0.7;
                }

                // Parse and validate maxTokens
                var maxTokens = int.Parse(_configuration["AIConfig:Gemini:MaxTokens"] ?? "150", CultureInfo.InvariantCulture);
                if (maxTokens <= 0 || maxTokens > 8192)
                {
                    _logger.LogWarning("MaxTokens value {MaxTokens} is out of range. Using default 150", maxTokens);
                    maxTokens = 150;
                }

                var requestBody = new
                {
                    contents = new[]
                    {
                        new
                        {
                            parts = new[]
                            {
                                new { text = prompt }
                            }
                        }
                    },
                    generationConfig = new
                    {
                        temperature = tempValue,
                        maxOutputTokens = maxTokens,
                        topP = 0.8,
                        topK = 10
                    }
                };

                var json = JsonSerializer.Serialize(requestBody, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var url = $"{_baseUrl}/{_model}:generateContent?key={_apiKey}";
                var response = await _httpClient.PostAsync(url, content);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    _logger.LogInformation($"[GeminiService] Gemini API response: {responseContent}");
                    var geminiResponse = JsonSerializer.Deserialize<GeminiResponse>(responseContent);
                    var result = geminiResponse?.Candidates?.FirstOrDefault()?.Content?.Parts?.FirstOrDefault()?.Text
                        ?? "Xin lỗi, tôi không thể xử lý yêu cầu của bạn lúc này.";
                    _cache.Set(cacheKey, result, TimeSpan.FromMinutes(5));
                    return result;
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError($"[GeminiService] Gemini API error: StatusCode={response.StatusCode}, Content={errorContent}, Url={url}, Prompt={prompt}");
                    return "Xin lỗi, có lỗi xảy ra khi xử lý yêu cầu của bạn.";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"[GeminiService] Exception when calling Gemini API. Prompt: {userMessage}, Context: {context}, Intent: {intent}");
                return "Xin lỗi, có lỗi xảy ra khi xử lý yêu cầu của bạn.";
            }
        }

        private string BuildPrompt(string userMessage, string context, string intent)
        {
            var promptBuilder = new StringBuilder();

            promptBuilder.AppendLine("Bạn là SHN Assistant, trợ lý AI thông minh của cửa hàng SHN-Gear chuyên bán điện thoại, laptop và tai nghe.");
            promptBuilder.AppendLine("Nhiệm vụ của bạn là hỗ trợ khách hàng một cách thân thiện, chính xác và hữu ích.");
            promptBuilder.AppendLine();

            // Context information
            if (!string.IsNullOrEmpty(context))
            {
                promptBuilder.AppendLine("Bối cảnh cuộc trò chuyện:");
                promptBuilder.AppendLine(context);
                promptBuilder.AppendLine();
            }

            // Intent-specific instructions
            switch (intent.ToLower())
            {
                case "product_search":
                    promptBuilder.AppendLine("Khách hàng đang tìm kiếm sản phẩm. Hãy:");
                    promptBuilder.AppendLine("- Hỏi về nhu cầu cụ thể (mục đích sử dụng, ngân sách)");
                    promptBuilder.AppendLine("- Đưa ra gợi ý phù hợp");
                    promptBuilder.AppendLine("- Giới thiệu ưu điểm của sản phẩm");
                    break;

                case "price_inquiry":
                    promptBuilder.AppendLine("Khách hàng hỏi về giá. Hãy:");
                    promptBuilder.AppendLine("- Thông báo rằng giá có thể thay đổi theo thời gian");
                    promptBuilder.AppendLine("- Đề xuất liên hệ để có giá chính xác nhất");
                    promptBuilder.AppendLine("- Giới thiệu các chương trình khuyến mãi hiện có");
                    break;

                case "technical_support":
                    promptBuilder.AppendLine("Khách hàng cần hỗ trợ kỹ thuật. Hãy:");
                    promptBuilder.AppendLine("- Hỏi chi tiết về vấn đề");
                    promptBuilder.AppendLine("- Đưa ra hướng dẫn cơ bản");
                    promptBuilder.AppendLine("- Đề xuất liên hệ kỹ thuật viên nếu cần");
                    break;

                default:
                    promptBuilder.AppendLine("Hãy trả lời một cách thân thiện và hữu ích.");
                    break;
            }

            promptBuilder.AppendLine();
            promptBuilder.AppendLine("Yêu cầu quan trọng:");
            promptBuilder.AppendLine("- Trả lời bằng tiếng Việt");
            promptBuilder.AppendLine("- Giữ phong cách thân thiện, chuyên nghiệp");
            promptBuilder.AppendLine("- Trả lời ngắn gọn, không quá 150 từ");
            promptBuilder.AppendLine("- Nếu không chắc chắn, hãy đề xuất liên hệ nhân viên tư vấn");
            promptBuilder.AppendLine();

            promptBuilder.AppendLine("Tin nhắn của khách hàng:");
            promptBuilder.AppendLine(userMessage);

            return promptBuilder.ToString();
        }

        public async Task<double> CalculateConfidenceScoreAsync(string userMessage, string intent)
        {
            try
            {
                var prompt = $@"
Đánh giá độ tin cậy của việc trả lời câu hỏi sau với ý định '{intent}'.
Trả về một số từ 0.0 đến 1.0 (ví dụ: 0.8):

Câu hỏi: {userMessage}
Ý định: {intent}

Chỉ trả về số, không giải thích:";

                var response = await GenerateResponseAsync(prompt, "", "confidence_evaluation");

                if (double.TryParse(response.Trim(), out double confidence))
                {
                    return Math.Max(0.0, Math.Min(1.0, confidence));
                }

                return 0.5; // Default medium confidence
            }
            catch
            {
                return 0.5; // Default medium confidence on error
            }
        }
    }

    // Response model classes for Gemini API
    public class GeminiResponse
    {
        public GeminiCandidate[]? Candidates { get; set; }
    }

    public class GeminiCandidate
    {
        public GeminiContent? Content { get; set; }
    }

    public class GeminiContent
    {
        public GeminiPart[]? Parts { get; set; }
    }

    public class GeminiPart
    {
        public string? Text { get; set; }
    }
}

```

### Services\ICloudinaryService.cs
```cs
public interface ICloudinaryService
{
    Task<string> UploadImageAsync(IFormFile file);
    Task DeleteImageAsync(string publicId);
}
```

### Services\JwtService.cs
```cs
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class JwtService
    {
        private readonly IConfiguration _config;

        public JwtService(IConfiguration config)
        {
            _config = config;
        }

        public string GenerateToken(User user)
        {
            var key = Encoding.UTF8.GetBytes(_config["Jwt:Key"]);
            var tokenHandler = new JwtSecurityTokenHandler();

            // Đặt thời gian sống token tối đa 60 phút
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(ClaimTypes.Name, user.FullName),
                    new Claim(ClaimTypes.Email, user.Email),
                    new Claim(ClaimTypes.Role, user.Role.Name)
                }),
                Expires = DateTime.UtcNow.AddMinutes(60), // Giới hạn token 60 phút
                Issuer = _config["Jwt:Issuer"],
                Audience = _config["Jwt:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}

```

### Services\KnowledgeBaseSeeder.cs
```cs
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class KnowledgeBaseSeeder
    {
        public static List<AIKnowledgeBase> GetDefaultKnowledgeBase()
        {
            return new List<AIKnowledgeBase>
            {
                // PRODUCT INFO
                new AIKnowledgeBase
                {
                    Topic = "product_info",
                    Question = "Có những loại sản phẩm gì?",
                    Answer = "SHN-Gear chuyên cung cấp 3 loại sản phẩm chính:\n" +
                            "📱 Điện thoại: iPhone, Samsung Galaxy, Xiaomi, Oppo, Vivo\n" +
                            "💻 Laptop: MacBook, Dell, HP, Asus, Acer, Lenovo\n" +
                            "🎧 Tai nghe: AirPods, Sony, JBL, Beats, Samsung Buds\n\n" +
                            "Tất cả đều là hàng chính hãng, bảo hành đầy đủ!",
                    Keywords = ["sản phẩm", "bán gì", "có gì", "loại nào", "categories"],
                    Category = KnowledgeCategory.ProductInfo,
                    Priority = 10,
                    MinConfidenceScore = 0.8m
                },

                new AIKnowledgeBase
                {
                    Topic = "product_info",
                    Question = "iPhone có những phiên bản nào?",
                    Answer = "Hiện tại SHN-Gear có đầy đủ các dòng iPhone:\n" +
                            "🔥 iPhone 15 Series: 15, 15 Plus, 15 Pro, 15 Pro Max\n" +
                            "📱 iPhone 14 Series: 14, 14 Plus, 14 Pro, 14 Pro Max\n" +
                            "💫 iPhone 13 Series: 13, 13 mini, 13 Pro, 13 Pro Max\n" +
                            "⚡ iPhone 12 Series và iPhone SE\n\n" +
                            "Tất cả đều VN/A chính hãng, đủ màu đủ dung lượng!",
                    Keywords = ["iphone", "apple", "ip", "điện thoại apple"],
                    Category = KnowledgeCategory.ProductInfo,
                    Priority = 9,
                    ProductCategoryIds = "[1]", // Phone category
                    BrandIds = "[1]" // Apple brand (giả sử)
                },

                // PRICING
                new AIKnowledgeBase
                {
                    Topic = "pricing",
                    Question = "Có chương trình khuyến mãi không?",
                    Answer = "SHN-Gear luôn có nhiều chương trình hấp dẫn:\n" +
                            "🎉 Flash Sale cuối tuần: giảm đến 30%\n" +
                            "💳 Trả góp 0%: 6-12 tháng không lãi suất\n" +
                            "🎁 Tặng phụ kiện: ốp lưng, cáp sạc, tai nghe\n" +
                            "💰 Thu cũ đổi mới: giá cao, thủ tục nhanh\n" +
                            "🏷️ Voucher sinh nhật: ưu đãi đặc biệt\n\n" +
                            "Theo dõi fanpage để cập nhật khuyến mãi mới nhất nhé!",
                    Keywords = ["khuyến mãi", "giảm giá", "ưu đãi", "sale", "promotion"],
                    Category = KnowledgeCategory.Pricing,
                    Priority = 9
                },

                new AIKnowledgeBase
                {
                    Topic = "pricing",
                    Question = "Có trả góp không?",
                    Answer = "Có! SHN-Gear hỗ trợ nhiều hình thức trả góp:\n" +
                            "🏦 Trả góp qua thẻ tín dụng: 3-24 tháng\n" +
                            "💳 Trả góp 0% lãi suất: 6-12 tháng\n" +
                            "📱 Trả góp online: duyệt nhanh 15 phút\n" +
                            "🏪 Trả góp tại cửa hàng: thủ tục đơn giản\n\n" +
                            "Điều kiện: CMND + sổ hộ khẩu. Từ 18 tuổi trở lên.",
                    Keywords = ["trả góp", "installment", "góp", "trả chậm"],
                    Category = KnowledgeCategory.Pricing,
                    Priority = 8
                },

                // SHIPPING
                new AIKnowledgeBase
                {
                    Topic = "shipping",
                    Question = "Giao hàng mất bao lâu?",
                    Answer = "Thời gian giao hàng tùy theo khu vực:\n" +
                            "🏍️ Nội thành HN, HCM: 2-4 giờ (giao nhanh)\n" +
                            "🚚 Các tỉnh thành khác: 1-3 ngày làm việc\n" +
                            "📦 Vùng xa, miền núi: 3-5 ngày làm việc\n" +
                            "⚡ Giao siêu tốc: trong 1 giờ (một số khu vực)\n\n" +
                            "📞 Shipper sẽ gọi trước khi giao 30 phút!",
                    Keywords = ["giao hàng", "ship", "delivery", "bao lâu", "khi nào"],
                    Category = KnowledgeCategory.Shipping,
                    Priority = 9
                },

                new AIKnowledgeBase
                {
                    Topic = "shipping",
                    Question = "Phí giao hàng bao nhiêu?",
                    Answer = "Chính sách giao hàng của SHN-Gear:\n" +
                            "🆓 Miễn phí: đơn hàng từ 500,000đ\n" +
                            "🏍️ Giao nhanh nội thành: 30,000đ\n" +
                            "🚚 Giao tiêu chuẩn: 20,000-50,000đ\n" +
                            "⚡ Giao siêu tốc (1h): 100,000đ\n\n" +
                            "💡 Tip: Mua đủ 500k để được freeship nhé!",
                    Keywords = ["phí giao hàng", "phí ship", "shipping fee", "tiền ship"],
                    Category = KnowledgeCategory.Shipping,
                    Priority = 8
                },

                // RETURNS
                new AIKnowledgeBase
                {
                    Topic = "returns",
                    Question = "Chính sách đổi trả như thế nào?",
                    Answer = "Chính sách đổi trả linh hoạt tại SHN-Gear:\n" +
                            "⏰ Thời gian: 7 ngày kể từ ngày mua\n" +
                            "📦 Điều kiện: Nguyên seal, chưa sử dụng\n" +
                            "📄 Giấy tờ: Hóa đơn + phiếu bảo hành\n" +
                            "💸 Hoàn tiền: 100% giá trị sản phẩm\n" +
                            "🔄 Đổi sang SP khác: nếu có chênh lệch\n\n" +
                            "🏪 Đổi trả tại cửa hàng hoặc gọi hotline!",
                    Keywords = ["đổi trả", "return", "hoàn tiền", "đổi sản phẩm"],
                    Category = KnowledgeCategory.Returns,
                    Priority = 9
                },

                new AIKnowledgeBase
                {
                    Topic = "returns",
                    Question = "Bảo hành như thế nào?",
                    Answer = "Chế độ bảo hành toàn diện:\n" +
                            "📱 Điện thoại: 12 tháng chính hãng\n" +
                            "💻 Laptop: 12-24 tháng tùy hãng\n" +
                            "🎧 Tai nghe: 6-12 tháng\n" +
                            "⚡ Bảo hành nhanh: 1-3 ngày\n" +
                            "🔄 Đổi mới: nếu lỗi NSX trong 30 ngày\n\n" +
                            "🏭 Trung tâm bảo hành ủy quyền chính thức!",
                    Keywords = ["bảo hành", "warranty", "sửa chữa", "lỗi"],
                    Category = KnowledgeCategory.Returns,
                    Priority = 8
                },

                // ACCOUNT
                new AIKnowledgeBase
                {
                    Topic = "account",
                    Question = "Làm sao để đăng ký tài khoản?",
                    Answer = "Đăng ký tài khoản SHN-Gear rất đơn giản:\n" +
                            "1️⃣ Click nút 'Đăng ký' góc phải màn hình\n" +
                            "2️⃣ Nhập email + số điện thoại\n" +
                            "3️⃣ Tạo mật khẩu mạnh (8+ ký tự)\n" +
                            "4️⃣ Xác thực OTP qua SMS\n" +
                            "5️⃣ Hoàn thành thông tin cá nhân\n\n" +
                            "🎁 Tặng voucher 100k cho lần mua đầu tiên!",
                    Keywords = ["đăng ký", "tạo tài khoản", "register", "sign up"],
                    Category = KnowledgeCategory.Account,
                    Priority = 7
                },

                // PAYMENT
                new AIKnowledgeBase
                {
                    Topic = "payment",
                    Question = "Có những hình thức thanh toán nào?",
                    Answer = "SHN-Gear hỗ trợ đa dạng phương thức thanh toán:\n" +
                            "💰 Tiền mặt: khi nhận hàng (COD)\n" +
                            "💳 Thẻ tín dụng: Visa, Master, JCB\n" +
                            "🏦 Chuyển khoản: ngân hàng, ví điện tử\n" +
                            "📱 Ví MoMo, ZaloPay, ShopeePay\n" +
                            "💎 PayPal: cho khách quốc tế\n\n" +
                            "🔒 Bảo mật SSL 256-bit, an toàn tuyệt đối!",
                    Keywords = ["thanh toán", "payment", "trả tiền", "phương thức"],
                    Category = KnowledgeCategory.Payment,
                    Priority = 8
                },

                // TECHNICAL SUPPORT
                new AIKnowledgeBase
                {
                    Topic = "technical",
                    Question = "Sản phẩm bị lỗi thì làm sao?",
                    Answer = "Nếu sản phẩm gặp sự cố, hãy làm theo hướng dẫn:\n" +
                            "1️⃣ Kiểm tra lại cách sử dụng trong hướng dẫn\n" +
                            "2️⃣ Restart/khởi động lại thiết bị\n" +
                            "3️⃣ Liên hệ hotline: 1900-XXX-XXX\n" +
                            "4️⃣ Mang sản phẩm đến cửa hàng kiểm tra\n" +
                            "5️⃣ Bảo hành/đổi mới nếu thuộc điều kiện\n\n" +
                            "🔧 Team kỹ thuật hỗ trợ 24/7!",
                    Keywords = ["lỗi", "hỏng", "không hoạt động", "sửa", "technical"],
                    Category = KnowledgeCategory.Technical,
                    Priority = 7,
                    EscalationThreshold = 0.2m // Lower threshold for technical issues - should escalate faster
                },

                // GENERAL
                new AIKnowledgeBase
                {
                    Topic = "general",
                    Question = "Thông tin liên hệ cửa hàng?",
                    Answer = "Thông tin liên hệ SHN-Gear:\n" +
                            "📍 Địa chỉ: [Địa chỉ cửa hàng]\n" +
                            "📞 Hotline: 1900-XXX-XXX\n" +
                            "📧 Email: support@shngear.com\n" +
                            "🕒 Giờ làm việc: 8:00 - 22:00 (T2-CN)\n" +
                            "🌐 Website: shngear.com\n" +
                            "📘 Facebook: fb.com/shngear\n\n" +
                            "💬 Chat online 24/7 tại website!",
                    Keywords = ["liên hệ", "địa chỉ", "hotline", "contact", "thông tin"],
                    Category = KnowledgeCategory.General,
                    Priority = 6
                },

                new AIKnowledgeBase
                {
                    Topic = "general",
                    Question = "Có cửa hàng offline không?",
                    Answer = "SHN-Gear có hệ thống cửa hàng toàn quốc:\n" +
                            "🏪 Hà Nội: 5 cửa hàng\n" +
                            "🏪 TP.HCM: 8 cửa hàng\n" +
                            "🏪 Đà Nẵng: 2 cửa hàng\n" +
                            "🏪 Cần Thơ: 1 cửa hàng\n" +
                            "🏪 Hải Phòng: 1 cửa hàng\n\n" +
                            "📍 Xem địa chỉ chi tiết tại: shngear.com/stores\n" +
                            "🚗 Miễn phí gửi xe tại tất cả cửa hàng!",
                    Keywords = ["cửa hàng", "offline", "địa chỉ", "store", "chi nhánh"],
                    Category = KnowledgeCategory.General,
                    Priority = 7
                }
            };
        }
    }
}

```

### Services\KnowledgeExportService.cs
```cs
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class KnowledgeExportService
    {
        private readonly AppDbContext _context;
        public KnowledgeExportService(AppDbContext context)
        {
            _context = context;
        }

        public async Task ExportWebsiteKnowledgeBaseAsync(string filePath)
        {
            var products = await _context.Products
                .Include(p => p.Brand)
                .Include(p => p.Category)
                .Include(p => p.Variants)
                .Select(p => new
                {
                    name = p.Name,
                    category = p.Category.Name,
                    brand = p.Brand.Name,
                    price = p.Variants.OrderBy(v => v.Price).FirstOrDefault() != null ? p.Variants.OrderBy(v => v.Price).First().Price.ToString("N0") + "đ" : null,
                    warranty = "12 tháng"
                })
                .ToListAsync();

            var faqs = await _context.AIKnowledgeBases
                .Where(kb => kb.Category == KnowledgeCategory.General || kb.Category == KnowledgeCategory.Policy)
                .Select(kb => new { question = kb.Question, answer = kb.Answer })
                .ToListAsync();

            var policies = await _context.AIKnowledgeBases
                .Where(kb => kb.Category == KnowledgeCategory.Policy)
                .ToListAsync();

            var shipping = policies.FirstOrDefault(p => p.Topic.ToLower().Contains("shipping"))?.Answer ?? "";
            var returns = policies.FirstOrDefault(p => p.Topic.ToLower().Contains("return"))?.Answer ?? "";
            var warranty = policies.FirstOrDefault(p => p.Topic.ToLower().Contains("warranty"))?.Answer ?? "";

            var knowledge = new
            {
                websiteName = "SHN Gear",
                description = "SHN Gear là hệ thống thương mại điện tử chuyên về thiết bị công nghệ, phụ kiện, laptop, điện thoại, tai nghe, và các sản phẩm công nghệ chính hãng.",
                contact = new
                {
                    hotline = "0123 456 789",
                    email = "support@shngear.vn",
                    address = "123 Đường Công Nghệ, Quận 1, TP.HCM"
                },
                policies = new
                {
                    shipping = shipping,
                    @return = returns,
                    warranty = warranty
                },
                faq = faqs,
                products = products
            };

            var jsonOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };
            var json = JsonSerializer.Serialize(knowledge, jsonOptions);
            await File.WriteAllTextAsync(filePath, json, System.Text.Encoding.UTF8);
        }
    }
}

```

### Services\MoMoPaymentService.cs
```cs
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;

namespace SHN_Gear.Services
{
    public class MoMoPaymentService
    {
        private readonly IConfiguration _configuration;

        public MoMoPaymentService(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public async Task<string> CreatePaymentAsync(string orderId, string orderInfo, long amount, bool isCardPayment = false)
        {
            var momoConfig = _configuration.GetSection("MoMoConfig");

            // Tạo requestId mới cho mỗi lần gọi API
            var requestId = Guid.NewGuid().ToString();
            var requestType = isCardPayment ? "capture" : "captureWallet";
            var extraData = isCardPayment ? "{\"paymentType\":\"CREDIT_CARD\"}" : "";

            // Tạo rawHash với requestId
            var rawHash = "accessKey=" + momoConfig["AccessKey"] +
                         "&amount=" + amount +
                         "&extraData=" + extraData +
                         "&ipnUrl=" + momoConfig["NotifyUrl"] +
                         "&orderId=" + orderId +
                         "&orderInfo=" + orderInfo +
                         "&partnerCode=" + momoConfig["PartnerCode"] +
                         "&redirectUrl=" + momoConfig["ReturnUrl"] +
                         "&requestId=" + requestId +  // Đảm bảo requestId được thêm vào
                         "&requestType=" + requestType;

            var signature = ComputeHmacSha256(rawHash, momoConfig["SecretKey"]);

            var requestBody = new
            {
                partnerCode = momoConfig["PartnerCode"],
                partnerName = "SHN Gear",
                requestId = requestId,  // Truyền requestId vào body
                amount = amount,
                orderId = orderId,
                orderInfo = orderInfo,
                redirectUrl = momoConfig["ReturnUrl"],
                ipnUrl = momoConfig["NotifyUrl"],
                requestType = requestType,
                extraData = extraData,
                signature = signature,
                lang = "vi"
            };

            using (var httpClient = new HttpClient())
            {
                var content = new StringContent(
                    JsonConvert.SerializeObject(requestBody),
                    Encoding.UTF8,
                    "application/json");

                var response = await httpClient.PostAsync(momoConfig["ApiEndpoint"], content);

                if (!response.IsSuccessStatusCode)
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    throw new Exception($"Lỗi từ MoMo API: {response.StatusCode} - {errorContent}");
                }

                var responseContent = await response.Content.ReadAsStringAsync();
                var responseData = JsonConvert.DeserializeObject<Dictionary<string, string>>(responseContent);

                return responseData?["payUrl"] ?? throw new Exception("Không nhận được URL thanh toán từ MoMo");
            }
        }

        public bool VerifySignature(string signature, string rawData)
        {
            var secretKey = _configuration["MoMoConfig:SecretKey"];
            var computedSignature = ComputeHmacSha256(rawData, secretKey);
            return signature.Equals(computedSignature, StringComparison.OrdinalIgnoreCase);
        }

        private string ComputeHmacSha256(string message, string secretKey)
        {
            using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey)))
            {
                var hashMessage = hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message));
                return BitConverter.ToString(hashMessage).Replace("-", "").ToLower();
            }
        }
    }
}
```

### Services\PayPalService.cs
```cs
using PayPalCheckoutSdk.Core;
using PayPalCheckoutSdk.Orders;
using System.Text.Json;
using System.Globalization;

namespace SHN_Gear.Services
{
    public class PayPalService
    {
        private readonly PayPalHttpClient _client;
        private readonly IConfiguration _config;
        private readonly ILogger<PayPalService> _logger;

        public PayPalService(IConfiguration config, ILogger<PayPalService> logger)
        {
            _config = config;
            _logger = logger;

            var clientId = _config["PayPal:ClientId"];
            var secret = _config["PayPal:Secret"];

            PayPalEnvironment environment = _config["PayPal:Mode"] == "Sandbox"
                ? new SandboxEnvironment(clientId, secret)
                : new LiveEnvironment(clientId, secret);

            _client = new PayPalHttpClient(environment);
        }

        public async Task<string> CreateOrder(
            decimal amount,
            string currency,
            string invoiceId,
            string returnUrl,
            string cancelUrl)
        {
            try
            {
                var amountString = amount.ToString("0.00", CultureInfo.InvariantCulture);
                _logger.LogInformation($"Creating PayPal order with amount: {amountString} {currency}");

                var orderRequest = new OrderRequest()
                {
                    CheckoutPaymentIntent = "CAPTURE", // Sử dụng CheckoutPaymentIntent thay vì Intent
                    PurchaseUnits = new List<PurchaseUnitRequest>
                    {
                        new PurchaseUnitRequest
                        {
                            ReferenceId = "default",
                            InvoiceId = invoiceId,
                            AmountWithBreakdown = new AmountWithBreakdown
                            {
                                CurrencyCode = currency,
                                Value = amountString,
                                AmountBreakdown = new AmountBreakdown
                                {
                                    ItemTotal = new Money
                                    {
                                        CurrencyCode = currency,
                                        Value = amountString
                                    }
                                }
                            }
                        }
                    },
                    ApplicationContext = new ApplicationContext
                    {
                        ReturnUrl = returnUrl,
                        CancelUrl = cancelUrl,
                        BrandName = "SHN Gear",
                        UserAction = "PAY_NOW",
                        ShippingPreference = "NO_SHIPPING"
                    }
                };

                var request = new OrdersCreateRequest();
                request.Prefer("return=representation");
                request.RequestBody(orderRequest);

                var response = await _client.Execute(request);
                var result = response.Result<Order>();

                _logger.LogInformation($"Created PayPal Order ID: {result.Id}");
                return result.Id;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create PayPal order");
                return string.Empty;
            }
        }

        public async Task<PayPalCaptureResult> CaptureOrder(string orderId)
        {
            try
            {
                var request = new OrdersCaptureRequest(orderId);
                request.RequestBody(new OrderActionRequest());
                request.Prefer("return=representation");

                var response = await _client.Execute(request);
                var result = response.Result<Order>();

                var transactionId = result.PurchaseUnits?[0]?.Payments?.Captures?[0]?.Id;
                _logger.LogInformation($"Captured PayPal Order: {orderId}, Transaction ID: {transactionId}");

                return new PayPalCaptureResult
                {
                    Success = result.Status == "COMPLETED",
                    TransactionId = transactionId,
                    RawResponse = JsonSerializer.Serialize(result)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Failed to capture PayPal order {orderId}");
                return new PayPalCaptureResult
                {
                    Success = false,
                    ErrorMessage = ex.Message
                };
            }
        }
    }

    public class PayPalCaptureResult
    {
        public bool Success { get; set; }
        public string? TransactionId { get; set; }
        public string? RawResponse { get; set; }
        public string? ErrorMessage { get; set; }
    }
}
```

### Services\UserService.cs
```cs
using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SHN_Gear.Data;
using SHN_Gear.DTOs;
using SHN_Gear.Models;

namespace SHN_Gear.Services
{
    public class UserService
    {
        private readonly AppDbContext _context;
        public User? GetUserById(int userId)
        {
            return _context.Users
                .Include(u => u.Role) // Nếu User có Role, ta include vào để lấy thông tin
                .FirstOrDefault(u => u.Id == userId);
        }

        public UserService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<bool> RegisterUserAsync(RegisterDto registerDto)
        {
            if (await _context.Users.AnyAsync(u => u.Email == registerDto.Email))
            {
                return false; // Email đã tồn tại
            }

            var role = await _context.Roles.FindAsync(2);
            if (role == null)
            {
                return false;
            }

            string hashedPassword = HashPassword(registerDto.Password);

            var user = new User
            {
                Email = registerDto.Email,
                Password = hashedPassword,
                CreatedAt = DateTime.UtcNow,
                RoleId = role.Id,
                Role = role,

                // Gán giá trị từ DTO
                FullName = !string.IsNullOrWhiteSpace(registerDto.FullName) ? registerDto.FullName : "",
                PhoneNumber = !string.IsNullOrWhiteSpace(registerDto.PhoneNumber) ? registerDto.PhoneNumber : ""
            };

            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            return true;
        }


        public async Task<User> AuthenticateUserAsync(LoginDto loginDto)
        {
            // Thêm Include để load thông tin Role
            var user = await _context.Users
                .Include(u => u.Role) // Quan trọng
                .FirstOrDefaultAsync(u => u.Email == loginDto.Email);

            if (user == null || !VerifyPassword(loginDto.Password, user.Password))
                return null;

            return user;
        }

        public string HashPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            return Convert.ToBase64String(hashedBytes);
        }

        private bool VerifyPassword(string inputPassword, string storedHash)
        {
            return HashPassword(inputPassword) == storedHash;
        }
        public async Task<bool> CheckEmailExistsAsync(string email)
        {
            return await _context.Users.AnyAsync(u => u.Email == email);
        }

        public async Task<User?> GetUserByIdAsync(int userId)
        {
            return await _context.Users.FindAsync(userId);
        }
        public async Task<User?> UpdateUserProfileAsync(int userId, EditProfileDto editDto)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null) return null;

            user.FullName = editDto.FullName;
            user.Email = editDto.Email;
            user.PhoneNumber = editDto.PhoneNumber;
            user.Gender = editDto.Gender;
            user.DateOfBirth = editDto.DateOfBirth;

            await _context.SaveChangesAsync();
            return user;
        }
    }
}

```
