import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './LoyaltyExchange.css';

const LoyaltyExchange = ({ userId, onPointsUpdate }) => {
    const [userPoints, setUserPoints] = useState(0);
    const [spinHistory, setSpinHistory] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        if (userId) {
            fetchUserPoints();
            fetchSpinHistory();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [userId]);

    const fetchUserPoints = async () => {
        try {
            let apiBase = process.env.REACT_APP_API_BASE_URL;
            if (!apiBase) apiBase = window.location.origin;
            const response = await axios.get(`${apiBase}/api/LoyaltySpin/points/${userId}`);
            setUserPoints(response.data);
        } catch (error) {
            console.error('Error fetching user points:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i ƒëi·ªÉm c·ªßa b·∫°n');
        }
    };

    const fetchSpinHistory = async () => {
        try {
            setLoading(true);
            let apiBase = process.env.REACT_APP_API_BASE_URL;
            if (!apiBase) apiBase = window.location.origin;
            const response = await axios.get(`${apiBase}/api/LoyaltySpin/history/${userId}`);
            setSpinHistory(response.data);
        } catch (error) {
            console.error('Error fetching spin history:', error);
            setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ quay');
        } finally {
            setLoading(false);
        }
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleString('vi-VN');
    };

    return (
        <div className="exchange-container">
            <div className="points-display">
                <div className="points-card">
                    <h3>ƒêi·ªÉm Loyalty hi·ªán t·∫°i</h3>
                    <div className="points-value">{userPoints.toLocaleString()}</div>
                    <div className="points-label">ƒëi·ªÉm</div>
                </div>
            </div>

            {error && (
                <div className="error-message">
                    {error}
                </div>
            )}

            <div className="history-section">
                <h2>L·ªãch S·ª≠ Quay Th∆∞·ªüng</h2>
                
                {loading ? (
                    <div className="loading-message">
                        ƒêang t·∫£i l·ªãch s·ª≠...
                    </div>
                ) : spinHistory.length === 0 ? (
                    <div className="empty-history">
                        <div className="empty-icon">üé∞</div>
                        <h3>Ch∆∞a c√≥ l·ªãch s·ª≠ quay th∆∞·ªüng</h3>
                        <p>H√£y th·ª≠ v·∫≠n may c·ªßa b·∫°n t·∫°i m·ª•c "Quay Th∆∞·ªüng"!</p>
                    </div>
                ) : (
                    <div className="history-list">
                        {spinHistory.map((record, index) => (
                            <div key={record.id || index} className="history-item">
                                <div className="history-icon">üéÅ</div>
                                <div className="history-details">
                                    <div className="history-title">
                                        L∆∞·ª£t quay #{record.id}
                                    </div>
                                    <div className="history-time">
                                        {formatDate(record.spinAt)}
                                    </div>
                                    <div className="history-points">
                                        ƒê√£ s·ª≠ d·ª•ng: {record.pointsUsed} ƒëi·ªÉm
                                    </div>
                                </div>
                                <div className="history-status">
                                    <span className="status-badge">Ho√†n th√†nh</span>
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>

            <div className="exchange-info">
                <h3>V·ªÅ Ch∆∞∆°ng Tr√¨nh ƒê·ªïi Th∆∞·ªüng</h3>
                <div className="info-card">
                    <p>üéÅ T√≠ch l≈©y ƒëi·ªÉm qua c√°c ho·∫°t ƒë·ªông mua s·∫Øm</p>
                    <p>üé∞ S·ª≠ d·ª•ng ƒëi·ªÉm ƒë·ªÉ quay th∆∞·ªüng</p>
                    <p>üé´ Nh·∫≠n voucher v√† ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n</p>
                    <p>üçÄ May m·∫Øn s·∫Ω ƒë·∫øn v·ªõi b·∫°n!</p>
                </div>
            </div>
        </div>
    );
};

export default LoyaltyExchange;
